import{_ as i,V as l,W as u,Y as a,Z as n,$ as s,a0 as e,a1 as o,F as p}from"./framework-094145d2.js";const r="/tutorial/imgs/column/springai/A01-1.webp",d="/tutorial/imgs/column/springai/A01-2.webp",k="/tutorial/imgs/column/springai/A01-3.webp",m="/tutorial/imgs/column/springai/A01-4.webp",v="/tutorial/imgs/column/springai/A01-5.webp",g={},b=a("h1",{id:"_01-使用数据库持久化对话历史",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_01-使用数据库持久化对话历史","aria-hidden":"true"},"#"),n(" 01.使用数据库持久化对话历史")],-1),h=a("code",null,"InMemoryChatMemoryRepository",-1),y=o('<p>在实际的业务场景中，用<code>InMemoryChatMemoryRepository</code>的场景可能还会更少一点，毕竟上下文放在内存中，不利于后续的审计以及应用重启之后数据就丢失了</p><p>那么如何将对话持久化存储呢?</p><p>本文将介绍基于数据库的持久方案，将从两个方面进行介绍</p><ol><li>通过实例演示数据库的持久化使用方式</li><li>介绍一些关键的实现技术点</li></ol><h2 id="一、项目演示" tabindex="-1"><a class="header-anchor" href="#一、项目演示" aria-hidden="true">#</a> 一、项目演示</h2><h3 id="_1-创建项目" tabindex="-1"><a class="header-anchor" href="#_1-创建项目" aria-hidden="true">#</a> 1. 创建项目</h3>',6),_=o(`<h3 id="_2-添加依赖" tabindex="-1"><a class="header-anchor" href="#_2-添加依赖" aria-hidden="true">#</a> 2. 添加依赖</h3><p>在pom.xml中添加关键依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.ai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-ai-starter-model-zhipuai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.ai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-ai-starter-model-chat-memory-repository-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-配置数据库连接" tabindex="-1"><a class="header-anchor" href="#_3-配置数据库连接" aria-hidden="true">#</a> 3. 配置数据库连接</h3><p>在配置文件 <code>application.yml</code> 文件中，指定SpringAI配置 + 数据库连接信息</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/ai<span class="token punctuation">-</span>oc<span class="token punctuation">-</span>my<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;allowPublicKeyRetrieval=true&amp;autoReconnect=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span>
  <span class="token key atrule">ai</span><span class="token punctuation">:</span>
    <span class="token key atrule">chat</span><span class="token punctuation">:</span>
      <span class="token key atrule">memory</span><span class="token punctuation">:</span>
        <span class="token key atrule">repository</span><span class="token punctuation">:</span>
          <span class="token key atrule">jdbc</span><span class="token punctuation">:</span>
            <span class="token comment"># 自动创建表，表对应的schema在 spring-ai-starter-model-chat-memory-repository-jdbc 包下的 schema-mysql.sql 文件中</span>
            <span class="token key atrule">initialize-schema</span><span class="token punctuation">:</span> always
    <span class="token key atrule">zhipuai</span><span class="token punctuation">:</span>
      <span class="token comment"># api-key 使用你自己申请的进行替换；如果为了安全考虑，可以通过启动参数进行设置</span>
      <span class="token key atrule">api-key</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>zhipuai<span class="token punctuation">-</span>api<span class="token punctuation">-</span>key<span class="token punctuation">}</span>
      <span class="token key atrule">chat</span><span class="token punctuation">:</span> <span class="token comment"># 聊天模型</span>
        <span class="token key atrule">options</span><span class="token punctuation">:</span>
          <span class="token key atrule">model</span><span class="token punctuation">:</span> GLM<span class="token punctuation">-</span>4<span class="token punctuation">-</span>Flash


<span class="token comment"># 修改日志级别</span>
<span class="token key atrule">logging</span><span class="token punctuation">:</span>
  <span class="token key atrule">level</span><span class="token punctuation">:</span>
    <span class="token key atrule">org.springframework.ai.chat.client.advisor.SimpleLoggerAdvisor</span><span class="token punctuation">:</span> debug
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于<code>spring.ai.chat.memory.repository.jdbc</code>的配置进行一些必要的说明</p><table><thead><tr><th>配置</th><th>描述</th><th>取值</th></tr></thead><tbody><tr><td><code>spring.ai.chat.memory.repository.jdbc.initialize-schema</code></td><td>控制什么时候初始化schema</td><td>embeded(默认)/always/never</td></tr><tr><td><code>spring.ai.chat.memory.repository.jdbc.schema</code></td><td>指定数据库的schema的位置</td><td><code>classpath:org/springframework/ai/chat/memory/repository/jdbc/schema-@@platform@@.sql</code></td></tr><tr><td><code>spring.ai.chat.memory.repository.jdbc.platform</code></td><td>数据库平台，如mysql/h2/postgresql等</td><td>默认会自动检测</td></tr></tbody></table><p>在上面的配置中，我们的 <code>initialize-schema</code> 配置为 <code>always</code>，表示在启动的时候会自动创建数据库表（即便表存在，也会尝试执行脚本；我们这里使用的是MySql，因此需要自动创建表<code>SPRING_AI_CHAT_MEMORY</code>）</p><ol><li>ALWAYS</li></ol><ul><li>无论何时都会执行数据库初始化</li><li>即使数据库已存在，也会尝试运行初始化脚本</li><li>适用于每次启动都需要重新初始化数据库的场景</li></ul><ol start="2"><li>EMBEDDED</li></ol><ul><li>仅在使用嵌入式数据库时执行初始化</li><li>对于H2、HSQL、Derby等嵌入式数据库会自动初始化</li><li>对于外部数据库（如MySQL、PostgreSQL）则跳过初始化</li><li>这是大多数情况下的推荐设置</li></ul><ol start="3"><li>NEVER</li></ol><ul><li>从不执行数据库初始化</li><li>完全跳过所有数据库schema和data脚本的执行</li><li>适用于生产环境或已有数据库结构的情况</li></ul><p>对应的Schema所在的位置如下图</p><figure><img src="`+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_4-初始化-chatmemory" tabindex="-1"><a class="header-anchor" href="#_4-初始化-chatmemory" aria-hidden="true">#</a> 4. 初始化 ChatMemory</h3><p>当我们引入 <code>spring-ai-starter-model-chat-memory-repository-jdbc</code> 之后，会自动注入 <code>ChatMemoryRepository</code> 的bean对象，我们接下来基于它来创建<code>ChatMemory</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MemConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ChatMemory</span> <span class="token function">jdbcChatMemory</span><span class="token punctuation">(</span><span class="token class-name">ChatMemoryRepository</span> chatMemoryRepository<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">MessageWindowChatMemory</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">chatMemoryRepository</span><span class="token punctuation">(</span>chatMemoryRepository<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-chatclient-配置" tabindex="-1"><a class="header-anchor" href="#_5-chatclient-配置" aria-hidden="true">#</a> 5. ChatClient 配置</h3><p>然后通过<code>MessageChatMemoryAdvisor</code>来为<code>ChatClient</code>提供聊天历史能力支撑</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChatController</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ChatClient</span> chatClient<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ChatController</span><span class="token punctuation">(</span><span class="token class-name">ChatModel</span> chatModel<span class="token punctuation">,</span> <span class="token class-name">ChatMemory</span> chatMemory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>chatClient <span class="token operator">=</span> <span class="token class-name">ChatClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>chatModel<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">defaultAdvisors</span><span class="token punctuation">(</span><span class="token class-name">MessageChatMemoryAdvisor</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>chatMemory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        <span class="token keyword">new</span> <span class="token class-name">SimpleLoggerAdvisor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-示例测试" tabindex="-1"><a class="header-anchor" href="#_6-示例测试" aria-hidden="true">#</a> 6. 示例测试</h3><p>提供一个聊天接口，第一个参数为用户标识，用于区分用户的聊天记录</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChatController</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 聊天对话
     *
     * <span class="token keyword">@param</span> <span class="token parameter">user</span>
     * <span class="token keyword">@param</span> <span class="token parameter">msg</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/{user}/chat&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">chat</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> user<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> chatClient<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">user</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">advisors</span><span class="token punctuation">(</span>a <span class="token operator">-&gt;</span> a<span class="token punctuation">.</span><span class="token function">param</span><span class="token punctuation">(</span><span class="token class-name">ChatMemory</span><span class="token punctuation">.</span><span class="token constant">CONVERSATION_ID</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="二、关键技术点" tabindex="-1"><a class="header-anchor" href="#二、关键技术点" aria-hidden="true">#</a> 二、关键技术点</h2><p>使用MySql来存储用户与大模型的对话情况，从使用角度来看，还比较简单；接下来我们抓一下技术要点，从疑问出发，看下能否完成解惑</p><ol><li>持久化的数据表结构是如何设计的？</li><li>数据库表是如何初始化的？</li><li>又是如何实现自动识别数据库平台的？</li><li>如果想使用自定义的数据库表，替代默认的，可以怎么实现？</li></ol><h3 id="_1-默认的表结构设计" tabindex="-1"><a class="header-anchor" href="#_1-默认的表结构设计" aria-hidden="true">#</a> 1. 默认的表结构设计</h3><p>关于这个一点，前面介绍配置的时候也提到了，在<code>spring-aimodel-chat-memory-repository-jdbc</code>的包中，提供了5个schema文件，对应的源码工程结果如下</p><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>以mysql为例，对应的schema如下</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> SPRING_AI_CHAT_MEMORY <span class="token punctuation">(</span>\n    <span class="token identifier"><span class="token punctuation">`</span>conversation_id<span class="token punctuation">`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>content<span class="token punctuation">`</span></span> <span class="token keyword">TEXT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>type<span class="token punctuation">`</span></span> <span class="token keyword">ENUM</span><span class="token punctuation">(</span><span class="token string">&#39;USER&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ASSISTANT&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;SYSTEM&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;TOOL&#39;</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n    <span class="token identifier"><span class="token punctuation">`</span>timestamp<span class="token punctuation">`</span></span> <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n    <span class="token keyword">INDEX</span> <span class="token identifier"><span class="token punctuation">`</span>SPRING_AI_CHAT_MEMORY_CONVERSATION_ID_TIMESTAMP_IDX<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>conversation_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>timestamp<span class="token punctuation">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义了四个字段，分别为：</p><ul><li><code>conversation_id</code>: 会话ID，用于区分不同的会话</li><li><code>content</code>: 会话内容，可以是用户输入，也可以是模型输出</li><li><code>type</code>: 会话类型，可以是用户输入，也可以是模型输出，也可以是系统信息，也可以是工具信息</li><li><code>timestamp</code>: 会话时间，用于排序</li></ul><h3 id="_2-数据库初始化" tabindex="-1"><a class="header-anchor" href="#_2-数据库初始化" aria-hidden="true">#</a> 2. 数据库初始化</h3><p>通过配置 <code>spring.ai.chat.memory.repository.jdbc.initialize-schema</code> 来控制； 为 <code>always</code>，会自动创建数据库表（即便表存在，也会尝试执行脚本）</p><p>这里主要是通过<code>JdbcChatMemoryRepositorySchemaInitializer</code>来实现schema脚本的初始化行为，依赖的是Spring Boot 中用于数据库初始化的组件<code>DataSourceScriptDatabaseInitializer</code></p><ul><li>检查数据库初始化模式（DatabaseInitializationMode）</li><li>根据配置查找相应的 SQL 脚本文件</li><li>使用配置的 DataSource 连接数据库</li><li>按顺序执行 schema 脚本和 data 脚本</li><li>处理脚本执行过程中的异常</li></ul><h3 id="_3-自动识别数据库平台" tabindex="-1"><a class="header-anchor" href="#_3-自动识别数据库平台" aria-hidden="true">#</a> 3. 自动识别数据库平台</h3><p>关键实现逻辑 <code>org.springframework.ai.chat.memory.repository.jdbc.JdbcChatMemoryRepositoryDialect.from</code></p><figure><img src="'+m+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>根据数据库连接来判断当前使用的是哪个数据库，默认的是 <code>postgresql</code></p><h3 id="_4-自定义数据库表结构" tabindex="-1"><a class="header-anchor" href="#_4-自定义数据库表结构" aria-hidden="true">#</a> 4. 自定义数据库表结构</h3><p>默认的表结构满足大部分场景，如果需要自定义表结构，可以通过实现 <code>JdbcChatMemoryRepositoryDialect</code> 接口来自定义，并注册到 Spring 容器中</p><p>比如默认的MySql相关sql如下，若需要调整表名、字段名，替换下面的这个类，然后注册到 <code>JdbcChatMemoryRepository</code> 中即可</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MysqlChatMemoryRepositoryDialect</span> <span class="token keyword">implements</span> <span class="token class-name">JdbcChatMemoryRepositoryDialect</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSelectMessagesSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;SELECT content, type FROM SPRING_AI_CHAT_MEMORY WHERE conversation_id = ? ORDER BY \`timestamp\`&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getInsertMessageSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;INSERT INTO SPRING_AI_CHAT_MEMORY (conversation_id, content, type, \`timestamp\`) VALUES (?, ?, ?, ?)&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSelectConversationIdsSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;SELECT DISTINCT conversation_id FROM SPRING_AI_CHAT_MEMORY&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDeleteMessagesSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;DELETE FROM SPRING_AI_CHAT_MEMORY WHERE conversation_id = ?&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重点说明：换表名、字段名还好，如果我想额外存储用户的token使用情况，可行吗？</p><p>从源码来看，不可行，上面的 <code>Dialect</code> 中的<code>insert</code>，已经绑定了字段，无法进行动态扩展</p><figure><img src="`+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="三、小结" tabindex="-1"><a class="header-anchor" href="#三、小结" aria-hidden="true">#</a> 三、小结</h2><p>本文介绍的是基于MySql持久化对话历史的实现方案，Spring AI 默认使用 JdbcChatMemoryRepository 来实现，基于 MySql 的表结构，可以满足大部分场景，如果需要自定义表结构，可以通过实现 <code>JdbcChatMemoryRepositoryDialect</code> 接口来自定义</p><p>通过使用实例和一些关键性的技术说明，对于官方未直接支持的数据库，我们也可以很方便的进行扩展；当然现在的实现还存在一点缺陷，那就是无法自定义持久化的信息</p><p>接下来一篇博文，我们将实例演示，如何使用 h2 数据库进行持久化</p>',56),f={href:"https://github.com/liuyueyi/spring-ai-demo/tree/master/advance-projects/A01-memory-jdbc-mysql",target:"_blank",rel:"noopener noreferrer"};function M(S,A){const t=p("RouterLink"),c=p("ExternalLinkIcon");return l(),u("div",null,[b,a("p",null,[n("本文作为SpringAI的进阶篇，将介绍一些在实际应用中，可能用到的小技巧。在基础篇的 "),s(t,{to:"/spring/springai/%E5%9F%BA%E7%A1%80%E7%AF%87/04.%E8%81%8A%E5%A4%A9%E4%B8%8A%E4%B8%8B%E6%96%87.html"},{default:e(()=>[n("04.聊天上下文")]),_:1}),n(" 中，介绍并演示了基于 "),h,n(" 来存储对话历史，从而实现多轮对话")]),y,a("p",null,[n("创建一个SpringAI项目，基本流程同 "),s(t,{to:"/spring/springai/%E5%9F%BA%E7%A1%80%E7%AF%87/01.%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AASpringAI-Demo%E5%B7%A5%E7%A8%8B.html"},{default:e(()=>[n("创建一个SpringAI-Demo工程")]),_:1})]),_,a("p",null,[n("文中所有涉及到的代码，可以到项目中获取 "),a("a",f,[n("https://github.com/liuyueyi/spring-ai-demo"),s(c)])])])}const C=i(g,[["render",M],["__file","A01.使用MySql持久化对话历史.html.vue"]]);export{C as default};
