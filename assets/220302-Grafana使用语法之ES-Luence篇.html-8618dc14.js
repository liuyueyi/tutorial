import{_ as i,V as t,W as l,X as o,Y as e,Z as a,$ as s,a1 as d,F as r}from"./framework-094145d2.js";const p="/tutorial/hexblog/imgs/220302/00.jpg",c="/tutorial/hexblog/imgs/220302/01.jpg",u="/tutorial/hexblog/imgs/220302/02.jpg",h={},g=e("p",null,"Grafnan结合ElasticSearch，实现数据统计，大盘配置",-1),m=d(`<h3 id="_1-查询成员字段" tabindex="-1"><a class="header-anchor" href="#_1-查询成员字段" aria-hidden="true">#</a> 1. 查询成员字段</h3><p>语法：<code>{&quot;find&quot;: &quot;fields&quot;, &quot;type&quot;: &quot;keyword&quot;}</code></p><ul><li>find： 表示查什么东西</li><li>type：表示检索条件</li></ul><p>如查询<code>long</code>类型的字段，可以如下处理</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
	<span class="token property">&quot;find&quot;</span><span class="token operator">:</span> <span class="token string">&quot;fields&quot;</span><span class="token punctuation">,</span>
	<span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;long&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>什么时候用这个呢？</p><ul><li>比如我想知道这个es中定义了哪些字段</li><li>比如在配置Grafana的变量时，可以使用它来做一些限定</li></ul><h3 id="_2-查询成员值" tabindex="-1"><a class="header-anchor" href="#_2-查询成员值" aria-hidden="true">#</a> 2. 查询成员值</h3><p>语法： <code>{&quot;find&quot;: &quot;terms&quot;, &quot;field&quot;: &quot;成员名&quot;, &quot;size&quot;: 100}</code></p><ul><li>find：后面跟上的是 terms， 表示查询具体的值</li><li>field: 用于限定需要查的成员</li><li>size：数量限制，可以不填</li></ul><p>举例如下，查询所有的服务器ip</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
	<span class="token property">&quot;find&quot;</span><span class="token operator">:</span> <span class="token string">&quot;terms&quot;</span><span class="token punctuation">,</span>
	<span class="token property">&quot;field&quot;</span><span class="token operator">:</span> <span class="token string">&quot;server_ip&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用范围：</p><ul><li>常见于配置Grafana变量，配置一个服务器ip选择的变量，用于查看不同服务器的表现情况</li></ul><h3 id="_3-条件查询成员值" tabindex="-1"><a class="header-anchor" href="#_3-条件查询成员值" aria-hidden="true">#</a> 3. 条件查询成员值</h3><p>在前面的基础上加一下限定，比如一个es为多个应用使用，此时我只关注其中app1的大盘，此时配置服务器时，想加一个条件限定</p><p>语法: <code>{&quot;find&quot;: &quot;terms&quot;, &quot;field&quot;: &quot;成员名&quot;, &quot;query&quot;: &quot;k:v&quot;}</code></p><ul><li>query： lucence查询语法，要求成员k的值为v</li></ul><p>举例，查询server_name = app的服务器ip</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
	<span class="token property">&quot;find&quot;</span><span class="token operator">:</span> <span class="token string">&quot;terms&quot;</span><span class="token punctuation">,</span>
	<span class="token property">&quot;field&quot;</span><span class="token operator">:</span> <span class="token string">&quot;server_ip&quot;</span><span class="token punctuation">,</span>
	<span class="token property">&quot;query&quot;</span><span class="token operator">:</span> <span class="token string">&quot;server_name:app&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-lucene-查询语法" tabindex="-1"><a class="header-anchor" href="#_4-lucene-查询语法" aria-hidden="true">#</a> 4. Lucene 查询语法</h3><p>配置大盘的查询条件，主要就是借助lucene语法来处理，接下来看一下常见的使用姿势</p><h4 id="_4-1-条件等于查询" tabindex="-1"><a class="header-anchor" href="#_4-1-条件等于查询" aria-hidden="true">#</a> 4.1 条件等于查询</h4><p>语法： <code>field_name: filed_value</code></p><ul><li>filed_name: 字段名</li><li>field_value: 需要检索的值</li></ul><p><strong>注意：</strong> 中间使用英文冒号分隔，表示条件命中</p><h4 id="_4-2-不等于查询" tabindex="-1"><a class="header-anchor" href="#_4-2-不等于查询" aria-hidden="true">#</a> 4.2 不等于查询</h4><p>如果希望不等于查询，主要使用下面这种方式</p><ul><li><code>!(field_name:field_value)</code></li></ul><h4 id="_4-3-字段本身存在与否" tabindex="-1"><a class="header-anchor" href="#_4-3-字段本身存在与否" aria-hidden="true">#</a> 4.3 字段本身存在与否</h4><ul><li><code>_exists_:field_name</code>: 查询包含field成员的记录</li><li><code>_missing_:field_name</code>: 查询不包含field成员的记录</li></ul><h4 id="_4-4-通配符查询" tabindex="-1"><a class="header-anchor" href="#_4-4-通配符查询" aria-hidden="true">#</a> 4.4 通配符查询</h4><p>在查询条件中，包含下面两个的表示使用通配查询</p><ul><li><code>?</code>匹配打个字符</li><li><code>*</code> 匹配0或多个字符</li></ul><p>比如我有个应用，部署多个环境，分别名为 app-cn, app-usa，现在想统计整个应用的情况，就可以使用下面这种正则方式</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>server_name: app-*
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>除了上面的示例，在实际的工作中，更常见的是url的统计，比如统计 <code>/get/</code> 这个域名开头的请求</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 下面使用了转义</span>
url: <span class="token punctuation">\\</span>/get<span class="token punctuation">\\</span>/*
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-5-模糊搜索" tabindex="-1"><a class="header-anchor" href="#_4-5-模糊搜索" aria-hidden="true">#</a> 4.5 模糊搜索</h4><p>在单次后面添加剂上 <code>~</code>来实现模糊搜索，这种更适用于搜索业务场景，通常对于grafana的大盘配置，个人感觉不太实用</p><p>实用方式</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>// 可以匹配 app-cn
server_name: app-nc~
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-6-范围搜索" tabindex="-1"><a class="header-anchor" href="#_4-6-范围搜索" aria-hidden="true">#</a> 4.6 范围搜索</h4><p>除了前面的精确搜索，我们还可以进行范围搜索</p><p>语法： <code>[ a TO b ]</code>, <code>{a TO B}</code></p><ul><li><code>[]</code>： 闭包区间，包含左边的值</li><li><code>{}</code>： 开区间，不包含两边值</li><li><code>a/b</code> 如果为 <code>*</code> 表示某一侧不限制范围</li></ul><p>实例演示，查询http状态码为 4xx 的case</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>http_code: <span class="token punctuation">[</span><span class="token number">400</span> TO <span class="token number">499</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>除了上面这种写法，也可以使用 <code>&gt; &lt; </code>的方式，比如上面的写法等价</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>// <span class="token operator">&gt;=</span><span class="token number">400</span>之间不要加上空格
http_code: <span class="token punctuation">(</span><span class="token operator">&gt;=</span><span class="token number">400</span> AND <span class="token operator">&lt;=</span><span class="token number">499</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-7-逻辑操作" tabindex="-1"><a class="header-anchor" href="#_4-7-逻辑操作" aria-hidden="true">#</a> 4.7 逻辑操作</h4><p>多条件组合，使用AND/OR来处理，这里的组合即可以表明多个field，也可以是一个field的多个value组合</p><p>如多字段匹配：找出app-cn应用中状态码为500的记录</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>http_code:500 and server_name:app-cn
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如多value匹配：找出状态码为500, 503的记录</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>http_code: <span class="token punctuation">(</span><span class="token number">500</span> OR <span class="token number">503</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4-8-转移字符" tabindex="-1"><a class="header-anchor" href="#_4-8-转移字符" aria-hidden="true">#</a> 4.8 转移字符</h4><p>当查询条件中，包含下面字符中的一个时，需要使用注意</p><ul><li>特殊字符: <code>+ - = &amp;&amp; || &gt; &lt; ! ( ) { } [ ] ^ &quot; ~ * ? : \\ /</code></li><li>转义修饰: <code>\\/</code></li></ul><p>如url的查询时，通常会用到转义</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>url: <span class="token punctuation">\\</span>/get<span class="token punctuation">\\</span>/info
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-小结" tabindex="-1"><a class="header-anchor" href="#_5-小结" aria-hidden="true">#</a> 5. 小结</h3><p>本文主要介绍Grafana中使用es数据源时，常见的语法操作，当然其中Lucence的部分，在kibana中也同样适用；</p><p>通常来讲，在Grafana中，有下面几个地方会使用到上面的知识点</p><p>变量配置时，使用第1，2，3节中的方式，过滤出下拉选项</p><figure><img src="`+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在大盘配置的Query输入框中，使用 Lucene 语法</p><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在Explore中使用Lucene语法</p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>参考博文：</p>',71),v={href:"https://www.cnblogs.com/xing901022/p/4974977.html",target:"_blank",rel:"noopener noreferrer"},b=e("h2",{id:"一灰灰的联系方式",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#一灰灰的联系方式","aria-hidden":"true"},"#"),a(" 一灰灰的联系方式")],-1),_=e("p",null,"尽信书则不如无书，以上内容，纯属一家之言，因个人能力有限，难免有疏漏和错误之处，如发现bug或者有更好的建议，欢迎批评指正，不吝感激",-1),f={href:"https://blog.hhui.top",target:"_blank",rel:"noopener noreferrer"},k={href:"https://weibo.com/p/1005052169825577/home",target:"_blank",rel:"noopener noreferrer"},q=e("li",null,"QQ： 一灰灰/3302797840",-1),x=e("li",null,[a("微信公众号："),e("strong",null,"一灰灰blog")],-1),y=e("figure",null,[e("img",{src:"https://spring.hhui.top/spring-blog/imgs/info/info.png",alt:"QrCode",tabindex:"0",loading:"lazy"}),e("figcaption",null,"QrCode")],-1);function j(L,E){const n=r("ExternalLinkIcon");return t(),l("div",null,[g,o(" more "),m,e("ul",null,[e("li",null,[e("a",v,[a("Lucene查询语法详解"),s(n)])])]),b,_,e("ul",null,[e("li",null,[a("个人站点："),e("a",f,[a("https://blog.hhui.top"),s(n)])]),e("li",null,[a("微博地址: "),e("a",k,[a("小灰灰Blog"),s(n)])]),q,x]),y])}const N=i(h,[["render",j],["__file","220302-Grafana使用语法之ES-Luence篇.html.vue"]]);export{N as default};
