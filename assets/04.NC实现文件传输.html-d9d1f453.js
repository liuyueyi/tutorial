import{_ as a,V as n,W as s,a1 as e}from"./framework-094145d2.js";const l="/tutorial/hexblog/imgs/220225/00.jpg",p={},t=e(`<p>之前在服务器上拷贝文件时，要么使用scp, 要么就是上传到ftp服务器，然后再需要使用的服务器上重新下载，虽然这两种方式也没啥毛病，但是缺陷也比较明显</p><ul><li>scp: 要求授权验证</li><li>ftp: 需要一个第三方的存储系统，用完之后如果不删除的话这个文件就一直在那</li></ul><p>接下来介绍下使用ncat(即nc)来实现文件拷贝</p><h3 id="_1-基本说明-安装" tabindex="-1"><a class="header-anchor" href="#_1-基本说明-安装" aria-hidden="true">#</a> 1. 基本说明 &amp; 安装</h3><p>ncat/nc 是一个类似于cat的网络命令，常用语网络读、写、重定向；它提供的功能非常强大，本文介绍一下将介绍一下基本使用姿势与应用场景</p><p>首先判断系统是否有安装</p><ul><li>ubuntu 默认有这个命令</li><li>centos 需要自己安装</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 判断是否有安装 ncat命令</span>
<span class="token function">which</span> ncat
<span class="token comment"># which nc 也可以判断是否安装有这个命令</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若没有安装，执行下面的命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token function">nc</span> <span class="token parameter variable">-y</span>
<span class="token comment">#  yum install nmap-ncat -y</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-监听端口链接" tabindex="-1"><a class="header-anchor" href="#_2-监听端口链接" aria-hidden="true">#</a> 2. 监听端口链接</h3><p>监听本机某个端口，相当于起了一个网络服务</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># nc -l 端口号</span>
<span class="token function">nc</span> <span class="token parameter variable">-l</span> <span class="token number">9999</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong></p><ul><li>上面默认监听的是tcp端口</li><li>如需指定udp，可以通过 <code>nc -l -u 9999</code></li></ul><h3 id="_3-连接远程服务器" tabindex="-1"><a class="header-anchor" href="#_3-连接远程服务器" aria-hidden="true">#</a> 3. 连接远程服务器</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># nc ip 端口号</span>
<span class="token function">nc</span> <span class="token number">127.0</span>.0.1 <span class="token number">9999</span>

<span class="token comment"># 如果需要链接的是udp端口，可以加一个 -u</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>连上之后，就可以发送信息（回车之后服务端会接收到客户端的传输数据）</p><figure><img src="`+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-nc文件拷贝" tabindex="-1"><a class="header-anchor" href="#_3-nc文件拷贝" aria-hidden="true">#</a> 3. nc文件拷贝</h3><p>基于上面的case，可以利用nc来实现文件拷贝</p><p>目标服务器，启动一个端口监听</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">nc</span> <span class="token parameter variable">-l</span> <span class="token number">9999</span> <span class="token operator">&gt;</span> save.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>文件所属服务器，用于上传文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">nc</span> <span class="token number">127.0</span>.0.1 <span class="token number">9999</span> <span class="token operator">&lt;</span> data.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>说明</strong></p><ul><li>上面这个也可以走udp端口进行文件传输，加上<code>-u</code>即可</li><li>流程也可以反过来，在文件所属服务器上监听端口，目标服务器用于下载文件 (上面的方式适用于文件所属服务器限制了访问端口的场景；下面这种这种适用于目标服务器ip不确定的case)</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 文件所属服务器</span>
<span class="token function">nc</span> <span class="token parameter variable">-l</span> <span class="token number">9999</span> <span class="token operator">&lt;</span> data.txt

<span class="token comment"># 下载文件的服务器</span>
<span class="token function">nc</span> <span class="token number">127.0</span>.0.1 <span class="token number">9999</span> <span class="token operator">&gt;</span> save.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-nc作为代理" tabindex="-1"><a class="header-anchor" href="#_4-nc作为代理" aria-hidden="true">#</a> 4. nc作为代理</h3><p>使用nc作为一个简单的转发</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ncat <span class="token parameter variable">-l</span> <span class="token number">8080</span> <span class="token operator">|</span> ncat <span class="token number">192.168</span>.0.2 <span class="token number">80</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面这个命令实现单向的转发，将链接到本机8080的连接转发到<code>192.168.0.2:80</code></p><p>如果希望实现双向管道，可以如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkfifo</span> 2way
ncat <span class="token parameter variable">-l</span> <span class="token number">8080</span> <span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>2way <span class="token operator">|</span> ncat <span class="token number">192.168</span>.0.2 <span class="token number">80</span> <span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span>2way
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>除了上面的代理方式，也可以利用nc来实现端口转发，借助 <code>-c</code> 命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ncat <span class="token parameter variable">-u</span> <span class="token parameter variable">-l</span>  <span class="token number">80</span> <span class="token parameter variable">-c</span>  <span class="token string">&#39;ncat -u -l 8080&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_5-小结" tabindex="-1"><a class="header-anchor" href="#_5-小结" aria-hidden="true">#</a> 5. 小结</h3><p>nc常用于服务器之间的网络数据传输，其基本参数如下 (通过<code>nc -h</code>获取)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-4</span> 使用IPV4
<span class="token parameter variable">-6</span> 使用IPV6
-c, --sh-exec <span class="token operator">&lt;</span>command<span class="token operator">&gt;</span> 接收到的命令通过command<span class="token punctuation">(</span>例如/bin/bash<span class="token punctuation">)</span>执行
-e, <span class="token parameter variable">--exec</span> <span class="token operator">&lt;</span>command<span class="token operator">&gt;</span> 和-c差不多
--lua-exec <span class="token operator">&lt;</span>filename<span class="token operator">&gt;</span> 接收到的数据通过脚本filename执行
-m, --max-conns <span class="token operator">&lt;</span>n<span class="token operator">&gt;</span> 最大并发连接数<span class="token punctuation">(</span>单独开启不生效，需配合--keep-open/--broker使用<span class="token punctuation">)</span>
-d, <span class="token parameter variable">--delay</span> <span class="token operator">&lt;</span>time<span class="token operator">&gt;</span> 读写收发间隔时间
-o, <span class="token parameter variable">--output</span> <span class="token operator">&lt;</span>filename<span class="token operator">&gt;</span> 将会话数据转储到文件
-i, --idle-timeout <span class="token operator">&lt;</span>time<span class="token operator">&gt;</span> 读写超时时间
-p, --source-port port 指定连接使用的源端口号<span class="token punctuation">(</span>client端使用<span class="token punctuation">)</span>
-s, <span class="token parameter variable">--source</span> addr 客户端指定连接服务器使用的ip<span class="token punctuation">(</span>client端使用<span class="token punctuation">)</span>
-l, <span class="token parameter variable">--listen</span> 绑定和监听接入连接<span class="token punctuation">(</span>server端使用<span class="token punctuation">)</span>
-k, --keep-open 在监听模式中接受多个连接<span class="token punctuation">(</span>配合-m使用<span class="token punctuation">)</span>
-n, <span class="token parameter variable">--nodns</span> 不使用DNS解析主机名
-t, <span class="token parameter variable">--telnet</span> 响应telnet连接
-u, <span class="token parameter variable">--udp</span> 使用udp协议，默认tcp
-v, <span class="token parameter variable">--verbose</span> 显示详细信息
-w, <span class="token parameter variable">--wait</span> <span class="token operator">&lt;</span>time<span class="token operator">&gt;</span> 连接超时时间
<span class="token parameter variable">--allow</span> 允许指定主机连接
<span class="token parameter variable">--allowfile</span> 允许指定文件内的主机连接
<span class="token parameter variable">--deny</span> 拒绝指定主机连接
<span class="token parameter variable">--denyfile</span> 拒绝指定文件内的主机连接
<span class="token parameter variable">--broker</span> 启用代理模式
<span class="token parameter variable">--proxy</span> <span class="token operator">&lt;</span>addr<span class="token punctuation">[</span>:port<span class="token punctuation">]</span><span class="token operator">&gt;</span> 指定代理主机ip和port
--proxy-type <span class="token operator">&lt;</span>type<span class="token operator">&gt;</span> 指定代理类型<span class="token punctuation">(</span><span class="token string">&quot;http&quot;</span> or <span class="token string">&quot;socks4&quot;</span><span class="token punctuation">)</span>
--proxy-auth <span class="token operator">&lt;</span>auth<span class="token operator">&gt;</span> 代理身份验证
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>常用的命令 <code>-l</code> 用于监听一个端口号， <code>-v</code>用于显示连接详情， <code>-u</code>表示监听udp端口</p><p>本文给出了两个简单的实例</p><ul><li>文件传输</li><li>请求转发</li></ul>`,42),i=[t];function c(r,o){return n(),s("div",null,i)}const u=a(p,[["render",c],["__file","04.NC实现文件传输.html.vue"]]);export{u as default};
