import{_ as t,V as o,W as p,X as i,Y as n,Z as a,$ as e,a1 as c,F as l}from"./framework-094145d2.js";const u="/tutorial/imgs/181012/00.gif",r={},d=n("p",null,"前面一篇介绍了Bean的常用姿势，在一个项目中，可能不会出现什么问题，可如果你提供了一个Jar包供第三方用户使用，那么你这个jar包中的Bean，能被第三方加载么？",-1),k=n("p",null,"本篇博文将主要介绍AutoConfig相关的内容，即如果我想提供一个jar包供第三方在Spring的环境下使用时，可以怎么做",-1),m=c(`<h2 id="i-autoconfiguration" tabindex="-1"><a class="header-anchor" href="#i-autoconfiguration" aria-hidden="true">#</a> I. AutoConfiguration</h2><p>通常来讲，要想实现上面的场景，建议是借助<code>@Configuration</code>注解的配置类来管理你自己的bean，这样对于其他使用方而言，只需要加载到你的配置类，就可以注册你的所有bean了</p><h3 id="_1-包路径扫描使用姿势" tabindex="-1"><a class="header-anchor" href="#_1-包路径扫描使用姿势" aria-hidden="true">#</a> 1. 包路径扫描使用姿势</h3><p>首先是在你的工程中定义一个配置类，如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">&quot;com.git.hui.boot.autoconfig&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelfAutoConfig</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个配置类功能比较简单，指明扫描的包路径，然后这个配置类如何给使用方使用呢？</p><p><strong>将配置放在指定的文件中即可，使用者会自动加载，从而避免的代码的侵入</strong></p><ul><li>在资源目录下新建目录 META-INF</li><li>在 META-INF 目录下新建文件 <code>spring.factories</code></li><li>在文件中添加 <code>org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.git.hui.boot.autoconfig.SelfAutoConfig</code></li></ul><p><strong>说明，如果需要换行时，可以如下</strong></p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class="token punctuation">=</span><span class="token value attr-value">\\
    com.git.hui.boot.autoconfig.SelfAutoConfig,\`</span>
    com.git.hui.boot.autoconfig.SelfAutoConfig2,\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后使用方就可以愉快的使用你的bean了，定义一个测试的Bean如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutoBean</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">AutoBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token string">&quot;defaultAutoBean&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">AutoBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;AutoBean load time: {}&quot;</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-定义bean使用方式" tabindex="-1"><a class="header-anchor" href="#_2-定义bean使用方式" aria-hidden="true">#</a> 2. 定义Bean使用方式</h3><p>直接在Config配置中，定义Bean，可以说是更加常见的方式，特别是当你的bean不是那么多的时候，推荐使用这种方式，便于集中管理</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutoConfBean</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">AutoConfBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;AutoConfBean load time: {}&quot;</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的配置类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">&quot;com.git.hui.boot.autoconfig&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelfAutoConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">AutoConfBean</span> <span class="token function">autoConfBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AutoConfBean</span><span class="token punctuation">(</span><span class="token string">&quot;auto load + &quot;</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-实例演示" tabindex="-1"><a class="header-anchor" href="#_3-实例演示" aria-hidden="true">#</a> 3. 实例演示</h3><p>在新工程中，测试前面的工程的bean，看是否可以正常加载，这一小结结合源码运行查看，更有助于理解</p><p><strong>源码工程说明</strong></p><ul><li><a href="">005-autoconfig</a> 提供自动加载的Bean的工程，内部定义了前面的两个测试Bean和配置文件</li><li><a href="">004-bean</a> 测试引入第三方jar中Bean的工程</li></ul><p>测试代码如下，已删除无关的内容</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoController</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 测试引入第三方包的情况
     */</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">AutoBean</span> autoBean<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">AutoConfBean</span> autoConfBean<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;/show&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// ...</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;auto&quot;</span><span class="token punctuation">,</span> autoBean <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> autoBean<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&quot;null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;autoConf&quot;</span><span class="token punctuation">,</span> autoConfBean <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> autoConfBean<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&quot;null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>演示图如下:</p><figure><img src="`+u+'" alt="gif.gif" tabindex="0" loading="lazy"><figcaption>gif.gif</figcaption></figure><h3 id="_4-小结" tabindex="-1"><a class="header-anchor" href="#_4-小结" aria-hidden="true">#</a> 4. 小结</h3><p>本篇的内容比较简单，东西也不多，主要就是在自己的项目中添加一个<code>Configuration</code>配置类，然后在资源目录下新增 <code>META-INF/spring.factories</code> 即可</p><p>上面这么做，其实和Java本身的SPI机制有点像，都是讲一些类信息写在约定的文件中，然后由框架层来获取文件中的内容然后进行解析，后面在源码篇，会涉及到整个处理流程；现在知道大致是这么玩的就行</p><p>从简单的使用来讲，上面可以满足一般场景，但是实际的应用中，还有其他的问题</p><ul><li>我直接依赖或间接依赖了很多jar包，但是有些包并不想引入他们定义的AutoConfig怎么办？(如进行redis操作的Lettuce和Jedis，只需要一个生效即可）</li><li>如我的Jar包工作的前提是需要引入其他的jar包，但是我不知道使用我的地方是否提供了这个依赖，如何处理？（如只有Spring容器中有BeanA之后，我定义的Bean才生效）</li><li>Bean初始化顺序的问题</li></ul><h2 id="ii-其他" tabindex="-1"><a class="header-anchor" href="#ii-其他" aria-hidden="true">#</a> II. 其他</h2><h3 id="_0-相关" tabindex="-1"><a class="header-anchor" href="#_0-相关" aria-hidden="true">#</a> 0. 相关</h3><h4 id="a-参考" tabindex="-1"><a class="header-anchor" href="#a-参考" aria-hidden="true">#</a> a. 参考</h4>',33),v={href:"https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-developing-auto-configuration.html#boot-features-understanding-auto-configured-beans",target:"_blank",rel:"noopener noreferrer"},b=n("h4",{id:"b-项目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#b-项目","aria-hidden":"true"},"#"),a(" b. 项目")],-1),g={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/004-bean",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/005-autoconfig",target:"_blank",rel:"noopener noreferrer"};function _(y,w){const s=l("ExternalLinkIcon");return o(),p("div",null,[d,k,i(" more "),m,n("ul",null,[n("li",null,[n("a",v,[a("官方文档：Creating Your Own Auto-configuration"),e(s)])])]),b,n("ul",null,[n("li",null,[a("工程："),n("a",g,[a("spring-boot-demo"),e(s)])]),n("li",null,[a("module: "),n("a",f,[a("004-bean"),e(s)])]),n("li",null,[a("module: "),n("a",h,[a("005-autoconfig"),e(s)])])])])}const C=t(r,[["render",_],["__file","02.181012-SpringBoot基础篇Bean之自动加载.html.vue"]]);export{C as default};
