import{_ as o,V as l,W as i,Y as s,Z as n,$ as a,a0 as e,a1 as u,F as p}from"./framework-094145d2.js";const d="/tutorial/imgs/column/springai/A02-1.webp",r="/tutorial/imgs/column/springai/A02-2.webp",k="/tutorial/imgs/column/springai/A02-3.webp",m={},v=s("h1",{id:"_02-使用h2持久化对话历史",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_02-使用h2持久化对话历史","aria-hidden":"true"},"#"),n(" 02.使用H2持久化对话历史")],-1),g=s("h2",{id:"一、h2持久化对话历史",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#一、h2持久化对话历史","aria-hidden":"true"},"#"),n(" 一、H2持久化对话历史")],-1),b=s("h3",{id:"_1-创建项目",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-创建项目","aria-hidden":"true"},"#"),n(" 1. 创建项目")],-1),h=u(`<h3 id="_2-添加依赖" tabindex="-1"><a class="header-anchor" href="#_2-添加依赖" aria-hidden="true">#</a> 2. 添加依赖</h3><p>在pom.xml中添加关键依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.ai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-ai-starter-model-zhipuai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.ai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-ai-starter-model-chat-memory-repository-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.h2database<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>h2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-配置数据库连接" tabindex="-1"><a class="header-anchor" href="#_3-配置数据库连接" aria-hidden="true">#</a> 3. 配置数据库连接</h3><p>在配置文件 <code>application.yml</code> 文件中，指定SpringAI配置 + 数据库连接信息</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token comment"># 本地开发环境，使用h2数据库，减少外部依赖项</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>h2<span class="token punctuation">:</span>file<span class="token punctuation">:</span>$<span class="token punctuation">{</span>user.dir<span class="token punctuation">}</span>/advance<span class="token punctuation">-</span>projects/A02<span class="token punctuation">-</span>memory<span class="token punctuation">-</span>jdbc<span class="token punctuation">-</span>h2/datas/test<span class="token punctuation">-</span>db;DB_CLOSE_DELAY=<span class="token punctuation">-</span><span class="token number">1</span>
    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> org.h2.Driver
    <span class="token key atrule">username</span><span class="token punctuation">:</span> sa
    <span class="token key atrule">password</span><span class="token punctuation">:</span>
  <span class="token key atrule">h2</span><span class="token punctuation">:</span>
    <span class="token key atrule">console</span><span class="token punctuation">:</span>
      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">ai</span><span class="token punctuation">:</span>
    <span class="token key atrule">chat</span><span class="token punctuation">:</span>
      <span class="token key atrule">memory</span><span class="token punctuation">:</span>
        <span class="token key atrule">repository</span><span class="token punctuation">:</span>
          <span class="token key atrule">jdbc</span><span class="token punctuation">:</span>
            <span class="token comment"># 因为我们使用的是 h2:file 方式，因此这里还是选择 always 始终创建数据库，不然不会自动创建表</span>
            <span class="token comment"># 如果我们使用的是 h2:mem 模式，则这里选择 embedded，SpringBoot会自行执行下面的 schema</span>
            <span class="token key atrule">initialize-schema</span><span class="token punctuation">:</span> always
            <span class="token key atrule">schema</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>schema<span class="token punctuation">-</span>h2.sql
            <span class="token key atrule">platform</span><span class="token punctuation">:</span> h2
    <span class="token key atrule">zhipuai</span><span class="token punctuation">:</span>
      <span class="token comment"># api-key 使用你自己申请的进行替换；如果为了安全考虑，可以通过启动参数进行设置</span>
      <span class="token key atrule">api-key</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>zhipuai<span class="token punctuation">-</span>api<span class="token punctuation">-</span>key<span class="token punctuation">}</span>
      <span class="token key atrule">chat</span><span class="token punctuation">:</span> <span class="token comment"># 聊天模型</span>
        <span class="token key atrule">options</span><span class="token punctuation">:</span>
          <span class="token key atrule">model</span><span class="token punctuation">:</span> GLM<span class="token punctuation">-</span>4<span class="token punctuation">-</span>Flash

<span class="token comment"># 修改日志级别</span>
<span class="token key atrule">logging</span><span class="token punctuation">:</span>
  <span class="token key atrule">level</span><span class="token punctuation">:</span>
    <span class="token key atrule">org.springframework.ai.chat.client.advisor.SimpleLoggerAdvisor</span><span class="token punctuation">:</span> debug
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明，虽然我们这里使用的是 H2，但是 <code>spring.ai.chat.memory.repository.jdbc.initialize-schema</code> 配置项，还是建议选择 <code>always</code>，因为上面配置的是使用文件来存储db；如果使用内存 <code>jdbc:h2:mem</code> 的方式，则这里可以选择 <code>embedded</code></p><figure><img src="`+d+`" alt="embeded是否创建表的关键判断逻辑" tabindex="0" loading="lazy"><figcaption>embeded是否创建表的关键判断逻辑</figcaption></figure><p>其次就是我们需要指定 <code>schema</code> 文件，这个文件，就是用来创建数据库表结构，这里我们使用 <code>h2</code> 的默认结构，因此这里我们使用 <code>classpath:schema-h2.sql</code></p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> SPRING_AI_CHAT_MEMORY
<span class="token punctuation">(</span>
    <span class="token identifier"><span class="token punctuation">\`</span>conversation_id<span class="token punctuation">\`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span>                                  <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">\`</span>content<span class="token punctuation">\`</span></span>         <span class="token keyword">TEXT</span>                                         <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">\`</span>type<span class="token punctuation">\`</span></span>            <span class="token keyword">ENUM</span> <span class="token punctuation">(</span><span class="token string">&#39;USER&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ASSISTANT&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;SYSTEM&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;TOOL&#39;</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">\`</span>timestamp<span class="token punctuation">\`</span></span>       <span class="token keyword">TIMESTAMP</span>                                    <span class="token operator">NOT</span> <span class="token boolean">NULL</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-初始化-chatmemory" tabindex="-1"><a class="header-anchor" href="#_4-初始化-chatmemory" aria-hidden="true">#</a> 4. 初始化 ChatMemory</h3><p>因为我们使用的是系统未提供支持的h2，因此无法使用自动注入的<code>ChatMemoryRepository</code>，因为它选择的Dialect是 <code>PostgresChatMemoryRepositoryDialect</code>，无法支持h2的使用场景</p><p>我们这里直接使用<code>MysqlChatMemoryRepositoryDialect</code>来作为h2的Dialect（当然也可以自行实现一个Dialect）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MemConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ChatMemory</span> <span class="token function">jdbcChatMemory</span><span class="token punctuation">(</span><span class="token class-name">JdbcTemplate</span> jdbcTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ChatMemoryRepository</span> chatMemoryRepository <span class="token operator">=</span> <span class="token class-name">JdbcChatMemoryRepository</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">jdbcTemplate</span><span class="token punctuation">(</span>jdbcTemplate<span class="token punctuation">)</span>
                <span class="token comment">// 在这里，指定不同数据库对应的Dialect</span>
                <span class="token punctuation">.</span><span class="token function">dialect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MysqlChatMemoryRepositoryDialect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token class-name">MessageWindowChatMemory</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">chatMemoryRepository</span><span class="token punctuation">(</span>chatMemoryRepository<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-chatclient-配置" tabindex="-1"><a class="header-anchor" href="#_5-chatclient-配置" aria-hidden="true">#</a> 5. ChatClient 配置</h3><p>然后通过<code>MessageChatMemoryAdvisor</code>来为<code>ChatClient</code>提供聊天历史能力支撑</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChatController</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ChatClient</span> chatClient<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ChatController</span><span class="token punctuation">(</span><span class="token class-name">ChatModel</span> chatModel<span class="token punctuation">,</span> <span class="token class-name">ChatMemory</span> chatMemory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>chatClient <span class="token operator">=</span> <span class="token class-name">ChatClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>chatModel<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">defaultAdvisors</span><span class="token punctuation">(</span><span class="token class-name">MessageChatMemoryAdvisor</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>chatMemory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        <span class="token keyword">new</span> <span class="token class-name">SimpleLoggerAdvisor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-示例测试" tabindex="-1"><a class="header-anchor" href="#_6-示例测试" aria-hidden="true">#</a> 6. 示例测试</h3><p>提供一个聊天接口，第一个参数为用户标识，用于区分用户的聊天记录</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChatController</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 聊天对话
     *
     * <span class="token keyword">@param</span> <span class="token parameter">user</span>
     * <span class="token keyword">@param</span> <span class="token parameter">msg</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/{user}/chat&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">chat</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> user<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> chatClient<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">user</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">advisors</span><span class="token punctuation">(</span>a <span class="token operator">-&gt;</span> a<span class="token punctuation">.</span><span class="token function">param</span><span class="token punctuation">(</span><span class="token class-name">ChatMemory</span><span class="token punctuation">.</span><span class="token constant">CONVERSATION_ID</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动成功之后，我们可以在h2-console中看到新增了一个表 <code>SPRING_AI_CHAT_MEMORY</code></p><figure><img src="`+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后进行多轮对话，看看效果，表现和我们预期一致，聊天记录被保存在数据库中</p><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="二、小结" tabindex="-1"><a class="header-anchor" href="#二、小结" aria-hidden="true">#</a> 二、小结</h2>',25),y=s("code",null,"spring-ai-starter-model-chat-memory-repository-jdbc",-1),f=s("p",null,"这里实现的是基于数据库来进行持久化，那么如果我不是用数据库，比如希望用文件或者redis来实现，又可以怎么做呢？",-1),_={href:"https://github.com/liuyueyi/spring-ai-demo/tree/master/advance-projects/A02-memory-jdbc-h2",target:"_blank",rel:"noopener noreferrer"};function E(A,C){const t=p("RouterLink"),c=p("ExternalLinkIcon");return l(),i("div",null,[v,s("p",null,[n("上面一篇文章介绍了 SpringAI官方提供的 jdbc start来实现持久化对话历史 "),a(t,{to:"/spring/springai/%E8%BF%9B%E9%98%B6%E7%AF%87/A01.%E4%BD%BF%E7%94%A8MySql%E6%8C%81%E4%B9%85%E5%8C%96%E5%AF%B9%E8%AF%9D%E5%8E%86%E5%8F%B2.html"},{default:e(()=>[n("使用MySql持久化对话历史")]),_:1}),n("，官方实现的几个数据库已经很有代表性了，接下来我们将看一下，如果沿用官方的思路，来为h2添加持久化对话历史功能。")]),g,b,s("p",null,[n("创建一个SpringAI项目，基本流程同 "),a(t,{to:"/spring/springai/%E5%9F%BA%E7%A1%80%E7%AF%87/01.%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AASpringAI-Demo%E5%B7%A5%E7%A8%8B.html"},{default:e(()=>[n("创建一个SpringAI-Demo工程")]),_:1})]),h,s("p",null,[n("本文介绍的是如何借助 "),y,n(" 来实现自定义的对话持久化，通过实现h2的Dialect，我们可以轻松实现自定义的持久化逻辑；若希望了解持久化的更多实现细节，可以查看上篇 "),a(t,{to:"/spring/springai/%E8%BF%9B%E9%98%B6%E7%AF%87/A01.%E4%BD%BF%E7%94%A8MySql%E6%8C%81%E4%B9%85%E5%8C%96%E5%AF%B9%E8%AF%9D%E5%8E%86%E5%8F%B2.html"},{default:e(()=>[n("使用MySql持久化对话历史")]),_:1})]),f,s("p",null,[n("文中所有涉及到的代码，可以到项目中获取 "),s("a",_,[n("https://github.com/liuyueyi/spring-ai-demo"),a(c)])])])}const M=o(m,[["render",E],["__file","A02.使用H2持久化对话历史.html.vue"]]);export{M as default};
