import{_ as e,V as p,W as o,Y as n,Z as s,$ as t,X as i,a1 as c,F as l}from"./framework-094145d2.js";const u={},r=n("h1",{id:"quick-task-动态脚本支持框架之任务动态加载",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#quick-task-动态脚本支持框架之任务动态加载","aria-hidden":"true"},"#"),s(" Quick-Task 动态脚本支持框架之任务动态加载")],-1),k=n("p",null,"前面几篇博文分别介绍了整个项目的基本架构，使用说明，以及整体框架的设计与实现初稿，接下来则进入更细节的实现篇，将整个工程中核心实现捞出来，从为什么这么设计到最终的实现给予说明",-1),d=n("p",null,"相关系列博文：",-1),v={href:"https://liuyueyi.github.io/hexblog/2018/07/02/180702-QuickTask%E5%8A%A8%E6%80%81%E8%84%9A%E6%9C%AC%E6%94%AF%E6%8C%81%E6%A1%86%E6%9E%B6%E6%95%B4%E4%BD%93%E4%BB%8B%E7%BB%8D%E7%AF%87/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://liuyueyi.github.io/hexblog/2018/07/19/180719-Quick-Task-%E5%8A%A8%E6%80%81%E8%84%9A%E6%9C%AC%E6%94%AF%E6%8C%81%E6%A1%86%E6%9E%B6%E4%B9%8B%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D%E7%AF%87/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://liuyueyi.github.io/hexblog/2018/07/23/180723-Quick-Task-%E5%8A%A8%E6%80%81%E8%84%9A%E6%9C%AC%E6%94%AF%E6%8C%81%E6%A1%86%E6%9E%B6%E4%B9%8B%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1%E7%AF%87/",target:"_blank",rel:"noopener noreferrer"},m=c(`<h2 id="i-任务动态加载" tabindex="-1"><a class="header-anchor" href="#i-任务动态加载" aria-hidden="true">#</a> I. 任务动态加载</h2><p>这个动态脚本调度框架，最大的一个功能点就是支持热加载了，何为热加载？</p><p>简单来说就是在程序不宕机的情况下，可以往里面添加新的任务，删除旧的任务，更新已有的任务等等，就好比飞机在天上飞的时候给它加油，就这么高端的操作（😊）</p><p>为了支持热加载，首先面临的问题就是如何判断有任务的新增/删除/修改？</p><h3 id="_1-任务监听的从0到1" tabindex="-1"><a class="header-anchor" href="#_1-任务监听的从0到1" aria-hidden="true">#</a> 1. 任务监听的从0到1</h3><p>要实现任务变更的监听，自然而然想到的一个方案就是起一个线程，不断的轮询，基本的逻辑无非是判断是否有任务的变更发生而已，也因此关注点就落在了如何判断任务是否有变更了</p><p>最简单粗暴直观的方法，就是记录之前的所有的任务，然后每次轮询时判断当前的所有任务与之前的所有任务是否有区别</p><p>再落到具体的实现上，则与任务的具体存储有关系了。很容易想到了几种任务存储方式有</p><ul><li>文件</li><li>数据库 （如mysql）</li><li>缓存 （如redis)</li></ul><h4 id="a-数据库存储方式" tabindex="-1"><a class="header-anchor" href="#a-数据库存储方式" aria-hidden="true">#</a> a. 数据库存储方式</h4><p>这种方法比较好想到，同时也好实现，所有的任务都直接存在DB的某张表中；只需要保证表中包含以下几个字段即可</p><ul><li>task: 具体的任务脚本逻辑</li><li>state: 任务的状态（表示运行，暂停等）</li><li>update: 任务的更新时间</li></ul><p>基于上面的三个属性，判断的逻辑就清晰了</p><ul><li>起一个check线程，不断的扫表，获取所有的任务</li><li>将当前获取的任务与上一次获取的任务进行对比</li><li>根据比对的结果，封装任务更新事件，抛给下游处理</li></ul><p>当然在db的场景下，还有一个更简单的方式，借助mysql的dbevent事件来处理任务的变更</p><ul><li>首先开启mysql的dbevent事件，即db中记录的新增删除变更都会抛出一个消息</li><li>监听dbevent，以此封装任务的更新事件，丢给下一层进行处理即可</li></ul><p><strong>说明：</strong></p><p>从个人的角度出发，在实际的应用场景中，基于DB的存储方案是比较合适的，然而我并没有去做这一个，因为相比于文件的方式，有点重量级了； 而我自己的实际项目中，文件方式已经足够解决我的需求了</p><h4 id="b-文件存储方式" tabindex="-1"><a class="header-anchor" href="#b-文件存储方式" aria-hidden="true">#</a> b. 文件存储方式</h4><p>这个可以说是最先想到，也是最容易实现的一种方式了。我的所有任务都放在指定的目录下，然后监听这个目录下所有文件的变动即可</p><p>QuickTask项目中，默认的实现方式，就是基于文件存储的动态任务监听，好处是简单，实现简单，理解简单，用起来也简单</p><h4 id="c-缓存存储方式" tabindex="-1"><a class="header-anchor" href="#c-缓存存储方式" aria-hidden="true">#</a> c. 缓存存储方式</h4><p>无非是拿缓存做db存储的思路，也没有啥其他的讲究，当然我并没有想过真的去拿缓存来实现，感觉这种实现方式有点非主流，当然也没有什么明显的优势</p><h3 id="_2-任务监听的实现" tabindex="-1"><a class="header-anchor" href="#_2-任务监听的实现" aria-hidden="true">#</a> 2. 任务监听的实现</h3><p>上面是基本上把我如何实现动态任务监听的想法都写出来了，接下来就是具体的实现了，采用本地文件来存储具体的任务脚本，那么任务变化监听，就转换为了目录下文件变动的监听了</p><p>到了这一步，具体的实现方案就出来了，要实现文件变动监听，jdk7就提供了<code>WatchService</code>，当然还有大名鼎鼎的 <code>commons-io</code>，两个都可以实现，下面贴出commons-io的实现方式</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskChangeWatcher</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SCRIPT_TYPE</span> <span class="token operator">=</span> <span class="token string">&quot;.groovy&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">registerWatcher</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">long</span> period <span class="token operator">=</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 使用commons-io的文件观察器，实现文件动态变动的监听</span>
            <span class="token class-name">FileAlterationObserver</span> observer <span class="token operator">=</span>
                    <span class="token keyword">new</span> <span class="token class-name">FileAlterationObserver</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token class-name">FileFilterUtils</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token class-name">FileFilterUtils</span><span class="token punctuation">.</span><span class="token function">fileFileFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            observer<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TaskChangeListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">FileAlterationMonitor</span> monitor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileAlterationMonitor</span><span class="token punctuation">(</span>period<span class="token punctuation">,</span> observer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            monitor<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;register watcher for script task change error! file: {} e:{}&quot;</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">TaskChangeListener</span> <span class="token keyword">extends</span> <span class="token class-name">FileAlterationListenerAdaptor</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">ignore</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token constant">SCRIPT_TYPE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addTask</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">ITask</span> script <span class="token operator">=</span> <span class="token class-name">ScriptLoadUtil</span><span class="token punctuation">.</span><span class="token function">loadScript</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>script <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 更新context中缓存，并启动任务</span>
            <span class="token class-name">ScriptTaskDecorate</span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ScriptTaskDecorate</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">TaskContainer</span><span class="token punctuation">.</span><span class="token function">registerTask</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFileCreate</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ignore</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">addTask</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 在线程池中执行task</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;add task : {}&quot;</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFileChange</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ignore</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token function">addTask</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 在线程池中执行task</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;task changed : {}&quot;</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFileDelete</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">ignore</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 文件删除，表示需要卸载旧的task</span>
            <span class="token class-name">TaskContainer</span><span class="token punctuation">.</span><span class="token function">removeTask</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;task delete: {}&quot;</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的实现，核心就是注册目录变动的监听，当出现文件的变化时，判断是否为groovy脚本，然后加载任务，并丢给任务容器进行调度执行</p><p>对于文件变动的监听的具体方案和讲解，如有疑问可以参考我之前的一篇博文:</p>`,29),E={href:"https://liuyueyi.github.io/hexblog/2018/02/08/Java%E5%8F%AF%E4%BB%A5%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E5%8F%98%E5%8A%A8%E7%9A%84%E7%9B%91%E5%90%AC/",target:"_blank",rel:"noopener noreferrer"},_=n("h2",{id:"ii-其他",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ii-其他","aria-hidden":"true"},"#"),s(" II. 其他")],-1),f=n("h3",{id:"_0-相关",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0-相关","aria-hidden":"true"},"#"),s(" 0. 相关")],-1),g=n("p",null,[n("strong",null,"博文：")],-1),y={href:"https://liuyueyi.github.io/hexblog/2018/06/28/180628-%E5%8A%A8%E6%80%81%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E6%A1%86%E6%9E%B6%E6%83%B3%E6%B3%95%E7%AF%87/",target:"_blank",rel:"noopener noreferrer"},A={href:"https://blog.hhui.top/hexblog/2018/07/02/180702-QuickTask%E5%8A%A8%E6%80%81%E8%84%9A%E6%9C%AC%E6%94%AF%E6%8C%81%E6%A1%86%E6%9E%B6%E6%95%B4%E4%BD%93%E4%BB%8B%E7%BB%8D%E7%AF%87/",target:"_blank",rel:"noopener noreferrer"},B={href:"https://liuyueyi.github.io/hexblog/2018/07/23/180723-Quick-Task-%E5%8A%A8%E6%80%81%E8%84%9A%E6%9C%AC%E6%94%AF%E6%8C%81%E6%A1%86%E6%9E%B6%E4%B9%8B%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1%E7%AF%87/",target:"_blank",rel:"noopener noreferrer"},w=n("p",null,[n("strong",null,"项目：")],-1),x={href:"https://github.com/liuyueyi/quick-task",target:"_blank",rel:"noopener noreferrer"},F={id:"_1-一灰灰blog-https-liuyueyi-github-io-hexblog",tabindex:"-1"},T=n("a",{class:"header-anchor",href:"#_1-一灰灰blog-https-liuyueyi-github-io-hexblog","aria-hidden":"true"},"#",-1),C={href:"https://liuyueyi.github.io/hexblog",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://liuyueyi.github.io/hexblog",target:"_blank",rel:"noopener noreferrer"},q=n("p",null,"一灰灰的个人博客，记录所有学习和工作中的博文，欢迎大家前去逛逛",-1),S=n("h3",{id:"_2-声明",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-声明","aria-hidden":"true"},"#"),s(" 2. 声明")],-1),D=n("p",null,"尽信书则不如，已上内容，纯属一家之言，因个人能力有限，难免有疏漏和错误之处，如发现bug或者有更好的建议，欢迎批评指正，不吝感激",-1),I={href:"https://weibo.com/p/1005052169825577/home",target:"_blank",rel:"noopener noreferrer"},N=n("li",null,"QQ： 一灰灰/3302797840",-1),P=n("h3",{id:"_3-扫描关注",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-扫描关注","aria-hidden":"true"},"#"),s(" 3. 扫描关注")],-1),L=n("p",null,[n("strong",null,"一灰灰blog")],-1),V=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/liuyueyi/Source/master/img/info/blogInfoV2.png",alt:"QrCode",tabindex:"0",loading:"lazy"}),n("figcaption",null,"QrCode")],-1),O=n("p",null,[n("strong",null,"知识星球")],-1),j=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/liuyueyi/Source/master/img/info/goals.png",alt:"goals",tabindex:"0",loading:"lazy"}),n("figcaption",null,"goals")],-1);function W(U,M){const a=l("ExternalLinkIcon");return p(),o("div",null,[r,k,d,n("ul",null,[n("li",null,[n("a",v,[s("180702-QuickTask动态脚本支持框架整体介绍篇"),t(a)])]),n("li",null,[n("a",h,[s("180719-Quick-Task 动态脚本支持框架之使用介绍篇"),t(a)])]),n("li",null,[n("a",b,[s("180723-Quick-Task 动态脚本支持框架之结构设计篇"),t(a)])])]),i(" more "),m,n("ul",null,[n("li",null,[n("a",E,[s("Java可以如何实现文件变动的监听"),t(a)])])]),_,f,g,n("ul",null,[n("li",null,[n("a",y,[s("180628-动态任务执行框架想法篇"),t(a)])]),n("li",null,[n("a",A,[s("180702-QuickTask动态脚本支持框架整体介绍篇"),t(a)])]),n("li",null,[n("a",B,[s("180723-Quick-Task 动态脚本支持框架之结构设计篇"),t(a)])])]),w,n("ul",null,[n("li",null,[n("a",x,[s("https://github.com/liuyueyi/quick-task"),t(a)])])]),n("h3",F,[T,s(" 1. "),n("a",C,[s("一灰灰Blog"),t(a)]),s("： "),n("a",Q,[s("https://liuyueyi.github.io/hexblog"),t(a)])]),q,S,D,n("ul",null,[n("li",null,[s("微博地址: "),n("a",I,[s("小灰灰Blog"),t(a)])]),N]),P,L,V,O,j])}const z=e(u,[["render",W],["__file","180729-Quick-Task-动态脚本支持框架之任务动态加载.html.vue"]]);export{z as default};
