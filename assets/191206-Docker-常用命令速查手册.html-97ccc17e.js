import{_ as s,V as a,W as n,X as e,Y as i,a1 as c}from"./framework-094145d2.js";const l={},d=i("p",null,"记录一下docker的日常使用命令，本文主要针对linux + mac操作系统而言，window是否适用不太确定，谨慎使用",-1),r=c(`<h3 id="_1-docker进程" tabindex="-1"><a class="header-anchor" href="#_1-docker进程" aria-hidden="true">#</a> 1. docker进程</h3><p>docker进程启动、停止、重启，常见的三种case</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 启动docker</span>
<span class="token function">service</span> <span class="token function">docker</span> start
<span class="token comment"># 关机docker</span>
<span class="token function">service</span> <span class="token function">docker</span> stop
<span class="token comment"># 重启docker</span>
<span class="token function">service</span> <span class="token function">docker</span> restart
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-镜像操作" tabindex="-1"><a class="header-anchor" href="#_2-镜像操作" aria-hidden="true">#</a> 2. 镜像操作</h3><p>镜像作为容器执行的前提条件，一般需要掌握的几个命令无非是搜索，下载，删除，创建</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 镜像列表</span>
<span class="token function">docker</span> images
<span class="token comment"># 检索镜像, 从镜像仓库中检索</span>
<span class="token function">docker</span> search xxx
<span class="token comment"># 下载镜像</span>
<span class="token function">docker</span> pull xxx
<span class="token comment"># 删除镜像</span>
<span class="token function">docker</span> rmi xxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于创建镜像，有必要稍微详细一点点</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 通过容器创建镜像</span>
<span class="token function">docker</span> commit <span class="token parameter variable">-m</span><span class="token operator">=</span><span class="token string">&quot;首次提交&quot;</span> <span class="token parameter variable">-a</span><span class="token operator">=</span><span class="token string">&quot;一灰灰Blog&quot;</span> dd85eb055fe8 yh/centos:v0.1
<span class="token comment"># 镜像历史查询</span>
<span class="token function">docker</span> <span class="token function">history</span> yh/centos
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的几个参数进行说明</p><ul><li><code>-m</code> 和git的提交一样，后面跟上描述信息</li><li><code>-a</code> 版权声明，这个东西简单来讲就是宣示主权，这个镜像我承包了...</li><li><code>dd85eb055fe8</code> 容器id</li><li><code>yhh/quick-os:0.1</code> 创建的镜像名</li></ul><h3 id="_3-容器操作" tabindex="-1"><a class="header-anchor" href="#_3-容器操作" aria-hidden="true">#</a> 3. 容器操作</h3><p>接下来就是正菜了，容器的各种操作，启动，关闭，重启，日志查询以及各种进入容器内部搞事情</p><h4 id="a-run" tabindex="-1"><a class="header-anchor" href="#a-run" aria-hidden="true">#</a> a. run</h4><p>万事开头第一步，加载镜像，创建容器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run 镜像名:版本
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>run后面可以跟很多的参数，比如容器暴露端口指定，存储映射，权限等等，由于参数过多，下面只给出几个不同的例子，来具体的演示参数可以怎么加</p><p><strong>case1: 创建并后台执行</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-i</span> <span class="token parameter variable">-t</span> <span class="token parameter variable">-d</span> centos:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>其中关键参数为<code>-d</code>，指定容器运行与前台或者后台，不加上时前台</li><li><code>-i</code>: 打开STDIN，用于控制台交互</li><li><code>-t</code>: 支持终端登录</li></ul><p><strong>case2: 运行一个带命令在后台不断执行的容器</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> centos:latest <span class="token function">ping</span> www.baidu.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>case3: 运行一个在后台不断执行的容器，同时带有命令，程序被终止后还能重启继续跑</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--restart</span><span class="token operator">=</span>always centos:latest <span class="token function">ping</span> www.baidu.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>case4: 指定容器名</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span><span class="token operator">=</span>yhh_centos centos:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>case5: 暴露容器端口80，并与宿主机端口8080绑定</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span><span class="token operator">=</span>yhh_centos <span class="token parameter variable">-p</span> <span class="token number">8080</span>:80 centos:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>case6: 指定容器与宿主机目录（/home/yihui/html/www）共享</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span><span class="token operator">=</span>yhh_centos <span class="token parameter variable">-v</span> /home/yihui/html/www:/var/www centos:latest
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="b-基操" tabindex="-1"><a class="header-anchor" href="#b-基操" aria-hidden="true">#</a> b. 基操</h4><p>容器创建完毕之后，就是一些基本操作了，启动、停止、重启、删除</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看容器列表， 列出所有的容器</span>
<span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> 
<span class="token comment"># 启动容器，start后面可以跟上容器名，或者容器id</span>
<span class="token function">docker</span> start xxx  <span class="token comment"># (这里的xxx可以是容器名：yhh_centos 也可以是容器id：f57398ab22c5)</span>
<span class="token comment"># 关闭容器</span>
<span class="token function">docker</span> stop xxx
<span class="token comment"># 重启</span>
<span class="token function">docker</span> restart xxx
<span class="token comment"># 删除</span>
<span class="token function">docker</span> <span class="token function">rm</span> xxx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在查看容器列表时，如果某个容器的启动参数特别长，直接使用<code>docker ps -a</code>会发现看不到完整的启动命令，这个时候可以带上参数<code>--no-trunc</code>来显示完整命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span> --no-trunc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="c-进阶" tabindex="-1"><a class="header-anchor" href="#c-进阶" aria-hidden="true">#</a> c. 进阶</h4><p>接下来进入一些容器的高级操作技巧（实际上也并没有特别酷炫）</p><p>为了演示一些进阶的内容，这里创建一个容器作为测试</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span><span class="token operator">=</span>yhhos centos
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>容器日志查询</strong></p><p>日志，定位问题的神器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查询xxx容器的日志</span>
<span class="token function">docker</span> logs yhhos
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>基本上不太会直接使用上面的命令，因为上面把所有的日志都打印出来了，可以直接晃瞎我们的钛合金x眼</p><p>一般日志可以加两个参数 <code>-f</code>, <code>-t</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> logs <span class="token parameter variable">-f</span> <span class="token parameter variable">-t</span> <span class="token parameter variable">--since</span><span class="token operator">=</span><span class="token string">&quot;2019-05-11&quot;</span> <span class="token parameter variable">--tail</span><span class="token operator">=</span><span class="token number">10</span> yhhos
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>--since</code> : 此参数指定了输出日志开始日期，即只输出指定日期之后的日志。</li><li><code>-f</code> : 查看实时日志</li><li><code>-t</code> : 查看日志产生的日期</li><li><code>--tail=10</code> : 查看最后的10条日志。</li></ul><p><strong>文件拷贝</strong></p><p>将容器的某个文件捞出来；或者强塞，一个cp即可</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 将当前目录的test.md文件拷贝到容器的 /tmp 目录下</span>
<span class="token function">docker</span> <span class="token function">cp</span> test.md yhhos:/tmp

<span class="token comment"># 将容器的/tmp/test.md目录拷贝到当前目录下</span>
<span class="token function">docker</span> <span class="token function">cp</span> yhhos:/tmp/test.md ./out.md
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>进入容器</strong></p><p>进入容器内部，然后就可以为所欲为了...</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> yhhos /bin/bash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>获取容器所有信息</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> inspect yhhos
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,53);function o(t,p){return a(),n("div",null,[d,e(" more "),r])}const m=s(l,[["render",o],["__file","191206-Docker-常用命令速查手册.html.vue"]]);export{m as default};
