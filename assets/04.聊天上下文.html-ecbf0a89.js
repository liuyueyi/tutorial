import{_ as c,V as i,W as l,Y as s,Z as n,$ as a,a0 as u,a1 as p,F as t}from"./framework-094145d2.js";const r="/tutorial/imgs/column/springai/04-1.webp",d="/tutorial/imgs/column/springai/04-2.webp",k="/tutorial/imgs/column/springai/04-3.webp",m={},v=p(`<h1 id="_04-聊天上下文" tabindex="-1"><a class="header-anchor" href="#_04-聊天上下文" aria-hidden="true">#</a> 04.聊天上下文</h1><p>大模型本身是无状态的，即你每次和它聊天，对它而言都是一轮全新的对话。但是，这个和我们实际体验大模型产品时，似乎不一样，在聊天的过程中，大模型明显是知道我们之前的问答内容、并可以基于之前的问答进行多伦的沟通，那这是怎么实现的呢？</p><p>具体实现的原理也很简单，你和大模型的对话时，会将你们之前的对话内容也一并传给大模型，即：对于大模型而言，你的一次新的对话，它实际上把你们之前的所有对话都过了一遍；更专业一点的说法是你们的对话 是基于一个上下文，这个上下文会包含你之前和模型交互的所有内容。</p><p>若希望实现多轮对话，则每次和模型进行对话时，需要将之前和模型交互的所有内容都传递给模型，这样模型才能基于这些内容进行多轮的沟通。</p><h2 id="一、实例演示" tabindex="-1"><a class="header-anchor" href="#一、实例演示" aria-hidden="true">#</a> 一、实例演示</h2><h3 id="_1-基础知识点" tabindex="-1"><a class="header-anchor" href="#_1-基础知识点" aria-hidden="true">#</a> 1. 基础知识点</h3><p>SpringAI提供了自动装备的<code>ChatMemory</code> bean供我们直接注入使用</p><p>默认底层使用基于内存的方式存储聊天上下文(<code>InMemoryChatMemoryRepository</code>)，除了它之外，SpringAI还提供了基于数据库的存储方式</p><ul><li><code>JdbcChatMemoryRepository</code>: 支持多种关系型数据库，适用于需要持久化存储聊天记忆的场景，使用时需要添加 <code>org.springframework.ai:spring-ai-starter-model-chat-memory-repository-jdbc</code> 的依赖</li><li><code>CassandraChatMemoryRepository</code>: 基于 Apache Cassandra 实现消息存储，适用于需要高可用、持久化、可扩展及利用 TTL 特性的聊天记忆持久化场景；采用时间序列 Schema，完整记录历史聊天窗口，使用时添加 <code>org.springframework.ai:spring-ai-starter-model-chat-memory-repository-cassandra</code> 的依赖</li><li><code>Neo4jChatMemoryRepository</code>: 利用 Neo4j 将聊天消息存储为属性图中的节点与关系，适用于需发挥 Neo4j 图数据库特性的聊天记忆持久化场景。 使用时添加 <code>org.springframework.ai:spring-ai-starter-model-chat-memory-repository-neo4j</code>的依赖</li></ul><p>为了避免对话内容超过大模型的上下文限制， 使用<code>MessageWindowChatMemory</code>实现管理对话历史，<code>MessageWindowChatMemory</code> 维护固定容量的消息窗口（默认 20 条）。当消息超限时，自动移除较早的对话消息（始终保留系统消息）。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">MessageWindowChatMemory</span> memory<span class="token operator">=</span><span class="token class-name">MessageWindowChatMemory</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">maxMessages</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此为 Spring AI 自动配置 ChatMemory Bean 时采用的默认消息类型。</p><p>在使用 <code>ChatClient API</code>时，可通过注入 <code>ChatMemory</code> 实现来维护跨多轮交互的会话上下文。接下来我们通过一个案例体验一下实际的效果</p><h3 id="_2-项目初始化" tabindex="-1"><a class="header-anchor" href="#_2-项目初始化" aria-hidden="true">#</a> 2. 项目初始化</h3>`,14),h=p(`<p>创建一个MVC的API，用于提供与大模型的交互</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChatController</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ZhiPuAiChatModel</span> chatModel<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ChatMemory</span> chatMemory<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ChatClient</span> chatClient<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token class-name">ChatController</span><span class="token punctuation">(</span><span class="token class-name">ZhiPuAiChatModel</span> chatModel<span class="token punctuation">,</span> <span class="token class-name">ChatMemory</span> chatMemory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>chatModel <span class="token operator">=</span> chatModel<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>chatMemory <span class="token operator">=</span> chatMemory<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>chatClient <span class="token operator">=</span> <span class="token class-name">ChatClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>chatModel<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">defaultSystem</span><span class="token punctuation">(</span><span class="token string">&quot;你现在是狂放不羁的诗仙李白，我们现在开始对话&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">defaultAdvisors</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleLoggerAdvisor</span><span class="token punctuation">(</span><span class="token class-name">ModelOptionsUtils</span><span class="token operator">::</span><span class="token function">toJsonStringPrettyPrinter</span><span class="token punctuation">,</span> <span class="token class-name">ModelOptionsUtils</span><span class="token operator">::</span><span class="token function">toJsonStringPrettyPrinter</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        <span class="token comment">// 每次交互时从记忆库检索历史消息，并将其作为消息集合注入提示词</span>
                        <span class="token class-name">MessageChatMemoryAdvisor</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>chatMemory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的初始化中，我们制定了ChatClient的默认系统角色，指定了两个<code>Advisor</code></p><ul><li>SimpleLoggerAdvisor: 主要用于打印大模型的输入输出，以及一些额外的信息</li><li>MessageChatMemoryAdvisor: 主要用于从默认的<code>ChatMemory</code>中获取历史消息，并将其作为消息集合注入提示词</li></ul><h3 id="_3-实现测试接口" tabindex="-1"><a class="header-anchor" href="#_3-实现测试接口" aria-hidden="true">#</a> 3. 实现测试接口</h3><p>基于上面实例的ChatClient，我们来创建一个与大模型进行多轮对话的接口，这个实现与前面介绍的demo并无区别</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 基于ChatClient实现返回结果的结构化映射
 *
 * <span class="token keyword">@param</span> <span class="token parameter">msg</span>
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/ai/generate&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;msg&quot;</span><span class="token punctuation">,</span> defaultValue <span class="token operator">=</span> <span class="token string">&quot;你好&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> chatClient<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们访问接口，并输入内容，看看效果</p><figure><img src="`+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从上面的截图中打印的大模型交互日志也可以看出，大模型会基于我们之前输入的内容进行多轮的沟通，并返回结果</p><p>因为默认的ChatMemory是基于内存的（ConcurrentHashMap），所以每次重启服务，都会丢失之前的对话内容，有兴趣的小伙伴可以试试</p><h3 id="_4-会话隔离" tabindex="-1"><a class="header-anchor" href="#_4-会话隔离" aria-hidden="true">#</a> 4. 会话隔离</h3><p>上面虽然实现了多伦对话，但是有一个比较大的问题，就是多个用户之间会话内容会相互干扰，比如用户A和用户B进行对话，用户B的会话内容会干扰用户A的会话内容，这显然是不符合实际需求的。</p><p>为了做好身份隔离，我们希望在记忆库中检索历史对话时，可以有一个区分，同样是借助 <code>advisor</code> 来实现</p><p>为了与上面的进行区分，我们调整一下ChatClient的初始化，对话角色可以由用户自由指定</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 带参数的默认系统消息</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>sessionClient <span class="token operator">=</span> <span class="token class-name">ChatClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>chatModel<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">defaultSystem</span><span class="token punctuation">(</span><span class="token string">&quot;你现在是{role}，我们显示开始对话&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">defaultAdvisors</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleLoggerAdvisor</span><span class="token punctuation">(</span><span class="token class-name">ModelOptionsUtils</span><span class="token operator">::</span><span class="token function">toJsonStringPrettyPrinter</span><span class="token punctuation">,</span> <span class="token class-name">ModelOptionsUtils</span><span class="token operator">::</span><span class="token function">toJsonStringPrettyPrinter</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token comment">// 每次交互时从记忆库检索历史消息，并将其作为消息集合注入提示词</span>
                <span class="token class-name">MessageChatMemoryAdvisor</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>chatMemory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们创建一个会话隔离的接口，这个接口会根据用户ID进行会话隔离，即同一个用户ID的会话内容不会相互干扰</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/ai/{user}/gen&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">gen2</span><span class="token punctuation">(</span>
        <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> user<span class="token punctuation">,</span>
        <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;role&quot;</span><span class="token punctuation">,</span> defaultValue <span class="token operator">=</span> <span class="token string">&quot;狂放不羁的诗仙李白&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> role<span class="token punctuation">,</span>
        <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;msg&quot;</span><span class="token punctuation">,</span> defaultValue <span class="token operator">=</span> <span class="token string">&quot;你好&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> sessionClient<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token comment">// 系统词模板</span>
            <span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span>sp <span class="token operator">-&gt;</span> sp<span class="token punctuation">.</span><span class="token function">param</span><span class="token punctuation">(</span><span class="token string">&quot;role&quot;</span><span class="token punctuation">,</span> role<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">user</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
            <span class="token comment">// 设置会话ID，实现单独会话</span>
            <span class="token punctuation">.</span><span class="token function">advisors</span><span class="token punctuation">(</span>a <span class="token operator">-&gt;</span> a<span class="token punctuation">.</span><span class="token function">param</span><span class="token punctuation">(</span><span class="token class-name">ChatMemory</span><span class="token punctuation">.</span><span class="token constant">CONVERSATION_ID</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从上面的实现也可以看出，通过设置会话ID，实现了会话的隔离，用户A和用户B的会话内容不会相互干扰</p><h3 id="_5-chatmodel显示管理上下文" tabindex="-1"><a class="header-anchor" href="#_5-chatmodel显示管理上下文" aria-hidden="true">#</a> 5. ChatModel显示管理上下文</h3><p>上面介绍的是封装后的ChatClient，我们也可以直接使用<code>ChatModel</code>进行会话，显示管理上下文</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 创建 memory 实例</span>
<span class="token class-name">ChatMemory</span> chatMemory <span class="token operator">=</span> <span class="token class-name">MessageWindowChatMemory</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> conversationId <span class="token operator">=</span> <span class="token string">&quot;007&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 首次交互</span>
<span class="token class-name">UserMessage</span> userMessage1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserMessage</span><span class="token punctuation">(</span><span class="token string">&quot;My name is James Bond&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
chatMemory<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>conversationId<span class="token punctuation">,</span> userMessage1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ChatResponse</span> response1 <span class="token operator">=</span> chatModel<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Prompt</span><span class="token punctuation">(</span>chatMemory<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>conversationId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
chatMemory<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>conversationId<span class="token punctuation">,</span> response1<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 第二次交互</span>
<span class="token class-name">UserMessage</span> userMessage2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserMessage</span><span class="token punctuation">(</span><span class="token string">&quot;What is my name?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
chatMemory<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>conversationId<span class="token punctuation">,</span> userMessage2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ChatResponse</span> response2 <span class="token operator">=</span> chatModel<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Prompt</span><span class="token punctuation">(</span>chatMemory<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>conversationId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
chatMemory<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>conversationId<span class="token punctuation">,</span> response2<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-其他advisor" tabindex="-1"><a class="header-anchor" href="#_6-其他advisor" aria-hidden="true">#</a> 6. 其他Advisor</h3><p>上面介绍的是基于<code>MessageChatMemoryAdvisor</code>将ChatMemory注入到大模型，除此之外，SpringAI还内置了</p><ul><li><code>PromptChatMemoryAdvisor</code>: 区别于<code>MessageChatMemoryAdvisor</code>将多伦对话（包含内容、角色）返回给大模型，<code>PromptChatMemoryAdvisor</code>主要是将消息内容以文本的方式追加到系统提示词中</li><li><code>VectorStoreChatMemoryAdvisor</code>: 通过指定 <code>VectorStore</code> 实现管理会话记忆。每次交互时从向量存储检索历史对话，并以纯文本形式追加至系统（system）消息。</li></ul><p>还是根据一个实际的对比看看<code>MessageChatMemoryAdvisor</code>与<code>PromptChatMemoryAdvisor</code>的区别：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">this</span><span class="token punctuation">.</span>promptClient <span class="token operator">=</span> <span class="token class-name">ChatClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>chatModel<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">defaultSystem</span><span class="token punctuation">(</span><span class="token string">&quot;你现在是狂放不羁的诗仙李白，我们现在开始对话&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">defaultAdvisors</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleLoggerAdvisor</span><span class="token punctuation">(</span><span class="token class-name">ModelOptionsUtils</span><span class="token operator">::</span><span class="token function">toJsonStringPrettyPrinter</span><span class="token punctuation">,</span> <span class="token class-name">ModelOptionsUtils</span><span class="token operator">::</span><span class="token function">toJsonStringPrettyPrinter</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
              <span class="token comment">// 每次交互时从记忆库检索历史消息，并将其作为消息集合注入提示词</span>
              <span class="token class-name">PromptChatMemoryAdvisor</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>chatMemory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/ai/gen3&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">gen3</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;msg&quot;</span><span class="token punctuation">,</span> defaultValue <span class="token operator">=</span> <span class="token string">&quot;你好&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> promptClient<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+k+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>系统提示词的文本内容如下</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>你现在是狂放不羁的诗仙李白，我们现在开始对话

Use the conversation memory from the MEMORY section to provide accurate answers.

---------------------
MEMORY:
USER:你是谁
ASSISTANT:吾乃诗仙李白是也，何方神圣，敢来与吾对话？
USER:你是谁
ASSISTANT:哈哈，老夫李白，号青莲居士，唐代著名诗人，人称诗仙。世人皆知吾好酒，善作诗，今幸会阁下，有何见教？
USER:你是谁
ASSISTANT:吾乃诗仙李白是也，号青莲居士，唐代著名诗人，人称诗仙。世人皆知吾好酒，善作诗，今幸会阁下，有何见教？
---------------------
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的内容也可以看出，<code>PromptChatMemoryAdvisor</code>将多轮对话（包含内容、角色）拼接成文本的方式，放进了系统提示词中；从数据结构上看 <code>List&lt;Message&gt;</code> 只有两个，一个是System消息，一个是用户新加的User消息</p><h2 id="二、小结" tabindex="-1"><a class="header-anchor" href="#二、小结" aria-hidden="true">#</a> 二、小结</h2><p>本文主要从使用层面介绍了SpringAI中如何实现多伦对话，其中有几个关键概念</p><ul><li>ChatMemory: 会话记忆，SpringAI内置了基于内存的会话记忆，也可以基于其他数据源进行会话记忆，如向量存储、数据库、Redis等</li><li>ChatMemoryRepository：会话记忆的存储，SpringAI内置了基于内存的会话记忆存储，默认使用基于<code>ConcurrentHashMap</code>的会话记忆存储 <code>InMemoryChatMemoryRepository</code><ul><li>对于有持久化诉求的，可以考虑 <code>JdbcChatMemoryRepository</code>, <code>CassandraChatMemoryRepository</code>, <code>Neo4jChatMemoryRepository</code></li></ul></li><li>MessageWindowChatMemory：会话记忆的窗口</li><li>Advisor: 会话记忆的注入，SpringAI内置了多种会话记忆的注入方式，常见的有<code>MessageChatMemoryAdvisor</code>、<code>PromptChatMemoryAdvisor</code>、<code>VectorStoreChatMemoryAdvisor</code></li></ul><p>使用<code>ChatMemory</code>进行会话记忆时，推荐使用<code>ChatClient</code>方式，借助<code>Advisor</code>进行注入</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 初始化ChatClient</span>
<span class="token class-name">ChatClient</span> sessionClient <span class="token operator">=</span> <span class="token class-name">ChatClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>chatModel<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">defaultSystem</span><span class="token punctuation">(</span><span class="token string">&quot;你现在是{role}，我们显示开始对话&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">defaultAdvisors</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleLoggerAdvisor</span><span class="token punctuation">(</span><span class="token class-name">ModelOptionsUtils</span><span class="token operator">::</span><span class="token function">toJsonStringPrettyPrinter</span><span class="token punctuation">,</span> <span class="token class-name">ModelOptionsUtils</span><span class="token operator">::</span><span class="token function">toJsonStringPrettyPrinter</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token comment">// 每次交互时从记忆库检索历史消息，并将其作为消息集合注入提示词</span>
            <span class="token class-name">MessageChatMemoryAdvisor</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>chatMemory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// AI交互</span>
sessionClient<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">// 系统词模板</span>
        <span class="token punctuation">.</span><span class="token function">system</span><span class="token punctuation">(</span>sp <span class="token operator">-&gt;</span> sp<span class="token punctuation">.</span><span class="token function">param</span><span class="token punctuation">(</span><span class="token string">&quot;role&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;狂放不羁的李白&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">user</span><span class="token punctuation">(</span><span class="token string">&quot;帮我写首诗&quot;</span><span class="token punctuation">)</span>
        <span class="token comment">// 设置会话ID，实现单独会话</span>
        <span class="token punctuation">.</span><span class="token function">advisors</span><span class="token punctuation">(</span>a <span class="token operator">-&gt;</span> a<span class="token punctuation">.</span><span class="token function">param</span><span class="token punctuation">(</span><span class="token class-name">ChatMemory</span><span class="token punctuation">.</span><span class="token constant">CONVERSATION_ID</span><span class="token punctuation">,</span> <span class="token string">&quot;112&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,37),g={href:"https://github.com/liuyueyi/spring-ai-demo/tree/master/S04-chat-memory",target:"_blank",rel:"noopener noreferrer"};function b(y,f){const e=t("RouterLink"),o=t("ExternalLinkIcon");return i(),l("div",null,[v,s("p",null,[n("首先我们需要创建一个SpringAI的项目，基本流程同 "),a(e,{to:"/spring/springai/%E5%9F%BA%E7%A1%80%E7%AF%87/01.%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AASpringAI-Demo%E5%B7%A5%E7%A8%8B.html"},{default:u(()=>[n("创建一个SpringAI-Demo工程")]),_:1})]),h,s("p",null,[n("文中所有涉及到的代码，可以到项目中获取 "),s("a",g,[n("https://github.com/liuyueyi/spring-ai-demo"),a(o)])])])}const C=c(m,[["render",b],["__file","04.聊天上下文.html.vue"]]);export{C as default};
