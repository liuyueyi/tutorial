import{_ as a,V as n,W as s,a1 as t}from"./framework-094145d2.js";const o={},e=t(`<blockquote><p>这里记录JDK8+之后的新的特性</p></blockquote><p>Java 8（2014年发布）到 Java 21（2023年发布）经历了多次迭代，新增了大量特性和改进。以下是主要版本（Java 9 到 Java 21）中值得关注的新特性分类整理：</p><hr><h3 id="一、语言特性改进" tabindex="-1"><a class="header-anchor" href="#一、语言特性改进" aria-hidden="true">#</a> <strong>一、语言特性改进</strong></h3><ol><li><p><strong>模块化系统（Java 9）</strong></p><ul><li><strong>Jigsaw 项目</strong>：引入模块化（<code>module-info.java</code>），解决 JAR 依赖和封装问题，提升安全性和可维护性。</li></ul></li><li><p><strong>局部变量类型推断（Java 10）</strong></p><ul><li><strong><code>var</code> 关键字</strong>：允许在局部变量声明时省略显式类型（如 <code>var list = new ArrayList&lt;String&gt;();</code>）。</li></ul></li><li><p><strong>文本块（Java 15 正式支持）</strong></p><ul><li><strong>多行字符串</strong>：使用 <code>&quot;&quot;&quot; ... &quot;&quot;&quot;</code> 简化 HTML、JSON 等多行文本的编写。</li></ul></li><li><p><strong>模式匹配（逐步引入）</strong></p><ul><li><strong><code>instanceof</code> 模式匹配（Java 16）</strong>：直接提取对象属性，如 <code>if (obj instanceof String s) { ... }</code>。</li><li><strong><code>switch</code> 表达式（Java 14）</strong>：支持箭头语法和返回值，避免 <code>break</code> 的繁琐。</li><li><strong>模式匹配 <code>switch</code>（Java 21 正式）</strong>：支持类型匹配和复杂条件，例如：<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token class-name">Integer</span> i <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Integer: &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> <span class="token class-name">String</span> s when s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Long string&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>记录类（Record，Java 16 正式）</strong></p><ul><li>简化不可变数据类的定义，自动生成 <code>equals()</code>、<code>hashCode()</code> 等方法：<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">record</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p><strong>密封类（Sealed Classes，Java 17 正式）</strong></p><ul><li>限制类的继承关系，明确子类范围：<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token keyword">permits</span> <span class="token class-name">Circle</span><span class="token punctuation">,</span> <span class="token class-name">Square</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul></li><li><p><strong>字符串模板（Java 21 预览）</strong></p><ul><li>类似其他语言的模板插值功能，例如：<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span><span class="token string">&quot;Hello \\{name}!&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ol><hr><h3 id="二、api-增强" tabindex="-1"><a class="header-anchor" href="#二、api-增强" aria-hidden="true">#</a> <strong>二、API 增强</strong></h3><ol><li><p><strong>新的集合工厂方法（Java 9）</strong></p><ul><li>快速创建不可变集合：<code>List.of(&quot;a&quot;, &quot;b&quot;)</code>、<code>Set.of(1, 2)</code>、<code>Map.of(&quot;k&quot;, &quot;v&quot;)</code>。</li></ul></li><li><p><strong>Stream API 增强</strong></p><ul><li><strong><code>takeWhile</code>/<code>dropWhile</code>（Java 9）</strong>：根据条件截取流。</li><li><strong><code>Collectors.toUnmodifiableList()</code>（Java 10）</strong>：生成不可变集合。</li></ul></li><li><p><strong>HTTP/2 客户端（Java 11 正式）</strong></p><ul><li>支持异步请求的现代 HTTP 客户端（<code>java.net.http.HttpClient</code>）。</li></ul></li><li><p><strong>进程 API 改进（Java 9+）</strong></p><ul><li>管理操作系统进程（如获取 PID、直接执行命令）。</li></ul></li><li><p><strong>新的日期时间 API（Java 8 已有，后续优化）</strong></p><ul><li><code>java.time</code> 包优化，例如 <code>LocalDate</code>、<code>ZonedDateTime</code> 等。</li></ul></li></ol><hr><h3 id="三、并发与性能" tabindex="-1"><a class="header-anchor" href="#三、并发与性能" aria-hidden="true">#</a> <strong>三、并发与性能</strong></h3><ol><li><p><strong>虚拟线程（Virtual Threads，Java 21 正式）</strong></p><ul><li>轻量级线程（协程），显著提升高并发吞吐量，简化异步编程：<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token keyword">var</span> executor <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newVirtualThreadPerTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    executor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p><strong>结构化并发（Java 21 预览）</strong></p><ul><li>通过 <code>StructuredTaskScope</code> 管理多个子任务的生命周期，避免资源泄漏。</li></ul></li><li><p><strong>分代 ZGC（Java 21）</strong></p><ul><li>低延迟垃圾收集器 ZGC 支持分代回收，减少内存占用。</li></ul></li><li><p><strong>Shenandoah GC（Java 12+）</strong></p><ul><li>另一种低停顿时间的垃圾收集器。</li></ul></li></ol><hr><h3 id="四、工具与-jvm-改进" tabindex="-1"><a class="header-anchor" href="#四、工具与-jvm-改进" aria-hidden="true">#</a> <strong>四、工具与 JVM 改进</strong></h3><ol><li><p><strong>JShell（Java 9）</strong></p><ul><li>交互式 REPL 工具，快速测试代码片段。</li></ul></li><li><p><strong>单文件源码运行（Java 11）</strong></p><ul><li>直接运行 <code>.java</code> 文件（无需手动编译）：<code>java HelloWorld.java</code>。</li></ul></li><li><p><strong>动态 CDS 存档（Java 13+）</strong></p><ul><li>提升启动速度，通过共享类数据减少内存占用。</li></ul></li><li><p><strong>Flight Recorder（JFR）开源（Java 11）</strong></p><ul><li>生产环境性能监控工具，低开销收集 JVM 数据。</li></ul></li></ol><hr><h3 id="五、其他重要特性" tabindex="-1"><a class="header-anchor" href="#五、其他重要特性" aria-hidden="true">#</a> <strong>五、其他重要特性</strong></h3><ol><li><p><strong><code>var</code> 支持 Lambda 参数（Java 11）</strong></p><ul><li>允许在 Lambda 表达式中使用 <code>var</code> 声明参数。</li></ul></li><li><p><strong><code>@Deprecated</code> 增强（Java 9）</strong></p><ul><li>标记 API 废弃状态和替代方案。</li></ul></li><li><p><strong>接口私有方法（Java 9）</strong></p><ul><li>在接口中定义私有方法，提升代码复用性。</li></ul></li><li><p><strong>移除过时功能</strong></p><ul><li>移除 Applet、Java Web Start、永久代（PermGen）等。</li></ul></li></ol><hr><h3 id="六、java-21-核心特性总结" tabindex="-1"><a class="header-anchor" href="#六、java-21-核心特性总结" aria-hidden="true">#</a> <strong>六、Java 21 核心特性总结</strong></h3><p>Java 21 作为 LTS（长期支持版本），整合了此前多个预览特性，并重点优化了并发和内存管理：</p><ul><li><strong>虚拟线程</strong>：彻底改变高并发编程模型。</li><li><strong>分代 ZGC</strong>：提升垃圾回收效率。</li><li><strong>模式匹配</strong>：简化条件分支代码。</li><li><strong>字符串模板</strong>：增强字符串处理能力。</li></ul>`,21),l=[e];function p(i,c){return n(),s("div",null,l)}const u=a(o,[["render",p],["__file","index.html.vue"]]);export{u as default};
