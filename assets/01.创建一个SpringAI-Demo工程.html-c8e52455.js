import{_ as p}from"./01-3-860ede2c.js";import{_ as i,V as o,W as l,Y as n,Z as a,$ as e,a1 as t,F as c}from"./framework-094145d2.js";const u="/tutorial/imgs/column/springai/01-1.webp",r="/tutorial/imgs/column/springai/01-2.webp",d="/tutorial/imgs/column/springai/01-4.webp",k="/tutorial/imgs/column/springai/01-5.webp",g={},m=n("h1",{id:"_01-创建一个springai的示例工程",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_01-创建一个springai的示例工程","aria-hidden":"true"},"#"),a(" 01. 创建一个SpringAI的示例工程")],-1),v=n("p",null,"下面介绍一下，如何快速借助官方的启动方式进行快速搭建一个用于体验SpringAI的示例工程",-1),h=n("h2",{id:"一、项目创建",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#一、项目创建","aria-hidden":"true"},"#"),a(" 一、项目创建")],-1),b={href:"https://spring.io/projects/spring-ai",target:"_blank",rel:"noopener noreferrer"},_=n("p",null,"借助Spring官方提供的快速创建项目功能，创建一个SpringBoot项目，点击下面的连接进入快速创建Spring-Ai项目",-1),f={href:"https://start.spring.io/#!type=maven-project&language=java&platformVersion=3.3.4&packaging=jar&jvmVersion=17&groupId=spring.ai.example&artifactId=spring-ai-demo&name=spring-ai-demo&description=Spring%20AI%20%2C%20getting%20started%20example%2C%20using%20Open%20AI&packageName=spring.ai.example.spring-ai-demo&dependencies=web,spring-ai-openai",target:"_blank",rel:"noopener noreferrer"},y=t('<figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在表格中，填写关键的信息（Group, Artifact, Name, Description, Version, PackageName）</p><h2 id="二、项目初始化" tabindex="-1"><a class="header-anchor" href="#二、项目初始化" aria-hidden="true">#</a> 二、项目初始化</h2><p>将上面生成的工程，解压之后，导入IDEA开发工具，你会得到一个空的Spring项目</p><figure><img src="'+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1-配置账号信息" tabindex="-1"><a class="header-anchor" href="#_1-配置账号信息" aria-hidden="true">#</a> 1. 配置账号信息</h3><p>上面创建的默认是OpenAI(Chatgpt)的大模型访问，这个需要我们提前备好梯子和密钥，账号充值才能使用，只需要在<code>applicatin.properties</code>文件中添加密钥即可</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.ai.openai.api-key</span><span class="token punctuation">=</span><span class="token value attr-value">&lt;your-openai-api-key&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>出于安全考虑，可以通过配置环境变量的方式来配置密钥，如下</p></blockquote><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># In application.yml</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">ai</span><span class="token punctuation">:</span>
    <span class="token key atrule">openai</span><span class="token punctuation">:</span>
      <span class="token key atrule">api-key</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>OPENAI_API_KEY<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后设置环境变量</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># In your environment or .env file</span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">OPENAI_API_KEY</span><span class="token operator">=</span><span class="token operator">&lt;</span>your-openai-api-key<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-使用免费的智普大模型体验" tabindex="-1"><a class="header-anchor" href="#_2-使用免费的智普大模型体验" aria-hidden="true">#</a> 2. 使用免费的智普大模型体验</h3><p>当然若条件不允许，我们可以考虑智普清言的免费大模型</p><p>替换依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 移除下面的依赖 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.ai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-ai-starter-model-openai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 替换为智普的依赖 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.ai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-ai-starter-model-zhipuai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16),x={href:"https://open.bigmodel.cn/usercenter/proj-mgmt/apikeys",target:"_blank",rel:"noopener noreferrer"},w=n("figure",null,[n("img",{src:p,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),I=n("p",null,"然后在配置文件中，添加智普的密钥，并指定免费的大模型",-1),q={href:"https://www.bigmodel.cn/pricing",target:"_blank",rel:"noopener noreferrer"},A=t(`<div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">ai</span><span class="token punctuation">:</span>
    <span class="token key atrule">zhipuai</span><span class="token punctuation">:</span>
      <span class="token key atrule">api-key</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>zhipuai<span class="token punctuation">-</span>api<span class="token punctuation">-</span>key<span class="token punctuation">}</span>
      <span class="token key atrule">chat</span><span class="token punctuation">:</span>
        <span class="token key atrule">options</span><span class="token punctuation">:</span>
          <span class="token key atrule">model</span><span class="token punctuation">:</span> GLM<span class="token punctuation">-</span>4<span class="token punctuation">-</span>Flash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-密钥注入方式" tabindex="-1"><a class="header-anchor" href="#_3-密钥注入方式" aria-hidden="true">#</a> 3. 密钥注入方式</h3><p>密钥除了直接再配置文件中写死之外，也可以通过前面介绍的环境变量的方式来注入，除此之外，下面介绍一种本地开发时命令行参数注入的方式</p><p>为了避免<code>api-key</code>的泄露，我们借助SpEL的方式来注入，通过在启动时，添加参数来设置apiKey，如下</p><ul><li>唤起编辑启动命令行窗口</li><li>点击<code>Modify options</code></li><li>在弹窗中选中 <code>Program arguments</code>，然后会看到再启动类右边新增一个输入框</li><li>再输入框中添加<code>--spring.ai.zhipuai.api-key=&lt;your-zhipuai-api-key&gt;</code></li></ul><figure><img src="`+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>说明：为什么不建议直接在配置文件中写密钥？</strong></p><ul><li>因为非常容易泄露，本地测试时，最简单的当然是直接在配置文件中写密钥，但是当我们将项目推送到git时，很容易忘了将密钥删除，这样，密钥就泄露了（即便你后续发现了再删除，但是git的历史提交中依然能找到你的密钥，你就只能删除它了）</li></ul><h2 id="三、项目运行" tabindex="-1"><a class="header-anchor" href="#三、项目运行" aria-hidden="true">#</a> 三、项目运行</h2><p>再上面初始化完成之后，接下来我们写一个简单的Chat服务，用于体验与大模型对话的感觉</p><p>新建一个ChatController类，用于接收用户的提问，并返回模型生成的答案</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChatController</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ZhiPuAiChatModel</span> chatModel<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token class-name">ChatController</span><span class="token punctuation">(</span><span class="token class-name">ZhiPuAiChatModel</span> chatModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>chatModel <span class="token operator">=</span> chatModel<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/ai/generate&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Map</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> defaultValue <span class="token operator">=</span> <span class="token string">&quot;Tell me a joke&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;generation&quot;</span><span class="token punctuation">,</span> chatModel<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/ai/generateStream&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ChatResponse</span><span class="token punctuation">&gt;</span></span> <span class="token function">generateStream</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> defaultValue <span class="token operator">=</span> <span class="token string">&quot;Tell me a joke&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> prompt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Prompt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> chatModel<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面分别提供同步/流式调用大模型两种方式，测试时，你可以选择任意一种方式</p><figure><img src="`+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="四、小结" tabindex="-1"><a class="header-anchor" href="#四、小结" aria-hidden="true">#</a> 四、小结</h2><p>从本文搭建的一个示例工程可以看出，借助SpringAI与大模型进行交互可以说是非常简单了，比基于db的CURD效率要高多了。相比起我们自己的实现（比如技术派的大模型调用就是手撸的代码直接实现与大模型交互），实在是轻松太多</p>',16),S={href:"https://github.com/liuyueyi/spring-ai-demo/tree/master/S01-chat-demo",target:"_blank",rel:"noopener noreferrer"};function C(M,j){const s=c("ExternalLinkIcon");return o(),l("div",null,[m,v,h,n("blockquote",null,[n("p",null,[n("a",b,[a("https://spring.io/projects/spring-ai"),e(s)])])]),_,n("ul",null,[n("li",null,[n("a",f,[a("start.spring.io"),e(s)])])]),y,n("p",null,[a("在智普的开放平台获取密钥："),n("a",x,[a("https://open.bigmodel.cn/usercenter/proj-mgmt/apikeys"),e(s)])]),w,I,n("blockquote",null,[n("p",null,[a("在官网的定价中可以找到免费的模型："),n("a",q,[a("https://www.bigmodel.cn/pricing"),e(s)])])]),A,n("p",null,[a("文中所有代码可以在"),n("a",S,[a("https://github.com/liuyueyi/spring-ai-demo"),e(s)]),a(" 获取")])])}const V=i(g,[["render",C],["__file","01.创建一个SpringAI-Demo工程.html.vue"]]);export{V as default};
