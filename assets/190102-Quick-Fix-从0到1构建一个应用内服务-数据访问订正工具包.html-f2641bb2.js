import{_ as p,V as i,W as l,Y as a,$ as t,X as o,Z as n,a1 as e,F as c}from"./framework-094145d2.js";const u={},r=a("h2",{id:"i-背景说明",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#i-背景说明","aria-hidden":"true"},"#"),n(" I. 背景说明")],-1),d={href:"https://travis-ci.org/liuyueyi/quick-fix",target:"_blank",rel:"noopener noreferrer"},g=a("img",{src:"https://travis-ci.org/liuyueyi/quick-fix.svg?branch=master",alt:"Builder",tabindex:"0",loading:"lazy"},null,-1),k=a("figcaption",null,"Builder",-1),h=e('<h3 id="case1-程序出bug了" tabindex="-1"><a class="header-anchor" href="#case1-程序出bug了" aria-hidden="true">#</a> case1: 程序出bug了</h3><p>在我们的实际工作中，当我们遇到别人反馈代码出问题了吧，怎么返回的数据不对？</p><p>当应用持续跑了一段时间之后，这个时候我们的第一个反应基本是确认能复现么？如果能复现，那么调用的姿势是不是对的？如果确认姿势没问题，那么就是请求参数不对了!!! 如果请求参数还没有问题，卧槽，这下完了，真可能有bug了，这下怎么办？</p><p>接下来，一般的讨论是在测试环境复现一下，如果能复现，那么开启debug（或者远程debug），一行行调试，相信很快就能搞定了；</p><p>但是，最怕的就是但是，测试环境没法复现，至于线上环境才有问题，这下怎么搞？</p><h3 id="case2-缓存数据有问题" tabindex="-1"><a class="header-anchor" href="#case2-缓存数据有问题" aria-hidden="true">#</a> case2: 缓存数据有问题</h3><p>另外一个场景就是为了提升服务性能，缓存基本上会被大量的使用在各个系统之间；有缓存，那么就会有缓存不一致的问题，如果缓存用的是外部的如(redis/memcache)之类的，那么缓存数据的查询和订正，就相对简单了；但是，如果我们使用了内存作为数据的缓存，比如（hashmap, guava)，这种时候，我想知道这个内存中的数据怎么办？我想修改这个内存的中的数据怎么办？</p><h3 id="_3-小结" tabindex="-1"><a class="header-anchor" href="#_3-小结" aria-hidden="true">#</a> 3. 小结</h3><p>上面两个场景，归纳一下主要是两个问题</p><ul><li>如何知道线上应用中，某个服务的方法的执行结果；</li><li>如何知道线上应用中，某些内存数据的结果</li></ul>',10),m=e(`<h2 id="ii-方案设计" tabindex="-1"><a class="header-anchor" href="#ii-方案设计" aria-hidden="true">#</a> II. 方案设计</h2><p>为了解决上面抛出的两个问题，我们要怎么做呢？</p><h3 id="_1-设计" tabindex="-1"><a class="header-anchor" href="#_1-设计" aria-hidden="true">#</a> 1. 设计</h3><p>如何访问应用中的方法、数据，首先想到的就是反射；通过反射来执行某个实例的方法，或者获取实例的属性值，并没有太多的难度，有问题的是如何做到无侵入，如何与外部通信，如何做到通用</p><p>首先我们需要注入一个EndPoint，用于实现应用于外界的通信，这个是一切开始的基本条件，Fixer的Endpoint负责接收外部请求，并将请求转发给内部的解析器，执行应用内服务访问，并将结果输出给外部使用者</p><figure><img src="http://blog.hhui.top/hexblog/imgs/190102/00.jpg" alt="IMAGE" tabindex="0" loading="lazy"><figcaption>IMAGE</figcaption></figure><p>上图给出了EndPoint的结构设计，因为目前的java应用，直接以jar方式跑的不太多了，更常见的是将服务跑在其他的容器中，比如我们常见的tomcat应用，Spring应用等；不同的容器，对外暴露的方式不一样，怎么样才可以做到在不同的容器中，进行优雅的支持呢？</p><p>接下来请求到应用内之后，首先定位到访问的服务，其次则进行服务调用执行，其实现流程如下</p><figure><img src="https://blog.hhui.top/hexblog/imgs/190102/01.jpg" alt="IMAGE" tabindex="0" loading="lazy"><figcaption>IMAGE</figcaption></figure><h3 id="_2-技术" tabindex="-1"><a class="header-anchor" href="#_2-技术" aria-hidden="true">#</a> 2. 技术</h3><p>从上面的结构设计出发，找到这个项目实现的关键点，然后看下可以怎么实现</p><h4 id="a-服务定位" tabindex="-1"><a class="header-anchor" href="#a-服务定位" aria-hidden="true">#</a> a. 服务定位</h4><p>如何通过传入的请求参数来定位需要执行的服务方法，一般来将，应用中提供的服务可以分为两种情况</p><ul><li>以实例的形式提供服务 <ul><li>如Spring中以Bean的形式，一个Service就是一个Bean；我们可以借助Spring的ApplicationContext获取对应的bean</li><li>这种类型的服务，要求应用本身持有所有服务，然后我们可以通过这个ServiceHolder来定位具体的服务</li></ul></li><li>一个类对应一个服务 <ul><li>这种常见的是静态类或者单例，这个是以ClassLoader维度进行区分的；</li><li>因此我们可以直接通过ClassLoader方式来加载对应的类</li></ul></li></ul><p>然后我们主要目标需要集中在第一种方式，不同的应用方式，获取ServiceHolder不一样，让我们自己去全部支持，显然是不太现实的，因此我们需要设计一个方案，让使用者，自己来根据应用中的ServiceHolder，来选择具体的Service方法</p><p>这种，就可以通过SPI机制来支持</p><h4 id="b-endpoint支持" tabindex="-1"><a class="header-anchor" href="#b-endpoint支持" aria-hidden="true">#</a> b. EndPoint支持</h4><p>提供与外部的交互，最常见的方案就是暴露一个http接口，然后接收外部的请求；非web服务怎么办？也可以开一个socket走tcp通信，那么问题来了</p><ul><li>对于web服务 <ul><li>直接在已有的web服务上新增一个端点，并加上权限控制？</li><li>另开一个端口提供服务</li></ul></li><li>对于非web服务 <ul><li>新开端口提供服务</li></ul></li></ul><p>所以再具体的实现中，我们需要考虑以下几点</p><ul><li>如何复用已有的web服务？</li><li>没有web服务时，自己怎么支持web服务？</li><li>如何支持绑定端口的配置？</li><li>当项目中引入了多种EndPoint支持方式时，怎么保证只有一个生效？</li></ul><p>针对上面的问题，具体实现时，会用到下面一些机制</p><ul><li>引入优先级</li><li>通过SPI来实现自定义扩展</li><li>解析JVM参数，来获取对应的配置</li></ul><h2 id="iii-相关博文" tabindex="-1"><a class="header-anchor" href="#iii-相关博文" aria-hidden="true">#</a> III. 相关博文</h2><p>从设计到实现，下面博文分别进行详细介绍说明</p><p>... （待补齐）</p><h2 id="iv-使用说明" tabindex="-1"><a class="header-anchor" href="#iv-使用说明" aria-hidden="true">#</a> IV. 使用说明</h2><h3 id="_1-依赖管理" tabindex="-1"><a class="header-anchor" href="#_1-依赖管理" aria-hidden="true">#</a> 1. 依赖管理</h3><p>首先添加仓库，两种方式，一个是github的release版本的引入，优势是稳定；确定是更新及时问题；</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>jitpack.io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>https://jitpack.io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一个是我个人的仓库</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>yihui-maven-repo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>https://raw.githubusercontent.com/liuyueyi/maven-repository/master/repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-引入依赖包" tabindex="-1"><a class="header-anchor" href="#_2-引入依赖包" aria-hidden="true">#</a> 2. 引入依赖包</h3><p>根据实际的应用场景，引入对应的依赖包，</p><h4 id="a-纯jar应用" tabindex="-1"><a class="header-anchor" href="#a-纯jar应用" aria-hidden="true">#</a> a. 纯jar应用</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.git.hui.fix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>fix-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意事项：</p><ul><li>fix-core 内置了一个http服务器，默认绑定端口号 9999, 可以通过jvm参数 <code>-Dquick.fix.port</code> 来覆盖</li><li>在应用的入口出，需要主动执行 <code>FixEngine.instance();</code> 进行初始化</li><li>因为fix-core 只提供了静态类的ServerLoader, 对于实例的加载，需要业务方自己来实现</li></ul><p>使用姿势如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-X</span> POST <span class="token parameter variable">-H</span> <span class="token string">&quot;Content-Type:application/json&quot;</span> http://127.0.0.1:9999/fixer/call <span class="token parameter variable">-d</span> <span class="token string">&#39;{&quot;service&quot;: &quot;com.git.hui.fix.example.jar.server.CalculateServer&quot;, &quot;method&quot;: &quot;getCache&quot;, &quot;params&quot;: [&quot;init&quot;], &quot;type&quot;:&quot;static&quot;}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>实例demo:</p>`,41),v={href:"https://github.com/liuyueyi/quick-fix/tree/master/examples/jar-example",target:"_blank",rel:"noopener noreferrer"},b=e(`<h4 id="b-纯spring应用" tabindex="-1"><a class="header-anchor" href="#b-纯spring应用" aria-hidden="true">#</a> b. 纯Spring应用</h4><p>如我是一个纯Spring应用，没有使用SpringMVC，可以引入</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.git.hui.fix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-fixer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意事项：</p><p>spring-fixer提供了访问Spring容器内bean的服务方式，因此除了获取默认提供的静态类之外，还可以访问bean；</p><ul><li>使用默认的http服务器，端口号为 9999, 通过jvm参数 <code>-Dquick.fix.port</code> 来覆盖</li><li>与前面不同，不需要主动调用<code>FixEngine.instance()</code></li><li>内部提供bean的加载ServerLoader，可以直接通过beanName或者Bean的完整类名访问其内部方法/数据</li></ul><p>使用姿势如下:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 执行bean的某个方法</span>
<span class="token function">curl</span> <span class="token parameter variable">-X</span> POST <span class="token parameter variable">-H</span> <span class="token string">&quot;Content-Type:application/json&quot;</span> http://127.0.0.1:8080/inject-fixer-endpoint/call <span class="token parameter variable">-d</span> <span class="token string">&#39;{&quot;service&quot;: &quot;demoBean&quot;, &quot;method&quot;: &quot;randName&quot;}&#39;</span>
<span class="token comment"># 查看bean的属性值</span>
<span class="token function">curl</span> <span class="token parameter variable">-X</span> POST <span class="token parameter variable">-H</span> <span class="token string">&quot;Content-Type:application/json&quot;</span> http://127.0.0.1:8080/inject-fixer-endpoint/call <span class="token parameter variable">-d</span> <span class="token string">&#39;{&quot;service&quot;: &quot;demoBean&quot;, &quot;field&quot;: &quot;name&quot;}&#39;</span>
<span class="token comment"># 执行bean的属性的某个方法</span>
<span class="token function">curl</span> <span class="token parameter variable">-X</span> POST <span class="token parameter variable">-H</span> <span class="token string">&quot;Content-Type:application/json&quot;</span> http://127.0.0.1:8080/inject-fixer-endpoint/call <span class="token parameter variable">-d</span> <span class="token string">&#39;{&quot;service&quot;: &quot;demoBean&quot;, &quot;field&quot;: &quot;values&quot;, &quot;method&quot;:&quot;add&quot;, &quot;params&quot;: [&quot;autoInsertByQuickFixer!&quot;]}&#39;</span>

<span class="token comment"># 测试静态类的静态成员的方法调用</span>
<span class="token function">curl</span> <span class="token parameter variable">-X</span> POST <span class="token parameter variable">-H</span> <span class="token string">&quot;Content-Type:application/json&quot;</span> http://127.0.0.1:9999/fixer/call <span class="token parameter variable">-d</span> <span class="token string">&#39;{&quot;service&quot;: &quot;com.git.hui.fix.example.spring.server.StaticBean&quot;, &quot;method&quot;: &quot;getCache&quot;, &quot;params&quot;: [&quot;init&quot;], &quot;type&quot;:&quot;static&quot;}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实例demo:</p>`,9),x={href:"https://github.com/liuyueyi/quick-fix/tree/master/examples/spring-example",target:"_blank",rel:"noopener noreferrer"},f=e(`<h4 id="c-springmvc应用" tabindex="-1"><a class="header-anchor" href="#c-springmvc应用" aria-hidden="true">#</a> c. SpringMVC应用</h4><p>如是一个SpringMVC应用，可以引入</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.git.hui.fix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-mvc-fixer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用说明：</p><ul><li>利用mvc本身提供的http服务，访问路径为<code>/inject-fixer-endpoint/call</code>； 因此需要做好安全校验</li></ul><p>使用姿势&amp;实例：</p>`,6),_=a("li",null,"使用和前面的类似",-1),q={href:"https://github.com/liuyueyi/quick-fix/tree/master/examples/spring-mvc-example",target:"_blank",rel:"noopener noreferrer"},y=e(`<h4 id="d-springcloud应用" tabindex="-1"><a class="header-anchor" href="#d-springcloud应用" aria-hidden="true">#</a> d. SpringCloud应用</h4><p>如果是一个SpringCloud服务，且开启了 actuator 应用监测，可以引入</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.git.hui.fix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-fixer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用说明：</p><ul><li>将FixEndPoint端口集成在SpringCloud的Actuator中，因此在实际使用时，需要在配置中开启，设置参数 <code>management.endpoints.web.exposure.include</code></li><li>访问路径为：<code>/actuator/inject-fixer-endpoint/call</code>， 前面的 <code>actuator</code>路径与应用监测配置的路径一致</li></ul><p>使用姿势&amp;实例:</p>`,6),I={href:"https://github.com/liuyueyi/quick-fix/tree/master/examples/spring-cloud-example",target:"_blank",rel:"noopener noreferrer"},S=a("h2",{id:"v-其他",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#v-其他","aria-hidden":"true"},"#"),n(" V. 其他")],-1),j=a("h3",{id:"项目",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#项目","aria-hidden":"true"},"#"),n(" 项目")],-1),C={href:"https://github.com/liuyueyi/quick-fix",target:"_blank",rel:"noopener noreferrer"},E=e('<h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h3><p>拒绝单机，欢迎start或者加好友支持</p><h3 id="声明" tabindex="-1"><a class="header-anchor" href="#声明" aria-hidden="true">#</a> 声明</h3><p>尽信书则不如，已上内容，一家之言，因个人能力有限，难免有疏漏和错误之处，如发现bug或者有更好的建议，欢迎批评指正，不吝感激</p><ul><li>微博地址: 小灰灰Blog</li><li>QQ： 一灰灰/3302797840</li><li>WeChat: 一灰/liuyueyi25</li></ul><h3 id="扫描关注" tabindex="-1"><a class="header-anchor" href="#扫描关注" aria-hidden="true">#</a> 扫描关注</h3><p><strong>公众号&amp;博客</strong></p><figure><img src="https://gitee.com/liuyueyi/Source/raw/master/img/info/blogInfoV2.png" alt="QrCode" tabindex="0" loading="lazy"><figcaption>QrCode</figcaption></figure><p><strong>打赏码</strong></p><figure><img src="https://gitee.com/liuyueyi/Source/raw/master/img/pay/pay.png" alt="pay" tabindex="0" loading="lazy"><figcaption>pay</figcaption></figure><p><strong>知识星球</strong></p><figure><img src="https://raw.githubusercontent.com/liuyueyi/Source/master/img/info/goals.png" alt="goals" tabindex="0" loading="lazy"><figcaption>goals</figcaption></figure>',12);function B(V,w){const s=c("ExternalLinkIcon");return i(),l("div",null,[r,a("figure",null,[a("a",d,[g,t(s)]),k]),h,o(" more "),m,a("p",null,[a("a",v,[n("jar-example"),t(s)])]),b,a("ul",null,[a("li",null,[a("a",x,[n("spring-example"),t(s)])])]),f,a("ul",null,[_,a("li",null,[a("a",q,[n("spring-mvc-example"),t(s)])])]),y,a("ul",null,[a("li",null,[a("a",I,[n("spring-cloud-example"),t(s)])])]),S,j,a("ul",null,[a("li",null,[a("a",C,[n("https://github.com/liuyueyi/quick-fix"),t(s)])])]),E])}const T=p(u,[["render",B],["__file","190102-Quick-Fix-从0到1构建一个应用内服务-数据访问订正工具包.html.vue"]]);export{T as default};
