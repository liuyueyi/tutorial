const e=JSON.parse('{"key":"v-226c7786","path":"/java/jdk/jdk21/05.%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A8%A1%E6%9D%BF.html","title":"05.JDK21字符串模板：更安全、更强大的字符串拼接","lang":"zh-CN","frontmatter":{"order":5,"title":"05.JDK21字符串模板：更安全、更强大的字符串拼接","tag":["jdk"],"category":["Java","JDK21"],"date":"2025-02-13T17:48:09.000Z","keywords":["Java","JDK21","字符串模板"],"description":"1. 背景：为什么需要字符串模板？ 在Java中，字符串拼接是常见的操作，但传统方式存在诸多问题： 可读性差：使用+或StringBuilder拼接字符串时，代码冗长且难以维护 安全性低：直接拼接用户输入可能导致SQL注入或XSS攻击 性能开销：频繁拼接字符串可能产生大量临时对象，影响性能 字符串模板（String Templates）是JDK21引入的一项新特性（预览），旨在提供一种更安全、更直观的字符串构建方式。它结合了模板引擎的灵活性和Java类型系统的安全性。","head":[["meta",{"property":"og:url","content":"https://liuyueyi.github.io/tutorial/java/jdk/jdk21/05.%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%A8%A1%E6%9D%BF.html"}],["meta",{"property":"og:site_name","content":"一灰灰的站点"}],["meta",{"property":"og:title","content":"05.JDK21字符串模板：更安全、更强大的字符串拼接"}],["meta",{"property":"og:description","content":"1. 背景：为什么需要字符串模板？ 在Java中，字符串拼接是常见的操作，但传统方式存在诸多问题： 可读性差：使用+或StringBuilder拼接字符串时，代码冗长且难以维护 安全性低：直接拼接用户输入可能导致SQL注入或XSS攻击 性能开销：频繁拼接字符串可能产生大量临时对象，影响性能 字符串模板（String Templates）是JDK21引入的一项新特性（预览），旨在提供一种更安全、更直观的字符串构建方式。它结合了模板引擎的灵活性和Java类型系统的安全性。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-13T08:59:24.000Z"}],["meta",{"property":"article:tag","content":"jdk"}],["meta",{"property":"article:published_time","content":"2025-02-13T17:48:09.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-13T08:59:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"05.JDK21字符串模板：更安全、更强大的字符串拼接\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-02-13T17:48:09.000Z\\",\\"dateModified\\":\\"2025-02-13T08:59:24.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1. 背景：为什么需要字符串模板？","slug":"_1-背景-为什么需要字符串模板","link":"#_1-背景-为什么需要字符串模板","children":[]},{"level":2,"title":"2. 原理：字符串模板如何工作？","slug":"_2-原理-字符串模板如何工作","link":"#_2-原理-字符串模板如何工作","children":[{"level":3,"title":"2.1 传统字符串拼接 vs 字符串模板","slug":"_2-1-传统字符串拼接-vs-字符串模板","link":"#_2-1-传统字符串拼接-vs-字符串模板","children":[]},{"level":3,"title":"核心机制","slug":"核心机制","link":"#核心机制","children":[]},{"level":3,"title":"2.2 优势：为什么选择字符串模板？","slug":"_2-2-优势-为什么选择字符串模板","link":"#_2-2-优势-为什么选择字符串模板","children":[]}]},{"level":2,"title":"3. 使用示例","slug":"_3-使用示例","link":"#_3-使用示例","children":[{"level":3,"title":"语法","slug":"语法","link":"#语法","children":[]},{"level":3,"title":"示例1：基本使用","slug":"示例1-基本使用","link":"#示例1-基本使用","children":[]},{"level":3,"title":"示例2：多行字符串","slug":"示例2-多行字符串","link":"#示例2-多行字符串","children":[]},{"level":3,"title":"示例3：格式化字符串","slug":"示例3-格式化字符串","link":"#示例3-格式化字符串","children":[]},{"level":3,"title":"示例4：自定义处理器","slug":"示例4-自定义处理器","link":"#示例4-自定义处理器","children":[]}]},{"level":2,"title":"4. 应用场景探索","slug":"_4-应用场景探索","link":"#_4-应用场景探索","children":[{"level":3,"title":"4.1 构建动态消息","slug":"_4-1-构建动态消息","link":"#_4-1-构建动态消息","children":[]},{"level":3,"title":"4.2 SQL拼接","slug":"_4-2-sql拼接","link":"#_4-2-sql拼接","children":[]}]},{"level":2,"title":"5. 小结","slug":"_5-小结","link":"#_5-小结","children":[{"level":3,"title":"4.1 注意事项","slug":"_4-1-注意事项","link":"#_4-1-注意事项","children":[]},{"level":3,"title":"4.2 总结","slug":"_4-2-总结","link":"#_4-2-总结","children":[]}]}],"git":{"createdTime":1739437164000,"updatedTime":1739437164000,"contributors":[{"name":"yihui","email":"bangzewu@126.com","commits":1}]},"readingTime":{"minutes":5.28,"words":1583},"filePathRelative":"java/jdk/jdk21/05.字符串模板.md","localizedDate":"2025年2月13日","excerpt":"<h2> 1. 背景：为什么需要字符串模板？</h2>\\n<p>在Java中，字符串拼接是常见的操作，但传统方式存在诸多问题：</p>\\n<ol>\\n<li><strong>可读性差</strong>：使用<code>+</code>或<code>StringBuilder</code>拼接字符串时，代码冗长且难以维护</li>\\n<li><strong>安全性低</strong>：直接拼接用户输入可能导致SQL注入或XSS攻击</li>\\n<li><strong>性能开销</strong>：频繁拼接字符串可能产生大量临时对象，影响性能</li>\\n</ol>\\n<p><strong>字符串模板</strong>（String Templates）是JDK21引入的一项新特性（预览），旨在提供一种更安全、更直观的字符串构建方式。它结合了<strong>模板引擎</strong>的灵活性和<strong>Java类型系统</strong>的安全性。</p>","copyright":{},"autoDesc":true}');export{e as data};
