import{_ as e,V as p,W as o,X as c,Y as n,Z as s,$ as t,a1 as l,F as i}from"./framework-094145d2.js";const u="/tutorial/hexblog/imgs/190104/00.gif",r="/tutorial/hexblog/imgs/190104/01.gif",k={},d=n("p",null,"目前Quick-Fix框架提供了两种类型，三中不同场景下的Fixer，一种是以Jar方式启动的，一个是基于Spring生态体系玩法的，下面主要介绍这jar方式，如何使用QuickFix来实现应用内服务调用和数据订正",-1),v=n("h2",{id:"i-环境",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#i-环境","aria-hidden":"true"},"#"),s(" I. 环境")],-1),m=n("p",null,"使用maven可以很方便的引入依赖包，目前提供两种导入方式",-1),g=n("h3",{id:"_1-github-release版本",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-github-release版本","aria-hidden":"true"},"#"),s(" 1. GitHub Release版本")],-1),b={href:"https://github.com/liuyueyi/quick-fix/releases",target:"_blank",rel:"noopener noreferrer"},h=l(`<div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">&gt;</span></span>
	    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>jitpack.io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
	    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>https://jitpack.io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.liuyueyi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>quick-fix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-小灰灰私服" tabindex="-1"><a class="header-anchor" href="#_2-小灰灰私服" aria-hidden="true">#</a> 2. 小灰灰私服</h3><p>个人私服仓库，好处就是更新快，有bug修复也快，而且可以根据需要，只加载指定的jar包，推荐使用这种方式</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>yihui-maven-repo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>https://raw.githubusercontent.com/liuyueyi/maven-repository/master/repository<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iii-使用说明" tabindex="-1"><a class="header-anchor" href="#iii-使用说明" aria-hidden="true">#</a> III. 使用说明</h2><p>下面将演示如何在jar应用中使用Quick-Fix, 并且给出了如何通过扩展<code>ServerLoaderTemplate</code>和<code>ServerLoaderBinder</code>来实现访问应用内实例的demo</p><h3 id="_1-配置相关" tabindex="-1"><a class="header-anchor" href="#_1-配置相关" aria-hidden="true">#</a> 1. 配置相关</h3><p>目前支持通过jvm参数来修改默认绑定的端口号，也支持通过自定义实现的EndPoint来替换默认的基于Socket的HTTP服务器</p><p>端口号设置方式</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-Dquick.fix.port</span><span class="token operator">=</span><span class="token number">8080</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-请求参数说明" tabindex="-1"><a class="header-anchor" href="#_2-请求参数说明" aria-hidden="true">#</a> 2. 请求参数说明</h3><table><thead><tr><th>标题</th><th>值</th><th>解释</th></tr></thead><tbody><tr><td>请求方法</td><td>POST</td><td>只支持POST请求</td></tr><tr><td>请求头</td><td>application/json</td><td>请求参数以json串方式提交</td></tr><tr><td>请求参数</td><td>参数名</td><td>参数说明</td></tr><tr><td>-</td><td>service</td><td>需要执行的服务，可以是完全路径，可以是beanName</td></tr><tr><td>-</td><td>field</td><td>需要访问的服务内部成员属性，值为属性名；为空时，表示执行的服务的某个方法</td></tr><tr><td>-</td><td>method</td><td>方法名，需要执行的方法；为空时，表示访问某个服务的成员属性值</td></tr><tr><td>-</td><td>type</td><td>static 表示访问静态类；其他表示访问Spring Bean</td></tr><tr><td>-</td><td>params</td><td>请求参数，数组，可以不存在，格式为<code>类型#值</code>，对于基本类型，可以省略类型的前缀包</td></tr></tbody></table><p>一个基本的使用case形如:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-X</span> POST <span class="token parameter variable">-H</span> <span class="token string">&quot;Content-Type:application/json&quot;</span> http://127.0.0.1:9999/fixer/call <span class="token parameter variable">-d</span> <span class="token string">&#39;{&quot;service&quot;: &quot;com.git.hui.fix.example.jar.server.CalculateServer&quot;, &quot;method&quot;: &quot;getCache&quot;, &quot;params&quot;: [&quot;init&quot;], &quot;type&quot;:&quot;static&quot;}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>针对上面的参数，下面进行组合说明：</p><h4 id="a-获取某个服务的成员属性值" tabindex="-1"><a class="header-anchor" href="#a-获取某个服务的成员属性值" aria-hidden="true">#</a> a. 获取某个服务的成员属性值</h4><p>fix-core 默认提供了静态类的访问方式，要求type传值为<code>static</code>；只访问成员属性值，不需要传入method</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;service&quot;</span><span class="token operator">:</span> <span class="token string">&quot;com.git.hui.fix.example.jar.server.CalculateServer&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;field&quot;</span><span class="token operator">:</span> <span class="token string">&quot;localCache&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;static&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="b-执行某个服务的方法" tabindex="-1"><a class="header-anchor" href="#b-执行某个服务的方法" aria-hidden="true">#</a> b. 执行某个服务的方法</h4><p>执行服务的方法时，不要传入field参数，其次params中的参数就是传给需要执行的method方法的，数组格式</p><ul><li>当不需要参数时，可以不加params; 或者传一个空数组</li><li>参数传入定义如: 参数类型#参数值 <ul><li>基本类型 + BigDecimal/BigInteger时，参数类型可以不写全路径，如 &quot;int#3&quot;, &quot;Float#12.3&quot;, &quot;BigDecimal#123&quot;</li><li>String类型时，可以省略参数类型，如 &quot;key&quot;</li><li>其他类型，参数类型为全路径，value为json格式化的值；因此要求参数类型，可以正常的反序列化（如必须有默认构造方法)</li></ul></li></ul><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;service&quot;</span><span class="token operator">:</span> <span class="token string">&quot;com.git.hui.fix.example.jar.server.CalculateServer&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;method&quot;</span><span class="token operator">:</span> <span class="token string">&quot;updateCache&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;static&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;params&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="c-执行某个服务的成员属性的某个方法" tabindex="-1"><a class="header-anchor" href="#c-执行某个服务的成员属性的某个方法" aria-hidden="true">#</a> c. 执行某个服务的成员属性的某个方法</h4><p>调用成员属性的方法，可使用的姿势如下，这个时候 <code>service</code>, <code>method</code>, <code>field</code> 都需要存在</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;service&quot;</span><span class="token operator">:</span> <span class="token string">&quot;com.git.hui.fix.example.jar.server.CalculateServer&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;method&quot;</span><span class="token operator">:</span> <span class="token string">&quot;getUnchecked&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;field&quot;</span><span class="token operator">:</span><span class="token string">&quot;localCache&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;static&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;params&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="ii-jar应用使用方式" tabindex="-1"><a class="header-anchor" href="#ii-jar应用使用方式" aria-hidden="true">#</a> II. Jar应用使用方式</h2><p>如果我的应用时以纯粹的jar方式运行，指定入口，然后一直持续运行，这种场景下，此时我们的应用内外交互则主要会利用<code>fix-core</code>中提供的一个机遇socket的http服务器(<code>com.git.hui.fix.core.endpoint.BasicHttpServer</code>)来通信</p><h3 id="_1-jar使用姿势" tabindex="-1"><a class="header-anchor" href="#_1-jar使用姿势" aria-hidden="true">#</a> 1. jar使用姿势</h3><p>引入依赖包</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.git.hui.fix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>fix-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="a-实例演示" tabindex="-1"><a class="header-anchor" href="#a-实例演示" aria-hidden="true">#</a> a. 实例演示</h4><p>接下来我们创建一个demo应用来演示使用姿势，因为<code>fix-core</code>只提供了<code>StaticServerLoader</code>，即我们只能通过FixerEndPoint执行应用中的静态类，因此我们jar应用可以设计如下</p><p>实际使用中需要注意:</p><ul><li>需要主动调用 <code>FixEngine.instance();</code>，实现初始化</li></ul><p><strong>入口类</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot; --- &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">FixEngine</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">CalculateServer</span><span class="token punctuation">.</span><span class="token function">updateCache</span><span class="token punctuation">(</span><span class="token string">&quot;init&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">12.3f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">3600</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>测试静态类</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">CacheBuilder</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">CacheLoader</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">LoadingCache</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigDecimal</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Created by @author yihui in 22:53 18/12/30.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CalculateServer</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">LoadingCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">&gt;</span></span> localCache<span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        localCache <span class="token operator">=</span> <span class="token class-name">CacheBuilder</span><span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CacheLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">BigDecimal</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">.</span><span class="token constant">ZERO</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">BigDecimal</span> <span class="token function">getCache</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> localCache<span class="token punctuation">.</span><span class="token function">getUnchecked</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">updateCache</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">BigDecimal</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        localCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行上面的main方法之后，会启动默认的http服务器，开启端口号为 9999， 我们通过curl模拟post请求，访问<code>CalculateServer</code>中的值</p><p>启动之后，访问命令如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-X</span> POST <span class="token parameter variable">-H</span> <span class="token string">&quot;Content-Type:application/json&quot;</span> http://127.0.0.1:9999/fixer/call <span class="token parameter variable">-d</span> <span class="token string">&#39;{&quot;service&quot;: &quot;com.git.hui.fix.example.jar.server.CalculateServer&quot;, &quot;method&quot;: &quot;getCache&quot;, &quot;params&quot;: [&quot;init&quot;], &quot;type&quot;:&quot;static&quot;}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+u+`" alt="1.gif" tabindex="0" loading="lazy"><figcaption>1.gif</figcaption></figure><p>上图演示了启动应用，然后通过http请求来访问应用内部静态类的方法，更新应用内存数据</p><h4 id="b-serverloader扩展" tabindex="-1"><a class="header-anchor" href="#b-serverloader扩展" aria-hidden="true">#</a> b. ServerLoader扩展</h4><p>上面虽然实现了应用内存数据修改，但有个局限是只能操作静态类的方法，如果要操作实例对象呢？</p><p>对于存粹的jar应用而言，框架本身很难知道如何获取实例，因此可以通过实现<code>ServerLoader</code>接口，来扩展服务功能</p><p>首先假设应用内的所有实例，都保存在<code>ServerHolder</code>这个持有类中，可以通过name来获取对应的实例对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Created by @author yihui in 22:19 19/1/3.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerHolder</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> serverCache<span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token punctuation">{</span>
        serverCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">addServer</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Object</span> server<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        serverCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> server<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">getServer</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> serverCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来实现ServerLoader，用于Quick-Fix框架来查找对应的bean，继承模板类: <code>ServerLoaderTemplate</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>git<span class="token punctuation">.</span>hui<span class="token punctuation">.</span>fix<span class="token punctuation">.</span>api<span class="token punctuation">.</span>constants<span class="token punctuation">.</span></span><span class="token class-name">LoaderOrder</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>git<span class="token punctuation">.</span>hui<span class="token punctuation">.</span>fix<span class="token punctuation">.</span>api<span class="token punctuation">.</span>exception<span class="token punctuation">.</span></span><span class="token class-name">ServerNotFoundException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>git<span class="token punctuation">.</span>hui<span class="token punctuation">.</span>fix<span class="token punctuation">.</span>api<span class="token punctuation">.</span>modal<span class="token punctuation">.</span></span><span class="token class-name">FixReqDTO</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>git<span class="token punctuation">.</span>hui<span class="token punctuation">.</span>fix<span class="token punctuation">.</span>api<span class="token punctuation">.</span>modal<span class="token punctuation">.</span></span><span class="token class-name">ImmutablePair</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>git<span class="token punctuation">.</span>hui<span class="token punctuation">.</span>fix<span class="token punctuation">.</span>core<span class="token punctuation">.</span>loader<span class="token punctuation">.</span></span><span class="token class-name">ServerLoaderTemplate</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>git<span class="token punctuation">.</span>hui<span class="token punctuation">.</span>fix<span class="token punctuation">.</span>core<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>git<span class="token punctuation">.</span>hui<span class="token punctuation">.</span>fix<span class="token punctuation">.</span>example<span class="token punctuation">.</span>jar<span class="token punctuation">.</span>holder<span class="token punctuation">.</span></span><span class="token class-name">ServerHolder</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Created by @author yihui in 22:21 19/1/3.
 */</span>
<span class="token annotation punctuation">@LoaderOrder</span><span class="token punctuation">(</span>order <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelfServerLoader</span> <span class="token keyword">extends</span> <span class="token class-name">ServerLoaderTemplate</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">ImmutablePair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">&gt;</span></span> <span class="token function">loadServicePair</span><span class="token punctuation">(</span><span class="token class-name">String</span> service<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Object</span> server <span class="token operator">=</span> <span class="token class-name">ServerHolder</span><span class="token punctuation">.</span><span class="token function">getServer</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>server <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServerNotFoundException</span><span class="token punctuation">(</span><span class="token string">&quot;not server:&quot;</span> <span class="token operator">+</span> service <span class="token operator">+</span> <span class="token string">&quot; found!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token class-name">ImmutablePair</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>server<span class="token punctuation">,</span> server<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">enable</span><span class="token punctuation">(</span><span class="token class-name">FixReqDTO</span> reqDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>reqDTO<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&quot;server&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>reqDTO<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SelfServerLoader</span> <span class="token function">getLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SelfServerLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现自定义的LoaderBinder，用于将所有自定义实现的<code>ServerLoader</code>绑定到框架中</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelfLoaderBinder</span> <span class="token keyword">implements</span> <span class="token class-name">ServerLoaderBinder</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerLoader</span><span class="token punctuation">&gt;</span></span> <span class="token function">getBeanLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerLoader</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">SelfServerLoader</span><span class="token punctuation">.</span><span class="token function">getLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> list<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>针对上面的实现进行说明：</p><ul><li>注解 <code>@LoaderOrder</code> 表示ServerLoader的优先级，值越小优先级越大；当多个<code>ServerLoader#enable</code>都返回true时，优先级高的会被采用</li><li><code>loadServicePair</code> 这个方法，就是需要实现的根据传入的<code>service</code>来获取对应的实例的具体逻辑；注意返回值时对象与class的组合</li><li>因为我们的<code>ServerLoaderBinder</code>采用JDK的SPI机制实现扩展，因此自定义的<code>SelfLoaderBinder</code>需要生效，还的添加配置 <ul><li>在resource目录下，新建目录 <code>META-INF/services</code></li><li>在上面的目录下，新建文件名为 <code>com.git.hui.fix.api.spi.ServerLoaderBinder</code></li><li>在上面的文件中，添加自定义实现类全路径 <code>com.git.hui.fix.example.jar.loader.SelfLoaderBinder</code></li></ul></li></ul><p>然后写一个测试服务HelloServer</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServer</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> title<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">HelloServer</span><span class="token punctuation">(</span><span class="token class-name">String</span> title<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token class-name">String</span> title<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>title <span class="token operator">=</span> title<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> title<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改一下启动方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot; --- &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">HelloServer</span> helloServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloServer</span><span class="token punctuation">(</span><span class="token string">&quot;小灰灰blog&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">ServerHolder</span><span class="token punctuation">.</span><span class="token function">addServer</span><span class="token punctuation">(</span><span class="token string">&quot;helloServer&quot;</span><span class="token punctuation">,</span> helloServer<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">FixEngine</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">CalculateServer</span><span class="token punctuation">.</span><span class="token function">updateCache</span><span class="token punctuation">(</span><span class="token string">&quot;init&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">12.3f</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">3600</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后测试通过Quick-Fix来访问上面的HelloServer服务中的方法</p><p>测试case如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-X</span> POST <span class="token parameter variable">-H</span> <span class="token string">&quot;Content-Type:application/json&quot;</span> http://127.0.0.1:9999/fixer/call <span class="token parameter variable">-d</span> <span class="token string">&#39;{&quot;service&quot;: &quot;helloServer&quot;,&quot;method&quot;:&quot;setTitle&quot;, &quot;params&quot;:[&quot;一灰灰&quot;]}&#39;</span>

<span class="token function">curl</span> <span class="token parameter variable">-X</span> POST <span class="token parameter variable">-H</span> <span class="token string">&quot;Content-Type:application/json&quot;</span> http://127.0.0.1:9999/fixer/call <span class="token parameter variable">-d</span> <span class="token string">&#39;{&quot;service&quot;: &quot;helloServer&quot;,&quot;method&quot;:&quot;sayHello&quot;}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+r+'" alt="2.gif" tabindex="0" loading="lazy"><figcaption>2.gif</figcaption></figure><h2 id="ii-其他" tabindex="-1"><a class="header-anchor" href="#ii-其他" aria-hidden="true">#</a> II. 其他</h2><h3 id="_0-项目" tabindex="-1"><a class="header-anchor" href="#_0-项目" aria-hidden="true">#</a> 0. 项目</h3>',64),y={href:"https://github.com/liuyueyi/quick-fix",target:"_blank",rel:"noopener noreferrer"},f={id:"_1-一灰灰blog-https-liuyueyi-github-io-hexblog",tabindex:"-1"},q=n("a",{class:"header-anchor",href:"#_1-一灰灰blog-https-liuyueyi-github-io-hexblog","aria-hidden":"true"},"#",-1),x={href:"https://liuyueyi.github.io/hexblog",target:"_blank",rel:"noopener noreferrer"},w={href:"https://liuyueyi.github.io/hexblog",target:"_blank",rel:"noopener noreferrer"},S=n("p",null,"一灰灰的个人博客，记录所有学习和工作中的博文，欢迎大家前去逛逛",-1),_=n("h3",{id:"_2-声明",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-声明","aria-hidden":"true"},"#"),s(" 2. 声明")],-1),j=n("p",null,"尽信书则不如，已上内容，纯属一家之言，因个人能力有限，难免有疏漏和错误之处，如发现bug或者有更好的建议，欢迎批评指正，不吝感激",-1),C={href:"https://weibo.com/p/1005052169825577/home",target:"_blank",rel:"noopener noreferrer"},L=n("li",null,"QQ： 一灰灰/3302797840",-1),T=n("h3",{id:"_3-扫描关注",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-扫描关注","aria-hidden":"true"},"#"),s(" 3. 扫描关注")],-1),B=n("p",null,[n("strong",null,"一灰灰blog")],-1),O=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/liuyueyi/Source/master/img/info/blogInfoV2.png",alt:"QrCode",tabindex:"0",loading:"lazy"}),n("figcaption",null,"QrCode")],-1),I=n("p",null,[n("strong",null,"知识星球")],-1),H=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/liuyueyi/Source/master/img/info/goals.png",alt:"goals",tabindex:"0",loading:"lazy"}),n("figcaption",null,"goals")],-1);function F(D,E){const a=i("ExternalLinkIcon");return p(),o("div",null,[d,c(" more "),v,m,g,n("p",null,[s("组要是依赖github上的release版本，因此可以直接去查看对应的源码： "),n("a",b,[s("https://github.com/liuyueyi/quick-fix/releases"),t(a)])]),h,n("ul",null,[n("li",null,[n("a",y,[s("https://github.com/liuyueyi/quick-fix"),t(a)])])]),n("h3",f,[q,s(" 1. "),n("a",x,[s("一灰灰Blog"),t(a)]),s("： "),n("a",w,[s("https://liuyueyi.github.io/hexblog"),t(a)])]),S,_,j,n("ul",null,[n("li",null,[s("微博地址: "),n("a",C,[s("小灰灰Blog"),t(a)])]),L]),T,B,O,I,H])}const Q=e(k,[["render",F],["__file","190104-Quick-Fix-纯Jar应用及扩展手册.html.vue"]]);export{Q as default};
