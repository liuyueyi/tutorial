import{_ as p,V as o,W as c,X as i,Y as n,Z as s,$ as e,a1 as t,F as l}from"./framework-094145d2.js";const u="/tutorial/imgs/210610/00.gif",r="/tutorial/imgs/210610/01.gif",d="/tutorial/imgs/210610/02.jpg",k="/tutorial/imgs/210610/03.gif",m={},v=n("p",null,[s("前面一篇博文介绍了一个"),n("code",null,"@Value"),s("的一些知识点，其中提了一个点，"),n("code",null,"@Value"),s("对应的配置，除了是配置文件中之外，可以从其他的数据源中获取么，如从redis，db，http中获取配置？")],-1),b=n("p",null,"了解过SpringCloud Config的可以给出确切的答案，可以，而且用起来还老爽了，远程配置，支持配置动态刷新，接下来我们来看一下，在SpringBoot中，如何配置自定义的数据源",-1),g=t(`<h2 id="i-项目环境" tabindex="-1"><a class="header-anchor" href="#i-项目环境" aria-hidden="true">#</a> I. 项目环境</h2><h3 id="_1-项目依赖" tabindex="-1"><a class="header-anchor" href="#_1-项目依赖" aria-hidden="true">#</a> 1. 项目依赖</h3><p>本项目借助<code>SpringBoot 2.2.1.RELEASE</code> + <code>maven 3.5.3</code> + <code>IDEA</code>进行开发</p><p>开一个web服务用于测试</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-自定义配置源" tabindex="-1"><a class="header-anchor" href="#ii-自定义配置源" aria-hidden="true">#</a> II. 自定义配置源</h2><p><code>@Value</code>修饰的成员，绑定配置时，是从<code>Envrionment</code>中读取配置的，所以我们需要做的就是注册一个自定义的配置源，借助<code>MapPropertySource</code>可以来实现我们需求场景</p><h3 id="_1-自定义数据源" tabindex="-1"><a class="header-anchor" href="#_1-自定义数据源" aria-hidden="true">#</a> 1. 自定义数据源</h3><p>演示一个最简单自定义的配置数据源，重写<code>MapPropertySource</code>的<code>getProperties</code>方法</p><p>实现如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimplePropertiesSource</span> <span class="token keyword">extends</span> <span class="token class-name">MapPropertySource</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">SimplePropertiesSource</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">SimplePropertiesSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token string">&quot;filePropertiesSource&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 覆盖这个方法，适用于实时获取配置
     *
     * <span class="token keyword">@param</span> <span class="token parameter">name</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 注意，只针对自定义开头的配置才执行这个逻辑</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;selfdefine.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> name <span class="token operator">+</span> <span class="token string">&quot;_&quot;</span> <span class="token operator">+</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-数据源注册" tabindex="-1"><a class="header-anchor" href="#_2-数据源注册" aria-hidden="true">#</a> 2. 数据源注册</h3><p>上面只是声明了配置源，接下来把它注册到Environment中，这样就可以供应用使用了</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Environment</span> environment<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">SimplePropertiesSource</span> <span class="token function">simplePropertiesSource</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableEnvironment</span> environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>environment <span class="token operator">=</span> environment<span class="token punctuation">;</span>
        <span class="token class-name">SimplePropertiesSource</span> ropertiesSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimplePropertiesSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        environment<span class="token punctuation">.</span><span class="token function">getPropertySources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>ropertiesSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ropertiesSource<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 获取配置</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;get&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从上面的输出可以看出，自定义配置开头的会获取到随机的配置值；非<code>selfdefine</code>开头的，没有相应的配置，返回空</p><h3 id="_3-基于文件的自定义配置源" tabindex="-1"><a class="header-anchor" href="#_3-基于文件的自定义配置源" aria-hidden="true">#</a> 3. 基于文件的自定义配置源</h3><p>上面这个可能有点过于儿戏了，接下来我们将配置源放在自定义的文件中，并支持文件配置修改</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilePropertiesSource</span> <span class="token keyword">extends</span> <span class="token class-name">MapPropertySource</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">FilePropertiesSource</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">FilePropertiesSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token string">&quot;filePropertiesSource&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 这种方式，适用于一次捞取所有的配置，然后从内存中查询对应的配置，提高服务性能</span>
    <span class="token comment">// 10s 更新一次</span>
    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedRate <span class="token operator">=</span> <span class="token number">10_000</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refreshSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> ans <span class="token operator">=</span>
                <span class="token class-name">FileCopyUtils</span><span class="token punctuation">.</span><span class="token function">copyToString</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">FilePropertiesSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;kv.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> sub <span class="token operator">:</span> ans<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>sub<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> kv <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>sub<span class="token punctuation">,</span> <span class="token string">&quot;=&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>kv<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>kv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> kv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        source<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        source<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19),f={href:"http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247483855&idx=1&sn=918528761a188b664823dbf442ab681b&chksm=fce71a63cb909375a46cd1ec966881ce075f2b98ac0a84aaf2eaa33f65063c6be11378676039&token=73054292&lang=zh_CN#rd",target:"_blank",rel:"noopener noreferrer"},h=t(`<p>对应的配置文件</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">user</span><span class="token punctuation">=</span><span class="token value attr-value">xhh</span>
<span class="token key attr-name">name</span><span class="token punctuation">=</span><span class="token value attr-value">一灰灰</span>
<span class="token key attr-name">age</span><span class="token punctuation">=</span><span class="token value attr-value">18</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注册的姿势与上面一致，就不单独说明了，接下来演示一下使用</p><figure><img src="`+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从上可以看到文件中的配置修改之后，过一段时间会刷新</p><h3 id="_4-value绑定自定义配置" tabindex="-1"><a class="header-anchor" href="#_4-value绑定自定义配置" aria-hidden="true">#</a> 4. <code>@Value</code>绑定自定义配置</h3><p>接下来我们看一下，将<code>@Value</code>绑定自定义的配置，是否可以成功</p><p>调整一下上面的Application, 添加一个成员属性</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${name}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;get&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> name <span class="token operator">+</span> <span class="token string">&quot;|&quot;</span> <span class="token operator">+</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次测试发现抛异常了，说是这个配置不存在！！！</p><figure><img src="`+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（这就过分了啊，看了半天，结果告诉我不行，这还不得赶紧搞个差评么😡😡😡）</p><p>已经写到这里了，当然我也得继续尝试挽救一下，为啥前面直接通过<code>Environment</code>可以拿到配置，但是<code>@Value</code>注解绑定就不行呢？</p><p>”罪魁祸首“就在于初始化顺序，我自定义的配置源，还没有塞到<code>Envrionment</code>，你就开会着手绑定了，就像准备给”一灰灰blog“一个差评，结果发现还没关注...（好吧，我承认没关注也可以评论😭）</p><p>根据既往的知识点（至于是哪些知识点，那就长话短说不了了，看下面几篇精选的博文吧）</p>',15),_={href:"http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247484553&idx=1&sn=f2d20abf3f3d409c53d0ee2675f7ab00&chksm=fce71f25cb9096338452312fb211776dee65fabbbe35908b9b00b43631c62a0f397a5b4aecf7&token=73054292&lang=zh_CN#rd",target:"_blank",rel:"noopener noreferrer"},y={href:"http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247484364&idx=1&sn=35eb49543198b283ec505139b0f7af6f&chksm=fce71860cb909176b27ef22074970e3ac1746182b86b2a31d67fe5dcdedc59f99dc92eefa06a&token=73054292&lang=zh_CN#rd",target:"_blank",rel:"noopener noreferrer"},w={href:"http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247484360&idx=1&sn=97188fc2e5595b1ba67db2e2634262c3&chksm=fce71864cb9091721af0288a0a4c9a4145b62dd63c927db6f0a14ceb8f13faa23183499f06e4&token=73054292&lang=zh_CN#rd",target:"_blank",rel:"noopener noreferrer"},S=t(`<p>要解决这个问题，一个最简单的方式如下</p><p>创建一个独立的配置类，实现自定义数据源的注册</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutoConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">FilePropertiesSource</span> <span class="token function">filePropertiesSource</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableEnvironment</span> environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">FilePropertiesSource</span> filePropertiesSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilePropertiesSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        environment<span class="token punctuation">.</span><span class="token function">getPropertySources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>filePropertiesSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> filePropertiesSource<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试类上指定bean依赖</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@DependsOn</span><span class="token punctuation">(</span><span class="token string">&quot;filePropertiesSource&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@EnableScheduling</span>
<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">Environment</span> environment<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${name}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;get&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name <span class="token operator">+</span> <span class="token string">&quot;|&quot;</span> <span class="token operator">+</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次测试，结果如下</p><figure><img src="`+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从上面的演示动图可以看到，绑定自定义的数据源配置，没有问题，但是，当配置变更时，绑定的name字段，没有随之更新</p><p>简单来讲就是不支持动态刷新，这就难受了啊，我就想要动态刷新，那该怎么搞？</p><ul><li>不要急，新的博文已经安排上了，下篇奉上（怕迷路的小伙伴，不妨关注一下”一灰灰blog“🐺）</li></ul><h3 id="_5-小结" tabindex="-1"><a class="header-anchor" href="#_5-小结" aria-hidden="true">#</a> 5. 小结</h3><p>最后按照惯例小结一下，本文篇幅虽长，但知识点比较集中，总结下来，两句话搞定</p><ul><li>通过继承<code>MapPropertySource</code>来实现自定义配置源，注册到<code>Envrionment</code>可供<code>@Value</code>使用</li><li>使用<code>@Value</code>绑定自定义配置源时，注意注册的顺序要早于bean的初始化</li></ul><p>好的，到这里正文结束， 我是一灰灰，欢迎各位大佬来踩一踩长草的公众号&quot;一灰灰blog&quot;</p><h2 id="iii-不能错过的源码和相关知识点" tabindex="-1"><a class="header-anchor" href="#iii-不能错过的源码和相关知识点" aria-hidden="true">#</a> III. 不能错过的源码和相关知识点</h2><h3 id="_0-项目" tabindex="-1"><a class="header-anchor" href="#_0-项目" aria-hidden="true">#</a> 0. 项目</h3>',16),M={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"},x={href:"https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/002-dynamic-envronment",target:"_blank",rel:"noopener noreferrer"},q=n("p",null,[n("strong",null,"配置系列博文")],-1),z={href:"http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247486297&idx=1&sn=9c9014eb80987f8c6ef842b1ae02b155&chksm=fce710f5cb9099e31047b01b9d4f1e454cf31c6b11fdd85f7f896d5392e9db2f519af65fd5d2&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},P={href:"http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247485872&idx=1&sn=cb565e467d2d2dc9d69ad80a1f936813&chksm=fce7121ccb909b0a0efe89c94d5eba504cf490e0f0bdd15502def81be8c23b96ea76b5f247c4&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},A={href:"http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247485754&idx=1&sn=724f1a314f64faaaff580dfac0b58e73&chksm=fce71296cb909b8086442a6ebc982b5ed16b1a7252da2b8af27434c3dd6c757537867433efeb&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},T={href:"http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247484640&idx=1&sn=5ac20b68d7b539295dabc0c2aaf81314&chksm=fce71f4ccb90965afb626b437cc618172b2a34d8ff72b2ec30eba71e85ff9330503e0ead9e9a&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},B={href:"http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247484056&idx=1&sn=90f705d698b2613bcc269fea98dc993e&chksm=fce71934cb90902264f260b15977fc9bf7e19a3ebf3f779acec2f5842c9a8ff6ac514beebf60&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},j={href:"http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247484054&idx=1&sn=954d2bb34b5ce288dcfc2451cbcd2830&chksm=fce7193acb90902cf2ba829362da0e327d7849f3339e4d61188a03cabeb07af0590056f755d5&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},N={href:"http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247484053&idx=1&sn=3fc32d8a21a5cadc7b33b11681f272ae&chksm=fce71939cb90902fdc5b352e0d135b395248aa9ef40acd5e145bdd05a62185ff538c66f4fe26&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},E={href:"http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247484040&idx=1&sn=0b984bc76954f9214ed32ada38bc82d2&chksm=fce71924cb909032ad7a06a12aa71c23afe5698d552f182cc96bb5486b54e5a7332d7ab0736d&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"};function C(U,I){const a=l("ExternalLinkIcon");return o(),c("div",null,[v,b,i(" more "),g,n("p",null,[s("上面写了一个定时器，每10s刷新一下内存中的配置信息，当然这里也是可以配置一个文件变动监听器，相关有兴趣的话，可以看下"),n("a",f,[s("Java实现文件变动的监听可以怎么玩"),e(a)])]),h,n("ul",null,[n("li",null,[n("a",_,[s("【SpringBoot基础系列-实战】如何指定 bean 最先加载(应用篇)"),e(a)])]),n("li",null,[n("a",y,[s("SpringBoot系列教程之Bean之指定初始化顺序的若干姿势"),e(a)])]),n("li",null,[n("a",w,[s("SpringBoot系列教程之Bean加载顺序之错误使用姿势辟谣"),e(a)])])]),S,n("ul",null,[n("li",null,[s("工程："),n("a",M,[s("https://github.com/liuyueyi/spring-boot-demo"),e(a)])]),n("li",null,[s("源码: "),n("a",x,[s("https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/002-dynamic-envronment"),e(a)])])]),q,n("ul",null,[n("li",null,[n("a",z,[s("【SpringBoot 基础系列】@Value 中哪些你不知道的知识点"),e(a)])]),n("li",null,[n("a",P,[s("【SpringBoot 基础系列】ConfigurationProperties 配置绑定中那些你不知道的事情"),e(a)])]),n("li",null,[n("a",A,[s("【SpringBoot 基础系列】SpringBoot 配置篇之 PropertySource 加载 Yaml 配置文件实例演示"),e(a)])]),n("li",null,[n("a",T,[s("【SpringBoot 基础系列】实现一个自定义配置加载器（应用篇）"),e(a)])]),n("li",null,[n("a",B,[s("SpringBoot基础篇配置信息之配置刷新"),e(a)])]),n("li",null,[n("a",j,[s("SpringBoot基础篇配置信息之自定义配置指定与配置内引用"),e(a)])]),n("li",null,[n("a",N,[s("SpringBoot基础篇配置信息之多环境配置信息"),e(a)])]),n("li",null,[n("a",E,[s("SpringBoot基础篇配置信息之如何读取配置信息"),e(a)])])])])}const Q=p(m,[["render",C],["__file","10.210610-SpringBoot基础篇之自定义配置源的使用姿势.html.vue"]]);export{Q as default};
