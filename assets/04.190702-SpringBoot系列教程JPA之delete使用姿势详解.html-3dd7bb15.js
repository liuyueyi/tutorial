import{_ as p,V as o,W as l,X as c,Y as n,Z as s,$ as e,a1 as t,F as i}from"./framework-094145d2.js";const u="/tutorial/imgs/190702/00.jpg",r="/tutorial/imgs/190702/01.jpg",d="/tutorial/imgs/190702/02.jpg",k={},m=n("p",null,"常见db中的四个操作curd，前面的几篇博文分别介绍了insert，update，接下来我们看下delete的使用姿势，通过JPA可以怎样删除数据",-1),v=n("p",null,"一般来讲是不建议物理删除（直接从表中删除记录）数据的，在如今数据就是钱的时代，更常见的做法是在表中添加一个表示状态的字段，然后通过修改这个字段来表示记录是否有效，从而实现逻辑删除；这么做的原因如下",-1),b=n("ul",null,[n("li",null,"物理删除，如果出问题恢复比较麻烦"),n("li",null,"无法保证代码一定准确，在出问题的时候，删错了数据，那就gg了"),n("li",null,"删除数据，会导致重建索引"),n("li",null,"Innodb数据库对于已经删除的数据只是标记为删除，并不真正释放所占用的磁盘空间，这就导致InnoDB数据库文件不断增长，也会导致表碎片"),n("li",null,"逻辑删除，保留数据，方便后续针对数据的挖掘或者分析")],-1),g=n("h2",{id:"i-环境准备",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#i-环境准备","aria-hidden":"true"},"#"),s(" I. 环境准备")],-1),y=n("p",null,"在开始之前，当然得先准备好基础环境，如安装测试使用mysql，创建SpringBoot项目工程，设置好配置信息等，关于搭建项目的详情可以参考前一篇文章",-1),_={href:"http://spring.hhui.top/spring-blog/2019/06/12/190612-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/",target:"_blank",rel:"noopener noreferrer"},h=t('<p>下面简单的看一下演示添加记录的过程中，需要的配置</p><h3 id="_1-表准备" tabindex="-1"><a class="header-anchor" href="#_1-表准备" aria-hidden="true">#</a> 1. 表准备</h3><p>沿用前一篇的表，结构如下</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>money<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>\n  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;用户名&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>money<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;0&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;钱&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>is_deleted<span class="token punctuation">`</span></span> <span class="token keyword">tinyint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>create_at<span class="token punctuation">`</span></span> <span class="token keyword">timestamp</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;创建时间&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>update_at<span class="token punctuation">`</span></span> <span class="token keyword">timestamp</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;更新时间&#39;</span><span class="token punctuation">,</span>\n  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-项目配置" tabindex="-1"><a class="header-anchor" href="#_2-项目配置" aria-hidden="true">#</a> 2. 项目配置</h3><p>配置信息，与之前有一点点区别，我们新增了更详细的日志打印；本篇主要目标集中在添加记录的使用姿势，对于配置说明，后面单独进行说明</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment">## DataSource</span>\n<span class="token key attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://127.0.0.1:3306/story?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false</span>\n<span class="token key attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.jdbc.Driver</span>\n<span class="token key attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>\n<span class="token key attr-name">spring.datasource.password</span><span class="token punctuation">=</span>\n<span class="token comment">## jpa相关配置</span>\n<span class="token key attr-name">spring.jpa.database</span><span class="token punctuation">=</span><span class="token value attr-value">MYSQL</span>\n<span class="token key attr-name">spring.jpa.hibernate.ddl-auto</span><span class="token punctuation">=</span><span class="token value attr-value">none</span>\n<span class="token key attr-name">spring.jpa.show-sql</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>\n<span class="token key attr-name">spring.jackson.serialization.indent_output</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>\n<span class="token key attr-name">spring.jpa.hibernate.naming.physical-strategy</span><span class="token punctuation">=</span><span class="token value attr-value">org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-数据准备" tabindex="-1"><a class="header-anchor" href="#_3-数据准备" aria-hidden="true">#</a> 3. 数据准备</h3><p>数据修改嘛，所以我们先向表里面插入两条数据，用于后面的操作</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>money<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>money<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>is_deleted<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>create_at<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>update_at<span class="token punctuation">`</span></span><span class="token punctuation">)</span>\n<span class="token keyword">VALUES</span>\n	<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">&#39;jpa 一灰灰5&#39;</span><span class="token punctuation">,</span> <span class="token number">2323</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-07-02 08:42:41&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-07-02 08:42:41&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n	<span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">&#39;jpa 一灰灰6&#39;</span><span class="token punctuation">,</span> <span class="token number">2333</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-07-02 08:42:41&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-07-02 08:42:41&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n	<span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">&#39;jpa 一灰灰7&#39;</span><span class="token punctuation">,</span> <span class="token number">6666</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-07-02 08:42:41&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-07-02 08:42:41&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n	<span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">&#39;jpa 一灰灰8&#39;</span><span class="token punctuation">,</span> <span class="token number">2666</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-07-02 08:42:41&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-07-02 08:42:41&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="'+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="ii-delete使用教程" tabindex="-1"><a class="header-anchor" href="#ii-delete使用教程" aria-hidden="true">#</a> II. Delete使用教程</h2><p>下面谈及到的删除，都是物理删除，可以理解为直接将某些记录从表中抹除掉（并不是说删了就完全没有办法恢复）针对CURD四种操作而言，除了read之外，另外三个insert,update,delete都会加写锁（一般来将会涉及到行锁和gap锁，从后面也会看到，这三个操作要求显示声明事物）</p><h3 id="_1-表关联pojo" tabindex="-1"><a class="header-anchor" href="#_1-表关联pojo" aria-hidden="true">#</a> 1. 表关联POJO</h3><p>前面插入篇已经介绍了POJO的逐步创建过程，已经对应的注解含义，下面直接贴出成果</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@DynamicUpdate</span>
<span class="token annotation punctuation">@DynamicInsert</span>
<span class="token annotation punctuation">@Entity</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;money&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MoneyPO</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Id</span>
    <span class="token comment">// 如果是auto，则会报异常 Table &#39;mysql.hibernate_sequence&#39; doesn&#39;t exist</span>
    <span class="token comment">// @GeneratedValue(strategy = GenerationType.AUTO)</span>
    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">IDENTITY</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;money&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> money<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;is_deleted&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Byte</span> isDeleted<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;create_at&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@CreatedDate</span>
    <span class="token keyword">private</span> <span class="token class-name">Timestamp</span> createAt<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;update_at&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@CreatedDate</span>
    <span class="token keyword">private</span> <span class="token class-name">Timestamp</span> updateAt<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面类中的几个注解，说明如下</p><ul><li><code>@Data</code> 属于lombok注解，与jpa无关，自动生成<code>getter/setter/equals/hashcode/tostring</code>等方法</li><li><code>@Entity</code>, <code>@Table</code> jpa注解，表示这个类与db的表关联，具体匹配的是表 <code>money</code></li><li><code>@Id</code> <code>@GeneratedValue</code> 作用与自增主键</li><li><code>@Column</code>表明这个属性与表中的某列对应</li><li><code>@CreateDate</code>根据当前时间来生成默认的时间戳</li></ul><h3 id="_2-repository-api声明" tabindex="-1"><a class="header-anchor" href="#_2-repository-api声明" aria-hidden="true">#</a> 2. Repository API声明</h3><p>接下来我们新建一个api继承自<code>CurdRepository</code>，然后通过这个api来与数据库打交道</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MoneyDeleteRepository</span> <span class="token keyword">extends</span> <span class="token class-name">CrudRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MoneyPO</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 查询测试
     * <span class="token keyword">@param</span> <span class="token parameter">id</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MoneyPO</span><span class="token punctuation">&gt;</span></span> <span class="token function">queryByIdGreaterThanEqual</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-使用姿势" tabindex="-1"><a class="header-anchor" href="#_3-使用姿势" aria-hidden="true">#</a> 3. 使用姿势</h3><p>先写一个用于查询数据的方法，用于校验我们执行删除之后，是否确实被删除了</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">showLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MoneyPO</span><span class="token punctuation">&gt;</span></span> records <span class="token operator">=</span> moneyDeleteRepository<span class="token punctuation">.</span><span class="token function">queryByIdGreaterThanEqual</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>records<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在执行下面操作之前，先调用上面的，输出结果如</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>MoneyPO<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">20</span>, <span class="token assign-left variable">name</span><span class="token operator">=</span>jpa 一灰灰5, <span class="token assign-left variable">money</span><span class="token operator">=</span><span class="token number">2323</span>, <span class="token assign-left variable">isDeleted</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">createAt</span><span class="token operator">=</span><span class="token number">2019</span>-07-02 08:42:41.0, <span class="token assign-left variable">updateAt</span><span class="token operator">=</span><span class="token number">2019</span>-07-02 08:42:41.0<span class="token punctuation">)</span>, MoneyPO<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">21</span>, <span class="token assign-left variable">name</span><span class="token operator">=</span>jpa 一灰灰6, <span class="token assign-left variable">money</span><span class="token operator">=</span><span class="token number">2333</span>, <span class="token assign-left variable">isDeleted</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">createAt</span><span class="token operator">=</span><span class="token number">2019</span>-07-02 08:42:41.0, <span class="token assign-left variable">updateAt</span><span class="token operator">=</span><span class="token number">2019</span>-07-02 08:42:41.0<span class="token punctuation">)</span>, MoneyPO<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">22</span>, <span class="token assign-left variable">name</span><span class="token operator">=</span>jpa 一灰灰7, <span class="token assign-left variable">money</span><span class="token operator">=</span><span class="token number">6666</span>, <span class="token assign-left variable">isDeleted</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">createAt</span><span class="token operator">=</span><span class="token number">2019</span>-07-02 08:42:41.0, <span class="token assign-left variable">updateAt</span><span class="token operator">=</span><span class="token number">2019</span>-07-02 08:42:41.0<span class="token punctuation">)</span>, MoneyPO<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">23</span>, <span class="token assign-left variable">name</span><span class="token operator">=</span>jpa 一灰灰8, <span class="token assign-left variable">money</span><span class="token operator">=</span><span class="token number">2666</span>, <span class="token assign-left variable">isDeleted</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">createAt</span><span class="token operator">=</span><span class="token number">2019</span>-07-02 08:42:41.0, <span class="token assign-left variable">updateAt</span><span class="token operator">=</span><span class="token number">2019</span>-07-02 08:42:41.0<span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="a-根据主键id进行删除" tabindex="-1"><a class="header-anchor" href="#a-根据主键id进行删除" aria-hidden="true">#</a> a. 根据主键id进行删除</h4><p>这种应该属于最常见的删除方式了，为了避免误删，通过精确的主键id来删除记录，是一个非常好的使用姿势，<code>CrudRepository</code>这个接口已经提供了对应的方法，所以我们可以直接使用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 直接根据id进行删除</span>
    moneyDeleteRepository<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">showLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行完毕之后，输出结果如下，对比前面的输出可以知道 <code>id=21</code> 的记录被删除了</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>MoneyPO<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">20</span>, <span class="token assign-left variable">name</span><span class="token operator">=</span>jpa 一灰灰5, <span class="token assign-left variable">money</span><span class="token operator">=</span><span class="token number">2323</span>, <span class="token assign-left variable">isDeleted</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">createAt</span><span class="token operator">=</span><span class="token number">2019</span>-07-02 08:42:41.0, <span class="token assign-left variable">updateAt</span><span class="token operator">=</span><span class="token number">2019</span>-07-02 08:42:41.0<span class="token punctuation">)</span>, MoneyPO<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">22</span>, <span class="token assign-left variable">name</span><span class="token operator">=</span>jpa 一灰灰7, <span class="token assign-left variable">money</span><span class="token operator">=</span><span class="token number">6666</span>, <span class="token assign-left variable">isDeleted</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">createAt</span><span class="token operator">=</span><span class="token number">2019</span>-07-02 08:42:41.0, <span class="token assign-left variable">updateAt</span><span class="token operator">=</span><span class="token number">2019</span>-07-02 08:42:41.0<span class="token punctuation">)</span>, MoneyPO<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">23</span>, <span class="token assign-left variable">name</span><span class="token operator">=</span>jpa 一灰灰8, <span class="token assign-left variable">money</span><span class="token operator">=</span><span class="token number">2666</span>, <span class="token assign-left variable">isDeleted</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">createAt</span><span class="token operator">=</span><span class="token number">2019</span>-07-02 08:42:41.0, <span class="token assign-left variable">updateAt</span><span class="token operator">=</span><span class="token number">2019</span>-07-02 08:42:41.0<span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>然后一个疑问自然而然的来了，如果这个id对应的记录不存在，会怎样?</strong></p><p>把上面代码再执行一次，发现抛了异常</p><figure><img src="`+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>为什么会这样呢？我们debug进去，调用的实现是默认的 <code>SimpleJpaRepository</code>，其源码如</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 类为: org.springframework.data.jpa.repository.support.SimpleJpaRepository</span>
<span class="token annotation punctuation">@Transactional</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token class-name">ID</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>

	<span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token constant">ID_MUST_NOT_BE_NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token function">delete</span><span class="token punctuation">(</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">EmptyResultDataAccessException</span><span class="token punctuation">(</span>
			<span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;No %s entity with id %s exists!&quot;</span><span class="token punctuation">,</span> entityInformation<span class="token punctuation">.</span><span class="token function">getJavaType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Transactional</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">T</span> entity<span class="token punctuation">)</span> <span class="token punctuation">{</span>

	<span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>entity<span class="token punctuation">,</span> <span class="token string">&quot;The entity must not be null!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	em<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>em<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span> <span class="token operator">?</span> entity <span class="token operator">:</span> em<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从源码可以看出，这个是先通过id进行查询，如果对应的记录不存在时，直接抛异常；当存在时，走remove逻辑；</p><p>如果我们希望删除一个不存在的数据时，不要报错，可以怎么办？</p><ul><li>自定义实现一个继承<code>SimpleJpaRepository</code>的类，覆盖删除方法</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Repository</span>
<span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>readOnly <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MoneyDeleteRepositoryV2</span> <span class="token keyword">extends</span> <span class="token class-name">SimpleJpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MoneyPO</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token class-name">MoneyDeleteRepositoryV2</span><span class="token punctuation">(</span><span class="token class-name">EntityManager</span> em<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token class-name">JpaEntityInformationSupport</span><span class="token punctuation">.</span><span class="token function">getEntityInformation</span><span class="token punctuation">(</span><span class="token class-name">MoneyPO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> em<span class="token punctuation">)</span><span class="token punctuation">,</span> em<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">MoneyDeleteRepositoryV2</span><span class="token punctuation">(</span><span class="token class-name">JpaEntityInformation</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MoneyPO</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> entityInformation<span class="token punctuation">,</span> <span class="token class-name">EntityManager</span> entityManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>entityInformation<span class="token punctuation">,</span> entityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">MoneyDeleteRepositoryV2</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MoneyPO</span><span class="token punctuation">&gt;</span></span> domainClass<span class="token punctuation">,</span> <span class="token class-name">EntityManager</span> em<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>domainClass<span class="token punctuation">,</span> em<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MoneyPO</span><span class="token punctuation">&gt;</span></span> rec <span class="token operator">=</span> <span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        rec<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token operator">::</span><span class="token function">delete</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,40),f={href:"https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/102-jpa",target:"_blank",rel:"noopener noreferrer"},E=t(`<h4 id="b-条件判断删除" tabindex="-1"><a class="header-anchor" href="#b-条件判断删除" aria-hidden="true">#</a> b. 条件判断删除</h4><p>虽然根据id进行删除比较稳妥，但也无法避免某些情况下需要根据其他的字段来删除，比如我们希望删除名为 <code>jpa 一灰灰7</code>的数据，这时则需要我们在<code>MoneyDeleteRepository</code>新增一个方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 根据name进行删除
 *
 * <span class="token keyword">@param</span> <span class="token parameter">name</span>
 */</span>
<span class="token keyword">void</span> <span class="token function">deleteByName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里比较简单的提一下这个方法的命名规则，后面在查询这一篇会更加详细的说明；</p><ul><li><code>delete</code> 表示执行的是删除操作</li><li><code>By</code> 表示根据某个字段来进行条件限定</li><li><code>Name</code> 这个有POJO中的属性匹配</li></ul><p>上面这个方法，如果翻译成sql，相当于 <code>delete from money where name=xx</code></p><p>调用方式和前面一样，如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">deleteByName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    moneyDeleteRepository<span class="token punctuation">.</span><span class="token function">deleteByName</span><span class="token punctuation">(</span><span class="token string">&quot;jpa 一灰灰7&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">showLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们执行上面的测试，发现并不能成功，报错了</p><figure><img src="`+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>通过前面update的学习，知道需要显示加一个事物的注解，我们这里直接加在<code>Repository</code>中</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 根据name进行删除
 *
 * <span class="token keyword">@param</span> <span class="token parameter">name</span>
 */</span>
<span class="token annotation punctuation">@Transactional</span>
<span class="token keyword">void</span> <span class="token function">deleteByName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后再次执行输出如下，这里我们把sql的日志也打印了</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Hibernate: <span class="token keyword">select</span> moneypo0_.id as id1_0_, moneypo0_.create_at as create_a2_0_, moneypo0_.is_deleted as is_delet3_0_, moneypo0_.money as money4_0_, moneypo0_.name as name5_0_, moneypo0_.update_at as update_a6_0_ from money moneypo0_ where <span class="token assign-left variable">moneypo0_.name</span><span class="token operator">=</span>?
Hibernate: delete from money where <span class="token assign-left variable">id</span><span class="token operator">=</span>?
Hibernate: <span class="token keyword">select</span> moneypo0_.id as id1_0_, moneypo0_.create_at as create_a2_0_, moneypo0_.is_deleted as is_delet3_0_, moneypo0_.money as money4_0_, moneypo0_.name as name5_0_, moneypo0_.update_at as update_a6_0_ from money moneypo0_ where moneypo0_.id<span class="token operator">&gt;=</span>?
<span class="token punctuation">[</span>MoneyPO<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">20</span>, <span class="token assign-left variable">name</span><span class="token operator">=</span>jpa 一灰灰5, <span class="token assign-left variable">money</span><span class="token operator">=</span><span class="token number">2323</span>, <span class="token assign-left variable">isDeleted</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">createAt</span><span class="token operator">=</span><span class="token number">2019</span>-07-02 08:42:41.0, <span class="token assign-left variable">updateAt</span><span class="token operator">=</span><span class="token number">2019</span>-07-02 08:42:41.0<span class="token punctuation">)</span>, MoneyPO<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">23</span>, <span class="token assign-left variable">name</span><span class="token operator">=</span>jpa 一灰灰8, <span class="token assign-left variable">money</span><span class="token operator">=</span><span class="token number">2666</span>, <span class="token assign-left variable">isDeleted</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">createAt</span><span class="token operator">=</span><span class="token number">2019</span>-07-02 08:42:41.0, <span class="token assign-left variable">updateAt</span><span class="token operator">=</span><span class="token number">2019</span>-07-02 08:42:41.0<span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从最终剩余的记录来看，name为<code>jpa 一灰灰7</code>的被删除了，再看一下前面删除的sql，会发现一个有意思的地方，<code>deleteByName</code> 这个方法，翻译成sql变成了两条</p><ul><li><code>select * from money where name=xxx</code> 先根据name查询记录</li><li><code>delete from money where id = xxx</code> 根据前面查询记录的id，删除记录</li></ul><h4 id="c-比较删除" tabindex="-1"><a class="header-anchor" href="#c-比较删除" aria-hidden="true">#</a> c. 比较删除</h4><p>接下来演示一个删除money在<code>[2000,3000]</code>区间的记录，这时我们新增的放入可以是</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 根据数字比较进行删除
 *
 * <span class="token keyword">@param</span> <span class="token parameter">low</span>
 * <span class="token keyword">@param</span> <span class="token parameter">big</span>
 */</span>
<span class="token annotation punctuation">@Transactional</span>
<span class="token keyword">void</span> <span class="token function">deleteByMoneyBetween</span><span class="token punctuation">(</span><span class="token class-name">Long</span> low<span class="token punctuation">,</span> <span class="token class-name">Long</span> big<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过方法命名也可以简单知道上面这个等同于sql <code>delete from money where money between xxx and xxx</code></p><p>测试代码为</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">deleteByCompare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    moneyDeleteRepository<span class="token punctuation">.</span><span class="token function">deleteByMoneyBetween</span><span class="token punctuation">(</span><span class="token number">2000L</span><span class="token punctuation">,</span> <span class="token number">3000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">showLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出日志</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Hibernate: select moneypo0_.id as id1_0_, moneypo0_.create_at as create_a2_0_, moneypo0_.is_deleted as is_delet3_0_, moneypo0_.money as money4_0_, moneypo0_.name as name5_0_, moneypo0_.update_at as update_a6_0_ from money moneypo0_ where moneypo0_.money between ? and ?
Hibernate: delete from money where id=?
Hibernate: delete from money where id=?
Hibernate: select moneypo0_.id as id1_0_, moneypo0_.create_at as create_a2_0_, moneypo0_.is_deleted as is_delet3_0_, moneypo0_.money as money4_0_, moneypo0_.name as name5_0_, moneypo0_.update_at as update_a6_0_ from money moneypo0_ where moneypo0_.id&gt;=?
[]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从拼接的sql可以看出，上面的逻辑等同于，先执行了查询，然后根据id一个一个进行删除....</p><h3 id="_4-小结" tabindex="-1"><a class="header-anchor" href="#_4-小结" aria-hidden="true">#</a> 4. 小结</h3><p>我们通过声明方法的方式来实现条件删除；需要注意</p><ul><li>删除需要显示声明事物 <code>@Transactional</code></li><li>删除一个不存在的记录，会抛异常</li><li>声明删除方法时，实际等同于先查询记录，然后根据记录的id进行精准删除</li></ul><h2 id="ii-其他" tabindex="-1"><a class="header-anchor" href="#ii-其他" aria-hidden="true">#</a> II. 其他</h2><p><strong>源码</strong></p>`,30),w={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"},A={href:"https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/102-jpa",target:"_blank",rel:"noopener noreferrer"},B=n("p",null,[n("strong",null,"相关博文")],-1),j={href:"https://blog.hhui.top/hexblog/2018/03/23/mysql%E4%B9%8B%E9%94%81%E4%B8%8E%E4%BA%8B%E5%8A%A1%E8%AF%A6%E8%A7%A3/",target:"_blank",rel:"noopener noreferrer"},x={href:"https://blog.hhui.top/hexblog/2018/05/12/Spring%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BA%8B%E5%8A%A1%E7%9A%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/",target:"_blank",rel:"noopener noreferrer"},T={href:"https://blog.hhui.top/hexblog/2018/05/13/Spring%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E4%B8%8E%E4%BC%A0%E6%92%AD%E5%B1%9E%E6%80%A7/",target:"_blank",rel:"noopener noreferrer"},D={href:"http://spring.hhui.top/spring-blog/2019/06/12/190612-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/",target:"_blank",rel:"noopener noreferrer"},M={href:"http://spring.hhui.top/spring-blog/2019/06/14/190614-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA%E4%B9%8B%E6%96%B0%E5%A2%9E%E8%AE%B0%E5%BD%95%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/",target:"_blank",rel:"noopener noreferrer"},I={href:"http://spring.hhui.top/spring-blog/2019/06/23/190623-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA%E4%B9%8Bupdate%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/",target:"_blank",rel:"noopener noreferrer"};function N(q,O){const a=i("ExternalLinkIcon");return o(),l("div",null,[m,v,b,c(" more "),g,y,n("ul",null,[n("li",null,[n("a",_,[s("190612-SpringBoot系列教程JPA之基础环境搭建"),e(a)])])]),h,n("p",null,[s("然后再调用上面的方法就可以了，不演示具体的测试case了，源码可以到项目工程中查看 👉 "),n("a",f,[s("源码"),e(a)])]),E,n("ul",null,[n("li",null,[s("工程："),n("a",w,[s("https://github.com/liuyueyi/spring-boot-demo"),e(a)])]),n("li",null,[s("module: "),n("a",A,[s("https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/102-jpa"),e(a)])])]),B,n("ul",null,[n("li",null,[n("a",j,[s("mysql之锁与事务详解"),e(a)])]),n("li",null,[n("a",x,[s("Spring学习之事务的使用姿势"),e(a)])]),n("li",null,[n("a",T,[s("Spring学习之事务管理与传播属性"),e(a)])]),n("li",null,[n("a",D,[s("190612-SpringBoot系列教程JPA之基础环境搭建"),e(a)])]),n("li",null,[n("a",M,[s("190614-SpringBoot系列教程JPA之新增记录使用姿势"),e(a)])]),n("li",null,[n("a",I,[s("190623-SpringBoot系列教程JPA之update使用姿势"),e(a)])])])])}const S=p(k,[["render",N],["__file","04.190702-SpringBoot系列教程JPA之delete使用姿势详解.html.vue"]]);export{S as default};
