import{_ as c,V as l,W as i,Y as s,Z as n,$ as a,a0 as u,a1 as e,F as p}from"./framework-094145d2.js";const r="/tutorial/imgs/column/springai/A05-1.webp",d="/tutorial/imgs/column/springai/A05-2.webp",k="/tutorial/imgs/column/springai/A05-3.webp",m={},v=s("h1",{id:"_05-使用langgraph4j实现agent路由选择",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_05-使用langgraph4j实现agent路由选择","aria-hidden":"true"},"#"),n(" 05.使用LangGraph4J实现Agent路由选择")],-1),g=e(`<p>在上文中介绍到 <code>LangGraph4j</code> 时，就提到了它有一个重要的特性，就是可以定义循环图，使不同的组件（代理、工具或自定义逻辑）能够以有状态的方式进行交互</p><p>接下来我们来实际感受一下，上面这个重要的特性是如何表现的</p><h2 id="一、项目创建" tabindex="-1"><a class="header-anchor" href="#一、项目创建" aria-hidden="true">#</a> 一、项目创建</h2><h3 id="_1-创建langgraph4j-springai项目" tabindex="-1"><a class="header-anchor" href="#_1-创建langgraph4j-springai项目" aria-hidden="true">#</a> 1. 创建LangGraph4j + SpringAI项目</h3><p>具体的创建过程，与上文一致，有兴趣的小伙伴请关注 <a href="../%E5%9F%BA%E7%A1%80%E7%AF%87/14.%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AALanggraph4j%E5%AE%9E%E4%BE%8B%E5%B7%A5%E7%A8%8B">创建一个Langgraph4j示例工程</a></p><h3 id="_2-配置大模型密钥" tabindex="-1"><a class="header-anchor" href="#_2-配置大模型密钥" aria-hidden="true">#</a> 2. 配置大模型密钥</h3><p>这里依然使用智谱的免费大模型，使用其他的模型时，请自行替换<code>start</code>和下面的配置</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">ai</span><span class="token punctuation">:</span>
    <span class="token key atrule">zhipuai</span><span class="token punctuation">:</span>
      <span class="token comment"># api-key 使用你自己申请的进行替换；如果为了安全考虑，可以通过启动参数进行设置</span>
      <span class="token key atrule">api-key</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>zhipuai<span class="token punctuation">-</span>api<span class="token punctuation">-</span>key<span class="token punctuation">}</span>
      <span class="token key atrule">chat</span><span class="token punctuation">:</span> <span class="token comment"># 聊天模型</span>
        <span class="token key atrule">options</span><span class="token punctuation">:</span>
          <span class="token key atrule">model</span><span class="token punctuation">:</span> GLM<span class="token punctuation">-</span>4<span class="token punctuation">-</span>Flash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、创建一个地点的旅游推荐agent" tabindex="-1"><a class="header-anchor" href="#二、创建一个地点的旅游推荐agent" aria-hidden="true">#</a> 二、创建一个地点的旅游推荐Agent</h2><h3 id="_1-工作流程" tabindex="-1"><a class="header-anchor" href="#_1-工作流程" aria-hidden="true">#</a> 1. 工作流程</h3><p>在这里，我们设计一个简单的业务流程，开发一个旅游推荐的Agent，在这个agent中，我们需要结合旅游地点的天气，来选择不同的推荐项目</p><figure><img src="`+r+'" alt="由LangGraph4j生成的流程图" tabindex="0" loading="lazy"><figcaption>由LangGraph4j生成的流程图</figcaption></figure><p>注意上面这个流程图，虽然它是事后由<code>LangGraph4j</code>生成的，实际也是呈现我们的旅游推荐Agent的核心工作流程</p><ol><li>Weather: 根据传入的地方，获取当前的天气</li><li>Router: 作为一个路由节点（实际上啥也没干） <ul><li>当天气为晴天时，路由到 outdoor，推荐一些室外的旅游项目</li><li>当天气为雨天时，路由到 indoor，推荐一些室内的旅游项目</li><li>当天气为其他情况时，路由到 default，直接结束</li></ul></li></ol><h3 id="_2-基本概念科普" tabindex="-1"><a class="header-anchor" href="#_2-基本概念科普" aria-hidden="true">#</a> 2. 基本概念科普</h3><p>在<code>LangGraph</code>中，有几个核心的概念，我们现简单来看一下；后面的实现中，会针对性的实现这些</p>',16),h={href:"https://github.com/langgraph4j/langgraph4j",target:"_blank",rel:"noopener noreferrer"},b=e(`<h4 id="agentstate" tabindex="-1"><a class="header-anchor" href="#agentstate" aria-hidden="true">#</a> AgentState</h4><p>AgentState（或其扩展类）表示图的共享状态。它本质上是一个映射 (<code>Map&lt;String, Object&gt;</code>)，会在各个节点之间传递。每个节点都可以读取此状态并返回更新。</p><ul><li><code>Schema</code>：状态的结构由“Schema”定义，它是一个 <code>Map&lt;String, Channel.Reducer&gt;</code> 类型的对象。Map 中的每个键都对应状态中的一个属性。</li><li><code>Channel.Reducer</code>：Reducer 定义了如何处理状态属性的更新。例如，新值可能会覆盖旧值，或者添加到现有值列表中。</li><li><code>Channel.Default&lt;T&gt;</code>：如果状态属性尚未设置，则为其提供默认值。</li><li><code>Channel.Appender&lt;T&gt;</code> <code>/</code> <code>MessageChannel.Appender&lt;M&gt;</code>：一种常见的 Reducer 类型，它将新值附加到与状态属性关联的列表中。这对于累积消息、工具调用或其他数据序列非常有用。MessageChannel.Appender 专为聊天消息而设计，还可以处理通过 ID 删除消息的操作。</li></ul><h4 id="nodes" tabindex="-1"><a class="header-anchor" href="#nodes" aria-hidden="true">#</a> Nodes</h4><p>节点是构成图的执行操作的基石。节点通常是一个函数（或一个实现 <code>NodeAction&lt;S&gt;</code> 或 <code>AsyncNodeAction&lt;S&gt;</code> 的类），它：</p><ul><li>接收当前 <code>AgentState</code> 作为输入。</li><li>执行某些计算（例如，调用 LLM、执行工具、运行自定义业务逻辑）。</li><li>返回一个表示状态更新的 <code>Map&lt;String, Object&gt;</code> 对象。这些更新随后会根据架构的 <code>Reducer</code> 应用于 <code>AgentState</code>。</li></ul><p>节点可以是同步的，也可以是异步的（CompletableFuture）。</p><h4 id="edges" tabindex="-1"><a class="header-anchor" href="#edges" aria-hidden="true">#</a> Edges</h4><p>边定义节点之间的控制流。</p><ul><li>普通边：从一个节点到另一个节点的无条件转换。节点 A 完成后，控制权始终传递给节点 B。您可以使用 <code>addEdge(sourceNodeName, destinationNodeName)</code> 定义普通边。</li><li>条件边：下一个节点根据当前 <code>AgentState</code> 动态确定。 <ul><li>源节点完成后，将执行 <code>EdgeAction&lt;S&gt;</code>（或 <code>AsyncEdgeAction&lt;S&gt;</code>）函数。</li><li>该函数接收当前状态并返回下一个要执行的节点的名称。</li><li>这允许分支逻辑（例如，如果代理决定使用某个工具，则转到<code>execute_tool</code>节点；否则，转到<code>respond_to_user</code>节点）。</li><li>条件边使用 <code>addConditionalEdges(...)</code> 定义。</li></ul></li><li>入口点：您还可以使用 <code>addConditionalEntryPoint(...)</code> 为图定义条件入口点。</li></ul><h4 id="compilation" tabindex="-1"><a class="header-anchor" href="#compilation" aria-hidden="true">#</a> Compilation</h4><p>在 <code>StateGraph</code> 中定义好所有节点和边后，可以使用 <code>compile()</code> 将其编译为 <code>CompiledGraph&lt;S extends AgentState&gt;</code>。</p><p>这个编译后的图是你的逻辑的不可变且可运行的表示。编译过程会验证图的结构（例如，检查是否存在孤立节点）。</p><h4 id="checkpoints-persistence" tabindex="-1"><a class="header-anchor" href="#checkpoints-persistence" aria-hidden="true">#</a> Checkpoints (Persistence)</h4><p><code>LangGraph4j</code> 允许您在任何步骤保存（检查点）图的状态。这在以下情况下非常有用：</p><ul><li>调试：检查各个点的状态以了解发生了什么。</li><li>恢复：将图恢复到之前的状态并继续执行。</li><li>长时间运行的进程：持久化长时间运行的代理交互的状态。您通常会使用 <code>CheckpointSaver</code> 实现（例如，使用 <code>MemorySaver</code> 进行内存存储，或者您也可以自己实现持久化存储）。</li></ul><h3 id="_3-node实现" tabindex="-1"><a class="header-anchor" href="#_3-node实现" aria-hidden="true">#</a> 3. Node实现</h3><p>从上面的流程图中我们也可以看出，这里定义了四个<code>Node</code>，接下来我们分别给于实现</p><p><strong>WeatherNode：用于获取地区的天气</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token comment">// Node1: weather agent - 这里示例使用简单规则模拟天气（生产可以换成真实天气 API）</span>
<span class="token class-name">NodeAction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AgentState</span><span class="token punctuation">&gt;</span></span> weatherNode <span class="token operator">=</span> state <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 取入参 location（状态里可能已有）</span>
    <span class="token class-name">String</span> loc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> state<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string">&quot;location&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> location<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 简单随机/固定返回以示范。生产请替换为天气 API 的结果（&quot;晴天&quot;/&quot;雨天&quot;/&quot;阴天&quot; 等）</span>
    <span class="token comment">// 这里为了 demo，按 location 最后一个字判断（仅示例）</span>
    <span class="token class-name">String</span> weather<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>loc<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&quot;市&quot;</span><span class="token punctuation">)</span> <span class="token operator">||</span> loc<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&quot;区&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> weather <span class="token operator">=</span> <span class="token string">&quot;晴天&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>loc<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&quot;省&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> weather <span class="token operator">=</span> <span class="token string">&quot;阴天&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> weather <span class="token operator">=</span> <span class="token string">&quot;雨天&quot;</span><span class="token punctuation">;</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;[weatherNode] location=&quot;</span> <span class="token operator">+</span> loc <span class="token operator">+</span> <span class="token string">&quot; =&gt; weather=&quot;</span> <span class="token operator">+</span> weather<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>
            <span class="token string">&quot;location&quot;</span><span class="token punctuation">,</span> loc<span class="token punctuation">,</span>
            <span class="token string">&quot;weather&quot;</span><span class="token punctuation">,</span> weather
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>RouterNode: 路由节点</strong></p><p>这个路由节点实际上啥也没干，不要也行，这里主要是用它打印了一下 WeatherNode 的输出</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Node2: router - 只是做路由，本节点不做state的任何变更</span>
<span class="token class-name">NodeAction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AgentState</span><span class="token punctuation">&gt;</span></span> routerNode <span class="token operator">=</span> state <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这个节点，用于模拟啥也不干的场景</span>
    <span class="token class-name">String</span> w <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> state<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string">&quot;weather&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;[routerNode] weather=&quot;</span> <span class="token operator">+</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不改变状态</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>OutdoorNode: 室外推荐节点</strong></p><p>在这个节点中，我们使用大模型来推荐外出旅游的项目</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Node3: outdoor - 用大模型生成外出推荐</span>
<span class="token class-name">NodeAction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AgentState</span><span class="token punctuation">&gt;</span></span> outdoorNode <span class="token operator">=</span> state <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> loc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> state<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string">&quot;location&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> location<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> weather <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> state<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string">&quot;weather&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token string">&quot;晴天&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> prompt <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>
            <span class="token string">&quot;你是一个资深旅行推荐师：用户在地点“%s”，当前天气“%s”。请用中文给出 3 个适合外出（户外）游玩的项目，每个项目写一行：项目名称 - 30 字以内简短描述 - 预计耗时。不要写多余开头语，返回纯文本列表。&quot;</span><span class="token punctuation">,</span>
            loc<span class="token punctuation">,</span> weather<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> rec <span class="token operator">=</span> chatClient<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">user</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;[outdoorNode] model result:\\n&quot;</span> <span class="token operator">+</span> rec<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;outdoor_recommendations&quot;</span><span class="token punctuation">,</span> rec<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>IndoorNode: 室内推荐节点</strong></p><p>在这个节点中，我们使用大模型来推荐适合室内游玩的项目</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Node4: indoor - 用大模型生成室内推荐</span>
<span class="token class-name">NodeAction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AgentState</span><span class="token punctuation">&gt;</span></span> indoorNode <span class="token operator">=</span> state <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> loc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> state<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string">&quot;location&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> location<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> weather <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> state<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string">&quot;weather&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token string">&quot;雨天&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> prompt <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>
            <span class="token string">&quot;你是一个资深旅行推荐师：用户在地点“%s”，当前天气“%s”。请用中文给出 3 个适合室内游玩的项目，每个项目写一行：项目名称 - 30 字以内简短描述 - 预计耗时。不要写多余开头语，返回纯文本列表。&quot;</span><span class="token punctuation">,</span>
            loc<span class="token punctuation">,</span> weather<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> rec <span class="token operator">=</span> chatClient<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">user</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;[indoorNode] model result:\\n&quot;</span> <span class="token operator">+</span> rec<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;indoor_recommendations&quot;</span><span class="token punctuation">,</span> rec<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到这里，我们的四个节点已经定义完成，接下来进行节点的连接</p><h3 id="_4-节点连接" tabindex="-1"><a class="header-anchor" href="#_4-节点连接" aria-hidden="true">#</a> 4. 节点连接</h3><p>节点连接，就是将节点通过<code>addEdge</code>方法进行连接，这里我们连接了四个节点，并且定义了条件边，用于判断当前节点是否需要执行</p><p>首先实现路由的条件边判定</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">RouteEvaluationResult</span> <span class="token keyword">implements</span> <span class="token class-name">AsyncEdgeAction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AgentState</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">AgentState</span> agentState<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 根据天气来判断下一个节点</span>
        <span class="token class-name">String</span> w <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> agentState<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token string">&quot;weather&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token string">&quot;晴天&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> res<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;晴天&quot;</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res <span class="token operator">=</span> <span class="token string">&quot;outdoor&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;雨天&quot;</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            res <span class="token operator">=</span> <span class="token string">&quot;indoor&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 其余天气直接结束</span>
            res <span class="token operator">=</span> <span class="token constant">END</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后是完成完整的节点、边定义</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Build StateGraph</span>
<span class="token keyword">var</span> graph <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StateGraph</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">AgentState</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">addNode</span><span class="token punctuation">(</span><span class="token string">&quot;weather&quot;</span><span class="token punctuation">,</span> <span class="token class-name">AsyncNodeAction</span><span class="token punctuation">.</span><span class="token function">node_async</span><span class="token punctuation">(</span>weatherNode<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">addNode</span><span class="token punctuation">(</span><span class="token string">&quot;router&quot;</span><span class="token punctuation">,</span> <span class="token class-name">AsyncNodeAction</span><span class="token punctuation">.</span><span class="token function">node_async</span><span class="token punctuation">(</span>routerNode<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">addNode</span><span class="token punctuation">(</span><span class="token string">&quot;outdoor&quot;</span><span class="token punctuation">,</span> <span class="token class-name">AsyncNodeAction</span><span class="token punctuation">.</span><span class="token function">node_async</span><span class="token punctuation">(</span>outdoorNode<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">addNode</span><span class="token punctuation">(</span><span class="token string">&quot;indoor&quot;</span><span class="token punctuation">,</span> <span class="token class-name">AsyncNodeAction</span><span class="token punctuation">.</span><span class="token function">node_async</span><span class="token punctuation">(</span>indoorNode<span class="token punctuation">)</span><span class="token punctuation">)</span>

        <span class="token comment">// entry</span>
        <span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token constant">START</span><span class="token punctuation">,</span> <span class="token string">&quot;weather&quot;</span><span class="token punctuation">)</span>
        <span class="token comment">// weather -&gt; router</span>
        <span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token string">&quot;weather&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;router&quot;</span><span class="token punctuation">)</span>
        <span class="token comment">// router 根据 state 决定去哪里</span>
        <span class="token punctuation">.</span><span class="token function">addConditionalEdges</span><span class="token punctuation">(</span><span class="token string">&quot;router&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RouteEvaluationResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">EdgeMappings</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token string">&quot;outdoor&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;outdoor&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token string">&quot;indoor&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;indoor&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">toEND</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment">// 输出结束</span>
        <span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token string">&quot;outdoor&quot;</span><span class="token punctuation">,</span> <span class="token constant">END</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">addEdge</span><span class="token punctuation">(</span><span class="token string">&quot;indoor&quot;</span><span class="token punctuation">,</span> <span class="token constant">END</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-输出plantuml" tabindex="-1"><a class="header-anchor" href="#_5-输出plantuml" aria-hidden="true">#</a> 5. 输出PlantUML</h3><p>在上面的节点定义完成后，我们可以通过<code>graph.getGraph()</code>方法，将节点定义转换为PlantUML格式，方便我们查看节点定义</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 打印 plantUml 格式流程图
 *
 * <span class="token keyword">@return</span>
 */</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">printPlantUml</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">GraphRepresentation</span> representation <span class="token operator">=</span> graph<span class="token punctuation">.</span><span class="token function">getGraph</span><span class="token punctuation">(</span><span class="token class-name">GraphRepresentation<span class="token punctuation">.</span>Type</span><span class="token punctuation">.</span><span class="token constant">PLANTUML</span><span class="token punctuation">,</span> <span class="token string">&quot;旅游推荐Agent&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取 PlantUML 文本</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;=== PlantUML 图 ===&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>representation<span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;------- UML图结束 ---------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> representation<span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>@startuml ____Agent
skinparam usecaseFontSize 14
skinparam usecaseStereotypeFontSize 12
skinparam hexagonFontSize 14
skinparam hexagonStereotypeFontSize 12
title &quot;旅游推荐Agent&quot;
footer

powered by langgraph4j
end footer
circle start&lt;&lt;input&gt;&gt; as __START__
circle stop as __END__
usecase &quot;weather&quot;&lt;&lt;Node&gt;&gt;
usecase &quot;router&quot;&lt;&lt;Node&gt;&gt;
usecase &quot;outdoor&quot;&lt;&lt;Node&gt;&gt;
usecase &quot;indoor&quot;&lt;&lt;Node&gt;&gt;
hexagon &quot;check state&quot; as condition1&lt;&lt;Condition&gt;&gt;
&quot;__START__&quot; -down-&gt; &quot;weather&quot;
&quot;weather&quot; -down-&gt; &quot;router&quot;
&quot;router&quot; .down.&gt; &quot;condition1&quot;
&quot;condition1&quot; .down.&gt; &quot;outdoor&quot;
&#39;&quot;router&quot; .down.&gt; &quot;outdoor&quot;
&quot;condition1&quot; .down.&gt; &quot;indoor&quot;
&#39;&quot;router&quot; .down.&gt; &quot;indoor&quot;
&quot;condition1&quot; .down.&gt; &quot;__END__&quot;
&#39;&quot;router&quot; .down.&gt; &quot;__END__&quot;
&quot;outdoor&quot; -down-&gt; &quot;__END__&quot;
&quot;indoor&quot; -down-&gt; &quot;__END__&quot;
@enduml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,41),q={href:"https://www.plantuml.com/plantuml/uml/SyfFKj2rKt3CoKnELR1Io4ZDoSa700001",target:"_blank",rel:"noopener noreferrer"},f=e('<figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_6-agent封装" tabindex="-1"><a class="header-anchor" href="#_6-agent封装" aria-hidden="true">#</a> 6. Agent封装</h3><p>接下来就是将上面的实现，封装为一个完整的，对外直接使用的Agent，源码可以在最后的项目链接中获取，类名为 <code>WeatherRecommendAgent</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeatherRecommendAgent</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ChatClient</span> chatClient<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">CompiledGraph</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AgentState</span><span class="token punctuation">&gt;</span></span> graph<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">WeatherRecommendAgent</span><span class="token punctuation">(</span><span class="token class-name">ChatClient</span> chatClient<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">GraphStateException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>chatClient <span class="token operator">=</span> chatClient<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>graph <span class="token operator">=</span> <span class="token function">initGraph</span><span class="token punctuation">(</span><span class="token string">&quot;北京&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">printPlantUml</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">CompiledGraph</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AgentState</span><span class="token punctuation">&gt;</span></span> <span class="token function">initGraph</span><span class="token punctuation">(</span><span class="token class-name">String</span> location<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">GraphStateException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这里实现节点定义</span>
        <span class="token comment">// 节点链接</span>
        <span class="token comment">// .... 省略上面的实现</span>
        <span class="token keyword">return</span> graph<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 通过给定的地方，返回旅游推荐项目
     *
     * <span class="token keyword">@param</span> <span class="token parameter">location</span> 地区
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">recommendByLocation</span><span class="token punctuation">(</span><span class="token class-name">String</span> location<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 初始 state，用于上下文传参</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> init <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        init<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;location&quot;</span><span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 执行图</span>
        <span class="token class-name">AgentState</span> last <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token operator">:</span> graph<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>init<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 打印过程记录</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
            last <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 返回最后的结果</span>
        <span class="token keyword">return</span> last<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-测试验证" tabindex="-1"><a class="header-anchor" href="#_7-测试验证" aria-hidden="true">#</a> 7. 测试验证</h3><p>接下来我们进行实例验证，创建一个Controller，调用<code>WeatherRecommendAgent</code>的<code>recommendByLocation</code>方法，传入地区参数，返回结果</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChatController</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ChatClient</span> chatClient<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">WeatherRecommendAgent</span> weatherAgent<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ChatController</span><span class="token punctuation">(</span><span class="token class-name">ChatModel</span> chatModel<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">GraphStateException</span> <span class="token punctuation">{</span>
        chatClient <span class="token operator">=</span> <span class="token class-name">ChatClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>chatModel<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">defaultTools</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TimeWeatherTools</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        weatherAgent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeatherRecommendAgent</span><span class="token punctuation">(</span>chatClient<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/recommend&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">recommend</span><span class="token punctuation">(</span><span class="token class-name">String</span> area<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> weatherAgent<span class="token punctuation">.</span><span class="token function">recommendByLocation</span><span class="token punctuation">(</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从上面实际的表现结果也可以看出和我们前面定义的流程图表现一致</p><h2 id="三、小结" tabindex="-1"><a class="header-anchor" href="#三、小结" aria-hidden="true">#</a> 三、小结</h2><p>本文通过实现一个简单的基于地点的天气实现旅游项目推荐，演示了多个单Agent联合组装成一个更复杂、功能更强大Agent示例。</p><p>在这个实现过程中，我们实现或者应用了<code>LangGraph4j</code> 框架中定义的Node、边（条件边）、State等，通过这些来生成了一个 <code>CompiledGraph</code>， 通过<code>CompiledGraph</code>来实现多Agent的组合</p><p>虽然这个项目实现了一个多Agent的组合，但是善于思考的我们，依然会有一些疑问</p><ul><li>这里使用的是默认的<code>AgentState</code>，内部是使用Map来传递共享参数，是否有更结构化的方式?</li><li><code>addConditionalEdges</code> 条件边定义的具体用法说明</li><li><code>GraphRepresentation</code> 节点定义的输出格式，是否可以自定义？ 是否可以结构化输出？</li><li>上面整体的实现更多的是借助<code>langgraph4j-core</code>，对于<code>langgraph4j-springai</code>是否会有更简单的使用姿势？</li></ul><p>接下来我们将努力尝试对上面这些问题进行逐步回答，有兴趣的小伙伴可以持续关注一波</p>',15),w={href:"https://github.com/liuyueyi/spring-ai-demo/tree/master/advance-projects/A04-memory-agent-langgraph",target:"_blank",rel:"noopener noreferrer"};function y(_,A){const o=p("RouterLink"),t=p("ExternalLinkIcon");return l(),i("div",null,[v,s("p",null,[n("在 "),a(o,{to:"/spring/springai/%E5%9F%BA%E7%A1%80%E7%AF%87/14.%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AALanggraph4j%E5%AE%9E%E4%BE%8B%E5%B7%A5%E7%A8%8B.html"},{default:u(()=>[n("创建一个Langgraph4j示例工程")]),_:1}),n(" 这一篇文章中，我们介绍了如何创建一个 LangGraph4j 的示例工程；")]),g,s("blockquote",null,[s("p",null,[n("以下内容，来自于: "),s("a",h,[n("langgraph4j"),a(t)])])]),b,s("p",null,[n("当我们拿到上面的内容之后，可以在 "),s("a",q,[n("在线plantuml工具"),a(t)]),n(" 中查看，会生成对应的流程图")]),f,s("p",null,[n("文中所有涉及到的代码，可以到项目中获取 "),s("a",w,[n("https://github.com/liuyueyi/spring-ai-demo"),a(t)])])])}const E=c(m,[["render",y],["__file","A05.使用LangGraph4J实现Agent路由选择.html.vue"]]);export{E as default};
