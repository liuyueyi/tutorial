import{_ as c}from"./01-3-860ede2c.js";import{_ as i,V as l,W as u,Y as n,Z as s,$ as a,a0 as r,a1 as e,F as p}from"./framework-094145d2.js";const d="/tutorial/imgs/column/springai/11-1.webp",k="/tutorial/imgs/column/springai/11-2.webp",m="/tutorial/imgs/column/springai/11-3.webp",g="/tutorial/imgs/column/springai/11-4.webp",v={},h=n("h1",{id:"_11-图像模型生成图片",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_11-图像模型生成图片","aria-hidden":"true"},"#"),s(" 11.图像模型生成图片")],-1),b=n("p",null,"截止到目前为止，我们所有的体验的还仅限于聊天模型，一问一答，且都是基于文本的交互方式；现在主流的模型的应用场景，涉及图像识别、图像生成、图像检索、图像处理等等，SpringAI也提供了相应的模型接口，方便开发者进行图像模型应用的开发",-1),f=n("p",null,"接下来我们通过一个实例，来看一下在SpringAI中，如何接入图像模型",-1),_=n("h2",{id:"一、准备工作",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#一、准备工作","aria-hidden":"true"},"#"),s(" 一、准备工作")],-1),y={href:"https://www.bigmodel.cn/pricing",target:"_blank",rel:"noopener noreferrer"},w=e('<h3 id="_1-模型选择" tabindex="-1"><a class="header-anchor" href="#_1-模型选择" aria-hidden="true">#</a> 1. 模型选择</h3><p>智谱官方提供了两个免费的多模态模型，分别为</p><ul><li>CogView-3-Flash: 生成图片</li><li>CogVideoX-Flash: 生成视频</li></ul><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-创建密钥" tabindex="-1"><a class="header-anchor" href="#_2-创建密钥" aria-hidden="true">#</a> 2. 创建密钥</h3>',5),I={href:"https://open.bigmodel.cn/usercenter/proj-mgmt/apikeys",target:"_blank",rel:"noopener noreferrer"},x=e('<figure><img src="'+c+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后在配置文件中，添加智普的密钥</p><h3 id="_3-配置密钥" tabindex="-1"><a class="header-anchor" href="#_3-配置密钥" aria-hidden="true">#</a> 3. 配置密钥</h3><p>在配置文件 <code>application.yml</code> 中，指定密钥和默认的模型</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">ai</span><span class="token punctuation">:</span>
    <span class="token key atrule">zhipuai</span><span class="token punctuation">:</span>
      <span class="token comment"># api-key 使用你自己申请的进行替换；如果为了安全考虑，可以通过启动参数进行设置</span>
      <span class="token key atrule">api-key</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>zhipuai<span class="token punctuation">-</span>api<span class="token punctuation">-</span>key<span class="token punctuation">}</span>
      <span class="token key atrule">image</span><span class="token punctuation">:</span> <span class="token comment"># 图像模型</span>
        <span class="token key atrule">options</span><span class="token punctuation">:</span>
          <span class="token key atrule">model</span><span class="token punctuation">:</span> CogView<span class="token punctuation">-</span>3<span class="token punctuation">-</span>Flash
      <span class="token key atrule">chat</span><span class="token punctuation">:</span> <span class="token comment"># 聊天模型</span>
        <span class="token key atrule">options</span><span class="token punctuation">:</span>
          <span class="token key atrule">model</span><span class="token punctuation">:</span> GLM<span class="token punctuation">-</span>4<span class="token punctuation">-</span>Flash
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意上面的 model，这里使用是图像生成的模型，与前面介绍的聊天模型中的 <code>GLM-4-Flash</code> 不一致</p><h2 id="二、图像模型使用" tabindex="-1"><a class="header-anchor" href="#二、图像模型使用" aria-hidden="true">#</a> 二、图像模型使用</h2>`,7),q=e(`<h3 id="_1-依赖配置" tabindex="-1"><a class="header-anchor" href="#_1-依赖配置" aria-hidden="true">#</a> 1. 依赖配置</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.ai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-ai-starter-mcp-server-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-创建一个控制器" tabindex="-1"><a class="header-anchor" href="#_2-创建一个控制器" aria-hidden="true">#</a> 2. 创建一个控制器</h3><p>我们创建一个文生图的控制器，定义一个基于智谱图像模型的端点 <code>/genImg</code>， 生成之后，将返回的图片链接下载图片文件，直接返回给前端</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImgController</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ImageModel</span> imgModel<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ImgController</span><span class="token punctuation">(</span><span class="token class-name">ZhiPuAiImageModel</span> imgModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>imgModel <span class="token operator">=</span> imgModel<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 生成图片并返回
     *
     * <span class="token keyword">@param</span> <span class="token parameter">msg</span> 提示词
     * <span class="token keyword">@param</span> <span class="token parameter">res</span> 返回图片
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IOException</span></span>
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;/genImg&quot;</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token string">&quot;application/octet-stream&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">genImg</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> res<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">ImageResponse</span> response <span class="token operator">=</span> imgModel<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ImagePrompt</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span>
                <span class="token class-name">ImageOptionsBuilder</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">&quot;CogView-3-Flash&quot;</span><span class="token punctuation">)</span>
                        <span class="token comment">// 返回图片类型</span>
                        <span class="token punctuation">.</span><span class="token function">responseFormat</span><span class="token punctuation">(</span><span class="token string">&quot;png&quot;</span><span class="token punctuation">)</span>
                        <span class="token comment">// 图像风格，如 vivid 生动风格， natural 自然风格</span>
                        <span class="token punctuation">.</span><span class="token function">style</span><span class="token punctuation">(</span><span class="token string">&quot;natural&quot;</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Image</span> img <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BufferedImage</span> image <span class="token operator">=</span> <span class="token class-name">ImageIO</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span><span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        res<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;image/png&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ImageIO</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token string">&quot;png&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：</p><ul><li>具体的使用方式，直接基于 <code>ImageModel</code> 的调用来实现图片生成</li><li>实测： <code>ImageOptions</code> 中 <code>model</code> 参数，比填，不然不会使用配置中默认指定的 <code>CogView-3-Flash</code></li></ul><p>官方实现这里存在bug，由于传参没指定model，被sdk中默认的<code>cogview-3</code>给覆盖了（而不是默认选项中的 <code>CogView-3-Flash</code>）</p><figure><img src="`+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-测试验证" tabindex="-1"><a class="header-anchor" href="#_3-测试验证" aria-hidden="true">#</a> 3. 测试验证</h3><p>接下来我们启动项目，验证一下图像模型的实际表现</p><figure><img src="'+g+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>题外话：生成的卡通图片还差强人意，如果换成写实风，这个模型的表现效果就很不理想了😂 （不过毕竟是免费的，还能要求啥呢~）</p><p>请重点注意： 智谱的 <code>ImageModel</code> 的实现是不支持生成视频的，最直接的证据就是 <code>ZhiPuAiImageApi</code> 的实现中访问的path路径是 <code>/v4/images/generations</code>，而视频的访问路径应该是 <code>/v4/videos/generations</code>，且交互方式也不一致（视频是异步查询返回结果）;</p><p>目前<code>1.0.0</code>版本以及<code>1.1.0-SNAPSHOT</code>的<code>spring-ai-zhipuai</code>客户端，没有实现视频模型的访问；如有需要，需自己实现</p><h2 id="三、小结" tabindex="-1"><a class="header-anchor" href="#三、小结" aria-hidden="true">#</a> 三、小结</h2><p>本文主要介绍了图像模型的使用，虽然是以智谱为例进行的实例介绍；其他的模型使用姿势，实际也差不多，通用的使用方式如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ImagePrompt</span> prompt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImagePrompt</span><span class="token punctuation">(</span><span class="token string">&quot;这里是文生图的提示词&quot;</span><span class="token punctuation">,</span> <span class="token class-name">ImageOptionsBuilder</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">&quot;CogView-3-Flash&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ImageResponse</span> response <span class="token operator">=</span> imgModel<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19),A={href:"https://github.com/liuyueyi/spring-ai-demo/tree/master/S11-image-model",target:"_blank",rel:"noopener noreferrer"};function B(E,C){const t=p("ExternalLinkIcon"),o=p("RouterLink");return l(),u("div",null,[h,b,f,_,n("p",null,[s("首先还是得准备一个大模型的开发者账号，同样的为了简化大家的使用成本，我们依然采用免费的大模型 - "),n("a",y,[s("智谱"),a(t)]),s(" 来完成")]),w,n("p",null,[s("在智普的开放平台获取密钥："),n("a",I,[s("https://open.bigmodel.cn/usercenter/proj-mgmt/apikeys"),a(t)])]),x,n("p",null,[s("接下来我们正式进入图像模型的使用环节，具体的项目创建过程，与之前的并无差别，基本流程同 "),a(o,{to:"/spring/springai/%E5%9F%BA%E7%A1%80%E7%AF%87/01.%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AASpringAI-Demo%E5%B7%A5%E7%A8%8B.html"},{default:r(()=>[s("创建一个SpringAI-Demo工程")]),_:1})]),q,n("p",null,[s("文中所有涉及到的代码，可以到项目中获取 "),n("a",A,[s("https://github.com/liuyueyi/spring-ai-demo"),a(t)])])])}const V=i(v,[["render",B],["__file","11.图像模型.html.vue"]]);export{V as default};
