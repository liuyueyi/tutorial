import{_ as p,V as i,W as o,X as l,Y as n,Z as s,$ as e,a1 as t,F as c}from"./framework-094145d2.js";const r={},d=n("p",null,"前面介绍过redis的五种基本数据结构，如String，List, Set, ZSet, Hash，这些属于相对常见了；在这些基本结果之上，redis还提供了一些更高级的功能，如geo, bitmap, hyperloglog，pub/sub，本文将主要介绍Bitmap的使用姿势以及其适用场景，主要知识点包括",-1),u=n("ul",null,[n("li",null,"bitmap 基本使用"),n("li",null,"日活统计应用场景中bitmap使用姿势"),n("li",null,"点赞去重应用场景中bitmap使用姿势"),n("li",null,"布隆过滤器bloomfilter基本原理及体验case")],-1),k=t(`<h2 id="i-基本使用" tabindex="-1"><a class="header-anchor" href="#i-基本使用" aria-hidden="true">#</a> I. 基本使用</h2><h3 id="_1-配置" tabindex="-1"><a class="header-anchor" href="#_1-配置" aria-hidden="true">#</a> 1. 配置</h3><p>我们使用SpringBoot <code>2.2.1.RELEASE</code>来搭建项目环境，直接在<code>pom.xml</code>中添加redis依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们的redis是默认配置，则可以不额外添加任何配置；也可以直接在<code>application.yml</code>配置中，如下</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> 127.0.0.1
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>
    <span class="token key atrule">password</span><span class="token punctuation">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-使用姿势" tabindex="-1"><a class="header-anchor" href="#_2-使用姿势" aria-hidden="true">#</a> 2. 使用姿势</h3><p>bitmap主要就三个操作命令，<code>setbit</code>，<code>getbit</code>以及 <code>bitcount</code></p><h4 id="a-设置标记" tabindex="-1"><a class="header-anchor" href="#a-设置标记" aria-hidden="true">#</a> a. 设置标记</h4><p>即<code>setbit</code>，主要是指将某个索引，设置为1(设置0表示抹去标记)，基本语法如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 请注意这个index必须是数字，后面的value必须是0/1</span>
setbit key index <span class="token number">0</span>/1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的SpringBoot中，借助RestTemplate可以比较容易的实现，通常有两种写法，都可以</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> redisTemplate<span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 设置标记位
 *
 * <span class="token keyword">@param</span> <span class="token parameter">key</span>
 * <span class="token keyword">@param</span> <span class="token parameter">offset</span>
 * <span class="token keyword">@param</span> <span class="token parameter">tag</span>
 * <span class="token keyword">@return</span>
 */</span>
<span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">mark</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token keyword">boolean</span> tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBit</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> offset<span class="token punctuation">,</span> tag<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">mark2</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token keyword">boolean</span> tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RedisCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">doInRedis</span><span class="token punctuation">(</span><span class="token class-name">RedisConnection</span> connection<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DataAccessException</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> connection<span class="token punctuation">.</span><span class="token function">setBit</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> offset<span class="token punctuation">,</span> tag<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),m=n("code",null,"getBytes()",-1),b={href:"https://blog.hhui.top/hexblog/2018/06/11/180611-Spring%E4%B9%8BRedisTemplate%E9%85%8D%E7%BD%AE%E4%B8%8E%E4%BD%BF%E7%94%A8/",target:"_blank",rel:"noopener noreferrer"},h=t(`<h4 id="b-判断存在与否" tabindex="-1"><a class="header-anchor" href="#b-判断存在与否" aria-hidden="true">#</a> b. 判断存在与否</h4><p>即 <code>getbit key index</code>，如果返回1，表示存在否则不存在</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 判断是否标记过
 *
 * <span class="token keyword">@param</span> <span class="token parameter">key</span>
 * <span class="token keyword">@param</span> <span class="token parameter">offest</span>
 * <span class="token keyword">@return</span>
 */</span>
<span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">container</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token keyword">long</span> offest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBit</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> offest<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="c-计数" tabindex="-1"><a class="header-anchor" href="#c-计数" aria-hidden="true">#</a> c. 计数</h4><p>即 <code>bitcount key</code>，统计和</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 统计计数
 *
 * <span class="token keyword">@param</span> <span class="token parameter">key</span>
 * <span class="token keyword">@return</span>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">bitCount</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RedisCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">doInRedis</span><span class="token punctuation">(</span><span class="token class-name">RedisConnection</span> redisConnection<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DataAccessException</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> redisConnection<span class="token punctuation">.</span><span class="token function">bitCount</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-应用场景" tabindex="-1"><a class="header-anchor" href="#_3-应用场景" aria-hidden="true">#</a> 3. 应用场景</h3><p>前面的基本使用比较简单，在介绍String数据结构的时候也提过，我们重点需要关注的是bitmap的使用场景，它可以干嘛用，什么场景下使用它会有显著的优势</p><ul><li>日活统计</li><li>点赞</li><li>bloomfilter</li></ul><p>上面三个场景虽有相似之处，但实际的应用场景还是些许区别，接下来我们逐一进行说明</p><h4 id="a-日活统计" tabindex="-1"><a class="header-anchor" href="#a-日活统计" aria-hidden="true">#</a> a. 日活统计</h4><p>统计应用或网站的日活，这个属于比较常见的case了，如果是用redis来做这个事情，首先我们最容易想到的是Hash结构，一般逻辑如下</p><ul><li>根据日期，设置key，如今天为 <code>2020/10/13</code>, 那么key可以为 <code>app_20_10_13</code></li><li>其次当用户访问时，设置field为userId, value设置为true</li><li>判断日活则是统计map的个数<code>hlen app_20_10_13</code></li></ul><p>上面这个逻辑有毛病么？当然没有问题，但是想一想，当我们的应用做的很nb的时候，每天的日活都是百万，千万级时，这个内存开销就有点吓人了</p><p>接下来我们看一下bitmap可以怎么做</p><ul><li>同样根据日期设置key</li><li>当用户访问时，index设置为userId，<code>setbit app_20_10_13 uesrId 1</code></li><li>日活统计 <code>bitcount app_20_10_13</code></li></ul><p><strong>简单对比一下上面两种方案</strong></p><p>当数据量小时，且userid分布不均匀，小的为个位数，大的几千万，上亿这种，使用bitmap就有点亏了，因为userId作为index，那么bitmap的长度就需要能容纳最大的userId，但是实际日活又很小，说明bitmap中间有大量的空白数据</p><p>反之当数据量很大时，比如百万/千万，userId是连续递增的场景下，bitmap的优势有两点：1.存储开销小， 2.统计总数快</p><h4 id="c-点赞" tabindex="-1"><a class="header-anchor" href="#c-点赞" aria-hidden="true">#</a> c. 点赞</h4><p>点赞的业务，最主要的一点是一个用户点赞过之后，就不能继续点赞了（当然某些业务场景除外），所以我们需要知道是否可以继续点赞</p><p>上面这个hash当然也可以实现，我们这里则主要讨论一下bitmap的实现逻辑</p><ul><li>比如我们希望对一个文章进行点赞统计，那么我们根据文章articleId来生成redisKey=<code>like_1121</code>，将userId作为index</li><li>首先是通过<code>getbit like_1121 userId</code> 来判断是否点赞过，从而限制用户是否可以操作</li></ul><p>Hash以及bitmap的选择和上面的考量范围差不多</p><h4 id="d-布隆过滤器bloomfilter" tabindex="-1"><a class="header-anchor" href="#d-布隆过滤器bloomfilter" aria-hidden="true">#</a> d. 布隆过滤器bloomfilter</h4><p>布隆过滤器可谓是大名鼎鼎了，我们这里简单的介绍一下这东西是啥玩意</p><ul><li>底层存储为一个bitmap</li><li>当来一个数据时，经过n个hash函数，得到n个数值</li><li>将hash得到的n个数值，映射到bitmap，标记对应的位置为1</li></ul><p>如果来一个数据，通过hash计算之后，若这个n个值，对应的bitmap都是1，那么表示这个数据可能存在；如果有一个不为1，则表示这个数据一定不存在</p><p><strong>请注意：不存在时，是一定不存在；存在时，则不一定</strong></p><p>从上面的描述也知道，bloomfilter的底层数据结构就是bitmap，当然它的关键点在hash算法；根据它未命中时一定不存在的特性，非常适用于缓存击穿的问题解决</p><p><strong>体验说明</strong></p>`,31),v={href:"https://github.com/RedisBloom/RedisBloom",target:"_blank",rel:"noopener noreferrer"},g=t(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># docker 方式安装</span>
<span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">6379</span>:6379 <span class="token parameter variable">--name</span> redis-redisbloom redislabs/rebloom:latest

<span class="token comment"># 通过redis-cli方式访问</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> redis-redisbloom <span class="token function">bash</span>

<span class="token comment"># 开始使用</span>
<span class="token comment"># redis-cli</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> keys *
<span class="token punctuation">(</span>empty array<span class="token punctuation">)</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> bf.add newFilter hello
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> bf.exists newFilter hello
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>
<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> bf.exists newFilter hell
<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>bloomfilter的使用比较简单，主要是两个命令<code>bf.add</code>添加元素，<code>bf.exists</code>判断是否存在，请注意它没有删除哦</p><h3 id="_4-小结" tabindex="-1"><a class="header-anchor" href="#_4-小结" aria-hidden="true">#</a> 4. 小结</h3><p>bitmap位图属于一个比较精巧的数据结构，通常在数据量大的场景下，会有出现的表现效果；redis本身基于String数据结构来实现bitmap的功能支持，使用方式比较简单，基本上就下面三个命令</p><ul><li><code>setbit key index 1/0</code>: 设置</li><li><code>getbit key index</code>: 判断是否存在</li><li><code>bitcount key</code>: 计数统计</li></ul><p>本文也给出了bitmap的三个常见的应用场景</p><ul><li>日活统计：主要借助<code>bitcount</code>来获取总数（后面会介绍，在日活十万百万以上时，使用hyperLogLog更优雅）</li><li>点赞: 主要借助<code>setbit/getbit</code>来判断用户是否赞过，从而实现去重</li><li>bloomfilter: 基于bitmap实现的布隆过滤器，广泛用于去重的业务场景中（如缓存穿透，爬虫url去重等）</li></ul><p>总的来讲，bitmap属于易用，巧用的数据结构，用得好即能节省内存也可以提高效率，用得不好貌似也不会带来太大的问题</p><h2 id="ii-其他" tabindex="-1"><a class="header-anchor" href="#ii-其他" aria-hidden="true">#</a> II. 其他</h2><h3 id="_0-项目" tabindex="-1"><a class="header-anchor" href="#_0-项目" aria-hidden="true">#</a> 0. 项目</h3><p><strong>系列博文</strong></p>`,11),E={href:"https://spring.hhui.top/spring-blog/2020/04/11/200411-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRedis%E4%B9%8B%E7%AE%A1%E9%81%93Pipelined%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/",target:"_blank",rel:"noopener noreferrer"},B={href:"https://spring.hhui.top/spring-blog/2019/09/27/190927-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BRedis%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://spring.hhui.top/spring-blog/2019/05/13/190513-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8B%E5%80%9F%E5%8A%A9Redis%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%AB%99%E7%82%B9%E7%BB%9F%E8%AE%A1%E6%9C%8D%E5%8A%A1/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://spring.hhui.top/spring-blog/2018/12/25/181225-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8B%E5%80%9F%E5%8A%A9Redis%E5%AE%9E%E7%8E%B0%E6%8E%92%E8%A1%8C%E6%A6%9C%E5%8A%9F%E8%83%BD/",target:"_blank",rel:"noopener noreferrer"},A={href:"https://spring.hhui.top/spring-blog/2018/12/12/181212-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BZSet%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/",target:"_blank",rel:"noopener noreferrer"},y={href:"https://spring.hhui.top/spring-blog/2018/12/11/181211-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BSet%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/",target:"_blank",rel:"noopener noreferrer"},x={href:"https://spring.hhui.top/spring-blog/2018/12/02/181202-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BHash%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://spring.hhui.top/spring-blog/2018/11/09/181109-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BList%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/",target:"_blank",rel:"noopener noreferrer"},R={href:"https://spring.hhui.top/spring-blog/2018/11/08/181108-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BString%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E8%AF%BB%E5%86%99/",target:"_blank",rel:"noopener noreferrer"},F={href:"https://spring.hhui.top/spring-blog/2018/11/01/181101-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BJedis%E9%85%8D%E7%BD%AE/",target:"_blank",rel:"noopener noreferrer"},D={href:"https://spring.hhui.top/spring-blog/2018/10/29/181029-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8B%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/",target:"_blank",rel:"noopener noreferrer"},S=n("p",null,[n("strong",null,"工程源码")],-1),I={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"},C={href:"https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/122-redis-template",target:"_blank",rel:"noopener noreferrer"};function j(L,T){const a=c("ExternalLinkIcon");return i(),o("div",null,[d,u,l(" more "),k,n("p",null,[s("上面两种写法的核心区别，就是key的序列化问题，第一种写法使用默认的jdk字符串序列化，和后面的"),m,s("会有一些区别，关于这个，有兴趣的小伙伴可以看一下我之前的博文: "),n("a",b,[s("RedisTemplate配置与使用#序列化问题"),e(a)])]),h,n("p",null,[s("Redis的布隆过滤器主要针对>=4.0，通过插件的形式提供，项目源码地址为: "),n("a",v,[s("https://github.com/RedisBloom/RedisBloom"),e(a)]),s("，下面根据readme的说明，简单的体验一下redis中bloomfilter的使用姿势")]),g,n("ul",null,[n("li",null,[n("a",E,[s("【DB系列】Redis之管道Pipelined使用姿势"),e(a)])]),n("li",null,[n("a",B,[s("【DB系列】Redis集群环境配置"),e(a)])]),n("li",null,[n("a",_,[s("【DB系列】借助Redis搭建一个简单站点统计服务（应用篇）"),e(a)])]),n("li",null,[n("a",f,[s("【DB系列】借助Redis实现排行榜功能（应用篇）"),e(a)])]),n("li",null,[n("a",A,[s("【DB系列】Redis之ZSet数据结构使用姿势"),e(a)])]),n("li",null,[n("a",y,[s("【DB系列】Redis之Set数据结构使用姿势"),e(a)])]),n("li",null,[n("a",x,[s("【DB系列】Redis之Hash数据结构使用姿势"),e(a)])]),n("li",null,[n("a",w,[s("【DB系列】Redis之List数据结构使用姿势"),e(a)])]),n("li",null,[n("a",R,[s("【DB系列】Redis之String数据结构的读写"),e(a)])]),n("li",null,[n("a",F,[s("【DB系列】Redis之Jedis配置"),e(a)])]),n("li",null,[n("a",D,[s("【DB系列】Redis之基本配置"),e(a)])])]),S,n("ul",null,[n("li",null,[s("工程："),n("a",I,[s("https://github.com/liuyueyi/spring-boot-demo"),e(a)])]),n("li",null,[s("项目源码: "),n("a",C,[s("https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/122-redis-template"),e(a)])])])])}const H=p(r,[["render",j],["__file","12.201014-SpringBoot系列教程Redis高级特性之Bitmap使用姿势及应用场景介绍.html.vue"]]);export{H as default};
