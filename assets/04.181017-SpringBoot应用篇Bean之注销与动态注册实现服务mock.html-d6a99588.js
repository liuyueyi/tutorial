import{_ as t,V as p,W as i,X as c,Y as n,Z as s,$ as e,a1 as o,F as l}from"./framework-094145d2.js";const u={},r=n("p",null,"前面一篇博文介绍了动态注册Bean的姿势，看完之后难免会有个疑问，在我n年的业务开发中，还真没遇到过需要自己来注册bean的场景（常年的if-else, curd还真不可能遇到）那么这个东西到底有什么用，或者可以给我们打开哪些思路呢？",-1),d=n("p",null,"本篇博文将以应用的角度，简单的演示一下可以怎么用",-1),k=o(`<h2 id="i-应用说明" tabindex="-1"><a class="header-anchor" href="#i-应用说明" aria-hidden="true">#</a> I. 应用说明</h2><h3 id="_1-背景" tabindex="-1"><a class="header-anchor" href="#_1-背景" aria-hidden="true">#</a> 1. 背景</h3><p>在实际的业务开发中，一个需求来了，我需要依赖第三方提供的接口，但实际的情况可能是对方还没开发好，接口没法提供，这个时候我要测试自己的功能可以怎么做？</p><ul><li>在依赖的接口上做特殊处理，不直接调用接口，直接返回mock的结果</li><li>测试用例中可以使用MockService来替换某些服务</li></ul><p>上面两个可以说是比较常见的使用手段了，再把上面的case进行扩展下，假设我现在提供的一个web服务，正常访问接口是要求用户登录的；但是我希望在本地测试环境下，不登录也可以访问（即给一个默认的登录账号）</p><p>针对这个场景进行分析，一是要求本地正常启动服务；二是登录服务默认返回true</p><h3 id="_2-方案" tabindex="-1"><a class="header-anchor" href="#_2-方案" aria-hidden="true">#</a> 2. 方案</h3><p>对上面的场景进行简单化，实例说明</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>即我有一个web服务，每次访问，都依赖了UserService根据用户名获取用户ID；

要求在本地环境下测试时，使用mock的UserService返回用户id，模拟已经登录的情况

在非本地环境，则通过rpc调用用户服务来走具体的业务流程
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于上面的这个case可以怎么实现呢？</p><p>结合主题，判断当前环境，如果是本地，则删除Spring容器中的UserService的Bean，然后将自己创建的模拟UserService类注册到Bean中，使其他对UserService的引用，替换为mock的UserService</p><h3 id="_3-实现" tabindex="-1"><a class="header-anchor" href="#_3-实现" aria-hidden="true">#</a> 3. 实现</h3><p>根据上面的实现，首先是定义一个UserService的接口类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IUserService</span> <span class="token punctuation">{</span>
    <span class="token class-name">Integer</span> <span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token class-name">String</span> uname<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>给它一个默认实现，表示在正常环境中，实际调用的都是 <code>UserServiceImpl</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">&quot;userService&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IUserService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token class-name">String</span> uname<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>给一个测试的服务</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;mock&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MockRest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">IUserService</span> userService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正常情况下，上面的rest服务访问时，每次都应该返回1，即调用的是默认的<code>UserServiceImpl</code></p><p>现在我们就需要加上一个逻辑，如果是本地环境时，使用自己创建的UserService来替换，也就是说这里涉及到了一个bean的注销和手动注册Bean，借助前面的知识也比较好实现了</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceMockConfig</span> <span class="token keyword">implements</span> <span class="token class-name">BeanDefinitionRegistryPostProcessor</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanDefinitionRegistry</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinitionRegistry</span> beanDefinitionRegistry<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> factory<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 先删除容器中的Bean定义</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">)</span> factory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeBeanDefinition</span><span class="token punctuation">(</span><span class="token string">&quot;userService&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 创建mock的Bean，并注册到Spring容器</span>
        <span class="token class-name">BeanDefinitionBuilder</span> builder <span class="token operator">=</span> <span class="token class-name">BeanDefinitionBuilder</span><span class="token punctuation">.</span><span class="token function">genericBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">IUserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> uname <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">BeanDefinition</span> beanDefinition <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">getRawBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">)</span> factory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">&quot;userService&quot;</span><span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面手动注册的一个生成的匿名UserService类，内部返回的随机的userId, 因此在本地环境启用时，每次调用前面的rest服务时，返回随机的userId，而不是固定的1</p><figure><img src="http://spring.hhui.top/spring-blog/imgs/181017/00.gif" alt="演示图" tabindex="0" loading="lazy"><figcaption>演示图</figcaption></figure><h3 id="_4-扩展" tabindex="-1"><a class="header-anchor" href="#_4-扩展" aria-hidden="true">#</a> 4. 扩展</h3><p>上面只是给出了一个简单的应用场景和实现，在实际的工程中有没有这样的case呢?</p><p>在使用SprigCloud的Feign时，就感觉到了这种思路，Feign封装了SpringCloud的RPC调用方式，定义一个接口，对于使用者而言，可以注入这个接口，然后像调用本地方法一样调用执行rpc调用</p><p>这里面必然就涉及到接口的代理类生成与注册的问题，而这个过程肯定不会是Spring框架来完成的，也就只有可能是FeignClient来包装的，目前还没有看Feign的源码，所以也不好下结论，也就只能直观的分析，这里面应该少不了Bean的动态注册手段了；关于底层是否如预期这般，静候后续源码分析</p><h2 id="ii-其他" tabindex="-1"><a class="header-anchor" href="#ii-其他" aria-hidden="true">#</a> II. 其他</h2><h3 id="_0-项目" tabindex="-1"><a class="header-anchor" href="#_0-项目" aria-hidden="true">#</a> 0. 项目</h3>`,29),v={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/006-dynamicbean",target:"_blank",rel:"noopener noreferrer"};function b(g,h){const a=l("ExternalLinkIcon");return p(),i("div",null,[r,d,c(" more "),k,n("ul",null,[n("li",null,[s("工程："),n("a",v,[s("spring-boot-demo"),e(a)])]),n("li",null,[s("module: "),n("a",m,[s("006-dynamicbean"),e(a)])])])])}const _=t(u,[["render",b],["__file","04.181017-SpringBoot应用篇Bean之注销与动态注册实现服务mock.html.vue"]]);export{_ as default};
