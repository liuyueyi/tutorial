import{_ as l,V as i,W as u,Y as s,Z as n,$ as a,a0 as e,a1 as t,F as c}from"./framework-094145d2.js";const k="/tutorial/imgs/column/springai/06-1.webp",d="/tutorial/imgs/column/springai/06-2.webp",r="/tutorial/imgs/column/springai/06-3.webp",m="/tutorial/imgs/column/springai/06-4.webp",v="/tutorial/imgs/column/springai/06-5.webp",b="/tutorial/imgs/column/springai/06-6.webp",g={},h=t('<h1 id="_06-工具调用-functioncalling" tabindex="-1"><a class="header-anchor" href="#_06-工具调用-functioncalling" aria-hidden="true">#</a> 06.工具调用 FunctionCalling</h1><p>我们知道大模型是基于一系列数据进行训练的，且每次训练的成本很高；那么大模型是怎么样表现得十八般武艺样样精通的呢？</p><p>function calling就是设计出来给大模型当外挂的瑞士工具包，通过给大模型设计一个与外部工具进行交互的方式，来扩展大模型在训练时缺失或者不够与时俱进的能力</p><h2 id="一、工作原理" tabindex="-1"><a class="header-anchor" href="#一、工作原理" aria-hidden="true">#</a> 一、工作原理</h2><p>SpringAi 提供了完备工具调用封装，可以非常方便的将本地方法封装成工具，供大模型调用</p><h3 id="_1-工具调用流程" tabindex="-1"><a class="header-anchor" href="#_1-工具调用流程" aria-hidden="true">#</a> 1. 工具调用流程</h3><figure><img src="'+k+'" alt="Spring AI工具调用流程" tabindex="0" loading="lazy"><figcaption>Spring AI工具调用流程</figcaption></figure><p>工具调用流程如下：</p><ol><li>在向大模型发起请求时，将工具信息传递给大模型 <ul><li>每个工具的定义都包含名称、描述、输入参数</li></ul></li><li>大模型根据工具信息，会发送包含工具名称、亲求参数的请求给工具服务</li><li>应用程序根据工具名称，识别到对应的工具，调用工具方法</li><li>工具执行结果返回给应用程序进行处理（可能是直接返回给用户，也可能是返回给大模型）</li><li>应用程序将工具执行结果返回给大模型</li><li>大模型利用工具返回的结果，构建返回结果给用户</li></ol><h3 id="_2-springai关键实现" tabindex="-1"><a class="header-anchor" href="#_2-springai关键实现" aria-hidden="true">#</a> 2. SpringAI关键实现</h3><p>SpringAI主要提供了两种内置方式将本地方法封装成工具</p><ul><li>声明式：通过注解 <code>@Tool</code></li><li>编程式：通过底层的 <code>MethodToolCallback</code> <code>FunctionToolCallback</code></li></ul>',12),f=s("img",{src:d,alt:"https://java2ai.com/docs/dev/tutorials/function-calling/",tabindex:"0",loading:"lazy"},null,-1),T={href:"https://java2ai.com/docs/dev/tutorials/function-calling/",target:"_blank",rel:"noopener noreferrer"},q=t(`<p>上图中橙色的部分，就是SpringAI将我们本地方法封装成工具，供大模型进行交互；接下来我们看一下SpringAI的关键类</p><h4 id="a-toolcallback" tabindex="-1"><a class="header-anchor" href="#a-toolcallback" aria-hidden="true">#</a> a. ToolCallback</h4><p>ToolCallback 接口提供了定义 AI 模型可调用工具的方式，包含工具定义和执行逻辑。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ToolCallback</span> <span class="token punctuation">{</span>
    <span class="token class-name">ToolDefinition</span> <span class="token function">getToolDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">default</span> <span class="token class-name">ToolMetadata</span> <span class="token function">getToolMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ToolMetadata</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">String</span> toolInput<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">default</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">String</span> toolInput<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ToolContext</span> tooContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tooContext <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>tooContext<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">&quot;Tool context is not supported!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>toolInput<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SpringAI提供了两种内置实现</p><ul><li>MethodToolCallback: 将本地方法定义为AI模型可调用的工具</li><li>FunctionToolCallback: 将函数定义为AI模型可调用的工具</li></ul><h4 id="b-tooldefinition" tabindex="-1"><a class="header-anchor" href="#b-tooldefinition" aria-hidden="true">#</a> b. ToolDefinition</h4><p>ToolDefinition 接口提供 AI 模型识别工具可用性所需的信息，包括工具名称、描述及输入模式。每个 ToolCallback 实现必须提供 ToolDefinition 实例来定义工具。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ToolDefinition</span> <span class="token punctuation">{</span>

	<span class="token doc-comment comment">/**
	 * 工具名
	 */</span>
	<span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token doc-comment comment">/**
	 * 工具说明，告诉AI这个工具可以干嘛
	 */</span>
	<span class="token class-name">String</span> <span class="token function">description</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token doc-comment comment">/**
	 * 传参方式，通常是 json schema格式
	 */</span>
	<span class="token class-name">String</span> <span class="token function">inputSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若需要手动创建的工具定义，可以使用<code>ToolDefinition.Builder</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ToolDefinition</span> toolDefinition <span class="token operator">=</span> <span class="token class-name">ToolDefinition</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&quot;currentWeather&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;Get the weather in location&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">inputSchema</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">&quot;&quot;&quot;
        {
            &quot;type&quot;: &quot;object&quot;,
            &quot;properties&quot;: {
                &quot;location&quot;: {
                    &quot;type&quot;: &quot;string&quot;
                },
                &quot;unit&quot;: {
                    &quot;type&quot;: &quot;string&quot;,
                    &quot;enum&quot;: [&quot;C&quot;, &quot;F&quot;]
                }
            },
            &quot;required&quot;: [&quot;location&quot;, &quot;unit&quot;]
        }
    &quot;&quot;&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了上面的方式，对于本地java方法，可以直接通过反射的方式来生成基于方法的工具定义</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Method</span> method <span class="token operator">=</span> <span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">findMethod</span><span class="token punctuation">(</span><span class="token class-name">DateTimeTools</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;getCurrentDateTime&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ToolDefinition</span> toolDefinition <span class="token operator">=</span> <span class="token class-name">ToolDefinition</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 如果需要显示修改某些属性，可以如下</span>
<span class="token class-name">ToolDefinition</span> toolDefinition <span class="token operator">=</span> <span class="token class-name">ToolDefinition</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&quot;currentDateTime&quot;</span><span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;Get the current date and time in the user&#39;s timezone&quot;</span><span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token function">inputSchema</span><span class="token punctuation">(</span><span class="token class-name">JsonSchemaGenerator</span><span class="token punctuation">.</span><span class="token function">generateForMethodInput</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="c-json-schema" tabindex="-1"><a class="header-anchor" href="#c-json-schema" aria-hidden="true">#</a> c. JSON Schema</h4><p>向 AI 模型提供工具时，模型需要知道工具调用输入类型的模式，Spring AI 通过 JsonSchemaGenerator 类内置支持生成工具输入类型的 JSON Schema</p>`,15),y=t(`<div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
   <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;object&quot;</span><span class="token punctuation">,</span>
   <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
       <span class="token property">&quot;location&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
           <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;string&quot;</span>
       <span class="token punctuation">}</span><span class="token punctuation">,</span>
       <span class="token property">&quot;unit&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
           <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">,</span>
           <span class="token property">&quot;enum&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;C&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;F&quot;</span><span class="token punctuation">]</span>
       <span class="token punctuation">}</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token property">&quot;required&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;location&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;unit&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的json schema主要用于方法/函数调用的传参定义，SpringAI内置支持下面四种基于注解升成输入参数描述、是否必传</p><ul><li><code>Spring AI</code> 的 <code>@ToolParam(description = &quot;…&quot;, required=false)</code>： 参数描述 + 是否必传</li><li><code>Jackson</code> 的 <code>@JsonClassDescription(description = &quot;…)</code>: 参数描述</li><li><code>Jackson</code> 的 <code>@JsonPropertyDescription(description = &quot;…&quot;)</code> : 参数描述</li><li><code>Jackson</code> 的 <code>@JsonProperty(required = false)</code> : 参数是否必传</li><li><code>Swagger</code> 的<code> @Schema(description = &quot;…&quot;, required = false)</code> ： 参数描述 + 是否必传</li><li><code>Spring</code> 的 <code>@Nullable</code> ： 参数是否必传</li></ul><p>示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">DateTimeTools</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Tool</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">&quot;Set a user alarm for the given time&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">void</span> <span class="token function">setAlarm</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ToolParam</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">&quot;Time in ISO-8601 format&quot;</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token class-name">String</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">LocalDateTime</span> alarmTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>time<span class="token punctuation">,</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token constant">ISO_DATE_TIME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Alarm set for &quot;</span> <span class="token operator">+</span> alarmTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="d-结果转换" tabindex="-1"><a class="header-anchor" href="#d-结果转换" aria-hidden="true">#</a> d. 结果转换</h4><p>通常方法/函数返回的是Object对象，需要转换给大模型使用，SpringAI定义<code>ToolCallResultConverter</code>对返回进行序列化，实现将返回结果转换为String对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ToolCallResultConverter</span> <span class="token punctuation">{</span>

	<span class="token doc-comment comment">/**
	 * Given an Object returned by a tool, convert it to a String compatible with the
	 * given class type.
	 */</span>
	<span class="token class-name">String</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> result<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Type</span> returnType<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SpringAI默认的结果转换为基于Jackson的json序列化（<code>DefaultToolCallResultConverter</code>），当然如果你喜欢，也可以换成gson、fastjson或者自定义的转换实现</p><h4 id="e-toolcontext" tabindex="-1"><a class="header-anchor" href="#e-toolcontext" aria-hidden="true">#</a> e. ToolContext</h4><p>Spring AI 支持通过 <code>ToolContext</code> API向工具传递额外的上下文信息，ToolContext 中的数据由用户调用 ChatClient 时提供。后面的使用示例会进行案例介绍</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">ToolContext</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TOOL_CALL_HISTORY</span> <span class="token operator">=</span> <span class="token string">&quot;TOOL_CALL_HISTORY&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ToolContext</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableMap</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&gt;</span></span> <span class="token function">getToolCallHistory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;TOOL_CALL_HISTORY&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ToolContext的实现也非常简单，一个不可变对象Map来承接工具调用上下文数据</p><h2 id="二、使用示例" tabindex="-1"><a class="header-anchor" href="#二、使用示例" aria-hidden="true">#</a> 二、使用示例</h2><h3 id="_1-项目创建" tabindex="-1"><a class="header-anchor" href="#_1-项目创建" aria-hidden="true">#</a> 1. 项目创建</h3>`,15),C=t(`<p>在pom中添加相关依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.ai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-ai-starter-model-zhipuai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们这里使用智谱的免费大模型，虽然免费但它依然支持工具调用（请注意，并不是所有的模型都支持工具调用的，在使用之前到官方的说明确认是否支持）</p><h3 id="_2-声明式使用方式" tabindex="-1"><a class="header-anchor" href="#_2-声明式使用方式" aria-hidden="true">#</a> 2. 声明式使用方式</h3><p>我们定义一个简单、基础可用的工具方法，主要用于获取当前时间，核心点就是在方法上添加注解 <code>@Tool</code></p><ul><li>注解的 description 属性非常重要，用于知道模型判断何时调用这个工具；当描述不够清晰时，可能导致模型在该调用工具时没有调用，或者调用错了工具</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">class</span> <span class="token class-name">DateTimeTools</span> <span class="token punctuation">{</span>

     <span class="token comment">// 获取当前时间，工具描述，使用中文也是可以的</span>
     <span class="token annotation punctuation">@Tool</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">&quot;Get the current date and time in the user&#39;s timezone&quot;</span><span class="token punctuation">)</span>
     <span class="token class-name">String</span> <span class="token function">getCurrentDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
         <span class="token class-name">String</span> ans <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span><span class="token class-name">LocaleContextHolder</span><span class="token punctuation">.</span><span class="token function">getTimeZone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toZoneId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;进入获取当前时间了：&quot;</span> <span class="token operator">+</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于使用 <code>ChatClient</code> 来使用工具调用，就非常简单了，如</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChatController</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ChatClient</span> chatClient<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ChatController</span><span class="token punctuation">(</span><span class="token class-name">ZhiPuAiChatModel</span> chatModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>chatClient <span class="token operator">=</span> <span class="token class-name">ChatClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>chatModel<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;time&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getTime</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> chatClient<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">tools</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DateTimeTools</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;timeNoTools&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getTimeNoTools</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> chatClient<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面有提供了两个接口， getTime 接口使用了工具，getTimeNoTools 接口没有使用工具；使用方式形如</p><ul><li><code>chatClient.prompt().tools(xxx)</code>：通过tools方法注入工具</li></ul><p>接下来我们看一下表现情况</p><figure><img src="`+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>说明：虽然上面的访问对比中，在请求 <code>time</code> 接口时，正确的返回了时间，但是大模型并不总是和我们预期的一致，同样的提问，它有时不会主动调用我们注入的工具</p></blockquote><h3 id="_3-带参数的工具方法" tabindex="-1"><a class="header-anchor" href="#_3-带参数的工具方法" aria-hidden="true">#</a> 3. 带参数的工具方法</h3><p>前面定义的工具没有参数，接下来我们在看一下带参数的工具方法</p><p>在方法参数上，可以通过 <code>@ToolParam</code> 注解对参数进行解释说明（这个注解是非必填的）,注解内有两个属性</p><ul><li><code>description</code>：参数描述，用于帮助模型更准确地理解如何使用该参数。例如：参数格式要求、允许取值范围等。</li><li><code>required</code>：指定参数是否为必需项（默认值：<code>true</code>，即所有参数默认必需）。</li></ul><p>比如我现在定义一个返回不同时区的当前时间的工具，供大模型调用，参数是时区，同样放在 <code>DateTimeTools</code> 类中，这样就可以直接使用上面的api</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">DateTimeTools</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Tool</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">&quot;传入时区，返回对应时区的当前时间给用户&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">String</span> <span class="token function">getTimeByZoneId</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ToolParam</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">&quot;需要查询时间的时区&quot;</span><span class="token punctuation">)</span> <span class="token class-name">ZoneId</span> area<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 根据时区，查询对应的时间</span>
        <span class="token class-name">ZonedDateTime</span> time <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 转换为 2025-07-26 20:00:00 格式的字符串</span>
        <span class="token comment">// 将输入时区的时间转换为本地时区</span>
        <span class="token class-name">ZonedDateTime</span> localTime <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">withZoneSameInstant</span><span class="token punctuation">(</span><span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">DateTimeFormatter</span> formatter <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> ans <span class="token operator">=</span> localTime<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>formatter<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;传入的时区是：&quot;</span> <span class="token operator">+</span> area <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+m+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从上面的访问示例也可以看出，我们询问某个地区的时间时，大模型会自动根据地区找到时区，然后调用我们的工具返回结果</p><p>但是一个问题来了，直接问时间时，它不会调用我们之前定义的那个方法，返回时间，这是为什么呢？</p><p>我们尝试调整一下，之前定义获取当前时间的工具方法说明</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Tool</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">&quot;不需要关注用户时区，直接返回当前的时间给用户&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">String</span> <span class="token function">getCurrentDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token class-name">String</span> ans <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span><span class="token class-name">LocaleContextHolder</span><span class="token punctuation">.</span><span class="token function">getTimeZone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toZoneId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;进入获取当前时间了：&quot;</span> <span class="token operator">+</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后再多问几次，你就会发现大模型会主动调用我们定义的这个方法，返回时间（但是并不能始终保证它总是表现正确）</p><ul><li>所以一个何时的、精确的工具描述，对于大模型的决策是否调用，非常重要</li></ul><figure><img src="`+v+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_4-添加默认工具" tabindex="-1"><a class="header-anchor" href="#_4-添加默认工具" aria-hidden="true">#</a> 4. 添加默认工具</h3><p>上面介绍的是在用户发起对话时，设置Prompt时指定工具调用，同样的，SpringAI也提供了默认工具的设置方式，在<code>ChatClient</code>创建时，指定默认的工具，这样只要用这个<code>ChatClient</code>进行对话，这些工具都会提供给大模型，而不在需要单独进行设置</p><p>使用方式形如</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ChatClient</span> chatClient <span class="token operator">=</span> <span class="token class-name">ChatClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>chatModel<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">defaultTools</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DateTimeTools</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个就不做具体的演示了，没有什么特殊的地方</p><h3 id="_5-chatmodel-添加工具" tabindex="-1"><a class="header-anchor" href="#_5-chatmodel-添加工具" aria-hidden="true">#</a> 5. ChatModel 添加工具</h3><p>如果某些场景下，我们不是通过<code>ChatClent</code>而是直接借助<code>ChatModel</code>进行对话，同样也可以添加工具，通过 ChatOptions 来实现</p><p>具体的使用姿势如下，借助<code>ToolCallbacks</code>来获取工具集，借助<code>ToolCallingChatOptions</code>来添加工具集</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;showTime&quot;</span><span class="token punctuation">)</span>
 <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">showTime</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token class-name">ToolCallback</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tools <span class="token operator">=</span> <span class="token class-name">ToolCallbacks</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DateTimeTools</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token class-name">ChatOptions</span> options <span class="token operator">=</span> <span class="token class-name">ToolCallingChatOptions</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
             <span class="token punctuation">.</span><span class="token function">toolCallbacks</span><span class="token punctuation">(</span>tools<span class="token punctuation">)</span>
             <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">return</span> chatModel<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Prompt</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-编程式使用方式" tabindex="-1"><a class="header-anchor" href="#_6-编程式使用方式" aria-hidden="true">#</a> 6. 编程式使用方式</h3><p>前面介绍的都是基于<code>@Tool</code>注解的声明式定义工具，这种适用于工具实现完全由我们掌控的场景；对于一些非控制的工具实现（如三方sdk），或者需要动态获取工具参数的场景，我们可以使用编程式定义工具</p><p>编程式的使用方式，主要是借助<code>MethodToolCallback.Builder</code>来构建我们需要的<code>MethodToolCallback</code></p><p>使用这种方式时，需要重点看一下前面第一节的内容，<code>ToolCallback</code> <code>ToolDefinition</code>的类结构定义，清楚之后，再看下面的参数设置就会更轻轻松（也知道为什么要这么实现）</p><ul><li><code>toolDefinition</code>：定义工具名称、描述及输入模式的 <code>ToolDefinition</code> 实例（必需项） <ul><li>可通过 <code>ToolDefinition.Builder</code> 类构建。</li></ul></li><li><code>toolMetadata</code>: 定义额外设置的 <code>ToolMetadata</code> 实例，非必需 <ul><li>可通过 <code>ToolMetadata.Builder</code> 类构建</li><li>returnDierect<code>: 是否直接返回结果（默认为 </code>false\`），为true时表示直接将结果返回给用户、而不是给大模型进行调用</li></ul></li><li><code>toolMethod</code>: 工具方法的<code>Method</code>实例 （必需项）</li><li><code>toolObject</code>: 包含工具方法的对象实例（若方法为静态方法则可省略此参数）</li><li><code>toolCallResultConverter</code>：用于将工具调用结果转换为 <code>String</code> 对象并返回 AI 模型 <ul><li><code>ToolCallResultConverter</code> 实例（未配置时默认使用 <code>DefaultToolCallResultConverter</code>）。</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;timeByCodeTool&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getTimeByCodeTool</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Method</span> method <span class="token operator">=</span> <span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">findMethod</span><span class="token punctuation">(</span><span class="token class-name">DateTimeTools</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;getTimeByZoneId&quot;</span><span class="token punctuation">,</span> <span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">ToolDefinition</span> toolDefinition <span class="token operator">=</span> <span class="token class-name">ToolDefinition</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&quot;getTimeByZoneId&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;传入时区，返回对应时区的当前时间给用户&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">inputSchema</span><span class="token punctuation">(</span><span class="token class-name">JsonSchemaGenerator</span><span class="token punctuation">.</span><span class="token function">generateForMethodInput</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">ToolMetadata</span> toolMetadata <span class="token operator">=</span> <span class="token class-name">ToolMetadata</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">returnDirect</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">ToolCallback</span> callBack <span class="token operator">=</span> <span class="token class-name">MethodToolCallback</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">toolDefinition</span><span class="token punctuation">(</span>toolDefinition<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">toolMetadata</span><span class="token punctuation">(</span>toolMetadata<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">toolMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">toolObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DateTimeTools</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> chatClient<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toolCallbacks</span><span class="token punctuation">(</span>callBack<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在使用方法工具时，需要注意一些限制</p><p>以下类型目前不支持作为工具方法的参数或返回类型：</p><ul><li>Optional</li><li>异步类型（如 CompletableFuture、Future）</li><li>响应式类型 （如 Flow、Mono、Flux）</li><li>函数式类型（如 Function、Supplier、Consumer）</li></ul><h3 id="_7-函数作为工具调用的使用示例" tabindex="-1"><a class="header-anchor" href="#_7-函数作为工具调用的使用示例" aria-hidden="true">#</a> 7. 函数作为工具调用的使用示例</h3><p>到现在为止，我们都是将方法作为工具给大模型进行调用，在java8+之后，除了方法还有些函数式接口，比如<code>Function</code>、<code>Consumer</code>、<code>Supplier</code>、<code>Predicate</code>等，这些函数式接口也可以作为工具进行调用，使用方式如下：</p><p>通过 <code>FunctionToolcallback</code> 来将函数式类型，转换为工具</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">NowService</span> <span class="token keyword">implements</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AreaReq</span><span class="token punctuation">,</span> <span class="token class-name">AreaResp</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">AreaResp</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">AreaReq</span> req<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ZoneId</span> area <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">zoneId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 根据时区，查询对应的时间</span>
        <span class="token class-name">ZonedDateTime</span> time <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 转换为 2025-07-26 20:00:00 格式的字符串</span>
        <span class="token comment">// 将输入时区的时间转换为本地时区</span>
        <span class="token class-name">ZonedDateTime</span> localTime <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">withZoneSameInstant</span><span class="token punctuation">(</span><span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">DateTimeFormatter</span> formatter <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> ans <span class="token operator">=</span> localTime<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>formatter<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;传入的时区是：&quot;</span> <span class="token operator">+</span> area <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AreaResp</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">record</span> <span class="token class-name">AreaReq</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ToolParam</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">&quot;需要查询时间的时区&quot;</span><span class="token punctuation">)</span> <span class="token class-name">ZoneId</span> zoneId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">record</span> <span class="token class-name">AreaResp</span><span class="token punctuation">(</span><span class="token class-name">String</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;timeByCodeFunc&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getTimeByCodeFunc</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 使用函数式工具需要注意的是，传参和返回结果，要么是void，要么是POJO</span>
    <span class="token class-name">ToolCallback</span> callBack <span class="token operator">=</span> <span class="token class-name">FunctionToolCallback</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token string">&quot;nowDateByArea&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">NowService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;传入时区，返回对应时区的当前时间给用户&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">inputType</span><span class="token punctuation">(</span><span class="token class-name">AreaReq</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
            <span class="token comment">// 下面这一行实际是可以省略的，默认就是根据 inputType 进行生成jsonSchema</span>
            <span class="token punctuation">.</span><span class="token function">inputSchema</span><span class="token punctuation">(</span><span class="token class-name">JsonSchemaGenerator</span><span class="token punctuation">.</span><span class="token function">generateForType</span><span class="token punctuation">(</span><span class="token class-name">AreaReq</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">toolMetadata</span><span class="token punctuation">(</span><span class="token class-name">ToolMetadata</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">returnDirect</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> chatClient<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toolCallbacks</span><span class="token punctuation">(</span>callBack<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体的使用方式，和上面介绍的方法的编程式相差不大，但是有一个需要格外注意的事项</p><ul><li>函数输入和输出可以是 Void 或 POJO。输入和输出的 POJO 必须是可序列化的，因为结果将被序列化并发送回模型。</li><li>函数及输入输出类型必须是 public 的。</li></ul><p>以下类型目前不支持作为工具函数的输入或输出类型：</p><ul><li>基本类型</li><li>Optional</li><li>集合类型 （如 List、Map、Array、Set）</li><li>异步类型（如 CompletableFuture、Future）</li><li>响应式类型（如 Flow、Mono、Flux）</li></ul><h3 id="_8-动态范式-bean" tabindex="-1"><a class="header-anchor" href="#_8-动态范式-bean" aria-hidden="true">#</a> 8. 动态范式 @Bean</h3><p>这种类似于声明式的函数工具，Spring AI 通过 <code>ToolCallbackResolver</code> 接口（SpringBeanToolCallbackResolver具体实现），在运行时动态解析</p><p>可以将任意 <code>Function</code>、<code>Supplier</code>、<code>Consumer</code> 或 <code>BiFunction</code> 类型的 <code>Bean</code> 作为工具使用。</p><ul><li><code>Bean</code> 名称将作为工具名称\`</li><li><code>Spring Framework</code> 的 <code>@Description</code> 注解提供工具描述</li></ul><p>实测，没有成功，待后续确认这个逻辑是否和官网说的一致</p><h2 id="三、小结" tabindex="-1"><a class="header-anchor" href="#三、小结" aria-hidden="true">#</a> 三、小结</h2><p>本篇文章主要介绍了SpringAI如何定义、使用工具调用，包括方法工具/函数工具两类，有基于@Tool注解的声明式，也有借助 <code>MethodToolCallback</code> 和 <code>FunctionToolCallback</code> 实现的编程式</p><p>在工具的定义上，我们需要额外关注工具的描述，传参和返回；其中传参是通过 <code>Json Schema</code> 的形式给到的大模型</p><p>默认行为时，Spring AI 会自动拦截模型的工具调用请求，执行工具并将结果返回模型。这些操作均由各 ChatModel 实现通过 ToolCallingManager 透明完成，如下图</p><figure><img src="`+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li>当需要向模型提供工具时，我们将其定义包含在聊天请求（Prompt）中，并调用 ChatModel API 将请求发送至 AI 模型。</li><li>当模型决定调用工具时，它会发送包含工具名称及符合定义模式的输入参数的响应（ChatResponse）。</li><li>ChatModel 将工具调用请求发送至 ToolCallingManager API。</li><li>ToolCallingManager 负责识别需调用的工具并使用提供的输入参数执行该工具。</li><li>工具调用结果返回至 ToolCallingManager。</li><li>ToolCallingManager 将工具执行结果返回给 ChatModel。</li><li>ChatModel 将工具执行结果返回AI模型（ToolResponseMessage）。</li><li>AI 模型利用工具调用结果作为附加上下文生成最终响应，并通过 ChatClient 将其返回调用方（ChatResponse）。</li></ol><p>目前与模型交互的工具执行，是由SpringAI托管的，内部的工具选择等逻辑对用户是不透明的，当然也可以通过将 <code>ToolCallingChatOptions</code> 的 <code>internalToolExecutionEnabled</code> 属性设为 <code>false</code>，来实现自行控制工具执行的生命周期；这块的内容，将在下一章节进行介绍</p>',66),w={href:"https://github.com/liuyueyi/spring-ai-demo/tree/master/S06-function-tool",target:"_blank",rel:"noopener noreferrer"};function S(x,_){const p=c("ExternalLinkIcon"),o=c("RouterLink");return i(),u("div",null,[h,s("figure",null,[f,s("figcaption",null,[s("a",T,[n("https://java2ai.com/docs/dev/tutorials/function-calling/"),a(p)])])]),q,s("p",null,[n("下面是一个json schema的示例（在前面"),a(o,{to:"/spring/springai/%E5%9F%BA%E7%A1%80%E7%AF%87/03.%E7%BB%93%E6%9E%84%E5%8C%96%E8%BF%94%E5%9B%9E.html"},{default:e(()=>[n("结构化返回")]),_:1}),n("中，实际上也用到了 JSON Schema，用于告知大模型如何返回我们希望格式的数据）")]),y,s("p",null,[n("项目创建方式与之前并无差别，创建一个SpringBoot项目，并引入SpringAI的依赖，有需要的小伙伴参考 "),a(o,{to:"/spring/springai/%E5%9F%BA%E7%A1%80%E7%AF%87/01.%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AASpringAI-Demo%E5%B7%A5%E7%A8%8B.html"},{default:e(()=>[n("创建一个SpringAI-Demo工程")]),_:1})]),C,s("p",null,[n("文中所有涉及到的代码，可以到项目中获取 "),s("a",w,[n("https://github.com/liuyueyi/spring-ai-demo"),a(p)])])])}const I=l(g,[["render",S],["__file","06.工具调用FunctionCalling.html.vue"]]);export{I as default};
