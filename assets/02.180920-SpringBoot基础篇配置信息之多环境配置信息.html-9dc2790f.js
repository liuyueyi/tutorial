import{_ as p,V as t,W as i,X as o,Y as n,Z as a,$ as e,a1 as l,F as c}from"./framework-094145d2.js";const u="/tutorial/imgs/180920/00.jpg",r="/tutorial/imgs/180920/01.jpg",d={},k=n("p",null,"前面一篇主要介绍的是如何获取配置信息，接下来则是另外一个非常非常基础和必要的知识点了，应用如何根据不同的环境来选择对应的配置，即配置的多环境选择问题",-1),m=l(`<h2 id="i-多环境配置" tabindex="-1"><a class="header-anchor" href="#i-多环境配置" aria-hidden="true">#</a> I. 多环境配置</h2><p>配置区分环境，最直观的如测试环境和生产环境的DB不同，测试环境的应用要求连接测试DB；生成环境的应用要求连生成DB；对于应用本身来说，业务代码啥的都是一样，无非就是DB的配置不同，如果在代码中写死环境判断，然后进行选择配置话，就不太优雅了；</p><p>SpringBoot本身就支持多环境配置文件，应用的配置，除了 <code>application.yml</code> 文件之外，还会有环境相关的配置，如下一个实例</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>application.yml
application-dev.yml
application-pro.yml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-多环境选择" tabindex="-1"><a class="header-anchor" href="#_1-多环境选择" aria-hidden="true">#</a> 1. 多环境选择</h3><h4 id="a-命令规则" tabindex="-1"><a class="header-anchor" href="#a-命令规则" aria-hidden="true">#</a> a. 命令规则</h4><p>配置文件，一般要求是以 <code>application</code> 开头，可以是yml文件也可以是properties文件</p><h4 id="b-配置选择" tabindex="-1"><a class="header-anchor" href="#b-配置选择" aria-hidden="true">#</a> b. 配置选择</h4><p>如何确定哪个配置配置文件（application-dev.yml 与 application-pro.yml）生效呢？</p><ul><li>通过配置信息 <code>spring.profile.active</code> 来指定需要加载的配置文件</li></ul><p>通常这个配置信息会放在 <code>applicatin.yml</code> 文件中，如下</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>
    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这个表示，当前的配置信息，会从 <code>application.yml</code> 和 <code>application-dev.yml</code> 文件中获取；且<code>-dev</code>文件中定义的配置信息，会覆盖前面的配置信息</p><p><strong>注意</strong></p><ul><li>上面这个配置的value，可以指定多个配置文件，用英文逗号分隔</li><li>其中最右边的优先级最高，覆盖左边配置文件中重名的配置信息</li></ul><h4 id="c-实例演示" tabindex="-1"><a class="header-anchor" href="#c-实例演示" aria-hidden="true">#</a> c. 实例演示</h4><p>配置文件内容如下</p><p><strong>application.yml</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 端口号</span>
<span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span>

<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>
    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev<span class="token punctuation">,</span>biz


<span class="token key atrule">biz</span><span class="token punctuation">:</span>
  <span class="token key atrule">total</span><span class="token punctuation">:</span> application
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>application-dev.yml</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">biz</span><span class="token punctuation">:</span>
  <span class="token key atrule">env</span><span class="token punctuation">:</span> dev<span class="token punctuation">-</span>environment
  <span class="token key atrule">profile</span><span class="token punctuation">:</span> dev<span class="token punctuation">-</span>profile
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>application-pro.yml</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">biz</span><span class="token punctuation">:</span>
  <span class="token key atrule">env</span><span class="token punctuation">:</span> pro<span class="token punctuation">-</span>environment
  <span class="token key atrule">profile</span><span class="token punctuation">:</span> pro<span class="token punctuation">-</span>profile
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>application-biz.yml</strong></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">biz</span><span class="token punctuation">:</span>
  <span class="token key atrule">whitelist</span><span class="token punctuation">:</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">,</span>g
  <span class="token key atrule">ratelimit</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span>
  <span class="token key atrule">total</span><span class="token punctuation">:</span> application<span class="token punctuation">-</span>biz
  <span class="token key atrule">profile</span><span class="token punctuation">:</span> biz<span class="token punctuation">-</span>profile
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过前面的规则进行分析，当前选中生效的配置文件为</p><ul><li>application.yml, application-dev.yml, application-biz.yml</li><li>优先级为：biz文件的配置覆盖dev文件，dev文件的覆盖<code>application</code>的配置</li></ul><p>代码验证如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>git<span class="token punctuation">.</span>hui<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>properties</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span></span><span class="token class-name">SpringApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>env<span class="token punctuation">.</span></span><span class="token class-name">Environment</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Created by @author yihui in 09:17 18/9/20.
 */</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">Application</span><span class="token punctuation">(</span><span class="token class-name">Environment</span> environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> env <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;biz.env&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">String</span> whitelist <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;biz.whitelist&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> ratelimit <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;biz.ratelimit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">String</span> total <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;biz.total&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> profile <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;biz.profile&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// application.yml文件中的配置 spring.profile.active指定具体选中的配置文件，为 application-dev 和 application-biz</span>
        <span class="token comment">// read from application-dev.yml</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;env: &quot;</span> <span class="token operator">+</span> env<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// read from application-biz.yml</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;whitelist: &quot;</span> <span class="token operator">+</span> whitelist<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ratelimit: &quot;</span> <span class="token operator">+</span> ratelimit<span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment">// 当配置文件 application.yml, application-dev.yml, application-biz.yml 三个文件都存在时，覆盖规则为</span>
        <span class="token comment">// biz &gt; dev &gt; application.yml  （其中 biz&gt;dev的原则是根据 spring.profile.active 中定义的顺序来的，最右边的优先级最高）</span>
        <span class="token comment">// read from application-biz.yml</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;total: &quot;</span> <span class="token operator">+</span> total<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// read from application-biz.yml</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;profile: &quot;</span> <span class="token operator">+</span> profile<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果为</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>env: dev-environment
whitelist: a,b,c,d,e,f,g
ratelimit: 1,2,3
total: application-biz
profile: biz-profile
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-优先级问题" tabindex="-1"><a class="header-anchor" href="#_2-优先级问题" aria-hidden="true">#</a> 2. 优先级问题</h3><p>上面虽然看是实现了多环境的配置问题，但看完之后有一个明显的疑问，选择环境的配置信息写死在<code>application.yml</code>文件中，难道说部署到测试和生产环境时，还得记得手动改这个配置的值么？</p><p>如果是这样的话，也太容易出问题了吧。。。</p><p>那么如何解决这个问题呢，常见的一种方式是通过启动脚本，传入当前环境的参数，来覆盖选中的环境</p><h4 id="a-配置文件优先级" tabindex="-1"><a class="header-anchor" href="#a-配置文件优先级" aria-hidden="true">#</a> a. 配置文件优先级</h4><p>默认的配置文件是放在 <code>src/main/resources</code> 目录下，当然也是可以放其他位置的</p><ul><li>外置，在相对于应用程序运行目录的 <code>/config</code> 子目录中</li><li>外置，在应用程序运行的目录中</li><li>内置，放在config包下(即 src/main/resources/config)目录下</li><li>内置，放在classpath根目录下（即默认的 src/main/resources/目录下)</li></ul><p>上面的优先级是从高到低来的，即外置的改与内置的；config下面的高于根目录下的</p><p>以内置的两个进行对比，实测结果如下</p><figure><img src="`+u+`" alt="优先级对比测试" tabindex="0" loading="lazy"><figcaption>优先级对比测试</figcaption></figure><h4 id="b-配置信息来源" tabindex="-1"><a class="header-anchor" href="#b-配置信息来源" aria-hidden="true">#</a> b. 配置信息来源</h4><p>前面一篇中，遗留了一个问题，就是在配置文件中配置了属性 <code>user.name = 一灰灰blog</code>, 但是实际取出的却是 <code>user</code> (我个人的电脑用户名)，也就是说，Environment中读取的配置信息，不仅仅是从配置文件中获取，还要其他的一些配置信息来源</p><p>根据优先级对属性来源进行排序，如下</p><ul><li>根目录下的开发工具全局设置属性(当开发工具激活时为~/.spring-boot-devtools.properties)。</li><li>测试中的@TestPropertySource注解。</li><li>测试中的@SpringBootTest#properties注解特性。</li><li>命令行参数</li><li>SPRING_APPLICATION_JSON中的属性(环境变量或系统属性中的内联JSON嵌入)。</li><li>ServletConfig初始化参数。</li><li>ServletContext初始化参数。</li><li>java:comp/env里的JNDI属性</li><li>JVM系统属性</li><li>操作系统环境变量</li><li>随机生成的带random.* 前缀的属性（在设置其他属性时，可以应用他们，比如\${random.long}）</li><li>应用程序以外的application.properties或者appliaction.yml文件</li><li>打包在应用程序内的application.properties或者appliaction.yml文件</li><li>通过@PropertySource标注的属性源</li><li>默认属性(通过SpringApplication.setDefaultProperties指定).</li></ul><h3 id="_3-环境选择的几种方式" tabindex="-1"><a class="header-anchor" href="#_3-环境选择的几种方式" aria-hidden="true">#</a> 3. 环境选择的几种方式</h3><p>看了上面的配置信息来源，我们可以如何优雅的实现不同环境选择不同的配置文件呢？有下面两个容易想到和实现的方式了</p><ul><li>命令行参数</li><li>应用程序外的配置文件</li></ul><h4 id="a-命令行参数方式" tabindex="-1"><a class="header-anchor" href="#a-命令行参数方式" aria-hidden="true">#</a> a. 命令行参数方式</h4><p>这种实现思路就是在启动脚本中，传入当前环境，然后覆盖掉属性 <code>--spring.profiles.active</code>，对业务来说，就不需要做任何的改动了，只要启动脚本本身区分环境即可，唯一的要求就是遵循统一的规范，一个简单的实现如下</p><p>假定命令行的第一个参数就是环境，取出这个参数，传入即可</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;--spring.profiles.active=&quot;</span> <span class="token operator">+</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;,biz&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实测结果，注意下面红框内的pro，覆盖了配置文件中的dev</p><figure><img src="`+r+'" alt="配置覆盖测试" tabindex="0" loading="lazy"><figcaption>配置覆盖测试</figcaption></figure><p><strong>说明</strong></p><p>当然可以直接传入完整的命令行参数<code>--spring.profiles.active=pro,biz</code>，这样代码内部就不需要进行特殊处理</p><h4 id="b-外置配置文件方式" tabindex="-1"><a class="header-anchor" href="#b-外置配置文件方式" aria-hidden="true">#</a> b. 外置配置文件方式</h4><p>当程序以独立的jar运行时，我个人的感觉是外置的配置文件是优于内置的配置文件的；因为修改配置的话，不需要重新打包部署，直接改即可</p><p>这种实现方式也没啥好多说的，相当于把配置文件拉出来放在外面而已，再根据环境写具体的<code>spring.profiles.active</code>的值</p><h2 id="ii-小结" tabindex="-1"><a class="header-anchor" href="#ii-小结" aria-hidden="true">#</a> II. 小结</h2><ol><li>SpringBoot是支持多环境的配置，通过配置属性 <code>spring.profiles.active</code> 来指定</li><li><code>spring.profiles.active</code>参数指定多个配置文件时，右边的优于左边的</li><li>应用外的配置文件优先于应用内，config目录下的优先于根目录下的</li><li>配置参数来源及优先级可以参看前文: <a href="#b.-%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E6%9D%A5%E6%BA%90">配置信息来源</a></li><li>命令行参数传入时，请注意写法形同 <code>--key=value</code></li></ol><h2 id="iii-其他" tabindex="-1"><a class="header-anchor" href="#iii-其他" aria-hidden="true">#</a> III. 其他</h2><h3 id="_0-项目" tabindex="-1"><a class="header-anchor" href="#_0-项目" aria-hidden="true">#</a> 0. 项目</h3>',63),v={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/001-properties",target:"_blank",rel:"noopener noreferrer"};function g(h,y){const s=c("ExternalLinkIcon");return t(),i("div",null,[k,o(" more "),m,n("ul",null,[n("li",null,[a("工程："),n("a",v,[a("spring-boot-demo"),e(s)])]),n("li",null,[a("modal： "),n("a",b,[a("spring-boot-demo#001-properties"),e(s)])])])])}const _=p(d,[["render",g],["__file","02.180920-SpringBoot基础篇配置信息之多环境配置信息.html.vue"]]);export{_ as default};
