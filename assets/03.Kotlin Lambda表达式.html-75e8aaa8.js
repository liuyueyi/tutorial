import{_ as n,V as s,W as a,a1 as t}from"./framework-094145d2.js";const e={},p=t(`<p>以下是关于 Kotlin Lambda 表达式的深度解析，包含核心概念、使用方式、工作原理及最佳实践：</p><h3 id="一、lambda-表达式的本质" tabindex="-1"><a class="header-anchor" href="#一、lambda-表达式的本质" aria-hidden="true">#</a> <strong>一、Lambda 表达式的本质</strong></h3><p><strong>定义</strong>：Lambda 是一个<strong>匿名函数</strong>，可作为参数传递或赋值给变量。</p><p>Kotlin 中的 Lambda 是<strong>函数式编程</strong>的核心工具，用于简化代码和实现高阶函数。</p><p><strong>基本语法</strong>：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token punctuation">{</span> 参数列表 <span class="token operator">-&gt;</span> 函数体 <span class="token punctuation">}</span>

<span class="token comment">// 示例：加法 Lambda</span>
<span class="token keyword">val</span> sum<span class="token operator">:</span> <span class="token punctuation">(</span>Int<span class="token punctuation">,</span> Int<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Int <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> b <span class="token operator">-&gt;</span> a <span class="token operator">+</span> b <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二、lambda-的使用方式" tabindex="-1"><a class="header-anchor" href="#二、lambda-的使用方式" aria-hidden="true">#</a> <strong>二、Lambda 的使用方式</strong></h3><h4 id="_1-作为函数参数" tabindex="-1"><a class="header-anchor" href="#_1-作为函数参数" aria-hidden="true">#</a> <strong>1. 作为函数参数</strong></h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 高阶函数</span>
<span class="token keyword">fun</span> <span class="token function">calculate</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Int<span class="token punctuation">,</span> b<span class="token operator">:</span> Int<span class="token punctuation">,</span> operation<span class="token operator">:</span> <span class="token punctuation">(</span>Int<span class="token punctuation">,</span> Int<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">operation</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 调用时传递 Lambda</span>
<span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y <span class="token operator">-&gt;</span> x <span class="token operator">+</span> y <span class="token punctuation">}</span> <span class="token comment">// 结果：3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-集合操作-最常见场景" tabindex="-1"><a class="header-anchor" href="#_2-集合操作-最常见场景" aria-hidden="true">#</a> <strong>2. 集合操作（最常见场景）</strong></h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> numbers <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>

<span class="token comment">// map：转换元素</span>
<span class="token keyword">val</span> doubled <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span> it <span class="token operator">*</span> <span class="token number">2</span> <span class="token punctuation">}</span> <span class="token comment">// [2, 4, 6, 8]</span>

<span class="token comment">// filter：过滤元素</span>
<span class="token keyword">val</span> even <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">filter</span> <span class="token punctuation">{</span> it <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">}</span> <span class="token comment">// [2, 4]</span>

<span class="token comment">// reduce：聚合元素</span>
<span class="token keyword">val</span> sum <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">reduce</span> <span class="token punctuation">{</span> acc<span class="token punctuation">,</span> num <span class="token operator">-&gt;</span> acc <span class="token operator">+</span> num <span class="token punctuation">}</span> <span class="token comment">// 10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-作用域函数-let-run-with-apply-also" tabindex="-1"><a class="header-anchor" href="#_3-作用域函数-let-run-with-apply-also" aria-hidden="true">#</a> <strong>3. 作用域函数（let/run/with/apply/also）</strong></h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// let：对对象执行操作并返回结果</span>
<span class="token keyword">val</span> nameLength <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Alice&quot;</span></span><span class="token punctuation">.</span><span class="token function">let</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span>length <span class="token punctuation">}</span> <span class="token comment">// 5</span>

<span class="token comment">// apply：配置对象并返回自身</span>
<span class="token keyword">val</span> user <span class="token operator">=</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>
    name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;Bob&quot;</span></span>
    age <span class="token operator">=</span> <span class="token number">30</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-替代接口实现-sam-转换" tabindex="-1"><a class="header-anchor" href="#_4-替代接口实现-sam-转换" aria-hidden="true">#</a> <strong>4. 替代接口实现（SAM 转换）</strong></h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// Java 接口</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> ClickListener <span class="token punctuation">{</span>
    void <span class="token function">onClick</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// Kotlin 中用 Lambda 实现</span>
button<span class="token punctuation">.</span><span class="token function">setOnClickListener</span> <span class="token punctuation">{</span> view <span class="token operator">-&gt;</span>
    <span class="token comment">// 处理点击事件</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三、lambda-的关键特性" tabindex="-1"><a class="header-anchor" href="#三、lambda-的关键特性" aria-hidden="true">#</a> <strong>三、Lambda 的关键特性</strong></h3><h4 id="_1-自动推断参数类型" tabindex="-1"><a class="header-anchor" href="#_1-自动推断参数类型" aria-hidden="true">#</a> <strong>1. 自动推断参数类型</strong></h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 完整写法</span>
<span class="token keyword">val</span> sum<span class="token operator">:</span> <span class="token punctuation">(</span>Int<span class="token punctuation">,</span> Int<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Int <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> Int<span class="token punctuation">,</span> b<span class="token operator">:</span> Int <span class="token operator">-&gt;</span> a <span class="token operator">+</span> b <span class="token punctuation">}</span>

<span class="token comment">// 省略类型（编译器自动推断）</span>
<span class="token keyword">val</span> sum <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> Int<span class="token punctuation">,</span> b<span class="token operator">:</span> Int <span class="token operator">-&gt;</span> a <span class="token operator">+</span> b <span class="token punctuation">}</span> <span class="token comment">// 类型仍为 (Int, Int) -&gt; Int</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-单个参数的隐式名称-it" tabindex="-1"><a class="header-anchor" href="#_2-单个参数的隐式名称-it" aria-hidden="true">#</a> <strong>2. 单个参数的隐式名称 <code>it</code></strong></h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;a&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;b&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span> 
    <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token comment">// it 代表元素</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-闭包特性-捕获外部变量" tabindex="-1"><a class="header-anchor" href="#_3-闭包特性-捕获外部变量" aria-hidden="true">#</a> <strong>3. 闭包特性（捕获外部变量）</strong></h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Int <span class="token punctuation">{</span>
    <span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span> count<span class="token operator">++</span> <span class="token punctuation">}</span> <span class="token comment">// Lambda 捕获并修改外部变量</span>
<span class="token punctuation">}</span>

<span class="token keyword">val</span> c <span class="token operator">=</span> <span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 0</span>
<span class="token function">println</span><span class="token punctuation">(</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-匿名函数-lambda-的变体" tabindex="-1"><a class="header-anchor" href="#_4-匿名函数-lambda-的变体" aria-hidden="true">#</a> <strong>4. 匿名函数（Lambda 的变体）</strong></h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 匿名函数语法</span>
<span class="token keyword">val</span> sum <span class="token operator">=</span> <span class="token keyword">fun</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Int<span class="token punctuation">,</span> b<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>

<span class="token comment">// 与 Lambda 的区别：可指定返回类型，有显式 return</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="四、lambda-的工作原理" tabindex="-1"><a class="header-anchor" href="#四、lambda-的工作原理" aria-hidden="true">#</a> <strong>四、Lambda 的工作原理</strong></h3><h4 id="_1-编译后的实现" tabindex="-1"><a class="header-anchor" href="#_1-编译后的实现" aria-hidden="true">#</a> <strong>1. 编译后的实现</strong></h4><ul><li><strong>非内联 Lambda</strong>：编译为实现 <code>FunctionN</code> 接口的匿名类（如 <code>Function0</code>、<code>Function1</code>）。<div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// Lambda</span>
<span class="token keyword">val</span> lambda <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> Int<span class="token punctuation">,</span> b<span class="token operator">:</span> Int <span class="token operator">-&gt;</span> a <span class="token operator">+</span> b <span class="token punctuation">}</span>

<span class="token comment">// 等效于（伪代码）</span>
<span class="token keyword">val</span> lambda <span class="token operator">=</span> <span class="token keyword">object</span> <span class="token operator">:</span> Function2<span class="token operator">&lt;</span>Int<span class="token punctuation">,</span> Int<span class="token punctuation">,</span> Int<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">invoke</span><span class="token punctuation">(</span>a<span class="token operator">:</span> Int<span class="token punctuation">,</span> b<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token operator">=</span> a <span class="token operator">+</span> b
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><strong>内联 Lambda</strong>：编译时直接替换函数体，避免类创建（见下文）。</li></ul><h4 id="_2-闭包的实现" tabindex="-1"><a class="header-anchor" href="#_2-闭包的实现" aria-hidden="true">#</a> <strong>2. 闭包的实现</strong></h4><ul><li>捕获的变量被封装在一个对象中，Lambda 持有该对象的引用。<div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">val</span> lambda <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token operator">++</span> <span class="token punctuation">}</span> <span class="token comment">// 捕获 x</span>
    <span class="token comment">// 编译后，x 被封装在一个持有 Int 字段的对象中</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="五、内联-lambda-性能优化" tabindex="-1"><a class="header-anchor" href="#五、内联-lambda-性能优化" aria-hidden="true">#</a> <strong>五、内联 Lambda（性能优化）</strong></h3><p><strong>问题</strong>：普通 Lambda 会生成匿名类，带来额外内存开销。<br><strong>解决方案</strong>：使用 <code>inline</code> 关键字消除此类开销。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 内联函数 + Lambda</span>
<span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token function">lock</span><span class="token punctuation">(</span>lock<span class="token operator">:</span> Lock<span class="token punctuation">,</span> block<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> T<span class="token punctuation">)</span><span class="token operator">:</span> T <span class="token punctuation">{</span>
    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">block</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 调用处会被编译为（伪代码）</span>
<span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token function">lock</span><span class="token punctuation">(</span>myLock<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>

<span class="token comment">// 等效于</span>
myLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    result <span class="token operator">=</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
    myLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>限制</strong>：</p><ul><li>内联 Lambda 中不能使用非局部返回（除非用 <code>crossinline</code>）。</li><li>大型 Lambda 可能导致代码膨胀。</li></ul><h3 id="六、常见陷阱与注意事项" tabindex="-1"><a class="header-anchor" href="#六、常见陷阱与注意事项" aria-hidden="true">#</a> <strong>六、常见陷阱与注意事项</strong></h3><h4 id="_1-非局部返回" tabindex="-1"><a class="header-anchor" href="#_1-非局部返回" aria-hidden="true">#</a> <strong>1. 非局部返回</strong></h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token comment">// 错误：返回整个 main 函数</span>
        <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 正确做法：使用标签返回</span>
<span class="token function">listOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>forEach <span class="token label symbol">lit@</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token label symbol">@lit</span>
    <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-内存泄漏风险" tabindex="-1"><a class="header-anchor" href="#_2-内存泄漏风险" aria-hidden="true">#</a> <strong>2. 内存泄漏风险</strong></h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 错误：Activity 上下文被 Lambda 捕获，可能导致泄漏</span>
button<span class="token punctuation">.</span><span class="token function">setOnClickListener</span> <span class="token punctuation">{</span> view <span class="token operator">-&gt;</span>
    <span class="token function">showToast</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token label symbol">@MainActivity</span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Clicked&quot;</span></span><span class="token punctuation">)</span> <span class="token comment">// 捕获 Activity</span>
<span class="token punctuation">}</span>

<span class="token comment">// 正确：使用弱引用或局部变量</span>
<span class="token keyword">val</span> context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token label symbol">@MainActivity</span><span class="token punctuation">.</span>applicationContext
button<span class="token punctuation">.</span><span class="token function">setOnClickListener</span> <span class="token punctuation">{</span> view <span class="token operator">-&gt;</span>
    <span class="token function">showToast</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Clicked&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-过度使用-lambda-导致可读性下降" tabindex="-1"><a class="header-anchor" href="#_3-过度使用-lambda-导致可读性下降" aria-hidden="true">#</a> <strong>3. 过度使用 Lambda 导致可读性下降</strong></h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 反例：复杂逻辑挤在一个 Lambda 中</span>
<span class="token keyword">data</span><span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span> <span class="token function">process</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">filter</span> <span class="token punctuation">{</span> <span class="token function">validate</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">reduce</span> <span class="token punctuation">{</span> acc<span class="token punctuation">,</span> it <span class="token operator">-&gt;</span> <span class="token function">combine</span><span class="token punctuation">(</span>acc<span class="token punctuation">,</span> it<span class="token punctuation">)</span> <span class="token punctuation">}</span>

<span class="token comment">// 正例：拆分为具名函数提高可读性</span>
<span class="token keyword">data</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token operator">::</span>process<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token operator">::</span>validate<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token operator">::</span>combine<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="七、最佳实践推荐" tabindex="-1"><a class="header-anchor" href="#七、最佳实践推荐" aria-hidden="true">#</a> <strong>七、最佳实践推荐</strong></h3><h4 id="_1-优先使用-lambda-简化代码" tabindex="-1"><a class="header-anchor" href="#_1-优先使用-lambda-简化代码" aria-hidden="true">#</a> <strong>1. 优先使用 Lambda 简化代码</strong></h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 传统写法</span>
<span class="token keyword">val</span> evenNumbers <span class="token operator">=</span> mutableListOf<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>num <span class="token keyword">in</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> evenNumbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// Lambda 写法</span>
<span class="token keyword">val</span> evenNumbers <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">filter</span> <span class="token punctuation">{</span> it <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-避免长-lambda-保持简洁" tabindex="-1"><a class="header-anchor" href="#_2-避免长-lambda-保持简洁" aria-hidden="true">#</a> <strong>2. 避免长 Lambda，保持简洁</strong></h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 反例</span>
list<span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span> 
    <span class="token comment">// 复杂处理逻辑</span>
    <span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token function">compute</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>
    <span class="token function">transform</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 正例：提取为具名函数</span>
list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token operator">::</span>processItem<span class="token punctuation">)</span>

<span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">processItem</span><span class="token punctuation">(</span>item<span class="token operator">:</span> Item<span class="token punctuation">)</span><span class="token operator">:</span> Result <span class="token punctuation">{</span>
    <span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token function">compute</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">transform</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-利用-lambda-实现-dsl" tabindex="-1"><a class="header-anchor" href="#_3-利用-lambda-实现-dsl" aria-hidden="true">#</a> <strong>3. 利用 Lambda 实现 DSL</strong></h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 构建 HTTP 请求的 DSL</span>
<span class="token function">httpRequest</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;GET&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;/api/users&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    headers <span class="token punctuation">{</span>
        <span class="token string-literal singleline"><span class="token string">&quot;Content-Type&quot;</span></span> <span class="token keyword">to</span> <span class="token string-literal singleline"><span class="token string">&quot;application/json&quot;</span></span>
    <span class="token punctuation">}</span>
    body <span class="token punctuation">{</span>
        json <span class="token punctuation">{</span>
            <span class="token string-literal singleline"><span class="token string">&quot;name&quot;</span></span> <span class="token keyword">to</span> <span class="token string-literal singleline"><span class="token string">&quot;Alice&quot;</span></span>
            <span class="token string-literal singleline"><span class="token string">&quot;age&quot;</span></span> <span class="token keyword">to</span> <span class="token number">30</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-合理使用内联优化性能" tabindex="-1"><a class="header-anchor" href="#_4-合理使用内联优化性能" aria-hidden="true">#</a> <strong>4. 合理使用内联优化性能</strong></h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 对高频调用的 Lambda 使用 inline</span>
<span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token function">repeat</span><span class="token punctuation">(</span>times<span class="token operator">:</span> Int<span class="token punctuation">,</span> action<span class="token operator">:</span> <span class="token punctuation">(</span>Int<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">0</span> until times<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">action</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="八、lambda-与其他-kotlin-特性的结合" tabindex="-1"><a class="header-anchor" href="#八、lambda-与其他-kotlin-特性的结合" aria-hidden="true">#</a> <strong>八、Lambda 与其他 Kotlin 特性的结合</strong></h3><h4 id="_1-与委托属性结合" tabindex="-1"><a class="header-anchor" href="#_1-与委托属性结合" aria-hidden="true">#</a> <strong>1. 与委托属性结合</strong></h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">var</span> counter<span class="token operator">:</span> Int <span class="token keyword">by</span> Delegates<span class="token punctuation">.</span><span class="token function">observable</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> property<span class="token punctuation">,</span> oldValue<span class="token punctuation">,</span> newValue <span class="token operator">-&gt;</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Counter changed: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">oldValue</span></span><span class="token string"> -&gt; </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">newValue</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-与协程结合" tabindex="-1"><a class="header-anchor" href="#_2-与协程结合" aria-hidden="true">#</a> <strong>2. 与协程结合</strong></h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>launch <span class="token punctuation">{</span>
    <span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token function">withContext</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 耗时操作</span>
        <span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">updateUI</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-与集合操作结合" tabindex="-1"><a class="header-anchor" href="#_3-与集合操作结合" aria-hidden="true">#</a> <strong>3. 与集合操作结合</strong></h4><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> users <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token function">User</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Alice&quot;</span></span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Bob&quot;</span></span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 链式调用</span>
<span class="token keyword">val</span> names <span class="token operator">=</span> users
    <span class="token punctuation">.</span><span class="token function">filter</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span>age <span class="token operator">&gt;=</span> <span class="token number">30</span> <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token function">map</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span>name <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="九、性能考量" tabindex="-1"><a class="header-anchor" href="#九、性能考量" aria-hidden="true">#</a> <strong>九、性能考量</strong></h3><ol><li><strong>普通 Lambda</strong>：每次调用创建新对象，适合低频场景。</li><li><strong>内联 Lambda</strong>：避免对象创建，适合高频场景（如集合操作）。</li><li><strong>静态 Lambda</strong>：使用 <code>@JvmStatic</code> 注解减少实例创建（Kotlin/Java 互操作）。</li></ol><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> <strong>总结</strong></h3><p>Kotlin Lambda 是函数式编程的核心工具，通过简洁的语法和强大的功能大幅提升代码可读性和生产力。其核心优势在于：</p><ul><li><strong>简化代码</strong>：替代冗长的匿名类和循环结构。</li><li><strong>高阶函数</strong>：支持将函数作为一等公民传递。</li><li><strong>闭包特性</strong>：自然捕获和操作外部变量。</li><li><strong>性能优化</strong>：通过内联消除运行时开销。</li></ul><p>掌握 Lambda 需要理解其语法糖背后的实现原理，避免常见陷阱（如非局部返回、内存泄漏），并结合内联等特性优化性能。在实际项目中，Lambda 特别适合集合操作、异步回调和 DSL 构建等场景。</p>`,63),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","03.Kotlin Lambda表达式.html.vue"]]);export{r as default};
