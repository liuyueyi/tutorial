import{_ as n,V as s,W as e,X as t,Y as a,Z as i,a1 as o}from"./framework-094145d2.js";const p="/tutorial/hexblog/imgs/180917/xargs00.jpg",r="/tutorial/hexblog/imgs/180917/xargs01.jpg",c="/tutorial/hexblog/imgs/180917/xargs02.jpg",l="/tutorial/hexblog/imgs/180917/xargs03.jpg",d="/tutorial/hexblog/imgs/180917/xargs04.jpg",g="/tutorial/hexblog/imgs/180917/xargs05.jpg",u="/tutorial/hexblog/imgs/180917/xargs06.jpg",m="/tutorial/hexblog/imgs/180917/xargs07.jpg",h="/tutorial/hexblog/imgs/180917/xargs08.jpg",f={},b=a("h1",{id:"shell命令之xargs使用小结",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#shell命令之xargs使用小结","aria-hidden":"true"},"#"),i(" Shell命令之xargs使用小结")],-1),k=a("p",null,"常见用于管道的处理中，拿到前面的数据进行后续的处理;",-1),x=a("p",null,"xargs 以空白字符或换行作为分割，默认使用echo输出结果，且会忽略空白行，官方说明如下",-1),_=a("blockquote",null,[a("p",null,"xargs reads items from the standard input, delimited by blanks (which can be protected with double or single quotes or a backslash) or newlines, and executes the command (default is /bin/echo) one or more times with any initial-arguments followed by items read from standard input. Blank lines on the standard input are ignored.")],-1),v=o('<h2 id="i-使用说明" tabindex="-1"><a class="header-anchor" href="#i-使用说明" aria-hidden="true">#</a> I. 使用说明</h2><h3 id="_1-参数解释" tabindex="-1"><a class="header-anchor" href="#_1-参数解释" aria-hidden="true">#</a> 1. 参数解释</h3><p><strong><code>-0</code></strong></p><p>将特殊字符当做一般字符处理，简单来说，空白不被忽略掉，如下</p><figure><img src="'+p+'" alt="IMAGE" tabindex="0" loading="lazy"><figcaption>IMAGE</figcaption></figure><p><strong><code>-a file</code></strong></p><p>文件作为数据源，等同于 <code>cat xxx.txt | xargs</code></p><p><strong><code>-n num</code></strong></p><p>表示命令在执行的时候一次用的argument的个数</p><p><strong><code>-p</code></strong></p><p>操作具有可交互性，每次执行comand都交互式提示用户选择，当每次执行一个argument的时候询问一次用户</p><figure><img src="'+r+'" alt="IMAGE" tabindex="0" loading="lazy"><figcaption>IMAGE</figcaption></figure><p><strong><code>-t</code></strong></p><p>表示先打印命令，然后再执行。</p><figure><img src="'+c+'" alt="IMAGE" tabindex="0" loading="lazy"><figcaption>IMAGE</figcaption></figure><p><strong><code>-I</code></strong></p><p>替换，将前面的数据，一各一个的赋值给{}，后面使用者可以用{}来表示前面接收的数据</p><p>如批量修改文件后缀名</p><figure><img src="'+l+'" alt="IMAGE" tabindex="0" loading="lazy"><figcaption>IMAGE</figcaption></figure><p><strong><code>-L</code></strong></p><p>从标准输入一次读取num行送给Command命令 ，-l和-L功能一样</p><figure><img src="'+d+'" alt="IMAGE" tabindex="0" loading="lazy"><figcaption>IMAGE</figcaption></figure><p><strong><code>-d</code></strong></p><p>默认的xargs分隔符是回车，argument的分隔符是空格，这里修改的是xargs的分隔符</p><p>如下图，将默认的分隔符换成$</p><figure><img src="'+g+`" alt="IMAGE" tabindex="0" loading="lazy"><figcaption>IMAGE</figcaption></figure><h3 id="_2-结合使用" tabindex="-1"><a class="header-anchor" href="#_2-结合使用" aria-hidden="true">#</a> 2. 结合使用</h3><p>xargs命令通常是与其他的命令配套结合使用，下面给出几个常见的使用case</p><h4 id="a-打印jvm堆栈信息" tabindex="-1"><a class="header-anchor" href="#a-打印jvm堆栈信息" aria-hidden="true">#</a> a. 打印jvm堆栈信息</h4><p>jvm应用的id存在pid_file中，需要进行堆栈分析时，一行命令即可</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> pid_file <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-I</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> jstack <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">&quot;VM Periodic Task Thread&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+u+`" alt="IMAGE" tabindex="0" loading="lazy"><figcaption>IMAGE</figcaption></figure><p>当然，如果需要关闭应用，也比较简单了</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> pid_file <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-I</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token function">kill</span> <span class="token parameter variable">-9</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="b-find查找" tabindex="-1"><a class="header-anchor" href="#b-find查找" aria-hidden="true">#</a> b. find查找</h4><p>配合find命令进行查找匹配也比较常见了，如查找文件并打印内容</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">find</span> ./ <span class="token parameter variable">-name</span> <span class="token punctuation">\\</span>*.bak <span class="token parameter variable">-type</span> f <span class="token parameter variable">-print</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-t</span> <span class="token parameter variable">-I</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token function">cat</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+m+`" alt="IMAGE" tabindex="0" loading="lazy"><figcaption>IMAGE</figcaption></figure><p>另外一个常见的就是匹配文本的内容</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">find</span> ./ <span class="token parameter variable">-name</span> <span class="token punctuation">\\</span>*.bak <span class="token parameter variable">-type</span> f <span class="token parameter variable">-print</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-t</span> <span class="token parameter variable">-I</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token function">grep</span> a <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token parameter variable">-n</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+h+'" alt="IMAGE" tabindex="0" loading="lazy"><figcaption>IMAGE</figcaption></figure>',41);function I(E,M){return s(),e("div",null,[b,k,x,_,t(" more "),v])}const G=n(f,[["render",I],["__file","02.Shell命令之xargs使用小结.html.vue"]]);export{G as default};
