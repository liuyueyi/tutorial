import{_ as o,V as c,W as i,Y as n,Z as s,$ as a,a0 as l,a1 as u,F as p}from"./framework-094145d2.js";const k="/tutorial/imgs/column/springai/12-1.webp",r="/tutorial/imgs/column/springai/12-2.webp",d="/tutorial/imgs/column/springai/12-3.webp",m={},v=n("h1",{id:"_12-多模态",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_12-多模态","aria-hidden":"true"},"#"),s(" 12.多模态")],-1),g=n("p",null,"现在大模型的快速发展，已经让其不仅只接受文本，也可以接受图像、音频、视频等多模态数据，SpringAI也提供了相应的模型接口，方便开发者进行多模态模型应用开发",-1),b=n("p",null,"如如 OpenAI 的GPT-4o、Google 的Vertex AI Gemini 1.5、Anthropic 的 Claude3，以及开源模型 Llama3.2、LLaVA 和 BakLLaVA，都能接受文本、图像、音频和视频等多种输入，并通过整合这些输入生成文本响应。",-1),h=n("p",null,"SpringAI提供了非常简单的多模态输入集成，接下来我们通过一个简单实例，来看一下在SpringAI中，如何接入多模态模型",-1),f=n("h2",{id:"一、准备工作",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#一、准备工作","aria-hidden":"true"},"#"),s(" 一、准备工作")],-1),_={href:"https://www.bigmodel.cn/pricing",target:"_blank",rel:"noopener noreferrer"},y=n("h3",{id:"_1-模型选择",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-模型选择","aria-hidden":"true"},"#"),s(" 1. 模型选择")],-1),q=n("p",null,[s("我们这里选择的是官方提供的免费图像理解模型 "),n("code",null,"GLM-4V-Flash"),s("，基于它来做一个食物图片的分类和卡路里计算")],-1),w=n("h3",{id:"_2-项目创建",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-项目创建","aria-hidden":"true"},"#"),s(" 2. 项目创建")],-1),x=u(`<div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.ai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-ai-starter-model-zhipuai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>cn.hutool<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hutool-http<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.8.38<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：我们这里使用 huttol-http 进行互联网的图片下载</p><h3 id="_3-密钥配置" tabindex="-1"><a class="header-anchor" href="#_3-密钥配置" aria-hidden="true">#</a> 3. 密钥配置</h3><p>在配置文件中，指定密钥和默认的模型</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">ai</span><span class="token punctuation">:</span>
    <span class="token key atrule">zhipuai</span><span class="token punctuation">:</span>
      <span class="token comment"># api-key 使用你自己申请的进行替换；如果为了安全考虑，可以通过启动参数进行设置</span>
      <span class="token key atrule">api-key</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>zhipuai<span class="token punctuation">-</span>api<span class="token punctuation">-</span>key<span class="token punctuation">}</span>
      <span class="token key atrule">chat</span><span class="token punctuation">:</span> <span class="token comment"># 聊天模型</span>
        <span class="token key atrule">options</span><span class="token punctuation">:</span>
          <span class="token key atrule">model</span><span class="token punctuation">:</span> GLM<span class="token punctuation">-</span>4V<span class="token punctuation">-</span>Flash  <span class="token comment"># 视觉理解模型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、多模态使用" tabindex="-1"><a class="header-anchor" href="#二、多模态使用" aria-hidden="true">#</a> 二、多模态使用</h2><p>接下来我们进入多模态的实例开发</p><h3 id="_1-图片识别控制器" tabindex="-1"><a class="header-anchor" href="#_1-图片识别控制器" aria-hidden="true">#</a> 1. 图片识别控制器</h3><p>定义一个图片识别控制器，接收图片的URL，并返回识别结果</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImgRecognitionController</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ChatClient</span> chatClient<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ImgRecognitionController</span><span class="token punctuation">(</span><span class="token class-name">ChatModel</span> chatModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>chatClient <span class="token operator">=</span> <span class="token class-name">ChatClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>chatModel<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">defaultAdvisors</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleLoggerAdvisor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token doc-comment comment">/**
     * 图片识别
     *
     * <span class="token keyword">@param</span> <span class="token parameter">imgUrl</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;recognition&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">recognition</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;imgUrl&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> imgUrl<span class="token punctuation">,</span>
                              <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;msg&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 根据传入的图片地址，获取图片内容，然后由大模型进行图片识别</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> imgs <span class="token operator">=</span> <span class="token class-name">HttpUtil</span><span class="token punctuation">.</span><span class="token function">downloadBytes</span><span class="token punctuation">(</span>imgUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">String</span> text <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PromptTemplate</span><span class="token punctuation">(</span><span class="token string">&quot;{msg}, 请将图片内容进行识别，并返回结果&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Media</span> media <span class="token operator">=</span> <span class="token class-name">Media</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">mimeType</span><span class="token punctuation">(</span><span class="token class-name">MimeTypeUtils</span><span class="token punctuation">.</span><span class="token constant">IMAGE_PNG</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>imgs<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Message</span> userMsg <span class="token operator">=</span> <span class="token class-name">UserMessage</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">media</span><span class="token punctuation">(</span>media<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Prompt</span> prompt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Prompt</span><span class="token punctuation">(</span>userMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> chatClient<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的实现方式也可以看出，多模态的使用方式与<code>ChatModel</code>的使用方式基本一致，只是在构建用户消息的时候，携带了一个 <code>Media</code> 类型的输入</p><h3 id="_2-测试" tabindex="-1"><a class="header-anchor" href="#_2-测试" aria-hidden="true">#</a> 2. 测试</h3><p>为了测试，使用大模型帮我们生成一张食物图，避免版权纷争</p><figure><img src="`+k+`" alt="待识别图" tabindex="0" loading="lazy"><figcaption>待识别图</figcaption></figure><p>然后访问测试接口，传入图片的URL，并指定识别的提示语</p><div class="language-curl line-numbers-mode" data-ext="curl"><pre class="language-curl"><code>http://localhost:8080/recognition?msg=这是一张食物图片，我想知道里面有什么食物，以及对应的卡路里&amp;imgUrl=https://ai.hhui.top/food.png
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-结构化输出" tabindex="-1"><a class="header-anchor" href="#_3-结构化输出" aria-hidden="true">#</a> 3. 结构化输出</h3><p>上面直接返回的文本，不太方便我们的业务使用，因此可以考虑将返回结果进行结构化约束，比如，定义我们希望接受的对象（通过 <code>@JsonPropertyDescription</code> 注解来约束字段描述，在生成jsonSchema给大模型时，会将这些描述信息返回给模型）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">record</span> <span class="token class-name">FoodDetail</span><span class="token punctuation">(</span>
        <span class="token annotation punctuation">@JsonPropertyDescription</span><span class="token punctuation">(</span><span class="token string">&quot;整张图片的描述&quot;</span><span class="token punctuation">)</span>
        <span class="token class-name">String</span> desc<span class="token punctuation">,</span>
        <span class="token annotation punctuation">@JsonPropertyDescription</span><span class="token punctuation">(</span><span class="token string">&quot;总的卡路里&quot;</span><span class="token punctuation">)</span>
        <span class="token class-name">Double</span> totalCalorie<span class="token punctuation">,</span>
        <span class="token annotation punctuation">@JsonPropertyDescription</span><span class="token punctuation">(</span><span class="token string">&quot;卡路里计算方式说明&quot;</span><span class="token punctuation">)</span>
        <span class="token class-name">String</span> calorieDesc<span class="token punctuation">,</span>
        <span class="token annotation punctuation">@JsonPropertyDescription</span><span class="token punctuation">(</span><span class="token string">&quot;图片中的食材列表&quot;</span><span class="token punctuation">)</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FoodItem</span><span class="token punctuation">&gt;</span></span> itemList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">record</span> <span class="token class-name">FoodItem</span><span class="token punctuation">(</span>
        <span class="token annotation punctuation">@JsonPropertyDescription</span><span class="token punctuation">(</span><span class="token string">&quot;食材名&quot;</span><span class="token punctuation">)</span>
        <span class="token class-name">String</span> food<span class="token punctuation">,</span>
        <span class="token annotation punctuation">@JsonPropertyDescription</span><span class="token punctuation">(</span><span class="token string">&quot;食材的卡路里占用描述&quot;</span><span class="token punctuation">)</span>
        <span class="token class-name">String</span> desc<span class="token punctuation">,</span>
        <span class="token annotation punctuation">@JsonPropertyDescription</span><span class="token punctuation">(</span><span class="token string">&quot;食材数量&quot;</span><span class="token punctuation">)</span>
        <span class="token class-name">Integer</span> cnt<span class="token punctuation">,</span>
        <span class="token annotation punctuation">@JsonPropertyDescription</span><span class="token punctuation">(</span><span class="token string">&quot;最小的卡路里含量&quot;</span><span class="token punctuation">)</span>
        <span class="token class-name">Double</span> minCalorie<span class="token punctuation">,</span>
        <span class="token annotation punctuation">@JsonPropertyDescription</span><span class="token punctuation">(</span><span class="token string">&quot;最大的卡路里含量&quot;</span><span class="token punctuation">)</span>
        <span class="token class-name">Double</span> maxCalorie<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后调整下多模态的调用，通过<code>entity()</code>来定义返回</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;recognitionAndOutput&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">FoodDetail</span> <span class="token function">recognitionAndOutput</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;imgUrl&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> imgUrl<span class="token punctuation">,</span>
                                       <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;msg&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 根据传入的图片地址，获取图片内容，然后由大模型进行图片识别</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> imgs <span class="token operator">=</span> <span class="token class-name">HttpUtil</span><span class="token punctuation">.</span><span class="token function">downloadBytes</span><span class="token punctuation">(</span>imgUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> text <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PromptTemplate</span><span class="token punctuation">(</span><span class="token string">&quot;{msg}, 请将图片内容进行识别，并返回结果&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Media</span> media <span class="token operator">=</span> <span class="token class-name">Media</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">mimeType</span><span class="token punctuation">(</span><span class="token class-name">MimeTypeUtils</span><span class="token punctuation">.</span><span class="token constant">IMAGE_PNG</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>imgs<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Message</span> userMsg <span class="token operator">=</span> <span class="token class-name">UserMessage</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">media</span><span class="token punctuation">(</span>media<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Prompt</span> prompt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Prompt</span><span class="token punctuation">(</span>userMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> chatClient<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entity</span><span class="token punctuation">(</span><span class="token class-name">FoodDetail</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="三、小结" tabindex="-1"><a class="header-anchor" href="#三、小结" aria-hidden="true">#</a> 三、小结</h2><p>本文主要介绍了多模态的使用，虽然以智谱为例进行了实例介绍；其他的模型使用姿势，实际也差不多，基本上都是<code>ChatModel/ChatClient</code>的使用方式，通过在构建用户消息的时候，携带一个 <code>Media</code> 类型的图片或者音视片资源，即可实现多模态的调用</p><p>但是，请注意，在使用多模态之前，前先确认对应的大模型是否支持多模态的调用，否则，可能会导致调用失败</p>',26),I={href:"https://github.com/liuyueyi/spring-ai-demo/tree/master/S12-multimodality-model",target:"_blank",rel:"noopener noreferrer"};function M(A,P){const t=p("ExternalLinkIcon"),e=p("RouterLink");return c(),i("div",null,[v,g,b,h,f,n("p",null,[s("首先还是得准备一个大模型开发者账号，同样的为了简化大家使用的成本，我们依然采用免费的大模型 - "),n("a",_,[s("智谱"),a(t)]),s(" 来完成")]),y,q,w,n("p",null,[s("创建一个SpringBoot项目，并引入SpringAI依赖，基本流程如 "),a(e,{to:"/spring/springai/%E5%9F%BA%E7%A1%80%E7%AF%87/01.%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AASpringAI-Demo%E5%B7%A5%E7%A8%8B.html"},{default:l(()=>[s("创建一个SpringAI-Demo工程")]),_:1})]),x,n("p",null,[s("文中所有涉及到的代码，可以到项目中获取 "),n("a",I,[s("https://github.com/liuyueyi/spring-ai-demo"),a(t)])])])}const S=o(m,[["render",M],["__file","12.多模态实现食材图片卡路里识别示例.html.vue"]]);export{S as default};
