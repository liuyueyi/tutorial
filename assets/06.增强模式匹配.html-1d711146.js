const t=JSON.parse('{"key":"v-147affc5","path":"/java/jdk/jdk21/06.%E5%A2%9E%E5%BC%BA%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D.html","title":"06.JDK21增强的模式匹配：更简洁、更强大的条件逻辑","lang":"zh-CN","frontmatter":{"order":6,"title":"06.JDK21增强的模式匹配：更简洁、更强大的条件逻辑","tag":["jdk"],"category":["Java","JDK21"],"date":"2025-02-13T17:58:09.000Z","keywords":["Java","JDK21","模式匹配"],"description":"1. 背景：为什么需要增强的模式匹配？ 在Java中，条件逻辑通常通过if-else或switch语句实现，但这些方式存在以下问题： 冗长：需要显式类型检查和类型转换 易错：手动类型转换可能导致ClassCastException 局限性：switch语句仅支持有限的数据类型 增强的模式匹配（Enhanced Pattern Matching）是Java模式匹配的进一步扩展，旨在简化条件逻辑的编写。它结合了类型检查、类型转换和模式匹配的特性，使开发者能够以声明式的方式处理复杂条件逻辑。","head":[["meta",{"property":"og:url","content":"https://liuyueyi.github.io/tutorial/java/jdk/jdk21/06.%E5%A2%9E%E5%BC%BA%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D.html"}],["meta",{"property":"og:site_name","content":"一灰灰的站点"}],["meta",{"property":"og:title","content":"06.JDK21增强的模式匹配：更简洁、更强大的条件逻辑"}],["meta",{"property":"og:description","content":"1. 背景：为什么需要增强的模式匹配？ 在Java中，条件逻辑通常通过if-else或switch语句实现，但这些方式存在以下问题： 冗长：需要显式类型检查和类型转换 易错：手动类型转换可能导致ClassCastException 局限性：switch语句仅支持有限的数据类型 增强的模式匹配（Enhanced Pattern Matching）是Java模式匹配的进一步扩展，旨在简化条件逻辑的编写。它结合了类型检查、类型转换和模式匹配的特性，使开发者能够以声明式的方式处理复杂条件逻辑。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-13T11:02:29.000Z"}],["meta",{"property":"article:tag","content":"jdk"}],["meta",{"property":"article:published_time","content":"2025-02-13T17:58:09.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-13T11:02:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"06.JDK21增强的模式匹配：更简洁、更强大的条件逻辑\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-02-13T17:58:09.000Z\\",\\"dateModified\\":\\"2025-02-13T11:02:29.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1. 背景：为什么需要增强的模式匹配？","slug":"_1-背景-为什么需要增强的模式匹配","link":"#_1-背景-为什么需要增强的模式匹配","children":[]},{"level":2,"title":"2. 原理：增强的模式匹配如何工作？","slug":"_2-原理-增强的模式匹配如何工作","link":"#_2-原理-增强的模式匹配如何工作","children":[{"level":3,"title":"2.1 传统条件逻辑 vs 增强的模式匹配","slug":"_2-1-传统条件逻辑-vs-增强的模式匹配","link":"#_2-1-传统条件逻辑-vs-增强的模式匹配","children":[]},{"level":3,"title":"2.2 核心机制","slug":"_2-2-核心机制","link":"#_2-2-核心机制","children":[]},{"level":3,"title":"2.3 优势：为什么选择增强的模式匹配？","slug":"_2-3-优势-为什么选择增强的模式匹配","link":"#_2-3-优势-为什么选择增强的模式匹配","children":[]}]},{"level":2,"title":"3. 使用示例","slug":"_3-使用示例","link":"#_3-使用示例","children":[{"level":3,"title":"示例1：模式匹配instanceof","slug":"示例1-模式匹配instanceof","link":"#示例1-模式匹配instanceof","children":[]},{"level":3,"title":"示例2：模式匹配switch","slug":"示例2-模式匹配switch","link":"#示例2-模式匹配switch","children":[]},{"level":3,"title":"示例3：嵌套模式匹配","slug":"示例3-嵌套模式匹配","link":"#示例3-嵌套模式匹配","children":[]},{"level":3,"title":"示例4：结合switch表达式","slug":"示例4-结合switch表达式","link":"#示例4-结合switch表达式","children":[]}]},{"level":2,"title":"3.小结","slug":"_3-小结","link":"#_3-小结","children":[{"level":3,"title":"3.1 注意事项","slug":"_3-1-注意事项","link":"#_3-1-注意事项","children":[]},{"level":3,"title":"3.2 总结","slug":"_3-2-总结","link":"#_3-2-总结","children":[]}]}],"git":{"createdTime":1739444549000,"updatedTime":1739444549000,"contributors":[{"name":"yihui","email":"bangzewu@126.com","commits":1}]},"readingTime":{"minutes":3.63,"words":1090},"filePathRelative":"java/jdk/jdk21/06.增强模式匹配.md","localizedDate":"2025年2月13日","excerpt":"<h2> 1. 背景：为什么需要增强的模式匹配？</h2>\\n<p>在Java中，条件逻辑通常通过<code>if-else</code>或<code>switch</code>语句实现，但这些方式存在以下问题：</p>\\n<ol>\\n<li><strong>冗长</strong>：需要显式类型检查和类型转换</li>\\n<li><strong>易错</strong>：手动类型转换可能导致<code>ClassCastException</code></li>\\n<li><strong>局限性</strong>：<code>switch</code>语句仅支持有限的数据类型</li>\\n</ol>\\n<p><strong>增强的模式匹配</strong>（Enhanced Pattern Matching）是Java模式匹配的进一步扩展，旨在简化条件逻辑的编写。它结合了<strong>类型检查</strong>、<strong>类型转换</strong>和<strong>模式匹配</strong>的特性，使开发者能够以声明式的方式处理复杂条件逻辑。</p>","copyright":{},"autoDesc":true}');export{t as data};
