const t=JSON.parse('{"key":"v-00d55ed3","path":"/codelan/kotlin/02.Kotlin%E5%8D%8F%E7%A8%8B%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93.html","title":"2. Kotlin协程","lang":"zh-CN","frontmatter":{"order":2,"title":"2. Kotlin协程","tag":["Kotlin"],"category":["Kotlin"],"date":"2025-05-21T22:15:07.000Z","keywords":"Kotlin 协程","description":"以下是关于 Kotlin 协程的深度解析，包含核心概念、线程对比、使用方式、工作原理及最佳实践： 一、协程的本质与核心概念 定义：协程是一种轻量级的线程替代方案，由程序控制调度，而非操作系统。它允许代码暂停（suspend）和恢复执行，无需阻塞线程。 核心特性： 轻量级：单个线程可运行数千个协程，内存占用仅 ~1KB（对比线程的 MB 级）。 非阻塞：协程挂起时不阻塞线程，线程可执行其他任务。 结构化并发：通过作用域管理协程生命周期，避免内存泄漏。 挂起函数：使用 suspend 标记的函数，可暂停和恢复执行。","head":[["meta",{"property":"og:url","content":"https://liuyueyi.github.io/tutorial/codelan/kotlin/02.Kotlin%E5%8D%8F%E7%A8%8B%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93.html"}],["meta",{"property":"og:site_name","content":"一灰灰的站点"}],["meta",{"property":"og:title","content":"2. Kotlin协程"}],["meta",{"property":"og:description","content":"以下是关于 Kotlin 协程的深度解析，包含核心概念、线程对比、使用方式、工作原理及最佳实践： 一、协程的本质与核心概念 定义：协程是一种轻量级的线程替代方案，由程序控制调度，而非操作系统。它允许代码暂停（suspend）和恢复执行，无需阻塞线程。 核心特性： 轻量级：单个线程可运行数千个协程，内存占用仅 ~1KB（对比线程的 MB 级）。 非阻塞：协程挂起时不阻塞线程，线程可执行其他任务。 结构化并发：通过作用域管理协程生命周期，避免内存泄漏。 挂起函数：使用 suspend 标记的函数，可暂停和恢复执行。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-21T11:07:19.000Z"}],["meta",{"property":"article:tag","content":"Kotlin"}],["meta",{"property":"article:published_time","content":"2025-05-21T22:15:07.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-21T11:07:19.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"2. Kotlin协程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-05-21T22:15:07.000Z\\",\\"dateModified\\":\\"2025-05-21T11:07:19.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"一、协程的本质与核心概念","slug":"一、协程的本质与核心概念","link":"#一、协程的本质与核心概念","children":[]},{"level":3,"title":"二、协程 vs 线程","slug":"二、协程-vs-线程","link":"#二、协程-vs-线程","children":[]},{"level":3,"title":"三、协程的基本使用姿势","slug":"三、协程的基本使用姿势","link":"#三、协程的基本使用姿势","children":[]},{"level":3,"title":"四、协程的核心组件","slug":"四、协程的核心组件","link":"#四、协程的核心组件","children":[]},{"level":3,"title":"五、协程的工作原理","slug":"五、协程的工作原理","link":"#五、协程的工作原理","children":[]},{"level":3,"title":"六、协程的异常处理","slug":"六、协程的异常处理","link":"#六、协程的异常处理","children":[]},{"level":3,"title":"七、协程的最佳实践","slug":"七、协程的最佳实践","link":"#七、协程的最佳实践","children":[]},{"level":3,"title":"八、协程的性能优化","slug":"八、协程的性能优化","link":"#八、协程的性能优化","children":[]},{"level":3,"title":"九、常见陷阱与注意事项","slug":"九、常见陷阱与注意事项","link":"#九、常见陷阱与注意事项","children":[]},{"level":3,"title":"十、协程的应用场景","slug":"十、协程的应用场景","link":"#十、协程的应用场景","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1747825639000,"updatedTime":1747825639000,"contributors":[{"name":"yihui","email":"bangzewu@126.com","commits":1}]},"readingTime":{"minutes":7.3,"words":2190},"filePathRelative":"codelan/kotlin/02.Kotlin协程知识点总结.md","localizedDate":"2025年5月21日","excerpt":"<p>以下是关于 Kotlin 协程的深度解析，包含核心概念、线程对比、使用方式、工作原理及最佳实践：</p>\\n<h3> <strong>一、协程的本质与核心概念</strong></h3>\\n<p><strong>定义</strong>：协程是一种轻量级的线程替代方案，由程序控制调度，而非操作系统。它允许代码暂停（<code>suspend</code>）和恢复执行，无需阻塞线程。</p>\\n<p><strong>核心特性</strong>：</p>\\n<ul>\\n<li><strong>轻量级</strong>：单个线程可运行数千个协程，内存占用仅 ~1KB（对比线程的 MB 级）。</li>\\n<li><strong>非阻塞</strong>：协程挂起时不阻塞线程，线程可执行其他任务。</li>\\n<li><strong>结构化并发</strong>：通过作用域管理协程生命周期，避免内存泄漏。</li>\\n<li><strong>挂起函数</strong>：使用 <code>suspend</code> 标记的函数，可暂停和恢复执行。</li>\\n</ul>","copyright":{},"autoDesc":true}');export{t as data};
