import{_ as n,V as s,W as a,a1 as t}from"./framework-094145d2.js";const e={},p=t(`<p>如何获取应用中，所有活动的线程？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ThreadGroup</span> group <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 激活的线程数加倍</span>
<span class="token keyword">int</span> estimatedSize <span class="token operator">=</span> group<span class="token punctuation">.</span><span class="token function">activeCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token class-name">Thread</span><span class="token punctuation">[</span><span class="token punctuation">]</span> slackList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">[</span>estimatedSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面是获取当前线程所在的ThreadGroup, 然后将这个分组内的所有线程丢到slackList数组中，实际测试时，数组大小可能是大于实际的线程数的（而且可能性特别大）</p><p>通过ThreadGroup，还可以获取上一层的Group, 然后遍历所有的线程</p>`,4),o=[p];function c(l,u){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","06.获取应用中所有线程.html.vue"]]);export{r as default};
