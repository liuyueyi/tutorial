import{_ as e,V as p,W as o,X as c,Y as n,Z as s,$ as t,a1 as l,F as i}from"./framework-094145d2.js";const u={},r=n("p",null,"在RestTemplate基础用法博文中，post json表单时，会发现存在中文乱码问题，本文主要介绍对应的解决方案",-1),k=l(`<h2 id="i-中文乱码fix" tabindex="-1"><a class="header-anchor" href="#i-中文乱码fix" aria-hidden="true">#</a> I. 中文乱码Fix</h2><h3 id="_1-罪魁祸首" tabindex="-1"><a class="header-anchor" href="#_1-罪魁祸首" aria-hidden="true">#</a> 1. &quot;罪魁祸首&quot;</h3><p><strong>场景复现</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * json表单
 */</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jsonPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">RestTemplate</span> restTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">HttpHeaders</span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    headers<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">JSONObject</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;一灰灰Blog&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> response <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">postForObject</span><span class="token punctuation">(</span><span class="token string">&quot;http://127.0.0.1:8080/body&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;json post res: {}&quot;</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>(json post res: params: {} | DemoRest.ReqBody(name=???Blog, age=20)
headers: {&quot;content-length&quot;:&quot;27&quot;,&quot;host&quot;:&quot;127.0.0.1:8080&quot;,&quot;content-type&quot;:&quot;application/json&quot;,&quot;connection&quot;:&quot;keep-alive&quot;,&quot;accept&quot;:&quot;text/plain, application/json, application/*+json, */*&quot;,&quot;user-agent&quot;:&quot;Java/1.8.0_171&quot;}
cookies: 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>原因定位</strong></p><p>RestTemplate中存在一个<code>HttpMessageConverter</code>列表的属性成员，而<code>HttpMessageConverter</code>主要的职责就是消息转码</p><p>导致我们中文乱码的一个关键点在于<code>StringHttpMessageConverter</code>采用的默认编码格式为<code>StandardCharsets.ISO_8859_1</code></p><h3 id="_2-指定stringhttpmessageconverter编码" tabindex="-1"><a class="header-anchor" href="#_2-指定stringhttpmessageconverter编码" aria-hidden="true">#</a> 2. 指定StringHttpMessageConverter编码</h3><p>既然是因为<code>StringHttpMessageConverter</code>的默认编码不是UTF-8，那么将它手动改成utf-8不就over了么</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 中文乱码问题fix
 */</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">chinese</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">RestTemplate</span> restTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">HttpHeaders</span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    headers<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">JSONObject</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;一灰灰Blog&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 中文乱码，主要是 StringHttpMessageConverter的默认编码为ISO导致的</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getMessageConverters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HttpMessageConverter</span> converter <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>converter <span class="token keyword">instanceof</span> <span class="token class-name">StringHttpMessageConverter</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">StringHttpMessageConverter</span><span class="token punctuation">)</span> converter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDefaultCharset</span><span class="token punctuation">(</span><span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">String</span> response <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">postForObject</span><span class="token punctuation">(</span><span class="token string">&quot;http://127.0.0.1:8080/body&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;json post res: {}&quot;</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试输出如:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>(json post res: params: {} | DemoRest.ReqBody(name=一灰灰Blog, age=20)
headers: {&quot;content-length&quot;:&quot;33&quot;,&quot;host&quot;:&quot;127.0.0.1:8080&quot;,&quot;content-type&quot;:&quot;application/json&quot;,&quot;connection&quot;:&quot;keep-alive&quot;,&quot;accept&quot;:&quot;text/plain, application/json, application/*+json, */*&quot;,&quot;user-agent&quot;:&quot;Java/1.8.0_171&quot;}
cookies: 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-传参pojo" tabindex="-1"><a class="header-anchor" href="#_3-传参pojo" aria-hidden="true">#</a> 3. 传参POJO</h3><p>在看<code>RestTemplate</code>的<code>HttpMessageConvert</code>时，会看到默认提供了一个<code>MappingJackson2HttpMessageConverter</code>，那么我们直接传参POJO，走Jackson序列化，是不是也可以解决中文乱码呢?</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InnerParam</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3693060057697231136L</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">// 直接传一个POJO</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">chinese</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">HttpHeaders</span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    headers<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">RestTemplate</span> restTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">InnerParam</span> innerParam <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InnerParam</span><span class="token punctuation">(</span><span class="token string">&quot;一灰灰Blog&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">InnerParam</span><span class="token punctuation">&gt;</span></span> entity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>innerParam<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">;</span>
    response <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">postForObject</span><span class="token punctuation">(</span><span class="token string">&quot;http://127.0.0.1:8080/body&quot;</span><span class="token punctuation">,</span> entity<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;json post DO res: {}&quot;</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">(</span>json post <span class="token constant">DO</span> res<span class="token operator">:</span> params<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token class-name">DemoRest<span class="token punctuation">.</span>ReqBody</span><span class="token punctuation">(</span>name<span class="token operator">=</span>一灰灰<span class="token class-name">Blog</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>
headers<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string">&quot;content-length&quot;</span><span class="token operator">:</span><span class="token string">&quot;33&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;host&quot;</span><span class="token operator">:</span><span class="token string">&quot;127.0.0.1:8080&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;content-type&quot;</span><span class="token operator">:</span><span class="token string">&quot;application/json&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;connection&quot;</span><span class="token operator">:</span><span class="token string">&quot;keep-alive&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;accept&quot;</span><span class="token operator">:</span><span class="token string">&quot;text/plain, application/json, application/*+json, */*&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;user-agent&quot;</span><span class="token operator">:</span><span class="token string">&quot;Java/1.8.0_171&quot;</span><span class="token punctuation">}</span>
cookies<span class="token operator">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明：上面的InnerParam对象改成HashMap，也是ok的</strong></p><h2 id="ii-其他" tabindex="-1"><a class="header-anchor" href="#ii-其他" aria-hidden="true">#</a> II. 其他</h2><h3 id="_0-项目-系列博文" tabindex="-1"><a class="header-anchor" href="#_0-项目-系列博文" aria-hidden="true">#</a> 0. 项目&amp;系列博文</h3><p><strong>博文</strong></p>`,23),d={href:"http://spring.hhui.top/spring-blog/2020/06/30/200630-SpringBoot%E7%B3%BB%E5%88%97RestTemplate%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AF%B7%E6%B1%82%E5%A4%B4/",target:"_blank",rel:"noopener noreferrer"},m={href:"http://spring.hhui.top/spring-blog/2020/06/30/200630-SpringBoot%E7%B3%BB%E5%88%97RestTemplate%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AF%B7%E6%B1%82%E5%A4%B4/",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,[n("strong",null,"源码")],-1),g={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"},b={href:"https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/221-web-resttemplate",target:"_blank",rel:"noopener noreferrer"};function q(h,y){const a=i("ExternalLinkIcon");return p(),o("div",null,[r,c(" more "),k,n("ul",null,[n("li",null,[n("a",d,[s("【WEB系列】RestTemplate之自定义请求头"),t(a)])]),n("li",null,[n("a",m,[s("【WEB系列】RestTemplate基础用法小结"),t(a)])])]),v,n("ul",null,[n("li",null,[s("工程："),n("a",g,[s("https://github.com/liuyueyi/spring-boot-demo"),t(a)])]),n("li",null,[s("源码: "),n("a",b,[s("https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/221-web-resttemplate"),t(a)])])])])}const f=e(u,[["render",q],["__file","200701-SpringBoot系列RestTemplate之中文乱码问题fix.html.vue"]]);export{f as default};
