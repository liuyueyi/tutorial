import{_ as e,V as o,W as l,X as c,Y as n,Z as a,$ as t,a1 as p,F as i}from"./framework-094145d2.js";const u={},r=n("p",null,"mybatis作为数据的ORM框架，在国内的应用市场还是非常可观的，当初刚开始工作时使用spring + mybatis进行开发，后来也使用过hibernate, jdbctemplate, jooq，mybatisplus等其他的一些框架，",-1),k=n("p",null,"就个人使用感触来讲jooq的使用姿势和写sql差不多，基本上可以会写sql的无需额外的培训，立马可以上手；",-1),d=n("p",null,"hibernate最大的特点就是借助方法名来映射sql语句，非常有特点，但是当查询条件复杂一些的话，对小白而言就没有那么友好了；",-1),m=n("p",null,"而jdbctemplate，这个在小项目，轻量的db操作中，用起来还是很爽的，非常灵活，但是也有一些点需要特别注意，比如queryForObject，查不到数据时抛异常而不是返回null；",-1),v=n("p",null,"至于mybatis以及衍生的mybatis-plus，也就是接下来的主角了，它的特点如何，为什么受到国内大量开发者的追捧，将它作为db操作的第一ORM框架，让我们看完之后再说",-1),g=p(`<h2 id="i-基础环境搭建" tabindex="-1"><a class="header-anchor" href="#i-基础环境搭建" aria-hidden="true">#</a> I. 基础环境搭建</h2><p>接下来的Mybatis的项目演示，主要是在SpringBoot的环境下运行，底层的数据库采用MySql，对应的版本信息如下</p><ul><li>springboot: 2.2.0.RELEASE</li><li>mysql: 5.7.22</li></ul><h3 id="_1-springboot项目配置" tabindex="-1"><a class="header-anchor" href="#_1-springboot项目配置" aria-hidden="true">#</a> 1. SpringBoot项目配置</h3><p>关于SpringBoot的项目创建过程省略，下面是核心的pom依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心的依赖<code>mybatis-spring-boot-starter</code>，至于版本选择，到mvn仓库中，找最新的</p><p>另外一个不可获取的就是db配置信息，<code>appliaction.yml</code></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>3306/story<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-数据库准备" tabindex="-1"><a class="header-anchor" href="#_2-数据库准备" aria-hidden="true">#</a> 2. 数据库准备</h3><p>在本地数据库中，新增了一个表如下</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>money<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;用户名&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>money<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;0&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;钱&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>is_deleted<span class="token punctuation">\`</span></span> <span class="token keyword">tinyint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>create_at<span class="token punctuation">\`</span></span> <span class="token keyword">timestamp</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;创建时间&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>update_at<span class="token punctuation">\`</span></span> <span class="token keyword">timestamp</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;更新时间&#39;</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">551</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来本文涉及到的CURD都是针对这张表来说的</p><h2 id="ii-mybatis-curd" tabindex="-1"><a class="header-anchor" href="#ii-mybatis-curd" aria-hidden="true">#</a> II. MyBatis CURD</h2><p>接下来我们将从0到1，实现基于mybatis进行mysql操作的全流程</p><h3 id="_1-基本对象" tabindex="-1"><a class="header-anchor" href="#_1-基本对象" aria-hidden="true">#</a> 1. 基本对象</h3><p>经常使用Mybatis的小伙伴可能知道，操作一个db，通常会伴随几个不可或缺的东西</p><ul><li>数据库实体类：可以理解为数据库表锁映射到的Java Bean对象</li><li>Mapper接口：interface类，其中定义db的操作方法</li><li>xml文件：与上面接口对应，xml文件中写实际的sql</li></ul><p>mybatis推荐的玩法是借助xml来写sql，但是官方也提供了注解的方式，因此xml文件并不是必须的；后面会介绍注解的操作方式；本文将主要是传统的xml配套使用姿势</p><p>针对上面这张表，第一步定义实体类<code>MoneyPo</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MoneyPo</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Long</span> money<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Integer</span> isDeleted<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Timestamp</span> createAt<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Timestamp</span> updateAt<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>上面的三个注解属于lombok的知识点，有不清楚的小伙伴可以搜索一下</li></ul><p>接下来是Mapper接口, <code>MoneyMapper</code>如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 注意这个@Mapper注解，用于表明这个接口属于Mybatis的Mapper对象</span>
<span class="token annotation punctuation">@Mapper</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MoneyMapper</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后是Mapper接口对应的xml文件<code>MoneyMapper.xml</code></p>`,25),b=n("code",null,"resources",-1),y={href:"https://spring.hhui.top/spring-blog/2021/07/07/210707-SpringBoot%E7%B3%BB%E5%88%97Mybatis%E4%B9%8BMapper%E6%8E%A5%E5%8F%A3%E4%B8%8ESql%E7%BB%91%E5%AE%9A%E5%87%A0%E7%A7%8D%E5%A7%BF%E5%8A%BF/",target:"_blank",rel:"noopener noreferrer"},h=p(`<figure><img src="https://spring.hhui.top/spring-blog/imgs/210815/00.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span> <span class="token name">PUBLIC</span> <span class="token string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="token string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.git.hui.boot.mybatis.mapper.MoneyMapper<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-数据插入" tabindex="-1"><a class="header-anchor" href="#_2-数据插入" aria-hidden="true">#</a> 2. 数据插入</h3><p>前面的三步骤，将我们需要的实体类，接口对象，xml文件都初始化完毕，接下来就是进入我们的CURD环节，实现数据库的增删改查，这里主要使用<code>insert</code>标签</p><p>比如我们现在希望插入一条数据，首先需要做的就是在Mapper接口中定义一个方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token function">savePo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;po&quot;</span><span class="token punctuation">)</span> <span class="token class-name">MoneyPo</span> po<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接着就是在xml文件中对应的sql</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>savePo<span class="token punctuation">&quot;</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.git.hui.boot.mybatis.entity.MoneyPo<span class="token punctuation">&quot;</span></span> <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span>
        <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>po.id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  INSERT INTO \`money\` (\`name\`, \`money\`, \`is_deleted\`)
  VALUES
(#{po.name}, #{po.money}, #{po.isDeleted});
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-1-解析说明" tabindex="-1"><a class="header-anchor" href="#_2-1-解析说明" aria-hidden="true">#</a> 2.1 解析说明</h4><p>注意上面的xml文件</p><ul><li>parameterType: 用于指定传参类型</li><li>useGenerateKeys + keyProperty: 表明需要将插入db的主键id，会写到这个实体类的id字段上</li><li>sql语句传参：形如<code>#{}</code>，大括号里面填写变量名，上面用的是<code>po.name</code>，po为接口定义中的参数名，这个就表示使用po对象的name成员，作为db的name字段</li></ul><p>接下来就是重要知识点：</p><ul><li>传参除了使用 <code>#{}</code>之外，还可以使用 <code>\${}</code>，区别在于前面为参数参数占位，后面为字符串替换，因此存在sql注入的风险</li></ul><p>举例说明</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> money <span class="token keyword">where</span> id<span class="token operator">=</span>\${id}
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> money <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token comment">#{id}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>针对上面这两个sql，当<code>id = 1 or 1=1</code>，对应的两个sql变成</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 第一个sql会返回所有的数据</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> money <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">or</span> <span class="token number">1</span> <span class="token operator">=</span><span class="token number">1</span> 
<span class="token comment">-- 下面这个会抛sql异常</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> money <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token string">&#39;1 or 1=1&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-批量插入" tabindex="-1"><a class="header-anchor" href="#_2-2-批量插入" aria-hidden="true">#</a> 2.2 批量插入</h4><p>除了上面的单挑插入，批量插入也是ok的，和前面的使用姿势差不多</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token function">batchSave</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;list&quot;</span><span class="token punctuation">)</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MoneyPo</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对应的sql如下</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>batchSave<span class="token punctuation">&quot;</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.git.hui.boot.mybatis.entity.MoneyPo<span class="token punctuation">&quot;</span></span>  <span class="token attr-name">useGeneratedKeys</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    insert ignore into \`money\` (\`name\`, \`money\`, \`is_deleted\`)
    values
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>list<span class="token punctuation">&quot;</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item<span class="token punctuation">&quot;</span></span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>index<span class="token punctuation">&quot;</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>,<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        (#{item.name}, #{item.money}, #{item.isDeleted})
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于foreach标签的说明，会放在后面的博文中专门进行介绍，这里简单理解为遍历即可</p><h3 id="_3-数据查询" tabindex="-1"><a class="header-anchor" href="#_3-数据查询" aria-hidden="true">#</a> 3. 数据查询</h3><p>查询可以说是我们日常开发中最常见的情况了，这里先给出简单的查询demo，至于更复杂的查询条件（如联表，子查询，条件查询等）在后面的博文中进行介绍</p><p>如根据主键进行查询，主要借助<code>select</code>标签来实现</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">MoneyPo</span> <span class="token function">findById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对应的sql</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>BaseResultMap<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.git.hui.boot.mybatis.entity.MoneyPo<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>INTEGER<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>VARCHAR<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>money<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>money<span class="token punctuation">&quot;</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>INTEGER<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>is_deleted<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>isDeleted<span class="token punctuation">&quot;</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>TINYINT<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>create_at<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>createAt<span class="token punctuation">&quot;</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>TIMESTAMP<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>update_at<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>updateAt<span class="token punctuation">&quot;</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>TIMESTAMP<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>money_po<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  id, name, money, is_deleted, create_at, update_at
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>findById<span class="token punctuation">&quot;</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>java.lang.Integer<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>BaseResultMap<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    select
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>money_po<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    from money where id=#{id}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重点关注下上面的实现，select语句内容比较简单，但是有几个需要注意的点</p><ul><li>sql标签：内部定义需要查询的db字段，最大的特点是供后面的查询语句，通过<code>include</code>来引入，从而实现代码片段的复用</li><li>resullMap标签：从db字段与MoneyPo实体类对比，我们可以知道部分字段名不是完全一样，如db中使用下划线，java中使用驼峰，那么db字段与java 成员变量如何映射呢？这里使用<code>result</code>标签来指定两者的映射关系，以及类型</li></ul><p>（上面这个相信会始终伴随各位小伙伴的开发生涯）</p><h3 id="_4-数据更新" tabindex="-1"><a class="header-anchor" href="#_4-数据更新" aria-hidden="true">#</a> 4. 数据更新</h3><p>更新主要借助<code>update</code>标签，相比较上面的两个，它的知识点就比较少了</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token function">addMoney</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;money&quot;</span><span class="token punctuation">)</span> <span class="token keyword">int</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对应的sql如下</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>addMoney<span class="token punctuation">&quot;</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>java.util.Map<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    update money set money=money+#{money} where id=#{id}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明</p><ul><li>上面标签中的parameterType，在这里实际上是可以省略的</li><li><code>@Param</code>注解：主要用于指定参数名，在xml中可以使用内部定义的名字来作为参数变量；如果不加上这个注解，在xml中，参数变量则使用<code>param0</code>, <code>param1</code>来替代</li></ul><h3 id="_5-数据删除" tabindex="-1"><a class="header-anchor" href="#_5-数据删除" aria-hidden="true">#</a> 5. 数据删除</h3><p>删除使用<code>delete</code>标签</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token function">delPo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对应的sql如下</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>delPo<span class="token punctuation">&quot;</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>java.lang.Integer<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    delete from money where id = #{id,jdbcType=INTEGER}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-使用演示" tabindex="-1"><a class="header-anchor" href="#_6-使用演示" aria-hidden="true">#</a> 6. 使用演示</h3><p>上面的mapper接口中定义了完整的CURD，接下来就是使用这个Mapper接口来实现交互了，在Spring中，使用姿势就非常简单了，直接当一个Spring Bean对象注入到service类中即可</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Repository</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MoneyRepository</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">MoneyMapper</span> moneyMapper<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBasic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">MoneyPo</span> po <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MoneyPo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        po<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;mybatis user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        po<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">12343</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        po<span class="token punctuation">.</span><span class="token function">setIsDeleted</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        moneyMapper<span class="token punctuation">.</span><span class="token function">savePo</span><span class="token punctuation">(</span>po<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>po<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">MoneyPo</span> out <span class="token operator">=</span> moneyMapper<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>po<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;query:&quot;</span> <span class="token operator">+</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>
        moneyMapper<span class="token punctuation">.</span><span class="token function">addMoney</span><span class="token punctuation">(</span>po<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;after update:&quot;</span> <span class="token operator">+</span> moneyMapper<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>po<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        moneyMapper<span class="token punctuation">.</span><span class="token function">delPo</span><span class="token punctuation">(</span>po<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;after del:&quot;</span> <span class="token operator">+</span> moneyMapper<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>po<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行输出结果如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>MoneyPo<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">552</span>, <span class="token assign-left variable">name</span><span class="token operator">=</span>mybatis user, <span class="token assign-left variable">money</span><span class="token operator">=</span><span class="token number">7719</span>, <span class="token assign-left variable">isDeleted</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">createAt</span><span class="token operator">=</span>null, <span class="token assign-left variable">updateAt</span><span class="token operator">=</span>null<span class="token punctuation">)</span>
query:MoneyPo<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">552</span>, <span class="token assign-left variable">name</span><span class="token operator">=</span>mybatis user, <span class="token assign-left variable">money</span><span class="token operator">=</span><span class="token number">7719</span>, <span class="token assign-left variable">isDeleted</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">createAt</span><span class="token operator">=</span><span class="token number">2021</span>-08-01 <span class="token number">11</span>:47:23.0, <span class="token assign-left variable">updateAt</span><span class="token operator">=</span><span class="token number">2021</span>-08-01 <span class="token number">11</span>:47:23.0<span class="token punctuation">)</span>
after update:MoneyPo<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">552</span>, <span class="token assign-left variable">name</span><span class="token operator">=</span>mybatis user, <span class="token assign-left variable">money</span><span class="token operator">=</span><span class="token number">7819</span>, <span class="token assign-left variable">isDeleted</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">createAt</span><span class="token operator">=</span><span class="token number">2021</span>-08-01 <span class="token number">11</span>:47:23.0, <span class="token assign-left variable">updateAt</span><span class="token operator">=</span><span class="token number">2021</span>-08-01 <span class="token number">11</span>:47:23.0<span class="token punctuation">)</span>
after del:null
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-小结" tabindex="-1"><a class="header-anchor" href="#_7-小结" aria-hidden="true">#</a> 7. 小结</h3><p>相信各位小伙伴看到这里，搭建一个mybatis实现数据库的CURD的项目应该是问题不大了，本文的主要知识点如下</p><ul><li>mybatis项目的三套件：实体类 + mapper接口 + xml文件</li><li>数据库的增删改查</li></ul><p>其中有一些知识点比较重要，本文只是抛出来了，有兴趣的小伙伴可以持续关注后续更新</p><p>下面这些知识点，后面会进行更详细的说明</p><ul><li>如何获取插入数据的主键id</li><li>批量场景下的<code>foreach</code>标签使用</li><li>数据库表结构与java 实体类的映射 <code>resultMap</code>标签</li><li>Mapper接口与xml文件的关联方式</li><li>Mapper接口如何被扫描到，并被Spring bean对象</li><li>Mapper接口与xml的传参方式 <code>@Param</code>注解</li><li>sql参数替换的两种写法 <code>\${}, #{}</code></li><li>传参类型，返回值类型定义</li><li>代码复用片段<code>sql</code>标签</li></ul><h2 id="iii-不能错过的源码和相关知识点" tabindex="-1"><a class="header-anchor" href="#iii-不能错过的源码和相关知识点" aria-hidden="true">#</a> III. 不能错过的源码和相关知识点</h2><h3 id="_0-项目" tabindex="-1"><a class="header-anchor" href="#_0-项目" aria-hidden="true">#</a> 0. 项目</h3>`,57),q={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/103-mybatis-xml",target:"_blank",rel:"noopener noreferrer"},_=n("h3",{id:"_1-微信公众号-一灰灰blog",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-微信公众号-一灰灰blog","aria-hidden":"true"},"#"),a(" 1. 微信公众号: 一灰灰Blog")],-1),M=n("p",null,"尽信书则不如，以上内容，纯属一家之言，因个人能力有限，难免有疏漏和错误之处，如发现bug或者有更好的建议，欢迎批评指正，不吝感激",-1),x=n("p",null,"下面一灰灰的个人博客，记录所有学习和工作中的博文，欢迎大家前去逛逛",-1),w={href:"https://blog.hhui.top",target:"_blank",rel:"noopener noreferrer"},T={href:"http://spring.hhui.top",target:"_blank",rel:"noopener noreferrer"},E=n("figure",null,[n("img",{src:"https://spring.hhui.top/spring-blog/imgs/info/info.png",alt:"一灰灰blog",tabindex:"0",loading:"lazy"}),n("figcaption",null,"一灰灰blog")],-1);function I(j,A){const s=i("ExternalLinkIcon");return o(),l("div",null,[r,k,d,m,v,c(" more "),g,n("p",null,[a("注意xml文件放在资源文件"),b,a("下面，且xml文件的目录结构，与上面的Mapper接口的包路径保持完全一致 (why? 参看博文 "),n("a",y,[a("【DB系列】SpringBoot系列Mybatis之Mapper接口与Sql绑定几种姿势"),t(s)]),a(")")]),h,n("ul",null,[n("li",null,[a("工程："),n("a",q,[a("https://github.com/liuyueyi/spring-boot-demo"),t(s)])]),n("li",null,[a("源码："),n("a",f,[a("https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/103-mybatis-xml"),t(s)])])]),_,M,x,n("ul",null,[n("li",null,[a("一灰灰Blog个人博客 "),n("a",w,[a("https://blog.hhui.top"),t(s)])]),n("li",null,[a("一灰灰Blog-Spring专题博客 "),n("a",T,[a("http://spring.hhui.top"),t(s)])])]),E])}const P=e(u,[["render",I],["__file","12.210815-Mybatis系列教程之CURD基本使用姿势.html.vue"]]);export{P as default};
