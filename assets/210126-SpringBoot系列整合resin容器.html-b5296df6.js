import{_ as p,V as o,W as c,X as i,Y as n,Z as a,$ as t,a1 as e,F as l}from"./framework-094145d2.js";const u="/tutorial/imgs/210126/00.jpg",r="/tutorial/imgs/210126/01.jpg",d="/tutorial/imgs/210126/02.jpg",k="/tutorial/imgs/210126/03.jpg",g="/tutorial/imgs/210126/04.jpg",v="/tutorial/imgs/210126/05.jpg",m="/tutorial/imgs/210126/06.jpg",b="/tutorial/imgs/210126/07.jpg",h={},f=n("p",null,"SpringBoot项目搭建web项目很快，内嵌了tomcat容器，一般来讲直接jar包跑就行了，当然也可以打成war包放到其他的容器中执行。",-1),x=n("p",null,"本文将介绍一下SpringBoot整合resin容器的全过程，包括resin配置，jar包冲突，class not found，中文乱码等各种配置问题解疑",-1),_=n("blockquote",null,[n("p",null,"内心os: tomcat不香嘛，为啥要搞个resin出来，对此我也不知道怎么回答，前人就这么玩的，我还能怎么办，只能选择接受... （这东西真是的有点蛋疼）")],-1),j=e('<h2 id="i-环境准备" tabindex="-1"><a class="header-anchor" href="#i-环境准备" aria-hidden="true">#</a> I. 环境准备</h2><h3 id="_1-resin安装" tabindex="-1"><a class="header-anchor" href="#_1-resin安装" aria-hidden="true">#</a> 1. resin安装</h3><h3 id="_1-1-下载安装" tabindex="-1"><a class="header-anchor" href="#_1-1-下载安装" aria-hidden="true">#</a> 1.1 下载安装</h3>',3),y={href:"http://www.caucho.com/download/",target:"_blank",rel:"noopener noreferrer"},w=e('<p>选择一个zip包下载到本地，移动到目的地，解压即可，注意这个地址，后续会用到</p><p>比如我本机存放地址为 <code>/Users/user/Project/Tool/resin-4.0.61</code></p><h3 id="_1-2-idea配置" tabindex="-1"><a class="header-anchor" href="#_1-2-idea配置" aria-hidden="true">#</a> 1.2 IDEA配置</h3><p>idea首先安装插件</p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>其次进行编译环境配置，选择<code>Edit Configuration</code></p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>接下来在配置页，依次操作</p><ul><li>点击 <code>+</code></li><li>输入 <code>resin</code></li><li>选择 <code>Local</code></li></ul><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后按照下图配置</p><p><strong>注意：URL这里与你的实际项目有关，后面会说明</strong></p><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>还没完，接下来指定发布方式</p><ul><li>点击 <code>Deployment</code></li><li>点击 <code>+</code></li><li>选择 <code>Arifact...</code></li><li>选中你的项目</li></ul><figure><img src="'+g+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>最后确定保存之后，本地项目部署到resin运行基本完成</p><h3 id="_1-3-springboot项目配置" tabindex="-1"><a class="header-anchor" href="#_1-3-springboot项目配置" aria-hidden="true">#</a> 1.3 SpringBoot项目配置</h3><p>本文实例中springboot版本为 <code>2.2.1.RELEASE</code></p><p>因为我们使用resin容器进行部署，所以会很容易想到将tomcat依赖排除掉（当然不仅于此，后文会深入说明）</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 指定项目打成war包 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>


<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
  <span class="token comment">&lt;!-- 核心的web依赖 --&gt;</span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 指定war包名，注意前面配置resin的url中的一级路径，就是它（和tomcat的方式差不多） --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">&gt;</span></span>230-web-resin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-项目整合" tabindex="-1"><a class="header-anchor" href="#ii-项目整合" aria-hidden="true">#</a> II. 项目整合</h2><h3 id="_1-启动类" tabindex="-1"><a class="header-anchor" href="#_1-启动类" aria-hidden="true">#</a> 1. 启动类</h3><p>启动类，继承自<code>SpringBootServletInitialzer</code>，因为我们的项目以war包形式在web容器中运行（这一点需要注意，和之前的Spring系列中的启动类有一点区别)</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token keyword">extends</span> <span class="token class-name">SpringBootServletInitializer</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">SpringApplicationBuilder</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">SpringApplicationBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">sources</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-rest接口" tabindex="-1"><a class="header-anchor" href="#_2-rest接口" aria-hidden="true">#</a> 2. rest接口</h3><p>写两个简单的rest接口，一个返回html文件，一个返回String</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/index&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;index.html&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;hello &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在资源路径 <code>resources/static/</code> 下添加html文件<code>index.html</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>utf-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span> 欢迎欢迎 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bold</span><span class="token punctuation">&gt;</span></span>hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bold</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-启动测试" tabindex="-1"><a class="header-anchor" href="#_3-启动测试" aria-hidden="true">#</a> 3. 启动测试</h3><p>请注意，这时的启动，不是在main方法上邮件运行，而是借助前面配置的resin，来运行</p><h4 id="_3-1-servletexception" tabindex="-1"><a class="header-anchor" href="#_3-1-servletexception" aria-hidden="true">#</a> 3.1 ServletException</h4><p>启动的第一个异常，<code>Error:(13, 8) java: 无法访问javax.servlet.ServletException 找不到javax.servlet.ServletException的类文件</code></p><figure><img src="`+v+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>将tomcat排除掉之后，没有Servlet依赖，在编译打包层就会失败，所以需要添加依赖，这里指定了作用域<code>&lt;scope&gt;provided&lt;/scope&gt;</code></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-2-java-lang-nosuchmethoderror-javax-validation-configuration-getdefaultparameternameprovider" tabindex="-1"><a class="header-anchor" href="#_3-2-java-lang-nosuchmethoderror-javax-validation-configuration-getdefaultparameternameprovider" aria-hidden="true">#</a> 3.2 java.lang.NoSuchMethodError: javax.validation.Configuration.getDefaultParameterNameProvider</h4><p>jar包冲突，如下图，提示有两个<code>validation-api</code>, 在项目中我们自己依赖的是<code>jakarta.validation-api-2.0.1</code>，但是实际采用的是resin的<code>validation-api-1.0.0.GA.jar</code></p><figure><img src="`+m+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>出现这个问题，主要就是因为resin自己也提供了一个<code>validation-api</code>包，但是又不满足我们的需求，所以最好的方法就是用我们需要的版本覆盖掉它的</p><p><strong>替换<code>validation-api</code></strong></p><ul><li>将项目依赖的api jar包，拷贝到resin目录下的lib下</li><li>本项目中，将resin中<code>validation-api-1.0.0.GA.jar</code>干掉，复制进去<code>validation-api-2.0.1.Final.jar</code></li></ul><p><strong>替换webapp-jars</strong></p><p>除了api之外，还有两个也需要配套修改，在<code>resin/webapp-jars</code>中，有两个jar包，一个是<code>hibernate-validator</code>, 一个是<code>jboss-logging</code></p><ul><li>本项目中，覆盖之后两个版本分别是</li><li>hibernate-validator-6.0.18.Final.jar</li><li>jboss-logging-3.4.1.Final.jar</li></ul><p><strong>说明</strong></p><p>上面说要将我们用到的jar替换resin的，那么如何找到我们希望的jar包呢？</p><p>进入 <code>resin/webapps/{项目名}/WEB-INF/lib</code>，里面有你的项目所有依赖的jar包，就可以找到你所需要的jar包了</p><p>其次如果只替换<code>validation-api</code>而不替换<code>webapp-jars</code>下的jar包，可能导致明明版本也是对的，但是就是起不来的情况，这种原因多半是api与实现<code>hibernate-validator</code>没有对上导致的，所以要替换就替换完整</p><p><strong>pom修改</strong></p><p>上面改外之后，还需要记得修改一下pom配置文件</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.hibernate<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hibernate-validator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-3-java-lang-noclassdeffounderror-javax-el-elmanager" tabindex="-1"><a class="header-anchor" href="#_3-3-java-lang-noclassdeffounderror-javax-el-elmanager" aria-hidden="true">#</a> 3.3 java.lang.NoClassDefFoundError: javax/el/ELManager</h4><p>再次运行，又提示了一个<code>NoClassDefFoundError</code>，手动加上</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.glassfish<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jakarta.el<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-4-中文乱码及小结" tabindex="-1"><a class="header-anchor" href="#_3-4-中文乱码及小结" aria-hidden="true">#</a> 3.4 中文乱码及小结</h4><p>启动过程中，可能会遇到各种jar包冲突，缺失，一个简单的原则就是什么冲突干掉什么，缺什么加什么，一直到启动成功为止</p><p>正常启动之后，会自动弹出一个网页</p><figure><img src="`+b+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>出现上面的中文乱码时，可以在配置文件中，强制指定utf-8, 如 <code>application.yml</code></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">http</span><span class="token punctuation">:</span>
    <span class="token key atrule">encoding</span><span class="token punctuation">:</span>
      <span class="token key atrule">force</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      <span class="token key atrule">charset</span><span class="token punctuation">:</span> utf<span class="token punctuation">-</span><span class="token number">8</span>
      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本文中对应的项目实例可以在下面获取</p><h2 id="ii-其他" tabindex="-1"><a class="header-anchor" href="#ii-其他" aria-hidden="true">#</a> II. 其他</h2><h3 id="_0-项目" tabindex="-1"><a class="header-anchor" href="#_0-项目" aria-hidden="true">#</a> 0. 项目</h3>`,65),I={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"},S={href:"https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/230-web-resin",target:"_blank",rel:"noopener noreferrer"};function E(q,B){const s=l("ExternalLinkIcon");return o(),c("div",null,[f,x,_,i(" more "),j,n("p",null,[a("首先需要下载resin包，进入官网: "),n("a",y,[a("http://www.caucho.com/download/"),t(s)])]),w,n("ul",null,[n("li",null,[a("工程："),n("a",I,[a("https://github.com/liuyueyi/spring-boot-demo"),t(s)])]),n("li",null,[a("源码："),n("a",S,[a("https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/230-web-resin"),t(s)])])])])}const N=p(h,[["render",E],["__file","210126-SpringBoot系列整合resin容器.html.vue"]]);export{N as default};
