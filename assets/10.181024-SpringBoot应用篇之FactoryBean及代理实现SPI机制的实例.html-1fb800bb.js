import{_ as p,V as o,W as c,X as i,Y as n,Z as s,$ as t,a1 as e,F as l}from"./framework-094145d2.js";const u="/tutorial/imgs/181024/00.jpg",r="/tutorial/imgs/181024/01.jpg",d="/tutorial/imgs/181024/02.gif",k={},v=n("p",null,"FactoryBean在Spring中算是一个比较有意思的存在了，虽然在日常的业务开发中，基本上不怎么会用到，但在某些场景下，如果用得好，却可以实现很多有意思的东西",-1),m=n("p",null,"本篇博文主要介绍如何通过FactoryBean来实现一个类SPI机制的微型应用框架",-1),b=n("p",null,"文章内涉及到的知识点",-1),h=n("ul",null,[n("li",null,"SPI机制"),n("li",null,"FactoryBean"),n("li",null,"JDK动态代理")],-1),g=n("h2",{id:"i-相关知识点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#i-相关知识点","aria-hidden":"true"},"#"),s(" I. 相关知识点")],-1),B=n("p",null,"在看下面的内容之前，得知道一下什么是SPI，以及SPI的用处和JDK实现SPI的方式，对于这一块有兴趣了解的童鞋，可以看一下个人之前写的相关文章",-1),E={href:"https://blog.hhui.top/hexblog/categories/Quick%E7%B3%BB%E5%88%97/QuickSpi/",target:"_blank",rel:"noopener noreferrer"},y=e('<h3 id="_1-demo背景说明" tabindex="-1"><a class="header-anchor" href="#_1-demo背景说明" aria-hidden="true">#</a> 1. demo背景说明</h3><p>在开始之前，有必要了解一下，我们准备做的这个东西，到底适用于什么样的场景。</p><p>在电商中，有一个比较恰当的例子，商品详情页的展示。拿淘宝系的详情页作为背景来说明（没有在阿里工作过，下面的东西纯粹是为了说明应用场景而展开）</p><figure><img src="'+u+'" alt="商品详情页" tabindex="0" loading="lazy"><figcaption>商品详情页</figcaption></figure><p>假设有这么三个详情页，我们设定一个大前提，底层的数据层提供方都是一套的，商品详情展示的服务完全可以做到复用，即三个性情页中，绝大多数的东西都一样，只是不同的详情页车重点不同而已。</p><p>如上图中，我们假定有细微区别的几个地方</p><table><thead><tr><th>位置</th><th>淘宝详情</th><th>天猫详情</th><th>咸鱼详情</th><th>说明</th></tr></thead><tbody><tr><td>banner</td><td>显示淘宝的背景墙</td><td>显示天猫的广告位</td><td>咸鱼的坑位</td><td>三者数据结构完全一致，仅图片url不同</td></tr><tr><td>推荐</td><td>推荐同类商品</td><td>推荐店家其他商品</td><td>推荐同类二手产品</td><td>数据结构相同，内容不同</td></tr><tr><td>评价</td><td>商品评价</td><td>商品评价</td><td>没有评价，改为留言</td><td></td></tr><tr><td>促销</td><td>优惠券</td><td>天猫积分券</td><td>没有券</td><td>-</td></tr></tbody></table><p>根据上面的简单对比，其实只想表达一个意思，业务基本上一致，仅仅只有很少的一些东西不同，需要定制化，这个时候可以考虑用SPI来支持定制化的服务</p><h3 id="_2-spi简述" tabindex="-1"><a class="header-anchor" href="#_2-spi简述" aria-hidden="true">#</a> 2. SPI简述</h3><h4 id="a-基本定义" tabindex="-1"><a class="header-anchor" href="#a-基本定义" aria-hidden="true">#</a> a. 基本定义</h4>',10),_={href:"https://blog.hhui.top/hexblog/2017/05/26/SPI%E6%A1%86%E6%9E%B6%E5%AE%9E%E7%8E%B0%E4%B9%8B%E6%97%85%E4%B8%80%EF%BC%9A%E8%83%8C%E6%99%AF%E4%BB%8B%E7%BB%8D/",target:"_blank",rel:"noopener noreferrer"},f=e('<p>SPI的全名为Service Provider Interface，简单的总结下java spi机制的思想。我们系统里抽象的各个模块，往往有很多不同的实现方案，比如日志模块的方案，xml解析模块、jdbc模块的方案等。面向的对象的设计里，我们一般推荐模块之间基于接口编程，模块之间不对实现类进行硬编码。一旦代码里涉及具体的实现类，就违反了可拔插的原则，如果需要替换一种实现，就需要修改代码。为了实现在模块装配的时候能不在程序里动态指明，这就需要一种服务发现机制。 java spi就是提供这样的一个机制：为某个接口寻找服务实现的机制</p><p>上面是相对正视一点的介绍，简单一点，符合本文设计目标的介绍如下</p><ul><li>接口方式引用</li><li>具体执行时，根据某些条件，选中实际的子类执行</li></ul><p>通过上面的描述，可以发现一个最大的优点就是：</p><ul><li>通过扩展接口的实现，就可以实现服务扩展；而不需要改原来的业务代码</li></ul><h4 id="b-demo辅助说明" tabindex="-1"><a class="header-anchor" href="#b-demo辅助说明" aria-hidden="true">#</a> b. demo辅助说明</h4><p>一个简单的应用场景如下</p><figure><img src="'+r+'" alt="报警系统demo" tabindex="0" loading="lazy"><figcaption>报警系统demo</figcaption></figure><p>这个报警系统中，对于使用者而言，通过 <code>IAlarm#sendMsg(level, msg)</code> 来执行报警发送的方式，然而这一行的具体执行者是（忽略，日志报警，邮件报警还是短信报警）不确定的，通过SPI的实现方式将是如下</p><ul><li>如果level为1，则忽略报警内容</li><li>如果level为2，则采用日志报警的方式来报警</li><li>...</li></ul><p>如果我们想新添加一种报警方式呢？那也很简单，新建一个报警的实现</p><ul><li>level == 5, 则采用微信报警</li></ul><p>然后对于使用者而言，其他的地方都不用改，只是在传入的level参数换成5就可以了</p><h3 id="_3-代理模式简述" tabindex="-1"><a class="header-anchor" href="#_3-代理模式简述" aria-hidden="true">#</a> 3. 代理模式简述</h3><p>代理模式，在Spring中可以说是非常非常非常常见的一种设计模式了，大名鼎鼎的AOP就是这个实现的一个经典case，常见的代理有两种实现方式</p><ul><li>JDK方式</li><li>CGLIB方式</li></ul><p>简单说一下，代理模式的定义和说明如下</p>',17),A={href:"https://blog.csdn.net/liuyueyi25/article/details/77868204",target:"_blank",rel:"noopener noreferrer"},S=e(`<p>其实在现实生活中代理模式还是非常多得，这里引入一个代理商的概念来加以描述，本来一个水果园直接卖水果就好了，现在中间来了一个水果超市，水果园的代销商，对水果进行分类，包装，然后再卖给用户，这其实也算是一种代理</p><p>百科定义：为其他对象提供一种代理以控制对这个对象的访问。在某些情况下，一个对象不适合或者不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用。</p><h2 id="ii-方案设计与实现" tabindex="-1"><a class="header-anchor" href="#ii-方案设计与实现" aria-hidden="true">#</a> II. 方案设计与实现</h2><p>了解完上面的前提之后，我们可以考虑下如何实现一个Spring容器中的SPI工具包</p><h3 id="_1-目标拆分" tabindex="-1"><a class="header-anchor" href="#_1-目标拆分" aria-hidden="true">#</a> 1. 目标拆分</h3><p>首先确定大的生态环境为Spring，我们针对Bean做SPI功能的扩展，即定义一个SPI的接口，然后可以有多个实现类，并且全部都声明为Bean；</p><p>SPI的一个重要特点就是可以选中不同的实现来执行具体的代码，那么放在这里，就会有两种方案</p><ul><li>方案一：依赖注入时，直接根据选择条件，注入一个满足的实例，后续所有的SPI调用，都将走这个具体的实例调用执行</li><li>方案二：依赖注入时，不注入具体的实例，反而注册一个代理类，在代理类中，根据调用的参数来选择具体匹配的实例来执行，因此后续的调用具体选中的实例将与传入的参数有关</li></ul><p><strong>方案对比</strong></p><table><thead><tr><th>方案一</th><th>方案二</th></tr></thead><tbody><tr><td>接近JDK的SPI使用方式</td><td>代理方式选中匹配的实例</td></tr><tr><td>优点：简单，使用以及后续维护简单</td><td>灵活, 支持更富想象力的扩展</td></tr><tr><td>缺点：一对一，复用性不够，不能支持前面的case</td><td>实现和调用方式跟繁琐一点，需要传入用于选择具体实例条件参数 <br> 每次选择子类都需要额外计算</td></tr></tbody></table><p>对比上面的两个方案之后，选中第二个（当然主要原因是为了演示FactoryBean和代理实现SPI机制，如果选择方案一就没有这两个什么事情了）</p><p>选中方案之后，目标拆分就比较清晰了</p><ul><li>定义SPI接口，以及SPI的使用姿势（前提）</li><li>一个生成代理类的FactoryBean （核心）</li></ul><h3 id="_2-方案设计" tabindex="-1"><a class="header-anchor" href="#_2-方案设计" aria-hidden="true">#</a> 2. 方案设计</h3><p>针对前面拆分的目标，进行方案设计，第一步就是接口相关的定义了</p><h4 id="a-接口定义" tabindex="-1"><a class="header-anchor" href="#a-接口定义" aria-hidden="true">#</a> a. 接口定义</h4><p>设计的SPI微型框架的核心为：<strong>在执行的时候，根据传入的参数来决定具体的实例来执行</strong>，因此我们的接口设计中，至少有一个根据传入的参数来判断是否选中这个实例的接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ISpi</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">boolean</span> <span class="token function">verify</span><span class="token punctuation">(</span><span class="token class-name">T</span> condition<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看到上面的实现之后，就会有一个疑问，如果有多个子类都满足这个条件怎么办？因此可以加一个排序的接口，返回优先级最高的匹配者</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ISpi</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">boolean</span> <span class="token function">verify</span><span class="token punctuation">(</span><span class="token class-name">T</span> condition<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 排序，数字越小，优先级越高
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">default</span> <span class="token keyword">int</span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接口定义之后，使用者应该怎么用呢？</p><h4 id="b-使用约束" tabindex="-1"><a class="header-anchor" href="#b-使用约束" aria-hidden="true">#</a> b. 使用约束</h4><p><strong>spi实现的约束</strong></p><p>基于JDK的代理模式，一个最大的前提就是，只能根据接口来生成代理类，因此在使用SPI的时候，我们希望使用者先定义一个接口来继承<code>ISpi</code>,然后具体的SPI实现这个接口即可</p><p>其次就是在Spring的生态下，要求所有的SPI实现都是Bean，需要自动扫描或者配置注解方式声明，否者代理类就不太好获取所有的SPI实现了</p><p><strong>spi使用的约束</strong></p><p>在使用SPI接口时，通过接口的方式来引入，因为我们实际注入的会是代理类，因此不要写具体的实现类</p><p>单独看上面的说明，可能不太好理解，建议结合下面的实例演示对比</p><h4 id="c-代理类生成" tabindex="-1"><a class="header-anchor" href="#c-代理类生成" aria-hidden="true">#</a> c. 代理类生成</h4><p>这个属于最核心的地方了（虽说重要性为No1，但实现其实非常非常简单）</p><p>代理类主要目的就是在具体调用执行时，根据传入的参数来选中具体的执行者，执行后并返回对应的结果</p><ul><li>获取所有的SPI实现类（<code>org.springframework.beans.factory.ListableBeanFactory#getBeansOfType(java.lang.Class&lt;T&gt;)</code>）</li><li>通过jdk生成代理类，代理类中，遍历所有的SPI实现，根据传入的第一个参数作为条件进行匹配，找出首个命中的SPI实现类，执行</li></ul><p>将上面的步骤具体实现，也就比较简单了</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpiFactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">ISpi</span><span class="token punctuation">&gt;</span></span> spiClz<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ISpi</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SpiFactoryBean</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">ISpi</span><span class="token punctuation">&gt;</span></span> clz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>spiClz <span class="token operator">=</span> clz<span class="token punctuation">;</span>

        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">ISpi</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBeansOfType</span><span class="token punctuation">(</span>spiClz<span class="token punctuation">)</span><span class="token punctuation">;</span>
        list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparingInt</span><span class="token punctuation">(</span><span class="token class-name">ISpi</span><span class="token operator">::</span><span class="token function">order</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// jdk动态代理类生成</span>
        <span class="token class-name">InvocationHandler</span> invocationHandler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ISpi</span> spi <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>spi<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// 第一个参数作为条件选择</span>
                        <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>spi<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSpiChooseException</span><span class="token punctuation">(</span><span class="token string">&quot;no spi server can execute! spiList: &quot;</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>spiClz<span class="token punctuation">}</span><span class="token punctuation">,</span>
                invocationHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> spiClz<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-实例演示" tabindex="-1"><a class="header-anchor" href="#_3-实例演示" aria-hidden="true">#</a> 3. 实例演示</h3><p>话说方案设计之后，应该就是实现了，然而因为实现过于简单，设计的过程中，也就顺手写了，就是上面的一个接口定义 <code>ISpi</code> 和一个用来生成动态代理类的<code>SpiFactoryBean</code></p><p>接下来写一个简单的实例用于功能演示，定义一个<code>IPrint</code>用于文本输出，并给两个实现，一个控制台输出，一个日志输出</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPrint</span> <span class="token keyword">extends</span> <span class="token class-name">ISpi</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> level<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">print</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> msg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体的实现类如下，外部使用者通过<code>execute</code>方法实现调用，其中<code>level&lt;=0</code>时选择控制台输出；否则选则日志文件方式输出</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsolePrint</span> <span class="token keyword">implements</span> <span class="token class-name">IPrint</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;console print: &quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">verify</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> condition <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogPrint</span> <span class="token keyword">implements</span> <span class="token class-name">IPrint</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;log print: {}&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">verify</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> condition <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前面的步骤和一般的写法没有什么区别，使用的姿势又是怎样的呢？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">Application</span><span class="token punctuation">(</span><span class="token class-name">IPrint</span> printProxy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        printProxy<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&quot; log print &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        printProxy<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot; console print &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看上面的<code>Application</code>的构造方法，要求传入一个<code>IPrint</code>参数，Spring会从容器中找到一个bean作为参数传入，而这个bean就是我们生成的代理类，这样才可以根据不同的参数来选中具体的实现类</p><p>所以问题就是如何声明这个代理类了，配置如下，通过FactoryBean的方式来声明Bean，并添加上<code>@Primary</code>注解，这样就可以确保注入的是我们声明的代理类了</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrintAutoConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">SpiFactoryBean</span> <span class="token function">printSpiPoxy</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SpiFactoryBean</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">,</span> <span class="token class-name">IPrint</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@Primary</span>
    <span class="token keyword">public</span> <span class="token class-name">IPrint</span> <span class="token function">printProxy</span><span class="token punctuation">(</span><span class="token class-name">SpiFactoryBean</span> spiFactoryBean<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">IPrint</span><span class="token punctuation">)</span> spiFactoryBean<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的使用逻辑，涉及到的知识点在前面的博文中分别有过介绍，更多详情可以参考</p>`,46),w={href:"http://spring.hhui.top/spring-blog/2018/10/09/181009-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/",target:"_blank",rel:"noopener noreferrer"},I=n("code",null,"Configuration",-1),x={href:"http://spring.hhui.top/spring-blog/2018/10/12/181012-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD/",target:"_blank",rel:"noopener noreferrer"},P={href:"http://spring.hhui.top/spring-blog/2018/10/22/181022-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%A4%9A%E5%AE%9E%E4%BE%8B%E9%80%89%E6%8B%A9/",target:"_blank",rel:"noopener noreferrer"},F=e('<p>接下来就是实际执行看下结果如何了</p><figure><img src="'+d+'" alt="演示demo" tabindex="0" loading="lazy"><figcaption>演示demo</figcaption></figure><h2 id="iii-其他" tabindex="-1"><a class="header-anchor" href="#iii-其他" aria-hidden="true">#</a> III. 其他</h2><h3 id="_0-项目相关" tabindex="-1"><a class="header-anchor" href="#_0-项目相关" aria-hidden="true">#</a> 0. 项目相关</h3><h4 id="a-更多博文" tabindex="-1"><a class="header-anchor" href="#a-更多博文" aria-hidden="true">#</a> a. 更多博文</h4><p><strong>基础篇</strong></p>',6),C={href:"http://spring.hhui.top/spring-blog/2018/10/09/181009-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/",target:"_blank",rel:"noopener noreferrer"},j={href:"http://spring.hhui.top/spring-blog/2018/10/12/181012-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD/",target:"_blank",rel:"noopener noreferrer"},O={href:"http://spring.hhui.top/spring-blog/2018/10/13/181013-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C/",target:"_blank",rel:"noopener noreferrer"},D={href:"http://spring.hhui.top/spring-blog/2018/10/18/181018-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-Condition%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/",target:"_blank",rel:"noopener noreferrer"},T={href:"http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B-ConditionalOnBean%E4%B8%8E@ConditionalOnClass/",target:"_blank",rel:"noopener noreferrer"},q={href:"http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-ConditionalOnProperty/",target:"_blank",rel:"noopener noreferrer"},z={href:"http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-ConditionalOnExpression/",target:"_blank",rel:"noopener noreferrer"},L={href:"http://spring.hhui.top/spring-blog/2018/10/22/181022-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%A4%9A%E5%AE%9E%E4%BE%8B%E9%80%89%E6%8B%A9/",target:"_blank",rel:"noopener noreferrer"},N=n("p",null,[n("strong",null,"应用篇")],-1),V={href:"http://spring.hhui.top/spring-blog/2018/10/17/181017-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87Bean%E4%B9%8B%E6%B3%A8%E9%94%80%E4%B8%8E%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1mock/",target:"_blank",rel:"noopener noreferrer"},J={href:"http://spring.hhui.top/spring-blog/2018/10/24/181024-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8BFactoryBean%E5%8F%8A%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0SPI%E6%9C%BA%E5%88%B6%E7%9A%84%E5%AE%9E%E4%BE%8B/",target:"_blank",rel:"noopener noreferrer"},K=n("h4",{id:"b-项目源码",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#b-项目源码","aria-hidden":"true"},"#"),s(" b. 项目源码")],-1),H={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"},M={href:"https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-case/000-spi-factorybean",target:"_blank",rel:"noopener noreferrer"};function Q(W,G){const a=l("ExternalLinkIcon");return o(),c("div",null,[v,m,i(" more "),b,h,g,B,n("ul",null,[n("li",null,[n("a",E,[s("SPI相关技术博文汇总---By一灰灰Blog"),t(a)])])]),y,n("blockquote",null,[n("p",null,[n("a",_,[s("https://blog.hhui.top/hexblog/2017/05/26/SPI框架实现之旅一：背景介绍/"),t(a)])])]),f,n("blockquote",null,[n("p",null,[n("a",A,[s("https://blog.csdn.net/liuyueyi25/article/details/77868204"),t(a)])])]),S,n("ul",null,[n("li",null,[s("FactoryBean的使用姿势，参考："),n("a",w,[s("181009-SpringBoot基础篇Bean之基本定义与使用"),t(a)])]),n("li",null,[s("配置类"),I,s("声明的方式，参考："),n("a",x,[s("181012-SpringBoot基础篇Bean之自动加载"),t(a)])]),n("li",null,[s("@Primary注解的使用，参考: "),n("a",P,[s("181022-SpringBoot基础篇Bean之多实例选择"),t(a)])])]),F,n("ul",null,[n("li",null,[n("a",C,[s("181009-SpringBoot基础篇Bean之基本定义与使用"),t(a)])]),n("li",null,[n("a",j,[s("181012-SpringBoot基础篇Bean之自动加载"),t(a)])]),n("li",null,[n("a",O,[s("181013-SpringBoot基础篇Bean之动态注册"),t(a)])]),n("li",null,[n("a",D,[s("181018-SpringBoot基础篇Bean之条件注入@Condition使用姿势"),t(a)])]),n("li",null,[n("a",T,[s("181019-SpringBoot基础篇Bean之@ConditionalOnBean与@ConditionalOnClass"),t(a)])]),n("li",null,[n("a",q,[s("181019-SpringBoot基础篇Bean之条件注入@ConditionalOnProperty"),t(a)])]),n("li",null,[n("a",z,[s("181019-SpringBoot基础篇Bean之条件注入@ConditionalOnExpression"),t(a)])]),n("li",null,[n("a",L,[s("181022-SpringBoot基础篇Bean之多实例选择"),t(a)])])]),N,n("ul",null,[n("li",null,[n("a",V,[s("181017-SpringBoot应用篇Bean之注销与动态注册实现服务mock"),t(a)])]),n("li",null,[n("a",J,[s("181024-SpringBoot应用篇之FactoryBean及代理实现SPI机制的实例"),t(a)])])]),K,n("ul",null,[n("li",null,[s("工程："),n("a",H,[s("spring-boot-demo"),t(a)])]),n("li",null,[s("module: "),n("a",M,[s("000-spi-factorybean"),t(a)])])])])}const Y=p(k,[["render",Q],["__file","10.181024-SpringBoot应用篇之FactoryBean及代理实现SPI机制的实例.html.vue"]]);export{Y as default};
