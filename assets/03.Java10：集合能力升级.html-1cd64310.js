import{_ as n,V as s,W as a,a0 as t}from"./framework-23f3cf9b.js";const p={},e=t(`<p>嘿，Java开发者们！是不是觉得每次Java版本更新都像是拆盲盒，不知道里面藏着什么惊喜？今天咱们就来聊聊Java 10，这个在2018年3月21日发布的版本，虽然新特性不多，但每一个都超有用，尤其是集合能力的升级，简直是开发效率的加速器！</p><h2 id="不可变集合创建的进化" tabindex="-1"><a class="header-anchor" href="#不可变集合创建的进化" aria-hidden="true">#</a> 不可变集合创建的进化</h2><h3 id="java-9的基础-of-方法" tabindex="-1"><a class="header-anchor" href="#java-9的基础-of-方法" aria-hidden="true">#</a> Java 9的基础：<code>of()</code>方法</h3><p>想象一下，你手头有一个水果列表，想把它变成一个不可变的集合，防止别人乱改。在Java 9之前，这事儿可麻烦了，得用<code>Collections.unmodifiableXXX</code>方法。代码长这样：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> mutableList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mutableList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mutableList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;banana&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> immutableList <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableList</span><span class="token punctuation">(</span>mutableList<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>是不是感觉有点绕？Java 9终于“开窍”了，直接引入了<code>of()</code>方法，几行代码就能搞定：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> immutableList <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cherry&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>简单吧！而且<code>Set</code>和<code>Map</code>也有类似的<code>of()</code>方法，创建不可变集合就像点外卖一样方便。</p><p><strong>小贴士</strong>：不可变集合一旦创建，就不能修改，这在多线程环境下超有用，不用担心数据被乱改。</p><h3 id="java-10的拓展-copyof-方法" tabindex="-1"><a class="header-anchor" href="#java-10的拓展-copyof-方法" aria-hidden="true">#</a> Java 10的拓展：<code>copyOf()</code>方法</h3><p>Java 10又给我们加了个“新玩具”——<code>copyOf()</code>方法。假设你已经有一个集合，可能是可变的，也可能是不可变的，现在想把它变成不可变的副本，<code>copyOf()</code>就派上用场了。</p><p>比如，你有一个可变的水果列表：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> mutableList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mutableList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mutableList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;banana&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> immutableCopy <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>mutableList<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>immutableCopy</code>现在就是不可变的了，别人想改？没门！而且，如果原集合本身就是不可变的，<code>copyOf()</code>会直接返回原集合，效率超高。</p><p><strong>小贴士</strong>：<code>copyOf()</code>方法不仅能帮你快速创建不可变副本，还能避免重复创建不必要的集合，节省内存。</p><h2 id="流操作与不可变集合的融合" tabindex="-1"><a class="header-anchor" href="#流操作与不可变集合的融合" aria-hidden="true">#</a> 流操作与不可变集合的融合</h2><p>Java 10还把流操作和不可变集合“拉郎配”了。比如，你有一个字符串列表，想过滤出长度大于3的字符串，然后收集为不可变集合。以前可能得写一堆代码，现在一行搞定：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cat&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cherry&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;dog&quot;</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>str <span class="token operator">-&gt;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toUnmodifiableList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>是不是感觉代码瞬间清爽多了？要是想收集为不可变的<code>Set</code>或<code>Map</code>，也有对应的<code>Collectors.toUnmodifiableSet()</code>和<code>Collectors.toUnmodifiableMap()</code>方法。</p><p><strong>小贴士</strong>：流操作和不可变集合的结合，让代码不仅简洁，还更安全。再也不用担心数据被误改了！</p><h2 id="集合能力增强的优势" tabindex="-1"><a class="header-anchor" href="#集合能力增强的优势" aria-hidden="true">#</a> 集合能力增强的优势</h2><h3 id="安全性提升" tabindex="-1"><a class="header-anchor" href="#安全性提升" aria-hidden="true">#</a> 安全性提升</h3><p>为啥不可变集合这么重要？想象一下，你在一个电商系统里，有个商品类别集合，里面装着电子产品、服装、食品等。如果这个集合是可变的，万一某个模块不小心删了某个类别，整个页面可能就乱了。而不可变集合就像给数据加了个“保护罩”，别人想改都改不了。</p><p>在多线程环境下，不可变集合更是“救星”。以前，多个线程读取共享数据时，得小心翼翼地同步，不然就容易出错。现在，有了不可变集合，线程们可以放心大胆地读，不用担心数据被改，简直是多线程开发的“福音”。</p><h3 id="代码简洁性" tabindex="-1"><a class="header-anchor" href="#代码简洁性" aria-hidden="true">#</a> 代码简洁性</h3><p>Java 10的集合增强，让代码简洁到飞起。以前创建不可变集合，得先创建可变集合，再包装，代码又长又复杂。现在，<code>List.of()</code>和<code>List.copyOf()</code>几行代码就能搞定，简直不要太爽！</p><p><strong>小贴士</strong>：简洁的代码不仅开发效率高，还更容易维护。少写代码，少出错，何乐而不为呢？</p><h2 id="实际开发案例" tabindex="-1"><a class="header-anchor" href="#实际开发案例" aria-hidden="true">#</a> 实际开发案例</h2><h3 id="案例一-配置信息管理" tabindex="-1"><a class="header-anchor" href="#案例一-配置信息管理" aria-hidden="true">#</a> 案例一：配置信息管理</h3><p>假设你有个应用程序，配置信息都存在一个<code>properties</code>文件里。以前，读取配置文件后，可能会不小心改了配置信息，导致程序出错。现在，用Java 10的集合增强特性，可以这样写：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Properties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
props<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;config.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> configMap <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
     <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toUnmodifiableMap</span><span class="token punctuation">(</span>
               e <span class="token operator">-&gt;</span> e<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
               e <span class="token operator">-&gt;</span> e<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
     <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样一来，<code>configMap</code>就是不可变的了，不用担心被误改，配置信息的安全性瞬间拉满。</p><h3 id="案例二-数据处理流程" tabindex="-1"><a class="header-anchor" href="#案例二-数据处理流程" aria-hidden="true">#</a> 案例二：数据处理流程</h3><p>再比如，你有个学生成绩的CSV文件，想读取数据，计算每个学科的平均分。用Java 10的集合增强特性，可以这样写：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> lines <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;students_scores.csv&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> students <span class="token operator">=</span> lines<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>line <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parts <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>parts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>parts<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toUnmodifiableList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> averageScores <span class="token operator">=</span> students<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>
          <span class="token class-name">Student</span><span class="token operator">::</span><span class="token function">getSubject</span><span class="token punctuation">,</span>
          <span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">averagingDouble</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token operator">::</span><span class="token function">getScore</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>是不是感觉代码清晰又高效？不可变集合让数据处理结果更安全，再也不用担心数据被误改了。</p><h2 id="总结与展望" tabindex="-1"><a class="header-anchor" href="#总结与展望" aria-hidden="true">#</a> 总结与展望</h2><p>Java 10的集合能力增强，简直是开发者的“超级英雄”。不可变集合的创建更简单，流操作和不可变集合的结合更无缝，代码不仅更安全，还更简洁。这些改进在实际开发中超有用，能让你的开发效率狂飙！</p><p>最后，如果你在使用Java集合时有什么有趣的经验，或者遇到过什么坑，欢迎在评论区分享哦！</p>`,39),o=[e];function c(l,u){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","03.Java10：集合能力升级.html.vue"]]);export{k as default};
