import{_ as s,V as a,W as t,X as p,Y as n,Z as e,a1 as o}from"./framework-094145d2.js";const c="/tutorial/imgs/180710/00.png",i="/tutorial/imgs/180710/01.png",l="/tutorial/imgs/180710/02.png",u={},r=n("h1",{id:"mysql插入时唯一键冲突的几种处理方式",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#mysql插入时唯一键冲突的几种处理方式","aria-hidden":"true"},"#"),e(" MySql插入时唯一键冲突的几种处理方式")],-1),d=n("p",null,"MySql插入一条记录，结果提示主键冲突，怎么办？",-1),k=n("p",null,"批量插入数据时，发现插入的这批数据中，有某些记录存在唯一键冲突，一个一个跳出来就比较麻烦了，有什么好的办法直接忽略掉冲突的记录么？",-1),g=n("p",null,"下面简单记录三种处理方式",-1),_=o(`<h2 id="i-插入时唯一键冲突问题" tabindex="-1"><a class="header-anchor" href="#i-插入时唯一键冲突问题" aria-hidden="true">#</a> I. 插入时唯一键冲突问题</h2><h3 id="_1-ignore关键词" tabindex="-1"><a class="header-anchor" href="#_1-ignore关键词" aria-hidden="true">#</a> 1. Ignore关键词</h3><p>某些场景下，我们需要批量插入的数据，某些已经在DB中了，因此我希望在出现冲突时，直接跳过，把能插入的都插入就好，这种情况下，使用ignore关键词就比较合适了</p><p>一个实际的case如下</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">insert</span> <span class="token keyword">ignore</span> <span class="token keyword">into</span> <span class="token keyword">table</span> <span class="token punctuation">(</span>xxx<span class="token punctuation">,</span> xxx<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span>xxx<span class="token punctuation">,</span>xxx<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>xxx<span class="token punctuation">,</span> xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行截图如下, 注意下面红框中的内容，表示忽略了两条，执行插入成功一条</p><figure><img src="`+c+'" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h3 id="_2-replace-into方式" tabindex="-1"><a class="header-anchor" href="#_2-replace-into方式" aria-hidden="true">#</a> 2. Replace Into方式</h3><p>如果在批量插入中，存在冲突时，我希望用我的新数据替换旧的数据，这个时候就可以使用<code>replace into</code>了</p><p>常用姿势如下</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">replace</span> <span class="token keyword">into</span> <span class="token identifier"><span class="token punctuation">`</span>user<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>create_at<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>update_at<span class="token punctuation">`</span></span><span class="token punctuation">)</span> \n<span class="token keyword">values</span>\n	<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2018-07-10 18:54:00&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2018-07-10 19:54:52&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n	<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;test2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2018-07-10 18:54:00&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2018-07-10 19:54:52&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n	<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&#39;test3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2018-07-10 18:54:00&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2018-07-10 19:54:52&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行截图如下，注意红框中，当某条记录冲突之后并修改，则影响行数为2, 其实际过程是</p><ul><li>删除冲突数据</li><li>插入新的数据</li></ul><figure><img src="'+i+'" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><h3 id="_3-on-duplicate-key-update" tabindex="-1"><a class="header-anchor" href="#_3-on-duplicate-key-update" aria-hidden="true">#</a> 3. ON DUPLICATE KEY UPDATE</h3><p>在出现冲突时，希望更新某些数据，这个时候就可以在insert语句的最后加上<code>on duplicate key update</code>了</p><p>实例如下</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token identifier"><span class="token punctuation">`</span>user<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>create_at<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>update_at<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;test0&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2018-07-10 18:54:00&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2018-07-10 18:54:52&#39;</span><span class="token punctuation">)</span> <span class="token keyword">ON</span> <span class="token keyword">DUPLICATE</span> <span class="token keyword">KEY</span> <span class="token keyword">UPDATE</span> <span class="token identifier"><span class="token punctuation">`</span>update_at<span class="token punctuation">`</span></span><span class="token operator">=</span><span class="token string">&#39;2018-07-10 19:58:05&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行截图如下，这个是在原记录的基础上执行更新指定的value, 比如上面的插入中，当冲突时，我们只更新<code>update_at</code>字段，而name的<code>test0</code>没有更新</p><figure><img src="'+l+'" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure>',20);function m(h,f){return a(),t("div",null,[r,d,k,g,p(" more "),_])}const v=s(u,[["render",m],["__file","06.180710-MySql插入唯一键冲突的三种可选方式.html.vue"]]);export{v as default};
