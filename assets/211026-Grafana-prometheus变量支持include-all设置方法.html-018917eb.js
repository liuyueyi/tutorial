import{_ as a,V as i,W as t,X as l,Y as e,a1 as n}from"./framework-094145d2.js";const s="/tutorial/hexblog/imgs/211026/00.jpg",c="/tutorial/hexblog/imgs/211026/01.jpg",r="/tutorial/hexblog/imgs/211026/02.jpg",d="/tutorial/hexblog/imgs/211026/03.jpg",o={},u=e("p",null,"使用Prometheus进行采样收集，借助Grafana进行大盘展示，可以说是系统监控层面的基本操作了，在grafana的大盘配置时，借助变量的灵活性，来展示不同维度的数据表盘比较常见",-1),p=e("p",null,"现在有这样一个场景，一个应用有多台机器，我们设置一个变量 instance 来表示具体的实例ip，支持通过ip来选择不同机器的监控，怎么操作？",-1),_=n('<h3 id="_1-变量配置" tabindex="-1"><a class="header-anchor" href="#_1-变量配置" aria-hidden="true">#</a> 1.变量配置</h3><p>要实现上面这个case，第一步就是设置一个变量</p><figure><img src="'+s+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>注意上面的变量配置，<code>label_values(instance)</code> 获取的是所有的实例ip，然而一般的情况下，我们需要针对应用维度进行区分，比如每个上报的metric，都包含application，现在我只希望查看<code>prometheus-example</code>应用的相关信息</p><p>测试变量配置可以如下</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>label_values(http_server_requests_seconds_count{application=&quot;prometheus-example&quot;}, instance)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意<code>http_server_requests_seconds_count</code> 这个属于上报metric name，选一个实际有的即可，接下来配置大盘</p><figure><img src="`+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-include-all配置" tabindex="-1"><a class="header-anchor" href="#_2-include-all配置" aria-hidden="true">#</a> 2. include all配置</h3><p>上面这个完成了一个基本的变量使用配置，但是有这么个问题，如果我想查这个应用所有机器的监控，该怎么办？</p><figure><img src="'+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>为了支持使用全部，我们的metrics的表达式，就不能使用之前的精确匹配了，需要改成正则方式</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>(rate(http_server_requests_seconds_count{instance=~&quot;$ip&quot;}[1m]))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-小结" tabindex="-1"><a class="header-anchor" href="#_3-小结" aria-hidden="true">#</a> 3. 小结</h3><p>借助Grafana的变量配置来实现大盘的条件筛选，其中变量配置关键点在于</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 获取 &#39;label == 变量名&#39; 的所有label-value
label_values(变量名)
# 加上条件限定的变量配置
label_values(metric_name{tagName=tagValue}, 变量名)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其次在大盘的metric配置中，对于include all的支持，关键点在于promql的使用</p><ul><li><code>=</code> : 选择与提供的字符串完全相同的标签。</li><li><code>!=</code> : 选择与提供的字符串不相同的标签。</li><li><code>=~</code> : 选择正则表达式与提供的字符串（或子字符串）相匹配的标签。</li><li><code>!~</code> : 选择正则表达式与提供的字符串（或子字符串）不匹配的标签。</li></ul>`,19);function m(g,h){return i(),t("div",null,[u,p,l(" more "),_])}const f=a(o,[["render",m],["__file","211026-Grafana-prometheus变量支持include-all设置方法.html.vue"]]);export{f as default};
