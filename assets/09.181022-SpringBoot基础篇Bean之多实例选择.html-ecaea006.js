import{_ as e,V as o,W as p,X as i,Y as n,Z as s,$ as t,a1 as c,F as l}from"./framework-094145d2.js";const u="/tutorial/imgs/181022/00.gif",r={},d=n("p",null,"当通过接口的方式注入Bean时，如果有多个子类的bean存在时，具体哪个bean会被注入呢？系统中能否存在两个重名的bean呢？如果可以，那么怎么选择引入呢？如果不行的话又该怎么避免上面的问题呢？",-1),k=c(`<h2 id="i-多实例bean的选择" tabindex="-1"><a class="header-anchor" href="#i-多实例bean的选择" aria-hidden="true">#</a> I. 多实例Bean的选择</h2><p>这个场景可以说是比较常见的，现在提倡面向接口编程嘛，当一个接口有多个实例时，怎么注入和引用就需要我们额外关注下了</p><h3 id="_1-基本使用姿势" tabindex="-1"><a class="header-anchor" href="#_1-基本使用姿势" aria-hidden="true">#</a> 1. 基本使用姿势</h3><p>首先定义一个接口和两个简单的实现类，并演示一下我们通常的用法</p><p>一个输出的接口定义如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPrint</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应给两个实现</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsolePrint</span> <span class="token keyword">implements</span> <span class="token class-name">IPrint</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;console print: &quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogPrint</span> <span class="token keyword">implements</span> <span class="token class-name">IPrint</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;log print: {}&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面就是我们一般的引用方式</p><ul><li><code>@Autowired</code>注解时，属性名即为默认的Bean名，如下面的<code>logPrint</code>就是获取<code>beanName=logPrint</code>的bean</li><li><code>@Resource(name=xxx)</code> 直接指定Bean的name，来唯一选择匹配的bean</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NormalPrintDemo</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;consolePrint&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">IPrint</span> consolePrint<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">IPrint</span> logPrint<span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        consolePrint<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot; console print!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logPrint<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot; log print!!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面是两种常见的使用姿势，此外还可以借助<code>@Primary</code>注解来声明默认的注入bean</p><h3 id="_2-primary注解" tabindex="-1"><a class="header-anchor" href="#_2-primary注解" aria-hidden="true">#</a> 2. <code>@Primary</code>注解</h3><p>这个注解就是为了解决当有多个bean满足注入条件时，有这个注解的实例被选中</p><p>根据上面的作用说明，很明显可以得知一点</p><p><strong><code>@Primary</code>注解的使用有唯一性要求：即对应上面的case，一个接口的子类中，只能有一个实现上有这个注解</strong></p><p>假设将这个注解放在<code>LogPrint</code>上之后，如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Primary</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogPrint</span> <span class="token keyword">implements</span> <span class="token class-name">IPrint</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;log print: {}&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结合上面的常用姿势，加上这个注解之后，我们的测试用例应该至少包含下面几个</p><ul><li><code>@Resource</code> 指定beanName的是否会被<code>@Primary</code>影响</li><li>前面的<code>@Autowired</code>注解 + 属性名的方式，是按照第一节的方式选择呢，还是选择被<code>@Primary</code>标识的实例</li><li><code>@Autowired</code> + 随意的一个非beanName的属性，验证是否会选中<code>@Primary</code>标识的注解</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrintDemoBean</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;logPrint&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">IPrint</span> print<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 下面的注解不指定name，则实例为logPrint
     */</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">IPrint</span> consolePrint<span class="token punctuation">;</span>

    <span class="token comment">// logPrint的选择，由@Primary注解决定</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">IPrint</span> logPrint<span class="token punctuation">;</span>

    <span class="token comment">// logPrint的选择，由@Primary注解决定</span>
    <span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">IPrint</span> xxxPrint<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        print<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;expect logPrint for [print]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        consolePrint<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot; expect logPrint for [consolePrint]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logPrint<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;expect logPrint for [logPrint]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        xxxPrint<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;expect logPrint for [xxxPrint]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">2018</span>-10-22 <span class="token number">19</span>:42:40.234  INFO <span class="token number">61966</span> --- <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> c.g.h.b.b.choose.sameclz.LogPrint        <span class="token builtin class-name">:</span> log print: <span class="token function">expect</span> logPrint <span class="token keyword">for</span> <span class="token punctuation">[</span>print<span class="token punctuation">]</span>
<span class="token number">2018</span>-10-22 <span class="token number">19</span>:42:40.235  INFO <span class="token number">61966</span> --- <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> c.g.h.b.b.choose.sameclz.LogPrint        <span class="token builtin class-name">:</span> log print:  <span class="token function">expect</span> consolePrint <span class="token keyword">for</span> <span class="token punctuation">[</span>consolePrint<span class="token punctuation">]</span>
<span class="token number">2018</span>-10-22 <span class="token number">19</span>:42:40.235  INFO <span class="token number">61966</span> --- <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> c.g.h.b.b.choose.sameclz.LogPrint        <span class="token builtin class-name">:</span> log print: <span class="token function">expect</span> logPrint <span class="token keyword">for</span> <span class="token punctuation">[</span>logPrint<span class="token punctuation">]</span>
<span class="token number">2018</span>-10-22 <span class="token number">19</span>:42:40.235  INFO <span class="token number">61966</span> --- <span class="token punctuation">[</span>           main<span class="token punctuation">]</span> c.g.h.b.b.choose.sameclz.LogPrint        <span class="token builtin class-name">:</span> log print: <span class="token function">expect</span> logPrint <span class="token keyword">for</span> <span class="token punctuation">[</span>xxxPrint<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-小结" tabindex="-1"><a class="header-anchor" href="#_3-小结" aria-hidden="true">#</a> 3. 小结</h3><p>根据前面的执行，因此可以知晓，选择bean的方式如下</p><p><strong>存在<code>@Primary</code>注解时</strong></p><ul><li><code>@Resource</code>注解指定name时，根据name来查找对应的bean</li><li><code>@Autowired</code>注解，全部都用<code>@Primary</code>标识的注解</li><li><code>@Primary</code>注解要求唯一（非广义的唯一性，并不是指只能用一个@Primary，具体看前面）</li></ul><p><strong>不存在<code>@Primary</code>注解时</strong></p><ul><li><code>@Resource</code>注解指定name时，根据name来查找对应的bean</li><li><code>@Autowired</code>注解时，根据属性名去查对应的Bean，如果查不到则抛异常；如果查到，那即是它了</li></ul><h2 id="ii-重名bean的问题" tabindex="-1"><a class="header-anchor" href="#ii-重名bean的问题" aria-hidden="true">#</a> II. 重名Bean的问题</h2><p>在我们实际的业务开发中，有多个bean名为xxx的异常应该算是比较常见的，也就是说应该不能有两个bean叫同一个name；但考虑下下面这个场景</p><p>A的服务，依赖B和C的服务；而B和C是两个完全独立的第三方服务，他们各自都提供了一个<code>beanName=xxxService</code>的bean，对于A而言，Spring容器中就会有BeanName冲突的问题了，而且这种场景，对A而言，也是不可控的啊，这种情况下改怎么办？</p><h3 id="_1-同名bean" tabindex="-1"><a class="header-anchor" href="#_1-同名bean" aria-hidden="true">#</a> 1. 同名Bean</h3><p>先来个case演示下同名bean的情况，如下定义两个bean，除了包路径不一样外，类名相同，通过<code>@Component</code>注解方式声明bean，因此两个bean的beanName都是<code>SameA</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>git<span class="token punctuation">.</span>hui<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>beanorder<span class="token punctuation">.</span>choose<span class="token punctuation">.</span>samename<span class="token punctuation">.</span>a</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Created by @author yihui in 21:32 18/10/22.
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SameA</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> text <span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">SameA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        text <span class="token operator">=</span> <span class="token string">&quot;a sameA!&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>git<span class="token punctuation">.</span>hui<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>beanorder<span class="token punctuation">.</span>choose<span class="token punctuation">.</span>samename<span class="token punctuation">.</span>b</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Created by @author yihui in 21:33 18/10/22.
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SameA</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> text<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SameA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        text <span class="token operator">=</span> <span class="token string">&quot;B SameA&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来测试下引用，是否有问题</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>git<span class="token punctuation">.</span>hui<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>beanorder<span class="token punctuation">.</span>choose<span class="token punctuation">.</span>samename</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>git<span class="token punctuation">.</span>hui<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>beanorder<span class="token punctuation">.</span>choose<span class="token punctuation">.</span>samename<span class="token punctuation">.</span>a<span class="token punctuation">.</span></span><span class="token class-name">SameA</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Component</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostConstruct</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Created by @author yihui in 21:32 18/10/22.
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SameDemo</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">SameA</span> sameA<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sameA<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行之后，毫不意外的抛出了异常，堆栈信息如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>org.springframework.beans.factory.BeanDefinitionStoreException: Failed to parse configuration class <span class="token punctuation">[</span>com.git.hui.boot.beanorder.Application<span class="token punctuation">]</span><span class="token punctuation">;</span> nested exception is org.springframework.context.annotation.ConflictingBeanDefinitionException: Annotation-specified bean name <span class="token string">&#39;sameA&#39;</span> <span class="token keyword">for</span> bean class <span class="token punctuation">[</span>com.git.hui.boot.beanorder.choose.samename.b.SameA<span class="token punctuation">]</span> conflicts with existing, non-compatible bean definition of same name and class <span class="token punctuation">[</span>com.git.hui.boot.beanorder.choose.samename.a.SameA<span class="token punctuation">]</span>
	at org.springframework.context.annotation.ConfigurationClassParser.parse<span class="token punctuation">(</span>ConfigurationClassParser.java:184<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>spring-context-5.0.8.RELEASE.jar:5.0.8.RELEASE<span class="token punctuation">]</span>
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions<span class="token punctuation">(</span>ConfigurationClassPostProcessor.java:316<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>spring-context-5.0.8.RELEASE.jar:5.0.8.RELEASE<span class="token punctuation">]</span>
	at org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry<span class="token punctuation">(</span>ConfigurationClassPostProcessor.java:233<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>spring-context-5.0.8.RELEASE.jar:5.0.8.RELEASE<span class="token punctuation">]</span>
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors<span class="token punctuation">(</span>PostProcessorRegistrationDelegate.java:271<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>spring-context-5.0.8.RELEASE.jar:5.0.8.RELEASE<span class="token punctuation">]</span>
	at org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors<span class="token punctuation">(</span>PostProcessorRegistrationDelegate.java:91<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>spring-context-5.0.8.RELEASE.jar:5.0.8.RELEASE<span class="token punctuation">]</span>
	at org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors<span class="token punctuation">(</span>AbstractApplicationContext.java:694<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>spring-context-5.0.8.RELEASE.jar:5.0.8.RELEASE<span class="token punctuation">]</span>
	at org.springframework.context.support.AbstractApplicationContext.refresh<span class="token punctuation">(</span>AbstractApplicationContext.java:532<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>spring-context-5.0.8.RELEASE.jar:5.0.8.RELEASE<span class="token punctuation">]</span>
	at org.springframework.boot.SpringApplication.refresh<span class="token punctuation">(</span>SpringApplication.java:762<span class="token punctuation">)</span> <span class="token punctuation">[</span>spring-boot-2.0.4.RELEASE.jar:2.0.4.RELEASE<span class="token punctuation">]</span>
	at org.springframework.boot.SpringApplication.refreshContext<span class="token punctuation">(</span>SpringApplication.java:398<span class="token punctuation">)</span> <span class="token punctuation">[</span>spring-boot-2.0.4.RELEASE.jar:2.0.4.RELEASE<span class="token punctuation">]</span>
	at org.springframework.boot.SpringApplication.run<span class="token punctuation">(</span>SpringApplication.java:330<span class="token punctuation">)</span> <span class="token punctuation">[</span>spring-boot-2.0.4.RELEASE.jar:2.0.4.RELEASE<span class="token punctuation">]</span>
	at org.springframework.boot.SpringApplication.run<span class="token punctuation">(</span>SpringApplication.java:1258<span class="token punctuation">)</span> <span class="token punctuation">[</span>spring-boot-2.0.4.RELEASE.jar:2.0.4.RELEASE<span class="token punctuation">]</span>
	at org.springframework.boot.SpringApplication.run<span class="token punctuation">(</span>SpringApplication.java:1246<span class="token punctuation">)</span> <span class="token punctuation">[</span>spring-boot-2.0.4.RELEASE.jar:2.0.4.RELEASE<span class="token punctuation">]</span>
	at com.git.hui.boot.beanorder.Application.main<span class="token punctuation">(</span>Application.java:15<span class="token punctuation">)</span> <span class="token punctuation">[</span>classes/:na<span class="token punctuation">]</span>
Caused by: org.springframework.context.annotation.ConflictingBeanDefinitionException: Annotation-specified bean name <span class="token string">&#39;sameA&#39;</span> <span class="token keyword">for</span> bean class <span class="token punctuation">[</span>com.git.hui.boot.beanorder.choose.samename.b.SameA<span class="token punctuation">]</span> conflicts with existing, non-compatible bean definition of same name and class <span class="token punctuation">[</span>com.git.hui.boot.beanorder.choose.samename.a.SameA<span class="token punctuation">]</span>
	at org.springframework.context.annotation.ClassPathBeanDefinitionScanner.checkCandidate<span class="token punctuation">(</span>ClassPathBeanDefinitionScanner.java:348<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>spring-context-5.0.8.RELEASE.jar:5.0.8.RELEASE<span class="token punctuation">]</span>
	at org.springframework.context.annotation.ClassPathBeanDefinitionScanner.doScan<span class="token punctuation">(</span>ClassPathBeanDefinitionScanner.java:286<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>spring-context-5.0.8.RELEASE.jar:5.0.8.RELEASE<span class="token punctuation">]</span>
	at org.springframework.context.annotation.ComponentScanAnnotationParser.parse<span class="token punctuation">(</span>ComponentScanAnnotationParser.java:132<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>spring-context-5.0.8.RELEASE.jar:5.0.8.RELEASE<span class="token punctuation">]</span>
	at org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass<span class="token punctuation">(</span>ConfigurationClassParser.java:288<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>spring-context-5.0.8.RELEASE.jar:5.0.8.RELEASE<span class="token punctuation">]</span>
	at org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass<span class="token punctuation">(</span>ConfigurationClassParser.java:245<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>spring-context-5.0.8.RELEASE.jar:5.0.8.RELEASE<span class="token punctuation">]</span>
	at org.springframework.context.annotation.ConfigurationClassParser.parse<span class="token punctuation">(</span>ConfigurationClassParser.java:202<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>spring-context-5.0.8.RELEASE.jar:5.0.8.RELEASE<span class="token punctuation">]</span>
	at org.springframework.context.annotation.ConfigurationClassParser.parse<span class="token punctuation">(</span>ConfigurationClassParser.java:170<span class="token punctuation">)</span> ~<span class="token punctuation">[</span>spring-context-5.0.8.RELEASE.jar:5.0.8.RELEASE<span class="token punctuation">]</span>
	<span class="token punctuation">..</span>. <span class="token number">12</span> common frames omitted
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-同名问题规避" tabindex="-1"><a class="header-anchor" href="#_2-同名问题规避" aria-hidden="true">#</a> 2. 同名问题规避</h3><p>如果真的出现了上面这个问题，该怎么解决呢？如果这些bean是我们可控的，最简单的方式就是不要同名，定义的时候指定beanName,如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">&quot;aSameA&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SameA</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> text <span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">SameA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        text <span class="token operator">=</span> <span class="token string">&quot;a sameA!&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果完全不可控呢？正如前面说的两个第三方服务我都得依赖，但是他们有同名的bean，怎么破？</p><p>一个解决方法就是排除掉其中一个同名的bean的自动加载，采用主动注册的方式注册这个bean</p><p>排除自动扫描的bean的方式如下，在启动类添加注解<code>@ComponentScan</code>并指定其中的<code>excludeFilters</code>属性</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@ComponentScan.Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">FilterType</span><span class="token punctuation">.</span><span class="token constant">ASSIGNABLE_TYPE</span><span class="token punctuation">,</span> classes <span class="token operator">=</span> <span class="token class-name">SameA</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后自定义一个bean的配置类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>git<span class="token punctuation">.</span>hui<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>beanorder<span class="token punctuation">.</span>choose<span class="token punctuation">.</span>samename</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>git<span class="token punctuation">.</span>hui<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>beanorder<span class="token punctuation">.</span>choose<span class="token punctuation">.</span>samename<span class="token punctuation">.</span>a<span class="token punctuation">.</span></span><span class="token class-name">SameA</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Created by @author yihui in 22:14 18/10/22.
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutoConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">SameA</span> <span class="token function">mySameA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SameA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其他的代码和之前没有区别，再次执行，结果如下, 最后的输出为 <code>a sameA!</code>，根据类型来选择了实例化的bean了</p><figure><img src="`+u+'" alt="同名bean修复演示" tabindex="0" loading="lazy"><figcaption>同名bean修复演示</figcaption></figure><h2 id="ii-其他" tabindex="-1"><a class="header-anchor" href="#ii-其他" aria-hidden="true">#</a> II. 其他</h2><h4 id="a-更多博文" tabindex="-1"><a class="header-anchor" href="#a-更多博文" aria-hidden="true">#</a> a. 更多博文</h4><p><strong>基础篇</strong></p>',53),m={href:"http://spring.hhui.top/spring-blog/2018/10/09/181009-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/",target:"_blank",rel:"noopener noreferrer"},v={href:"http://spring.hhui.top/spring-blog/2018/10/12/181012-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD/",target:"_blank",rel:"noopener noreferrer"},b={href:"http://spring.hhui.top/spring-blog/2018/10/13/181013-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C/",target:"_blank",rel:"noopener noreferrer"},g={href:"http://spring.hhui.top/spring-blog/2018/10/18/181018-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-Condition%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/",target:"_blank",rel:"noopener noreferrer"},E={href:"http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B-ConditionalOnBean%E4%B8%8E@ConditionalOnClass/",target:"_blank",rel:"noopener noreferrer"},h={href:"http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-ConditionalOnProperty/",target:"_blank",rel:"noopener noreferrer"},A={href:"http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-ConditionalOnExpression/",target:"_blank",rel:"noopener noreferrer"},f={href:"http://spring.hhui.top/spring-blog/2018/10/22/181022-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%A4%9A%E5%AE%9E%E4%BE%8B%E9%80%89%E6%8B%A9/",target:"_blank",rel:"noopener noreferrer"},y=n("p",null,[n("strong",null,"应用篇")],-1),B={href:"http://spring.hhui.top/spring-blog/2018/10/17/181017-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87Bean%E4%B9%8B%E6%B3%A8%E9%94%80%E4%B8%8E%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1mock/",target:"_blank",rel:"noopener noreferrer"},w=n("h4",{id:"b-项目源码",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#b-项目源码","aria-hidden":"true"},"#"),s(" b. 项目源码")],-1),S={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"},x={href:"https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/008-beanorder",target:"_blank",rel:"noopener noreferrer"};function P(C,_){const a=l("ExternalLinkIcon");return o(),p("div",null,[d,i(" more "),k,n("ul",null,[n("li",null,[n("a",m,[s("181009-SpringBoot基础篇Bean之基本定义与使用"),t(a)])]),n("li",null,[n("a",v,[s("181012-SpringBoot基础篇Bean之自动加载"),t(a)])]),n("li",null,[n("a",b,[s("181013-SpringBoot基础篇Bean之动态注册"),t(a)])]),n("li",null,[n("a",g,[s("181018-SpringBoot基础篇Bean之条件注入@Condition使用姿势"),t(a)])]),n("li",null,[n("a",E,[s("181019-SpringBoot基础篇Bean之@ConditionalOnBean与@ConditionalOnClass"),t(a)])]),n("li",null,[n("a",h,[s("181019-SpringBoot基础篇Bean之条件注入@ConditionalOnProperty"),t(a)])]),n("li",null,[n("a",A,[s("181019-SpringBoot基础篇Bean之条件注入@ConditionalOnExpression"),t(a)])]),n("li",null,[n("a",f,[s("181022-SpringBoot基础篇Bean之多实例选择"),t(a)])])]),y,n("ul",null,[n("li",null,[n("a",B,[s("181017-SpringBoot应用篇Bean之注销与动态注册实现服务mock"),t(a)])])]),w,n("ul",null,[n("li",null,[s("工程："),n("a",S,[s("spring-boot-demo"),t(a)])]),n("li",null,[s("module: "),n("a",x,[s("008-beanorder"),t(a)])])])])}const R=e(r,[["render",P],["__file","09.181022-SpringBoot基础篇Bean之多实例选择.html.vue"]]);export{R as default};
