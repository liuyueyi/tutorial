import{_ as p,V as o,W as i,X as l,Y as n,Z as s,$ as e,a1 as t,F as c}from"./framework-094145d2.js";const u="/tutorial/imgs/210117/00.jpg",r="/tutorial/imgs/210117/01.jpg",d="/tutorial/imgs/210117/02.jpg",k="/tutorial/imgs/210117/03.jpg",v={},g=t("<p>在SpringBoot项目中，获取配置属性可以说是一个非常简单的事情，将配置写在<code>aplication.yml</code>文件之后，我们就可以直接通过<code>@Value</code>注解来绑定并获取；此外我们也可以将一个结构化的配置，借助<code>@ConfigurationPorperties</code>绑定到一个POJO，然后供项目使用，那么在使用它的时候，不知是否有想过</p><ul><li><code>@ConfigurationPorperties</code>修饰的类如何生效</li><li>配置参数与定义的POJO类型不匹配时会怎样</li><li>配置参数的必要性校验可以怎么支持</li><li>自定义的配置参数，idea中如何自动补全</li><li>已废弃的参数定义，怎样友好的提示使用方</li><li>List/Map格式的参数，怎么使用</li><li>自定义参数解析规则如何支持</li></ul><p>如果上面这些都已经了然于心，那么本文的帮助将不会特别大；如果对此有所疑问，接下来将逐一进行解惑</p>",3),m=t(`<h2 id="i-项目环境" tabindex="-1"><a class="header-anchor" href="#i-项目环境" aria-hidden="true">#</a> I. 项目环境</h2><p>本项目借助<code>SpringBoot 2.2.1.RELEASE</code> + <code>maven 3.5.3</code> + <code>IDEA</code>进行开发</p><p>下面是核心的<code>pom.xml</code>（源码可以再文末获取）</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 这个依赖是干嘛的，后文会介绍 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-configurationproperties详解" tabindex="-1"><a class="header-anchor" href="#ii-configurationproperties详解" aria-hidden="true">#</a> II. ConfigurationProperties详解</h2><h3 id="_1-配置绑定" tabindex="-1"><a class="header-anchor" href="#_1-配置绑定" aria-hidden="true">#</a> 1. 配置绑定</h3><p>假定我们现在自定义一个功能模块，里面有一些我们自定义的参数，支持通过yaml配置文件的方式注入</p><p>首先我们可以先定义一个配置类 <code>BindConfig</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;hhui.bind&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BindConfig</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意上面的注解中，<code>prefix = hhui.bind</code>，简单来讲就是会读取配置文件中，前缀为 <code>hhui.bind</code> 的属性，然后依次赋值到这个类中</p><ul><li><code>BindConfig.name = hhui.bind.name</code></li><li><code>BindConfig.age = hhui.bind.age</code></li><li>...</li></ul><p>对应的配置文件如下</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">hhui</span><span class="token punctuation">:</span>
  <span class="token key atrule">bind</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> YiHui
    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">18</span>
    <span class="token key atrule">list</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> java
      <span class="token punctuation">-</span> c
      <span class="token punctuation">-</span> python
    <span class="token key atrule">map</span><span class="token punctuation">:</span>
      <span class="token key atrule">wechat</span><span class="token punctuation">:</span> 小灰灰blog
      <span class="token key atrule">blogs</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//blog.hhui.top
      <span class="token key atrule">git</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//github.com/liuyueyi
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意事项</strong></p><ul><li>配置类必须有公共的Setter方法，上文中主要是借助lombok的<code>@Data</code>省略了Setter方法的显示声明而已</li><li>类的属性名与配置文件中的配置名要求匹配 <ul><li>大小写不敏感</li><li>支持下划线转驼峰</li></ul></li><li>配置类不要求必须是public</li></ul><p>关于上面最后一点，也就表明我们可以在自动AutoConfiguration类中，声明一个内部类来绑定配置信息，如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">AutoConfiguration<span class="token punctuation">.</span>BindConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutoConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Data</span>
    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;hhui.bind&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">BindConfig</span> <span class="token punctuation">{</span>

        <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

        <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>

        <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span>

        <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-注册生效" tabindex="-1"><a class="header-anchor" href="#_2-注册生效" aria-hidden="true">#</a> 2. 注册生效</h3><p>我们通过<code>@ConfigurationProperties</code>修饰配置类之后，是否直接会生效呢？通常来讲，让它生效有下面三种方式</p><h4 id="a-component等注解修饰方式" tabindex="-1"><a class="header-anchor" href="#a-component等注解修饰方式" aria-hidden="true">#</a> a. <code>@Component</code>等注解修饰方式</h4><p>直接在配置类上添加<code>@Component</code>, <code>@Configuration</code>等注解，让Spring容器扫描并加载它</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;hhui.bind&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BindConfig</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用这种方式时，需要注意配置类在自动扫描的包路径下，否则可能不会被扫描（主要是作为第三方jar包提供服务时，可能出现扫描不到的问题）</p><h4 id="b-bean注册" tabindex="-1"><a class="header-anchor" href="#b-bean注册" aria-hidden="true">#</a> b. <code>@Bean</code>注册</h4><p>把它当成一个普通的bean，借助bean注册的方式来实现，也是一个可选的方案，一般的实现方式如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutoConfiguration</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">BindConfig</span> <span class="token function">bindConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BindConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="c-enableconfigurationproperties方式" tabindex="-1"><a class="header-anchor" href="#c-enableconfigurationproperties方式" aria-hidden="true">#</a> c. <code>@EnableConfigurationProperties</code>方式</h4><p>在配置类上，添加这个注解之后，可以实现配置注册，一般常见的使用姿势如</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">BindConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutoConfiguration</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="d-小结" tabindex="-1"><a class="header-anchor" href="#d-小结" aria-hidden="true">#</a> d. 小结</h4><p>上面三种注册方式，前面两种的思路是将配置类作为bean，第三种实现思路和主动注册bean一致（所以想实现主动注册bean，可以考虑它的实现逻辑）</p><h3 id="_3-参数类型不匹配" tabindex="-1"><a class="header-anchor" href="#_3-参数类型不匹配" aria-hidden="true">#</a> 3. 参数类型不匹配</h3><p>如果我们在配置中，一个本来希望接收int类型的参数，结果实际上填了一个非整形，会怎样？</p><p>比如前面的配置类，我们实际的配置文件将<code>age</code>填18y，来看一下最终会发生什么事情</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">hhui</span><span class="token punctuation">:</span>
  <span class="token key atrule">bind</span><span class="token punctuation">:</span>
    <span class="token key atrule">Name</span><span class="token punctuation">:</span> YiHui
    <span class="token key atrule">AGE</span><span class="token punctuation">:</span> 18y
    <span class="token key atrule">list</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> java
      <span class="token punctuation">-</span> c
      <span class="token punctuation">-</span> python
    <span class="token key atrule">map</span><span class="token punctuation">:</span>
      <span class="token key atrule">wechat</span><span class="token punctuation">:</span> 小灰灰blog
      <span class="token key atrule">blogs</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//blog.hhui.top
      <span class="token key atrule">git</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//github.com/liuyueyi
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单演示，直接在启动类中测试一下会如何</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">Application</span><span class="token punctuation">(</span><span class="token class-name">BindConfig</span> config<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>参数异常之后，直接启动失败，如果对参数的要求没有那么严格，即允许失败，我们可以通过设置<code>ignoreInvalidFields = true</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;hhui.bind&quot;</span><span class="token punctuation">,</span> ignoreInvalidFields <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BindConfig</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次执行之后，会发现正常启动，输出如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>BindConfig<span class="token punctuation">(</span>name<span class="token operator">=</span>YiHui, <span class="token assign-left variable">age</span><span class="token operator">=</span>null, <span class="token assign-left variable">list</span><span class="token operator">=</span><span class="token punctuation">[</span>java, c, python<span class="token punctuation">]</span>, <span class="token assign-left variable">map</span><span class="token operator">=</span><span class="token punctuation">{</span>wechat<span class="token operator">=</span>小灰灰blog, <span class="token assign-left variable">blogs</span><span class="token operator">=</span>http://blog.hhui.top, <span class="token assign-left variable">git</span><span class="token operator">=</span>http://github.com/liuyueyi<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意查看上面的age，因为传入的参数非法，所以是null</p><p><strong>说明</strong></p><p>结合默认值 + <code>ignoreInvalidFields</code> 方式来支持配置的最大可用性：</p><ul><li>直接在配置类中，设置属性的默认值，表示当这个配置不存在或者设置非法时，使用默认的配置</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;hhui.bind&quot;</span><span class="token punctuation">,</span> ignoreInvalidFields <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BindConfig</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次执行输出如</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>BindConfig<span class="token punctuation">(</span>name<span class="token operator">=</span>YiHui, <span class="token assign-left variable">age</span><span class="token operator">=</span><span class="token number">18</span>, <span class="token assign-left variable">list</span><span class="token operator">=</span><span class="token punctuation">[</span>java, c, python<span class="token punctuation">]</span>, <span class="token assign-left variable">map</span><span class="token operator">=</span><span class="token punctuation">{</span>wechat<span class="token operator">=</span>小灰灰blog, <span class="token assign-left variable">blogs</span><span class="token operator">=</span>http://blog.hhui.top, <span class="token assign-left variable">git</span><span class="token operator">=</span>http://github.com/liuyueyi<span class="token punctuation">}</span>, <span class="token assign-left variable">mainPwd</span><span class="token operator">=</span>Pwd<span class="token punctuation">(</span>user<span class="token operator">=</span>一灰灰blog, <span class="token assign-left variable">pwd</span><span class="token operator">=</span>yihuihui, <span class="token assign-left variable">code</span><span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">))</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-配置解析规则" tabindex="-1"><a class="header-anchor" href="#_4-配置解析规则" aria-hidden="true">#</a> 4. 配置解析规则</h3><p>常见的配置除了基本类型之外，能嵌套自定义对象么，非基本类型又可以如何解析呢？</p><h4 id="a-pojo-list-map参数类型" tabindex="-1"><a class="header-anchor" href="#a-pojo-list-map参数类型" aria-hidden="true">#</a> a. POJO,List,Map参数类型</h4><p>我们新定义一个Pwd类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pwd</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> user<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> pwd<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Integer</span> code<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后扩展一下<code>BindConfig</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;hhui.bind&quot;</span><span class="token punctuation">,</span> ignoreInvalidFields <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BindConfig</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Pwd</span> mainPwd<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个时候mainPwd对应的yaml配置文件可以如下设置</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">hhui</span><span class="token punctuation">:</span>
  <span class="token key atrule">bind</span><span class="token punctuation">:</span>
    <span class="token key atrule">Name</span><span class="token punctuation">:</span> YiHui
    <span class="token key atrule">AGE</span><span class="token punctuation">:</span> 1h
    <span class="token key atrule">list</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> java
      <span class="token punctuation">-</span> c
      <span class="token punctuation">-</span> python
    <span class="token key atrule">map</span><span class="token punctuation">:</span>
      <span class="token key atrule">wechat</span><span class="token punctuation">:</span> 小灰灰blog
      <span class="token key atrule">blogs</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//blog.hhui.top
      <span class="token key atrule">git</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//github.com/liuyueyi
    <span class="token comment"># 下面这个对应的是 BindConfg.mainPwd; 可以写成 main_pwd也可以写成mainPwd</span>
    <span class="token key atrule">main_pwd</span><span class="token punctuation">:</span>
      <span class="token key atrule">user</span><span class="token punctuation">:</span> 一灰灰blog
      <span class="token key atrule">pwd</span><span class="token punctuation">:</span> yihuihui
      <span class="token key atrule">code</span><span class="token punctuation">:</span> <span class="token number">9</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的介绍也可以看出，对于自定义的POJO类是支持的，使用姿势也没什么区别</p><p>此外，对于List和Map的使用也给出了实例</p><h4 id="b-自定义配置解析" tabindex="-1"><a class="header-anchor" href="#b-自定义配置解析" aria-hidden="true">#</a> b.自定义配置解析</h4><p>上面我们自定义的<code>Pwd</code>类，主要借助<code>setter</code>方法，将匹配的属性塞入进去；如果我的配置就是一个json串，可以注入到一个POJO类么</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">hhui</span><span class="token punctuation">:</span>
  <span class="token key atrule">bind</span><span class="token punctuation">:</span>
    <span class="token key atrule">Jwt</span><span class="token punctuation">:</span> <span class="token string">&#39;{&quot;token&quot;: &quot;11111111123&quot;, &quot;timestamp&quot;: 1610880489123}&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的Jwt类如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Jwt</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> token<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Long</span> timestamp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个时候如想实现上面的配置解析，可以通过实现<code>org.springframework.core.convert.converter.Converter</code>接口来支持，并通过<code>@ConfigurationPropertiesBinding</code>注解来表明这是个配置属性转换类，不加这个注解会不生效哦</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@ConfigurationPropertiesBinding</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtConverter</span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Jwt</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Jwt</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">String</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> <span class="token class-name">Jwt</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明</strong></p><p>使用自定义的配置解析规则时，注意两点</p><ul><li>实现接口<code>Converter</code></li><li>使用<code>@ConfigurationPropertiesBinding</code>修饰注解</li></ul><p>Spring提供了一些默认的配置解析规则，如</p><ul><li>文件大小<code>DataSize</code><ul><li>对应的value可以是 1B, 1KB, 1MB, 1GB...</li></ul></li><li>持续时间<code>Duration</code><ul><li>对应的value可已是 1ns，1us，1ms，1s，1m，1h，1d</li></ul></li></ul><h3 id="_5-配置不存在场景" tabindex="-1"><a class="header-anchor" href="#_5-配置不存在场景" aria-hidden="true">#</a> 5. 配置不存在场景</h3><p>一个配置类，对应的类中没有这个属性会怎样？</p><p>如针对前面的<code>BindConfig</code>，没有<code>notExist</code>这个属性，但是配置文件中，却加上了这个</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">hhui</span><span class="token punctuation">:</span>
  <span class="token key atrule">bind</span><span class="token punctuation">:</span>
    <span class="token key atrule">notExist</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实测之后，发现没有任何影响，通过查看<code>@ConfigurationProperties</code>注解的成员，发现可以设置<code>ignoreUnknownFields=false</code>，从字面上表示出现了未能识别的成员，不会略错误，但是在实际测试中，并没有生效</p><h3 id="_6-参数校验" tabindex="-1"><a class="header-anchor" href="#_6-参数校验" aria-hidden="true">#</a> 6. 参数校验</h3><p>参数校验可以说比较常用的case了，比如前面的配置<code>age</code>，基本上不会允许这个参数能是负数，如需要对参数进行校验，我们可以借助<code>@Validated</code>来实现校验</p><p>添加pom依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.hibernate.validator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hibernate-validator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后再配置类上添加<code>@Validated</code>，然后就可以在需要校验的字段上添加对应的限制</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Validated</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;hhui.bind&quot;</span><span class="token punctuation">,</span> ignoreInvalidFields <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> ignoreUnknownFields <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BindConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Max</span><span class="token punctuation">(</span><span class="token number">66</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们将age参数设置不满足上面的条件</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">hhui</span><span class="token punctuation">:</span>
  <span class="token key atrule">bind</span><span class="token punctuation">:</span>
    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">10</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次测试会发现报如下错误</p><figure><img src="`+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_7-idea自动补全提示" tabindex="-1"><a class="header-anchor" href="#_7-idea自动补全提示" aria-hidden="true">#</a> 7. IDEA自动补全提示</h3><p>平时在Spring开发过程中，在yaml文件中添加配置时，配合idea有非常友好的提示，可以非常友好的补全参数配置</p><figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>那么我们自定义的参数想实现这个效果应该怎么做呢？</p><p>添加文章最开头的依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加上面的依赖之后，打包<code>mvn clean package</code>，然后会发现在META-INF下面有个<code>spring-configuration-metadata.json</code></p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;groups&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;hhui.bind&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;com.git.hui.boot.bind.config.BindConfig&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;sourceType&quot;</span><span class="token operator">:</span> <span class="token string">&quot;com.git.hui.boot.bind.config.BindConfig&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;properties&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;hhui.bind.age&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;java.lang.Integer&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;sourceType&quot;</span><span class="token operator">:</span> <span class="token string">&quot;com.git.hui.boot.bind.config.BindConfig&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;defaultValue&quot;</span><span class="token operator">:</span> <span class="token number">18</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;hhui.bind.jwt&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;com.git.hui.boot.bind.config.Jwt&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;sourceType&quot;</span><span class="token operator">:</span> <span class="token string">&quot;com.git.hui.boot.bind.config.BindConfig&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;hhui.bind.list&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;java.util.List&lt;java.lang.String&gt;&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;sourceType&quot;</span><span class="token operator">:</span> <span class="token string">&quot;com.git.hui.boot.bind.config.BindConfig&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;hhui.bind.main-pwd&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;com.git.hui.boot.bind.config.Pwd&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;sourceType&quot;</span><span class="token operator">:</span> <span class="token string">&quot;com.git.hui.boot.bind.config.BindConfig&quot;</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;hhui.bind.map&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;java.util.Map&lt;java.lang.String,java.lang.String&gt;&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;sourceType&quot;</span><span class="token operator">:</span> <span class="token string">&quot;com.git.hui.boot.bind.config.BindConfig&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;hhui.bind.name&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;java.lang.String&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;sourceType&quot;</span><span class="token operator">:</span> <span class="token string">&quot;com.git.hui.boot.bind.config.BindConfig&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;hints&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后自动补全就有了</p><figure><img src="`+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>说明</strong></p><p>idea推荐添加插件<code>Spring Assistant</code>，支持非常友好的配置注入</p><h3 id="_8-小结" tabindex="-1"><a class="header-anchor" href="#_8-小结" aria-hidden="true">#</a> 8.小结</h3><p>本文介绍了<code>@ConfigurationProperties</code>修饰POJO类，实现配置的绑定，可以通过将这个类声明为一个普通bean的方式进行注册，也可以借助<code>@EnableConfigurationProperties</code>来注册</p><p>在配置参数时，需要注意如果参数类型不一致，会导致项目启动失败；可以通过设置<code>ConfigurationProperties#ignoreInvalidFields = true</code>，来避免这种场景</p><p>通过实现接口<code>Converter</code> + <code>@ConfigurationPropertiesBinding</code>来自定义参数解析转换规则，可以实现各路姿势的参数解析</p><p>配置的自动提示支持也比较简单，添加<code>org.springframework.boot:spring-boot-configuration-processor</code>依赖，打包之后在META-INF中会多一个json文件<code>spring-configuration-metadata.json</code></p><h2 id="ii-其他" tabindex="-1"><a class="header-anchor" href="#ii-其他" aria-hidden="true">#</a> II. 其他</h2><h3 id="_0-项目" tabindex="-1"><a class="header-anchor" href="#_0-项目" aria-hidden="true">#</a> 0. 项目</h3><p><strong>项目源码</strong></p>',107),b={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/002-properties-bind",target:"_blank",rel:"noopener noreferrer"},y=n("p",null,[n("strong",null,"系列博文")],-1),f={href:"https://spring.hhui.top/spring-blog/2020/05/07/200507-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E5%8A%A0%E8%BD%BD%E5%99%A8/",target:"_blank",rel:"noopener noreferrer"},E={href:"https://spring.hhui.top/spring-blog/2018/09/25/180925-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE/",target:"_blank",rel:"noopener noreferrer"},B={href:"https://spring.hhui.top/spring-blog/2018/09/22/180922-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E9%85%8D%E7%BD%AE%E5%88%B7%E6%96%B0/",target:"_blank",rel:"noopener noreferrer"},q={href:"https://spring.hhui.top/spring-blog/2018/09/21/180921-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%8C%87%E5%AE%9A%E4%B8%8E%E9%85%8D%E7%BD%AE%E5%86%85%E5%BC%95%E7%94%A8/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://spring.hhui.top/spring-blog/2018/09/20/180920-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://spring.hhui.top/spring-blog/2018/09/19/180919-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E5%A6%82%E4%BD%95%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/",target:"_blank",rel:"noopener noreferrer"};function A(C,x){const a=c("ExternalLinkIcon");return o(),i("div",null,[g,l(" more "),m,n("ul",null,[n("li",null,[s("工程："),n("a",b,[s("https://github.com/liuyueyi/spring-boot-demo"),e(a)])]),n("li",null,[s("源码: "),n("a",h,[s("https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/002-properties-bind"),e(a)])])]),y,n("ul",null,[n("li",null,[n("a",f,[s("【基础系列】实现一个自定义配置加载器（应用篇）"),e(a)])]),n("li",null,[n("a",E,[s("【基础系列】SpringBoot配置信息之默认配置"),e(a)])]),n("li",null,[n("a",B,[s("【基础系列】SpringBoot配置信息之配置刷新"),e(a)])]),n("li",null,[n("a",q,[s("【基础系列】SpringBoot基础篇配置信息之自定义配置指定与配置内引用"),e(a)])]),n("li",null,[n("a",w,[s("【基础系列】SpringBoot基础篇配置信息之多环境配置信息"),e(a)])]),n("li",null,[n("a",_,[s("【基础系列】SpringBoot基础篇配置信息之如何读取配置信息"),e(a)])])])])}const S=p(v,[["render",A],["__file","08.210117-SpringBoot系列ConfigurationProperties配置绑定中那些你不知道的事情.html.vue"]]);export{S as default};
