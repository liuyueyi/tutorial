import{_ as t,V as p,W as c,X as o,Y as n,Z as s,$ as l,a1 as a,F as i}from"./framework-094145d2.js";const u={},r=n("p",null,"根据前面一篇总纲的博文，将整体结构划分为了四大块，本文则主要目标集中在第一块，报警执行器（AlarmExecute）的设计与加载上了",-1),k=n("p",null,"主要的关注点无外乎 定义-》加载-》实现逻辑三块了：",-1),d=n("ul",null,[n("li",null,"AlarmExecute 的接口定义"),n("li",null,"如何加载用户自定义的AlarmExecute"),n("li",null,"AlarmExecute的内部实现")],-1),m=a(`<h2 id="i-alarmexecute接口定义" tabindex="-1"><a class="header-anchor" href="#i-alarmexecute接口定义" aria-hidden="true">#</a> I. AlarmExecute接口定义</h2><p>在定义接口之前，先来根据几个问题来加深下这个概念的理解：</p><h3 id="_1-基础知识" tabindex="-1"><a class="header-anchor" href="#_1-基础知识" aria-hidden="true">#</a> 1. 基础知识</h3><ol><li>说一下这个报警执行器到底是干嘛的？</li></ol><ul><li>执行具体的报警逻辑（感觉说了依据废话）</li><li>因此不同的报警方式，可以选择不同的实现，这个强业务关联的逻辑可以交由适用方自己来把控</li></ul><ol start="2"><li>多个alarmExecute之间如何区分？</li></ol><ul><li>给一个类似身份证的标识，将标识与alarmExecute绑定，则可以报警规则中，用这个标识来表示对应的报警执行器</li><li>标识要求全局唯一，否则就没法找到对应的执行器</li></ul><h3 id="_2-接口定义" tabindex="-1"><a class="header-anchor" href="#_2-接口定义" aria-hidden="true">#</a> 2. 接口定义</h3><p>根据上面的基础知识，那么很容易给出接口的定义了</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IExecute</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 报警的具体实现
     *
     * <span class="token keyword">@param</span> <span class="token parameter">users</span> 报警用户，支持批量
     * <span class="token keyword">@param</span> <span class="token parameter">title</span> 报警信息的title
     * <span class="token keyword">@param</span> <span class="token parameter">msg</span>   报警的主题信息
     */</span>
    <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> users<span class="token punctuation">,</span> <span class="token class-name">String</span> title<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token doc-comment comment">/**
     * 获取报警单元唯一标识
     *
     * <span class="token keyword">@return</span> name  要求全局唯一
     */</span>
    <span class="token keyword">default</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ExecuteNameGenerator</span><span class="token punctuation">.</span><span class="token function">genExecuteName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第一个方法<code>sendMsg</code>也就是需要使用者来实现的具体执行报警代码的核心模块了，比较清晰，其中用户是列表，因此，支持同时报警给多个用户（但是报警内容都是相同的）</li><li>第二个方法<code>getName</code>表示获取标识，默认给了一个实现，规则如下 <ul><li>获取类的 SimpleName</li><li>干掉类名后面的 <code>Execute</code> （如果不是以这个结尾的就不需要了）</li><li>剩下的全部转大写</li><li>实例： <code>SmsExecute -&gt; SMS; LogExecute -&gt; LOG;</code></li></ul></li></ul><h3 id="_3-额外说明" tabindex="-1"><a class="header-anchor" href="#_3-额外说明" aria-hidden="true">#</a> 3. 额外说明</h3><p>上面接口定义中的<code>sendMsg</code>中，支持给多个用户发送报警信息，如果要求每个报警信息都不同，比如最常见的是:</p><ul><li>发送一段文本，其中通知人地方根据报警人来替换，其他的不变</li></ul><p>当然这样的场景完全可以自己在实现中来做</p><ul><li>传入的content作为一个话术模板</li><li>然后利用 String#format() 来实现参数代替</li></ul><p>当然更激进一点就是，穿进来的title或者content作为一个key，然后我可以通过这个key，到其他的地方（如db，缓存等）获取报警内容，甚至我连传进来的报警人都不care，直接从其他地方来获取</p><p>简单来说，这个实现委托给用户自己实现，你完全可以随意的控制，做任何你想做的事情</p><h2 id="ii-alarmexecute的加载" tabindex="-1"><a class="header-anchor" href="#ii-alarmexecute的加载" aria-hidden="true">#</a> II. AlarmExecute的加载</h2><h3 id="_1-问题分析" tabindex="-1"><a class="header-anchor" href="#_1-问题分析" aria-hidden="true">#</a> 1. 问题分析</h3><p>加载AlarmExecut，貌似没有什么特别复杂的东西，一般的思路是创建一个简单工厂类，然后实例化对应的Executor返回，（再多一点确保只有一个实例对象，加以缓存）</p><p><strong>这样有什么问题？</strong></p><p>很简单的实现，但是我们需要加载用户自定义的执行器，要怎么支持呢？</p><p><strong>几种可行的解决手段</strong></p><h4 id="_1-开放一个注册接口" tabindex="-1"><a class="header-anchor" href="#_1-开放一个注册接口" aria-hidden="true">#</a> 1. 开放一个注册接口</h4><p>这个可算是最容易想到的了，直接让用户把自己的Executor实例，主动的扔进来</p><h4 id="_2-抽象工厂" tabindex="-1"><a class="header-anchor" href="#_2-抽象工厂" aria-hidden="true">#</a> 2. 抽象工厂</h4><p>将前面说的简单工厂，改成抽象工厂类，让后具体的加载委托给用户自己来做</p><h4 id="_3-借助spring容器来加载" tabindex="-1"><a class="header-anchor" href="#_3-借助spring容器来加载" aria-hidden="true">#</a> 3. 借助Spring容器来加载</h4><p>如果所有的AlarmExecute都委托给Spring容器来管理，那么就很简单了，直接通过<code>ApplicationContext#getBean</code>来获取所有的执行器即可</p><h4 id="_4-spi加载方式" tabindex="-1"><a class="header-anchor" href="#_4-spi加载方式" aria-hidden="true">#</a> 4. SPI加载方式</h4><p>通过JDK的spi机制来实现（详细后面来说）</p><p>针对上面的几个手段，首先排除掉前面两个，因为不满足我们的设计目标一：</p><ul><li>简单 （只有报警这个接口进行交互，不需要额外的接口调用）</li></ul><p>然后也排除掉spring容器，因为我们希望这个东西，可以较独立的被引用到java工程中，后面可以看情况实现一个spring版</p><p>从使用来讲，由spring容器来托管的方式，对使用者而言，是最简单，成本最低的，因为不需要额外添加SPI配置</p><hr><h3 id="_2-实现" tabindex="-1"><a class="header-anchor" href="#_2-实现" aria-hidden="true">#</a> 2. 实现</h3>`,38),v={href:"https://my.oschina.net/u/566591/blog/911054",target:"_blank",rel:"noopener noreferrer"},g=a(`<p>实现方式，可说是非常简单了</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleExecuteFactory</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">IExecute</span><span class="token punctuation">&gt;</span></span> cacheMap<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">loadAlarmExecute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">IExecute</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IExecute</span><span class="token punctuation">&gt;</span></span> iExecutes <span class="token operator">=</span> <span class="token class-name">ServiceLoader</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">IExecute</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">IExecute</span> tmp<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>iExecutes<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            tmp <span class="token operator">=</span> iExecutes<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">DuplicatedAlarmExecuteDefinedException</span><span class="token punctuation">(</span>
                        <span class="token string">&quot;duplicated alarm execute defined!&quot;</span> <span class="token operator">+</span>
                                <span class="token string">&quot;\\n&quot;</span> <span class="token operator">+</span>
                                <span class="token string">&quot;&gt;&gt;name:&quot;</span> <span class="token operator">+</span>
                                tmp<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
                                <span class="token string">&quot;&gt;&gt;&gt;clz:&quot;</span> <span class="token operator">+</span>
                                tmp<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>
                                <span class="token string">&quot;&gt;&gt;&gt;clz:&quot;</span> <span class="token operator">+</span>
                                map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        cacheMap <span class="token operator">=</span> map<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">IExecute</span> <span class="token function">getExecute</span><span class="token punctuation">(</span><span class="token class-name">String</span> execute<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheMap <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">SimpleExecuteFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>cacheMap <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">loadAlarmExecute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 如果不存在，则降级为 LogExecute</span>
        <span class="token class-name">IExecute</span> e <span class="token operator">=</span> cacheMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>execute<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> e <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> cacheMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">LogExecute</span><span class="token punctuation">.</span><span class="token constant">NAME</span><span class="token punctuation">)</span> <span class="token operator">:</span> e<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面对外就暴露一个方法，内部比较简单，如果传入标识对应的报警器没有，则返回一个默认的，确保不会因此挂掉</p><p>通过SPI加载所有的执行器的逻辑就一行</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IExecute</span><span class="token punctuation">&gt;</span></span> iExecutes <span class="token operator">=</span> <span class="token class-name">ServiceLoader</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">IExecute</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后需要关注的是循环内部，做了name的唯一性判断，不满足就直接抛出异常了</p><h2 id="iii-alarmexecute内部实现" tabindex="-1"><a class="header-anchor" href="#iii-alarmexecute内部实现" aria-hidden="true">#</a> III. AlarmExecute内部实现</h2><p>内部提供了两个基本的报警实现，比较简单</p><p>日志报警执行器</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 有些报警,不需要立即上报,但是希望计数, 当大量出现时, 用于升级
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">/&gt;</span></span>
 * Created by yihui on 2017/4/28.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogExecute</span> <span class="token keyword">implements</span> <span class="token class-name">IExecute</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">NAME</span> <span class="token operator">=</span> <span class="token class-name">ExecuteNameGenerator</span><span class="token punctuation">.</span><span class="token function">genExecuteName</span><span class="token punctuation">(</span><span class="token class-name">LogExecute</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">&quot;alarm&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> users<span class="token punctuation">,</span> <span class="token class-name">String</span> title<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Do send msg by {} to user:{}, title: {}, msg: {}&quot;</span><span class="token punctuation">,</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> users<span class="token punctuation">,</span> title<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>空报警执行器</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 空报警执行器, 什么都不干
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
 * Created by yihui on 2017/5/12.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NoneExecute</span> <span class="token keyword">implements</span> <span class="token class-name">IExecute</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">NAME</span> <span class="token operator">=</span> <span class="token class-name">ExecuteNameGenerator</span><span class="token punctuation">.</span><span class="token function">genExecuteName</span><span class="token punctuation">(</span><span class="token class-name">NoneExecute</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> users<span class="token punctuation">,</span> <span class="token class-name">String</span> title<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iv-小结" tabindex="-1"><a class="header-anchor" href="#iv-小结" aria-hidden="true">#</a> IV. 小结</h2><p>AlarmExecute 的定义，加载以及实现规则目前都已经完成</p><ul><li>定义：两个方法，一个执行报警方法，一个返回唯一标识方法</li><li>加载：通过SPI方式加载所有定义的alarmExecute</li><li>实现：由用户自定义实现<code>IExecute</code>接口，内部逻辑无任务特殊要求，只是需要确保每个executor的name唯一</li></ul><p>整个系统的第一步已经迈出，但是有个问题就是什么时候，才会来调用 <code>com.hust.hui.alarm.core.execut.SimpleExecuteFactory#getExecute</code> 从而触发执行器的加载呢？</p><figure><img src="https://s17.mogucdn.com/mlcdn/c45406/180209_5jii7f1ed2j3f8e0di3aalhgji114_1666x402.jpg" alt="IMAGE" tabindex="0" loading="lazy"><figcaption>IMAGE</figcaption></figure>`,17);function b(h,x){const e=i("ExternalLinkIcon");return p(),c("div",null,[r,k,d,o(" more "),m,n("p",null,[s("我们采用SPI方式来实现加载，对于SPI是什么东西，这里不详细展看，有兴趣的童鞋可以看我之前的一个系类博文："),n("a",v,[s("自定义SPI框架设计"),l(e)])]),g])}const f=t(u,[["render",b],["__file","02.报警系统QuickAlarm之报警执行器的设计与实现.html.vue"]]);export{f as default};
