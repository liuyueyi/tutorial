import{_ as p,V as e,W as o,X as c,Y as n,Z as s,$ as t,a1 as i,F as l}from"./framework-094145d2.js";const u="/tutorial/imgs/220817/00.jpg",d="/tutorial/imgs/220817/01.jpg",r="/tutorial/imgs/220817/02.jpg",k="/tutorial/imgs/220817/03.jpg",m="/tutorial/imgs/220817/04.jpg",v={},g=n("p",null,"实现一个web接口返回json数据，基本上是每一个javaer非常熟悉的事情了；那么问题来了，如果我有一个接口，除了希望返回json格式的数据之外，若也希望可以返回xml格式数据可行么？",-1),b=n("p",null,"答案当然是可行的，接下来我们将介绍一下，一个接口的返回数据类型，可以怎么处理",-1),y=i(`<h2 id="i-项目搭建" tabindex="-1"><a class="header-anchor" href="#i-项目搭建" aria-hidden="true">#</a> I. 项目搭建</h2><p>本文创建的实例工程采用<code>SpringBoot 2.2.1.RELEASE</code> + <code>maven 3.5.3</code> + <code>idea</code>进行开发</p><h3 id="_1-pom依赖" tabindex="-1"><a class="header-anchor" href="#_1-pom依赖" aria-hidden="true">#</a> 1. pom依赖</h3><p>具体的SpringBoot项目工程创建就不赘述了，对于pom文件中，需要重点关注下面两个依赖类</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.fasterxml.jackson.dataformat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jackson-dataformat-xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意 <code>jackson-datafromat-xml</code>这个依赖，加上这个主要时为了支持返回xml格式的数据</p><h2 id="ii-返回类型设置的多种方式" tabindex="-1"><a class="header-anchor" href="#ii-返回类型设置的多种方式" aria-hidden="true">#</a> II. 返回类型设置的多种方式</h2><p>正常来讲，一个RestController的接口，默认返回的是Json格式数据，当我们引入了上面的xml包之后，会怎样呢？返回的还是json么？</p><h3 id="_1-通过produce设置返回类型" tabindex="-1"><a class="header-anchor" href="#_1-通过produce设置返回类型" aria-hidden="true">#</a> 1.通过produce设置返回类型</h3><p>如果一个接口希望返回json或者xml格式的数据，最容易想到的方式就是直接设置<code>RequestMapping</code>注解中的produce属性</p><p>这个值主要就是用来设置这个接口响应头中的<code>content-type</code>； 如我们现在有两个接口，一个指定返回json格式数据，一个指定返回xml格式数据，可以如下写</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexRest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Data</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ResVo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> code<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> msg<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">T</span> data<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">ResVo</span><span class="token punctuation">(</span><span class="token keyword">int</span> code<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">,</span> <span class="token class-name">T</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>msg <span class="token operator">=</span> msg<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;/xml&quot;</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_XML_VALUE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ResVo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">xml</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResVo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;ok&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;返回xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;/json&quot;</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON_VALUE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ResVo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResVo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;ok&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;返回json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的实现中</p><ul><li>xml接口，指定<code>produces = application/xml</code></li><li>json接口，指定<code>produces = applicatin/json</code></li></ul><p>接下来我们访问一下看看返回的是否和预期一致</p><figure><img src="`+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从上面截图也可以看出，xml接口返回的是xml格式数据；json接口返回的是json格式数据</p><h3 id="_2-通过请求头accept设置返回类型" tabindex="-1"><a class="header-anchor" href="#_2-通过请求头accept设置返回类型" aria-hidden="true">#</a> 2. 通过请求头accept设置返回类型</h3><p>上面的方式，非常直观，自然我们就会有一个疑问，当接口上不指定produces属性时，直接访问会怎么表现呢？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">ResVo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResVo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;ok&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;简单的测试&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>请注意上面的截图，两种访问方式返回的数据类型不一致</p><ul><li>curl请求：返回json格式数据</li><li>浏览器请求：返回 <code>application/xhtml+xml</code>响应头的数据（实际上还是xml格式）</li></ul><p>那么问题来了，为什么两者的表现形式不一致呢？</p><p>对着上面的图再看三秒，会发现主要的差别点就在于请求头<code>Accept</code>不同；我们可以通过这个请求头参数，来要求服务端返回我希望的数据类型</p><p>如指定返回json格式数据</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080&#39;</span> <span class="token parameter variable">-H</span> <span class="token string">&#39;Accept:application/xml&#39;</span> <span class="token parameter variable">-iv</span>

<span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080&#39;</span> <span class="token parameter variable">-H</span> <span class="token string">&#39;Accept:application/json&#39;</span> <span class="token parameter variable">-iv</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从上面的执行结果也可以看出，返回的类型与预期的一致；</p><p><strong>说明</strong></p><p>请求头可以设置多种MediaType，用英文逗号分割，后端接口会根据自己定义的produce与请求头希望的mediaType取交集，至于最终选择的顺序则以accept中出现的顺序为准</p><p>看一下实际的表现来验证下上面的说法</p><figure><img src="'+k+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>通过请求头来控制返回数据类型的方式可以说是非常经典的策略了，（遵循html协议还有什么好说的呢！）</p><h3 id="_3-请求参数来控制返回类型" tabindex="-1"><a class="header-anchor" href="#_3-请求参数来控制返回类型" aria-hidden="true">#</a> 3. 请求参数来控制返回类型</h3><p>除了上面介绍的两种方式之外，还可以考虑为所有的接口，增加一个根据特定的请求参数来控制返回的类型的方式</p><p>比如我们现在定义，所有的接口可以选传一个参数 <code>mediaType</code>，如果值为xml，则返回xml格式数据；如果值为json，则返回json格式数据</p><p>当不传时，默认返回json格式数据</p><p>基于此，我们主要借助mvc配置中的内容协商<code>ContentNegotiationConfigurer</code>来实现</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureContentNegotiation</span><span class="token punctuation">(</span><span class="token class-name">ContentNegotiationConfigurer</span> configurer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        configurer<span class="token punctuation">.</span><span class="token function">favorParameter</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
                <span class="token comment">// 禁用accept协商方式，即不关心前端传的accept值</span>
<span class="token comment">//                .ignoreAcceptHeader(true)</span>
                <span class="token comment">// 哪个放在前面，哪个的优先级就高； 当上面这个accept未禁用时，若请求传的accept不能覆盖下面两种，则会出现406错误</span>
                <span class="token punctuation">.</span><span class="token function">defaultContentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">,</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_XML</span><span class="token punctuation">)</span>
                <span class="token comment">// 根据传参mediaType来决定返回样式</span>
                <span class="token punctuation">.</span><span class="token function">parameterName</span><span class="token punctuation">(</span><span class="token string">&quot;mediaType&quot;</span><span class="token punctuation">)</span>
                <span class="token comment">// 当acceptHeader未禁用时，accept的值与mediaType传参的值不一致时，以mediaType的传值为准</span>
                <span class="token comment">// mediaType值可以不传，为空也行，但是不能是json/xml之外的其他值</span>
                <span class="token punctuation">.</span><span class="token function">mediaType</span><span class="token punctuation">(</span><span class="token string">&quot;json&quot;</span><span class="token punctuation">,</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">mediaType</span><span class="token punctuation">(</span><span class="token string">&quot;xml&quot;</span><span class="token punctuation">,</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_XML</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的实现中，添加了很多注释，先别急；我来逐一进行说明</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">.</span><span class="token function">parameterName</span><span class="token punctuation">(</span><span class="token string">&quot;mediaType&quot;</span><span class="token punctuation">)</span>
<span class="token comment">// 当acceptHeader未禁用时，accept的值与mediaType传参的值不一致时，以mediaType的传值为准</span>
<span class="token comment">// mediaType值可以不传，为空也行，但是不能是json/xml之外的其他值</span>
<span class="token punctuation">.</span><span class="token function">mediaType</span><span class="token punctuation">(</span><span class="token string">&quot;json&quot;</span><span class="token punctuation">,</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">mediaType</span><span class="token punctuation">(</span><span class="token string">&quot;xml&quot;</span><span class="token punctuation">,</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_XML</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这三行代码，主要就是说，现在可以根据传参 mediaType 来控制返回的类型，我们新增一个接口来验证一下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;param&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">ResVo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">params</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;mediaType&quot;</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">String</span> mediaType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResVo</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;ok&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;基于传参来决定返回类型：%s&quot;</span><span class="token punctuation">,</span> mediaType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们来看下几个不同的传参表现</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 返回json格式数据</span>
<span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080/param?mediaType=json&#39;</span> <span class="token parameter variable">-iv</span>
<span class="token comment"># 返回xml格式数据</span>
<span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080/param?mediaType=xml&#39;</span> <span class="token parameter variable">-iv</span>
<span class="token comment"># 406错误</span>
<span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080/param?mediaType=text&#39;</span> <span class="token parameter variable">-iv</span>
<span class="token comment"># 走默认的返回类型，json在前，所以返回json格式数据（如果将xml调整到前面，则返回xml格式数据，主要取决于 \`.defaultContentType(MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML)\`）</span>
<span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080/param&#39;</span> <span class="token parameter variable">-iv</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+m+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>疑问：若请求头中传递了Accept或者接口上定义了produce，会怎样?</strong></p><p>当指定了accept时，并且传参中指定了mediaType，则以传参为准</p><ul><li>如<code>accept: application/json,application.xml</code>， 此时<code>mediaType=json</code>, 返回json格式</li><li>如<code>accept: application/json</code>, 此时 <code>mediaTyep=xml</code>， 返回xml格式</li><li>如<code>accept: text/html</code>，此时<code>mediaType=xml</code> ，此时返回的也是xml格式</li><li>如<code>accept: text/html</code>，此时<code>mediaType</code>不传时 ，因为无法处理<code>text/html</code>类型，所以会出现406</li><li>如<code>accept: application/xml</code>， 但是<code>mediaType</code>不传，虽然默认优先是json，此时返回的也是xml格式，与请求头希望的保持一致</li></ul><p>但是若传参与produce冲突了，那么就直接406异常，不会选择mediaType设置的类型</p><ul><li>如<code>produce = applicatin/json</code>， 但是 <code>mediaType=xml</code>，此时就会喜提406</li></ul><p>细心的小伙伴可能发现了上面的配置中，注释了一行 <code>.ignoreAcceptHeader(true)</code>，当我们把它打开之后，前面说的Accept请求头可以随意传，我们完全不care，当做没有传这个参数进行处理即可开</p><h3 id="_4-小结" tabindex="-1"><a class="header-anchor" href="#_4-小结" aria-hidden="true">#</a> 4.小结</h3><p>本文介绍了三种方式，控制接口返回数据类型</p><p><strong>方式一</strong></p><p>接口上定义produce, 如 <code>@GetMapping(path = &quot;p2&quot;, produces = {&quot;application/xml&quot;, &quot;application/json&quot;})</code></p><p>注意produces属性值是有序的，即先定义的优先级更高；当一个请求可以同时接受xml/json格式数据时，上面这个定义会确保这个接口现有返回xml格式数据</p><p><strong>方式二</strong></p><p>借助标准的请求头accept，控制希望返回的数据类型；但是需要注意的时，使用这种方式时，要求后端不能设置<code>ContentNegotiationConfigurer.ignoreAcceptHeader(true)</code></p><p>在实际使用这种方式的时候，客户端需要额外注意，Accept请求头中定义的MediaType的顺序，是优于后端定义的produces顺序的，因此用户需要将自己实际希望接受的数据类型放在前面，或者干脆就只设置一个</p><p><strong>方式三</strong></p><p>借助<code>ContentNegotiationConfigurer</code>实现通过请求参数来决定返回类型，常见的配置方式形如</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>configurer<span class="token punctuation">.</span><span class="token function">favorParameter</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
        <span class="token comment">// 禁用accept协商方式，即不关心前端传的accept值</span>
      <span class="token comment">//                .ignoreAcceptHeader(true)</span>
        <span class="token comment">// 哪个放在前面，哪个的优先级就高； 当上面这个accept未禁用时，若请求传的accept不能覆盖下面两种，则会出现406错误</span>
        <span class="token punctuation">.</span><span class="token function">defaultContentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">,</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_XML</span><span class="token punctuation">)</span>
        <span class="token comment">// 根据传参mediaType来决定返回样式</span>
        <span class="token punctuation">.</span><span class="token function">parameterName</span><span class="token punctuation">(</span><span class="token string">&quot;mediaType&quot;</span><span class="token punctuation">)</span>
        <span class="token comment">// 当acceptHeader未禁用时，accept的值与mediaType传参的值不一致时，以mediaType的传值为准</span>
        <span class="token comment">// mediaType值可以不传，为空也行，但是不能是json/xml之外的其他值</span>
        <span class="token punctuation">.</span><span class="token function">mediaType</span><span class="token punctuation">(</span><span class="token string">&quot;json&quot;</span><span class="token punctuation">,</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">mediaType</span><span class="token punctuation">(</span><span class="token string">&quot;xml&quot;</span><span class="token punctuation">,</span> <span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_XML</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>即添加这个设置之后，最终的表现为：</p><ol><li>请求参数指定的返回类型，优先级最高，返回指定参数对应的类型</li><li>没有指定参数时，选择defaultContentType定义的默认返回类型与接口 <code>produce</code>中支持的求交集，优先级则按照defaultContentType中定义的顺序来选择</li><li>没有指定参数时，若此时还有accept请求头，则请求头中定义顺序的优先级高于 defaultContentType， 高于 produce</li></ol><p>注意注意：当配置中忽略了AcceptHeader时，<code>.ignoreAcceptHeader(true)</code>，上面第三条作废</p>`,67),h={href:"https://hhui.top/spring-web/02.response/",target:"_blank",rel:"noopener noreferrer"},f=n("h2",{id:"iii-不能错过的源码和相关知识点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#iii-不能错过的源码和相关知识点","aria-hidden":"true"},"#"),s(" III. 不能错过的源码和相关知识点")],-1),_=n("h3",{id:"_0-项目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0-项目","aria-hidden":"true"},"#"),s(" 0. 项目")],-1),x={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"},T={href:"https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/204-web-xml-json",target:"_blank",rel:"noopener noreferrer"};function j(q,A){const a=l("ExternalLinkIcon");return e(),o("div",null,[g,b,c(" more "),y,n("p",null,[s("最后的最后，本文所有的源码可以再下面的git中获取；本文的知识点已经汇总在"),n("a",h,[s("《一灰灰的Spring专栏》"),t(a)]),s(" 两百多篇的原创系列博文，你值得拥有；我是一灰灰，咱们下次再见")]),f,_,n("ul",null,[n("li",null,[s("工程："),n("a",x,[s("https://github.com/liuyueyi/spring-boot-demo"),t(a)])]),n("li",null,[s("源码："),n("a",T,[s("https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/204-web-xml-json"),t(a)])])])])}const I=p(v,[["render",j],["__file","220817-SpringBoot系列之定义接口返回类型的几种方式.html.vue"]]);export{I as default};
