import{_ as p,V as o,W as c,X as i,Y as n,Z as s,$ as t,a1 as e,F as l}from"./framework-094145d2.js";const u="/tutorial/imgs/220422/00.jpg",r="/tutorial/imgs/220422/01.jpg",d="/tutorial/imgs/220422/02.jpg",k="/tutorial/imgs/220422/03.jpg",m="/tutorial/imgs/220422/04.jpg",v={},g=n("p",null,[s("现在SpringBoot应用大多是内嵌tomcat，以jar包方式启动对外提供服务，最近遇到一个有意思的问题，当我希望输出tomcat的 "),n("code",null,"access.log"),s(" 时，添加上对应的配置之后，发现windowns系统下找不到这个日志文件，而linux/mac则没有什么问题；")],-1),b=n("p",null,"所以花了些时间定位一下，本文将记录定位这个日志文件生成的全过程，当发现最后的结论时，更让我吃惊的事情来了，就这么个问题，在三年前我也遇到过，只不过当时的问题是上传文件之后，提示临时目录不存在，而这个临时目录和本文定位的目录居然是一回事，可谓是来了一次梦幻的联动，前面踩的坑不探究到底，后面迟早会继续掉坑😂",-1),h=e(`<h2 id="i-项目搭建与日志配置" tabindex="-1"><a class="header-anchor" href="#i-项目搭建与日志配置" aria-hidden="true">#</a> I. 项目搭建与日志配置</h2><h3 id="_1-项目依赖" tabindex="-1"><a class="header-anchor" href="#_1-项目依赖" aria-hidden="true">#</a> 1. 项目依赖</h3><p>本项目借助SpringBoot 2.2.1.RELEASE + maven 3.5.3 + IDEA进行开发</p><p>启动一个标准的SpringBoot项目，注意添加下面的依赖如下 （本文对应的源码可以在文末查看）</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-tomcat日志配置" tabindex="-1"><a class="header-anchor" href="#_2-tomcat日志配置" aria-hidden="true">#</a> 2. tomcat日志配置</h3><p>tomcat的日志配置信息，下面放在默认的配置文件 <code>application.yml</code> 中，主要有下面几个关键参数</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>
  <span class="token key atrule">tomcat</span><span class="token punctuation">:</span>
    <span class="token key atrule">accesslog</span><span class="token punctuation">:</span>
      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
      <span class="token key atrule">directory</span><span class="token punctuation">:</span> /tmp/logs/boot
      <span class="token key atrule">file-date-format</span><span class="token punctuation">:</span> .yyyyMMdd
      <span class="token key atrule">pattern</span><span class="token punctuation">:</span> <span class="token string">&#39;%h %l %u %t &quot;%r&quot; %s %b %Dms &quot;%{Referer}i&quot; &quot;%{User-Agent}i&quot; &quot;%{X-Request-ID}i&quot; &quot;%{X-Forwarded-For}i&quot;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-一个简单的rest接口" tabindex="-1"><a class="header-anchor" href="#_3-一个简单的rest接口" aria-hidden="true">#</a> 3. 一个简单的rest接口</h3><p>添加一个基础的rest接口，用于接收请求</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">DalConfig</span> dalConfig<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Application</span><span class="token punctuation">(</span><span class="token class-name">DalConfig</span> dalConfig<span class="token punctuation">,</span> <span class="token class-name">Environment</span> environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>dalConfig <span class="token operator">=</span> dalConfig<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dalConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span> application <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringApplication</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        application<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/index&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来请求一下接口，看下日志是否正常</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080/&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果是mac/linux系统的同学，就可以到 <code>/tmp/logs/boot</code> 目录下查看有没有对应的日志文件了，那么win的同学，到哪里看？</p><h2 id="ii-日志文件目录定位" tabindex="-1"><a class="header-anchor" href="#ii-日志文件目录定位" aria-hidden="true">#</a> II. 日志文件目录定位</h2><p>由于win和mac/linux对绝对路径的定义不同，就会导致我们用到这个问题，一般来说，实际的项目最终都是跑在linux系统上，所以文件路径以上面的case居多，很少会说加一个 <code>c:</code>，<code>d:</code>开头的</p><p>那么问题就来了，同样一份代码，win开发的同学到哪里去找日志</p><h3 id="_1-源码定位" tabindex="-1"><a class="header-anchor" href="#_1-源码定位" aria-hidden="true">#</a> 1. 源码定位</h3><p>我们这里讨论的是内嵌Tomcat，要想定位日志文件在哪里，就需要先找一下这个日志哪里输出的，</p><p>直接google搜索一下关键字，就可以得到有用的信息</p><figure><img src="`+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上面的第一项，给出了一个核心的类 <code>AccessLogValve</code>，一下子就找到关键点了，核心地方打个端点，启动一下看看是怎样的</p><figure><img src="'+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上面这个地址就是我们找的目标路径，那么这个是怎么来的呢？这个前缀有什么套路么？</p><p>核心来源点 <code>File dir = this.getDirectoryFile();</code>，对应的实现</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token class-name">File</span> <span class="token function">getDirectoryFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这个directory就是我们对应的配置参数 server.tomcat.access_log.directory</span>
        <span class="token class-name">File</span> dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>directory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dir<span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            dir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCatalinaBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>directory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> dir<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以重点需要关注 <code>this.getContainer().getCatalinaBase()</code>， 上面这个它对应的实例为<code>org.apache.catalina.core.StandardEngine#getCatalinaBase</code></p><p>接着向上朔源，可以找到设置这个路径的地方，在<code>org.apache.catalina.startup.Tomcat#initBaseDir</code></p><figure><img src="`+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>最后就是定位baseDir的初始化了，再网上找一下，可以看到关键信息</p><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>再直达一步，原来这个目录创建是基于 <code>jdk</code>的<code>File.createTempFile()</code>来实现的，又学到一个没什么鸟用的知识点了</p><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-小结" tabindex="-1"><a class="header-anchor" href="#_2-小结" aria-hidden="true">#</a> 2. 小结</h3><p>本文可能对大部分小伙伴来说没什么鸟用，基本上也不太会有用到需要取查找tomcat的访问日志<code>access.log</code>的时候（这里指SpringBoot应用），在定位这个具体路径的时候，想起了很久之前也踩过的一个坑，上传文件时，提示临时目录不存在，而这个目录和我们上面查找定位的可以说是一个地方了，仔细看来，现在算是填了一个时隔三年的坑了😁</p>',35),y={href:"https://spring.hhui.top/spring-blog/2019/02/13/190213-SpringBoot%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%BC%82%E5%B8%B8%E4%B9%8B%E6%8F%90%E7%A4%BAThe-temporary-upload-location-xxx-is-not-valid/",target:"_blank",rel:"noopener noreferrer"},f=e(`<p>最后小结下本文对应的知识点</p><p><strong>tip1 accesslog日志配置</strong></p><p>核心配置信息如下</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>
  <span class="token key atrule">tomcat</span><span class="token punctuation">:</span>
    <span class="token key atrule">accesslog</span><span class="token punctuation">:</span>
      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 设置为true，表示输出 accesslog 日志</span>
      <span class="token key atrule">directory</span><span class="token punctuation">:</span> /logs/boot  <span class="token comment"># 日志文件所在的目录，注意不同操作系统，对绝对路径的定位不同</span>
      <span class="token key atrule">file-date-format</span><span class="token punctuation">:</span> .yyyyMMdd <span class="token comment"># 按日期进行归档</span>
      <span class="token key atrule">pattern</span><span class="token punctuation">:</span> <span class="token string">&#39;%h %l %u %t &quot;%r&quot; %s %b %Dms &quot;%{Referer}i&quot; &quot;%{User-Agent}i&quot; &quot;%{X-Request-ID}i&quot; &quot;%{X-Forwarded-For}i&quot;&#39;</span> <span class="token comment"># 日志输出格式，类似Logback配置</span>
<span class="token comment">#    basedir: /logs  # 全局基本目录，如果配置，则日志文件对应的目录为 basedir + directory</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>tip2 绝对路径的判断</strong></p><p>在Tomcat中，对于绝对路径的判断非常有参考价值，当然也可能是因为我对于jdk基本的api不够熟悉的原因 ，之前我的判断方式是</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 是否windows系统
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isWinOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">boolean</span> isWinOS <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> osName <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;os.name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> sharpOsName <span class="token operator">=</span> osName<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&quot;windows&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;{windows}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&quot;^win([^a-z])&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;{windows}$1&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&quot;([^a-z])win([^a-z])&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;$1{windows}$2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        isWinOS <span class="token operator">=</span> sharpOsName<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;{windows}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> isWinOS<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isAbsFile</span><span class="token punctuation">(</span><span class="token class-name">String</span> fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isWinOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// windows 操作系统时，绝对地址形如  c:\\descktop</span>
        <span class="token keyword">return</span> fileName<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;:&quot;</span><span class="token punctuation">)</span> <span class="token operator">||</span> fileName<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// mac or linux</span>
        <span class="token keyword">return</span> fileName<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在则有更简单的方式了</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isAbs</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAbsolute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>tip3 临时目录创建</strong></p><p>同样是直接借助File来实现， <code>File.createTempFile</code> 即可，下面是Tomcat的创建方式，还非常贴心的加上了虚拟机终止时，自动删除相关的文件</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Return the absolute temp dir for given web server.
 * <span class="token keyword">@param</span> <span class="token parameter">prefix</span> server name
 * <span class="token keyword">@return</span> the temp dir for given server.
 */</span>
<span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">File</span> <span class="token function">createTempDir</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefix<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">File</span> tempDir <span class="token operator">=</span> <span class="token class-name">File</span><span class="token punctuation">.</span><span class="token function">createTempFile</span><span class="token punctuation">(</span>prefix <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.&quot;</span> <span class="token operator">+</span> <span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tempDir<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tempDir<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tempDir<span class="token punctuation">.</span><span class="token function">deleteOnExit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> tempDir<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">WebServerException</span><span class="token punctuation">(</span>
                <span class="token string">&quot;Unable to create tempDir. java.io.tmpdir is set to &quot;</span> <span class="token operator">+</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;java.io.tmpdir&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iii-不能错过的源码和相关知识点" tabindex="-1"><a class="header-anchor" href="#iii-不能错过的源码和相关知识点" aria-hidden="true">#</a> III. 不能错过的源码和相关知识点</h2><h3 id="_0-项目" tabindex="-1"><a class="header-anchor" href="#_0-项目" aria-hidden="true">#</a> 0. 项目</h3>`,14),_={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"},w={href:"https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/001-properties-env-mvn",target:"_blank",rel:"noopener noreferrer"},q=n("h3",{id:"_1-微信公众号-一灰灰blog",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-微信公众号-一灰灰blog","aria-hidden":"true"},"#"),s(" 1. 微信公众号: 一灰灰Blog")],-1),x=n("p",null,"尽信书则不如，以上内容，纯属一家之言，因个人能力有限，难免有疏漏和错误之处，如发现bug或者有更好的建议，欢迎批评指正，不吝感激",-1),B=n("p",null,"下面一灰灰的个人博客，记录所有学习和工作中的博文，欢迎大家前去逛逛",-1),S={href:"https://blog.hhui.top",target:"_blank",rel:"noopener noreferrer"},j={href:"http://spring.hhui.top",target:"_blank",rel:"noopener noreferrer"},F=n("figure",null,[n("img",{src:"https://spring.hhui.top/spring-blog/imgs/info/info.png",alt:"一灰灰blog",tabindex:"0",loading:"lazy"}),n("figcaption",null,"一灰灰blog")],-1);function A(E,C){const a=l("ExternalLinkIcon");return o(),c("div",null,[g,b,i(" more "),h,n("blockquote",null,[n("ul",null,[n("li",null,[n("a",y,[s("【WEB系列】SpringBoot文件上传异常之提示The temporary upload location xxx is not valid（填坑篇） | 一灰灰Blog"),t(a)])])])]),f,n("ul",null,[n("li",null,[s("工程："),n("a",_,[s("https://github.com/liuyueyi/spring-boot-demo"),t(a)])]),n("li",null,[s("源码："),n("a",w,[s("https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/001-properties-env-mvn"),t(a)])])]),q,x,B,n("ul",null,[n("li",null,[s("一灰灰Blog个人博客 "),n("a",S,[s("https://blog.hhui.top"),t(a)])]),n("li",null,[s("一灰灰Blog-Spring专题博客 "),n("a",j,[s("http://spring.hhui.top"),t(a)])])]),F])}const I=p(v,[["render",A],["__file","220422-SpringBoot内嵌tomcat配置accesslog日志文件生成位置探究.html.vue"]]);export{I as default};
