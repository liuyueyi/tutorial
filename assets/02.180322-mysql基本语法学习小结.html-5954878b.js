import{_ as p,V as t,W as o,X as l,Y as s,Z as a,$ as c,a1 as n,F as i}from"./framework-094145d2.js";const r={},d=s("p",null,"本篇将主要集中在mysql的使用上，包括如何创建标，如何进行insert,update,select,delete，以及一些常见的sql中关键字的使用姿势",-1),u=n('<h2 id="i-数据库管理相关" tabindex="-1"><a class="header-anchor" href="#i-数据库管理相关" aria-hidden="true">#</a> I. 数据库管理相关</h2><p>首先是从结构上知晓，一般的关系型数据库，先创建database(数据库), 然后可以在database中创建多个table(表)</p><p>通常，在业务稍微大一点的公司而言，不会把所有的数据都放在一个database中，相反会根据不同的业务，创建不同的database，然后在各自的database中维护自己的表，好处就是不会相互影响，后续扩容也方便</p><h3 id="_1-创建database" tabindex="-1"><a class="header-anchor" href="#_1-创建database" aria-hidden="true">#</a> 1. 创建database</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>create database test\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-切换databasae" tabindex="-1"><a class="header-anchor" href="#_2-切换databasae" aria-hidden="true">#</a> 2. 切换databasae</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>user test\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-删除database" tabindex="-1"><a class="header-anchor" href="#_3-删除database" aria-hidden="true">#</a> 3. 删除database</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>drop databse test\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-显示所有数据库" tabindex="-1"><a class="header-anchor" href="#_4-显示所有数据库" aria-hidden="true">#</a> 4. 显示所有数据库</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>show databases\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="ii-表相关" tabindex="-1"><a class="header-anchor" href="#ii-表相关" aria-hidden="true">#</a> II. 表相关</h2><p>主要的操作都是针对表来的，因为数据就是挂在这个下面的</p><h3 id="_1-创建表" tabindex="-1"><a class="header-anchor" href="#_1-创建表" aria-hidden="true">#</a> 1. 创建表</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>newuser<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>\n  <span class="token identifier"><span class="token punctuation">`</span>userId<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;用户id&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>username<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;用户登录名&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>nickname<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;用户昵称&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>password<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;用户登录密码 &amp; 密文根式&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>address<span class="token punctuation">`</span></span> <span class="token keyword">text</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;用户地址&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>email<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;用户邮箱&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>phone<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;0&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;用户手机号&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>img<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;用户头像&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>extra<span class="token punctuation">`</span></span> <span class="token keyword">text</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>isDeleted<span class="token punctuation">`</span></span> <span class="token keyword">tinyint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>created<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>updated<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>userId<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>idx_username<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>username<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>idx_nickname<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>nickname<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>idx_email<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>email<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>idx_phone<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>phone<span class="token punctuation">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">3</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">&#39;自定义表&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建表的规则还是比较简单的，一般语法是：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> tableName<span class="token punctuation">(</span>\n    列名 <span class="token operator">+</span>  列类型 <span class="token operator">+</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">(</span>可选，表示这个字段不能为空<span class="token punctuation">)</span>  <span class="token operator">+</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;&#39;</span> <span class="token punctuation">(</span>可选，表示默认填充的数据<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">COMMENT</span> <span class="token punctuation">(</span>后面加上这一列的注释<span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 这个指定主键</span>\n    <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>idx_firstId<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token comment">// 这个是指定索引</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token punctuation">(</span>指定存储引擎<span class="token punctuation">)</span>  <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">1</span> （自增开始值） <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 （默认编码） <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">&#39;自定义表&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意一点，一个表的设计时，最好不要让某一列可以为null，而且良好的习惯是加上DEFALUT默认值，加上列的注释（特别是type的取值固定为1,2,3,4时，尽量在说明中写上每个值的含义）</p><h3 id="_2-显示表信息" tabindex="-1"><a class="header-anchor" href="#_2-显示表信息" aria-hidden="true">#</a> 2. 显示表信息</h3><p>如果我们是在控制台中来上mysql进行相关操作时，非常常见的一个命令就是如何查看表的数据结构，有几个命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>desc table_name<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出格式如下:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>+-----------+---------------------+------+-----+---------+----------------+\n<span class="token operator">|</span> Field     <span class="token operator">|</span> Type                <span class="token operator">|</span> Null <span class="token operator">|</span> Key <span class="token operator">|</span> Default <span class="token operator">|</span> Extra          <span class="token operator">|</span>\n+-----------+---------------------+------+-----+---------+----------------+\n<span class="token operator">|</span> userId    <span class="token operator">|</span> bigint<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>          <span class="token operator">|</span> NO   <span class="token operator">|</span> PRI <span class="token operator">|</span> NULL    <span class="token operator">|</span> auto_increment <span class="token operator">|</span>\n<span class="token operator">|</span> username  <span class="token operator">|</span> varchar<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>         <span class="token operator">|</span> YES  <span class="token operator">|</span> MUL <span class="token operator">|</span>         <span class="token operator">|</span>                <span class="token operator">|</span>\n<span class="token operator">|</span> nickname  <span class="token operator">|</span> varchar<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>         <span class="token operator">|</span> NO   <span class="token operator">|</span> MUL <span class="token operator">|</span>         <span class="token operator">|</span>                <span class="token operator">|</span>\n<span class="token operator">|</span> password  <span class="token operator">|</span> varchar<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>         <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span>         <span class="token operator">|</span>                <span class="token operator">|</span>\n<span class="token operator">|</span> address   <span class="token operator">|</span> text                <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> NULL    <span class="token operator">|</span>                <span class="token operator">|</span>\n<span class="token operator">|</span> email     <span class="token operator">|</span> varchar<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>         <span class="token operator">|</span> NO   <span class="token operator">|</span> MUL <span class="token operator">|</span>         <span class="token operator">|</span>                <span class="token operator">|</span>\n<span class="token operator">|</span> phone     <span class="token operator">|</span> bigint<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>          <span class="token operator">|</span> NO   <span class="token operator">|</span> MUL <span class="token operator">|</span> <span class="token number">0</span>       <span class="token operator">|</span>                <span class="token operator">|</span>\n<span class="token operator">|</span> img       <span class="token operator">|</span> varchar<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>        <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span>         <span class="token operator">|</span>                <span class="token operator">|</span>\n<span class="token operator">|</span> extra     <span class="token operator">|</span> text                <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> NULL    <span class="token operator">|</span>                <span class="token operator">|</span>\n<span class="token operator">|</span> isDeleted <span class="token operator">|</span> tinyint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> unsigned <span class="token operator">|</span> NO   <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token number">0</span>       <span class="token operator">|</span>                <span class="token operator">|</span>\n<span class="token operator">|</span> created   <span class="token operator">|</span> int<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>             <span class="token operator">|</span> NO   <span class="token operator">|</span>     <span class="token operator">|</span> NULL    <span class="token operator">|</span>                <span class="token operator">|</span>\n<span class="token operator">|</span> updated   <span class="token operator">|</span> int<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>             <span class="token operator">|</span> NO   <span class="token operator">|</span>     <span class="token operator">|</span> NULL    <span class="token operator">|</span>                <span class="token operator">|</span>\n+-----------+---------------------+------+-----+---------+----------------+\n<span class="token number">12</span> rows <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我希望获取这个表的建表语句，方便直接创建表，也可以用下面的命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>show create table tableName<span class="token punctuation">\\</span>G\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>*************************** <span class="token number">1</span>. row ***************************\n       Table: newuser\nCreate Table: CREATE TABLE <span class="token variable"><span class="token variable">`</span>newuser<span class="token variable">`</span></span> <span class="token punctuation">(</span>\n  <span class="token variable"><span class="token variable">`</span>userId<span class="token variable">`</span></span> bigint<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> NOT NULL AUTO_INCREMENT COMMENT <span class="token string">&#39;用户id&#39;</span>,\n  <span class="token variable"><span class="token variable">`</span>username<span class="token variable">`</span></span> varchar<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> DEFAULT <span class="token string">&#39;&#39;</span> COMMENT <span class="token string">&#39;用户登录名&#39;</span>,\n  <span class="token variable"><span class="token variable">`</span>nickname<span class="token variable">`</span></span> varchar<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> NOT NULL DEFAULT <span class="token string">&#39;&#39;</span> COMMENT <span class="token string">&#39;用户昵称&#39;</span>,\n  <span class="token variable"><span class="token variable">`</span>password<span class="token variable">`</span></span> varchar<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> DEFAULT <span class="token string">&#39;&#39;</span> COMMENT <span class="token string">&#39;用户登录密码 &amp; 密文根式&#39;</span>,\n  <span class="token variable"><span class="token variable">`</span>address<span class="token variable">`</span></span> text COMMENT <span class="token string">&#39;用户地址&#39;</span>,\n  <span class="token variable"><span class="token variable">`</span>email<span class="token variable">`</span></span> varchar<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> NOT NULL DEFAULT <span class="token string">&#39;&#39;</span> COMMENT <span class="token string">&#39;用户邮箱&#39;</span>,\n  <span class="token variable"><span class="token variable">`</span>phone<span class="token variable">`</span></span> bigint<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> NOT NULL DEFAULT <span class="token string">&#39;0&#39;</span> COMMENT <span class="token string">&#39;用户手机号&#39;</span>,\n  <span class="token variable"><span class="token variable">`</span>img<span class="token variable">`</span></span> varchar<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> DEFAULT <span class="token string">&#39;&#39;</span> COMMENT <span class="token string">&#39;用户头像&#39;</span>,\n  <span class="token variable"><span class="token variable">`</span>extra<span class="token variable">`</span></span> text,\n  <span class="token variable"><span class="token variable">`</span>isDeleted<span class="token variable">`</span></span> tinyint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> unsigned NOT NULL DEFAULT <span class="token string">&#39;0&#39;</span>,\n  <span class="token variable"><span class="token variable">`</span>created<span class="token variable">`</span></span> int<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> NOT NULL,\n  <span class="token variable"><span class="token variable">`</span>updated<span class="token variable">`</span></span> int<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> NOT NULL,\n  PRIMARY KEY <span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span>userId<span class="token variable">`</span></span><span class="token punctuation">)</span>,\n  KEY <span class="token variable"><span class="token variable">`</span>idx_username<span class="token variable">`</span></span> <span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span>username<span class="token variable">`</span></span><span class="token punctuation">)</span>,\n  KEY <span class="token variable"><span class="token variable">`</span>idx_nickname<span class="token variable">`</span></span> <span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span>nickname<span class="token variable">`</span></span><span class="token punctuation">)</span>,\n  KEY <span class="token variable"><span class="token variable">`</span>idx_email<span class="token variable">`</span></span> <span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span>email<span class="token variable">`</span></span><span class="token punctuation">)</span>,\n  KEY <span class="token variable"><span class="token variable">`</span>idx_phone<span class="token variable">`</span></span> <span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span>phone<span class="token variable">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token assign-left variable">ENGINE</span><span class="token operator">=</span>InnoDB <span class="token assign-left variable">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">3</span> DEFAULT <span class="token assign-left variable">CHARSET</span><span class="token operator">=</span>utf8\n<span class="token number">1</span> row <span class="token keyword">in</span> <span class="token builtin class-name">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-修改表" tabindex="-1"><a class="header-anchor" href="#_3-修改表" aria-hidden="true">#</a> 3. 修改表</h3><p>重命名表名</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">rename</span> <span class="token keyword">table</span> <span class="token identifier"><span class="token punctuation">`</span>oldTableName<span class="token punctuation">`</span></span> <span class="token keyword">to</span> <span class="token identifier"><span class="token punctuation">`</span>newTableName<span class="token punctuation">`</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>新加字段</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 修改类型</span>\n<span class="token keyword">alter</span> <span class="token keyword">table</span> newuser <span class="token keyword">add</span> newcol <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">comment</span> <span class="token string">&#39;新加的列&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>修改列</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 修改类型</span>\n<span class="token keyword">alter</span> <span class="token keyword">table</span> newuser <span class="token keyword">modify</span> newcol <span class="token keyword">text</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span>\n\n\n<span class="token comment">-- 修改名</span>\n<span class="token keyword">alter</span> <span class="token keyword">table</span> newuser change <span class="token identifier"><span class="token punctuation">`</span>newcol<span class="token punctuation">`</span></span> <span class="token identifier"><span class="token punctuation">`</span>newcol2<span class="token punctuation">`</span></span> <span class="token keyword">text</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除列</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">alter</span> <span class="token keyword">table</span> newuser <span class="token keyword">drop</span> newcol2<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>删除表</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">drop</span> <span class="token keyword">table</span> newuser<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-增删改查" tabindex="-1"><a class="header-anchor" href="#_4-增删改查" aria-hidden="true">#</a> 4. 增删改查</h3><p>对DB的操作，基本上就四种了，增删改查，甚至绝大多数的业务都可以用简单的db的增删改查来实现</p><h4 id="a-插入一条数据" tabindex="-1"><a class="header-anchor" href="#a-插入一条数据" aria-hidden="true">#</a> a. 插入一条数据</h4><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- insert into table_name(`列名`, `列名`) values(&#39;插入值&#39;, &#39;插入值&#39;);</span>\n\n<span class="token keyword">insert</span> <span class="token keyword">into</span> newuser<span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>username<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>nickname<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>password<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>address<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>email<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>phone<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>img<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>extra<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>isDeleted<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>created<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>updated<span class="token punctuation">`</span></span><span class="token punctuation">)</span> \n<span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">&#39;insert&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;insert&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;insert&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;test@test.com&#39;</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">&#39;img&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1521638764</span><span class="token punctuation">,</span> <span class="token number">1521638764</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="b-查询数据" tabindex="-1"><a class="header-anchor" href="#b-查询数据" aria-hidden="true">#</a> b. 查询数据</h4><p>select用于查询，先给出一个最基本的，下面再详细说明</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> newuser <span class="token keyword">where</span> username<span class="token operator">=</span><span class="token string">&#39;insert&#39;</span> <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面表示查询 username为insert的记录，输出结果(也就是刚才插入的那一条数据)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>+--------+----------+----------+----------+---------+---------------+-------+------+-------+-----------+------------+------------+\n<span class="token operator">|</span> userId <span class="token operator">|</span> username <span class="token operator">|</span> nickname <span class="token operator">|</span> password <span class="token operator">|</span> address <span class="token operator">|</span> email         <span class="token operator">|</span> phone <span class="token operator">|</span> img  <span class="token operator">|</span> extra <span class="token operator">|</span> isDeleted <span class="token operator">|</span> created    <span class="token operator">|</span> updated    <span class="token operator">|</span>\n+--------+----------+----------+----------+---------+---------------+-------+------+-------+-----------+------------+------------+\n<span class="token operator">|</span>      <span class="token number">3</span> <span class="token operator">|</span> insert   <span class="token operator">|</span> insert   <span class="token operator">|</span> insert   <span class="token operator">|</span> <span class="token builtin class-name">test</span>    <span class="token operator">|</span> test@test.com <span class="token operator">|</span>   <span class="token number">123</span> <span class="token operator">|</span> img  <span class="token operator">|</span>       <span class="token operator">|</span>         <span class="token number">0</span> <span class="token operator">|</span> <span class="token number">1521638764</span> <span class="token operator">|</span> <span class="token number">1521638764</span> <span class="token operator">|</span>\n+--------+----------+----------+----------+---------+---------------+-------+------+-------+-----------+------------+------------+\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="c-修改数据" tabindex="-1"><a class="header-anchor" href="#c-修改数据" aria-hidden="true">#</a> c. 修改数据</h4><p>将之前插入的记录中，nickname 修改成 &#39;newNickName&#39;, 借助 <code>update set</code> 语法实现</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">update</span> newuser <span class="token keyword">set</span> nickname<span class="token operator">=</span><span class="token string">&#39;newNickName&#39;</span> <span class="token keyword">where</span> userId<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>\n\n<span class="token comment">-- 再次查询验证</span>\n\n<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> newuser <span class="token keyword">where</span> username<span class="token operator">=</span><span class="token string">&#39;insert&#39;</span> <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>+--------+----------+-------------+----------+---------+---------------+-------+------+-------+-----------+------------+------------+\n<span class="token operator">|</span> userId <span class="token operator">|</span> username <span class="token operator">|</span> nickname    <span class="token operator">|</span> password <span class="token operator">|</span> address <span class="token operator">|</span> email         <span class="token operator">|</span> phone <span class="token operator">|</span> img  <span class="token operator">|</span> extra <span class="token operator">|</span> isDeleted <span class="token operator">|</span> created    <span class="token operator">|</span> updated    <span class="token operator">|</span>\n+--------+----------+-------------+----------+---------+---------------+-------+------+-------+-----------+------------+------------+\n<span class="token operator">|</span>      <span class="token number">3</span> <span class="token operator">|</span> insert   <span class="token operator">|</span> newNickName <span class="token operator">|</span> insert   <span class="token operator">|</span> <span class="token builtin class-name">test</span>    <span class="token operator">|</span> test@test.com <span class="token operator">|</span>   <span class="token number">123</span> <span class="token operator">|</span> img  <span class="token operator">|</span>       <span class="token operator">|</span>         <span class="token number">0</span> <span class="token operator">|</span> <span class="token number">1521638764</span> <span class="token operator">|</span> <span class="token number">1521638764</span> <span class="token operator">|</span>\n+--------+----------+-------------+----------+---------+---------------+-------+------+-------+-----------+------------+------------+\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="d-将刚才的数据删掉" tabindex="-1"><a class="header-anchor" href="#d-将刚才的数据删掉" aria-hidden="true">#</a> d. 将刚才的数据删掉</h4><p>说明，在实际的生产环境中，一般很少物理删除（即执行delete将记录彻底抹掉），更多的是采用逻辑删除的方案（至少还有恢复的可能，而且数据都是宝贵的，虽然大部分时候我们都没有去挖掘，但保存着总比丢掉好）</p><p>物理删除的语法比较简单，但是需要额外小心，一不小心删错了，说不准就得卷铺盖滚蛋了</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">delete</span> <span class="token keyword">from</span> newuser <span class="token keyword">where</span> userId<span class="token operator">=</span><span class="token number">3</span> <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">;</span>\n\n<span class="token comment">-- 再次查询验证</span>\n\n<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> newuser <span class="token keyword">where</span> username<span class="token operator">=</span><span class="token string">&#39;insert&#39;</span> <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">;</span>\n\n<span class="token comment">-- 输出： Empty set (0.00 sec)</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iii-玩出花的查询语句" tabindex="-1"><a class="header-anchor" href="#iii-玩出花的查询语句" aria-hidden="true">#</a> III. 玩出花的查询语句</h2><h3 id="_1-基本查询" tabindex="-1"><a class="header-anchor" href="#_1-基本查询" aria-hidden="true">#</a> 1. 基本查询</h3><p>写sql而言，最常见的，也是最复杂的就是写各种查询了，根据各种不同的条件查询检索结果，大概可以区分以下几种</p>',59),k=n(`<li><p>简单查询：知道确切的检索条件</p><ul><li><code>where xxx=xxx</code> 相等的判断</li><li><code>where xxx&lt;&gt;xxx</code> 不等的判断</li><li><code>where id in (xxx, xxx, xxx)</code> 满足集合的判断</li><li><code>where xxx=xxx and yyy=yyy</code> 条件同时满足</li><li><code>where xxx=xxx or yyy=yyy</code> 条件满足一个即可</li><li><code>where id&gt;10 or id&lt;5</code> 范围判断 &gt;, &lt;, &gt;=, &lt;=</li><li><code>where name is null</code> 判空 is null, =&#39;&#39;, 非空 is not null, &lt;&gt;&#39;&#39;</li></ul></li><li><p>模糊查询: like 语法，</p><ul><li>%:替代任意个字符</li><li>_:替代一个字符</li><li>如: <code>select userId,username from newuser where username like &#39;%灰%&#39;;</code></li><li>输出:</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>+--------+-----------+
| userId | username  |
+--------+-----------+
|      1 | 大灰狼    |
|      2 | 小灰灰    |
+--------+-----------+
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>条件限制</p><ul><li><code>where 1=1 limit 10</code>; 限制最多查询出来的条数</li><li><code>where 1=1 limit 1, 2</code>; 分页查询</li><li><code>group by username</code>; 分组</li><li><code>order by userId desc</code>; 排序： desc倒排，asc 正排</li><li><code>select distinct(nickname) from xxx</code>; 去重</li><li><code>having count(*) &gt; 2</code>; 分组之后再筛选</li></ul></li><li><p>执行计算</p><ul><li><code>update phone=phone+1 limit 1</code>; 直接实现数值计算</li><li><code>count(*)</code> 统计总数</li><li><code>sum()</code> 统计和</li><li><code>max()</code> 最大值</li><li><code>min()</code> 最小值</li><li><code>avg()</code> 平均值</li></ul></li>`,4),v=s("p",null,"常用函数",-1),m=n("<li><code>abs()</code> 返回绝对值</li><li><code>bin()</code> 返回二进制 <code>oct()</code> 返回八进制， <code>hex()</code> 返回十六进制</li><li><code>exp()</code> 返回e的n次方</li><li><code>greatest(x1, x2... xn)</code> <code>least(x1, x2, ...n)</code> 返回最大最小</li><li><code>ln(x)</code> 返回x的自然对数</li><li><code>log(x, y)</code></li><li><code>mod(x, y)</code> 返回x%y的模（余数）</li><li><code>rand()</code> 返回0-1内的随机值</li><li><code>floor(x)</code> 反后小于x的最大整数</li><li><code>ceiling(x)</code> 返回大于x的最小整数</li><li><code>round(x, y)</code> 返回x的四舍五入的有y位小数的值</li><li><code>turncate(x,y)</code> 截断为y位小数</li><li><code>sign(x)</code></li><li><code>sqrt(x)</code> 平方根</li><li><code>concat(s1, s2...)</code> 字符串拼接</li><li><code>left(str, x)</code> str的左x个字符 <code>right(str, x)</code></li><li><code>length(str)</code> 返回字符串的长度</li><li><code>trim(str)</code> 去掉空格</li><li><code>from_unixtime</code> 将时间戳转日期</li>",19),b={href:"https://www.cnblogs.com/falling-maple/p/6230142.html",target:"_blank",rel:"noopener noreferrer"},h=n(`<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> username<span class="token punctuation">,</span>from_unixtime<span class="token punctuation">(</span>created<span class="token punctuation">)</span> <span class="token keyword">from</span> newuser <span class="token keyword">limit</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token comment">--- 下面为输出</span>

<span class="token comment">-- +-----------+------------------------+</span>
<span class="token comment">-- | username  | from_unixtime(created) |</span>
<span class="token comment">-- +-----------+------------------------+</span>
<span class="token comment">-- | 大灰狼    | 2016-09-25 00:00:00    |</span>
<span class="token comment">-- +-----------+------------------------+</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-跨表查询" tabindex="-1"><a class="header-anchor" href="#_2-跨表查询" aria-hidden="true">#</a> 2. 跨表查询</h3><p>当设计到查询多张表的结果时，往往是比较麻烦的</p><p>简单的多表查询方式</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> col1<span class="token punctuation">,</span> col2 <span class="token keyword">from</span> table1<span class="token punctuation">,</span> table2 <span class="token keyword">where</span> table1<span class="token punctuation">.</span>col1 <span class="token operator">=</span> table2<span class="token punctuation">.</span>col2 <span class="token keyword">limit</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>主要就是利用两个表中的关联的列进行联合查询，也就是说，当查询涉及到多表时，那么这些表肯定是有沟通的桥梁的（一般是某一张表的主键是另一张表的某一列）</p><p>举个小例子，查询商品评价数为1的商品（假设评价是一张表，商品也是一张表），那么关联的主键就是商品ID了</p><p>如果是分开查询，那么应该是</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>
<span class="token comment">-- 查询出评价总数为1的10条评价</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> Rate <span class="token keyword">group</span> <span class="token keyword">by</span> itemId <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">limit</span> <span class="token number">10</span><span class="token punctuation">;</span>


<span class="token comment">-- 查询对应的商品信息, 上面的结果就是下面()中的内容</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> Item <span class="token keyword">where</span> itemId <span class="token operator">in</span> <span class="token punctuation">(</span>xxx<span class="token punctuation">,</span> xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么换成一条sql，可以怎么写？</p><p>简单的嵌套方案：（有点像是硬把多条语句写成一条）</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> Item <span class="token keyword">where</span> itemId <span class="token operator">in</span> 
    <span class="token punctuation">(</span><span class="token keyword">select</span> itemId <span class="token keyword">from</span> Rate <span class="token keyword">group</span> <span class="token keyword">by</span> itemId <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">limit</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>一般多表查询可划分为:</p><h4 id="a-交叉连接查询" tabindex="-1"><a class="header-anchor" href="#a-交叉连接查询" aria-hidden="true">#</a> a.交叉连接查询</h4><p>需求:查询员工及其部门名称</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> employee<span class="token punctuation">.</span>name<span class="token punctuation">,</span>dept<span class="token punctuation">.</span>name

<span class="token keyword">FROM</span> employee<span class="token punctuation">,</span>dept<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="b-内连接查询-使用最多" tabindex="-1"><a class="header-anchor" href="#b-内连接查询-使用最多" aria-hidden="true">#</a> b.内连接查询(使用最多)</h4><p>多表查询的步骤:</p><p>1)确定查询哪些表 2)确定查询哪些字段 3)确定连接条件(规则:条件=表数量-1)</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SELECT employee.name,dept.name
FROM employee,dept
WHERE employee.deptId=dept.id;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一种语法</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SELECT e.name,d.name
    FROM employee e
    INNER JOIN dept d
    ON e.deptId=d.id;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="c-左外连接查询-左表数据全部显示-如果右边不满足-则显示null" tabindex="-1"><a class="header-anchor" href="#c-左外连接查询-左表数据全部显示-如果右边不满足-则显示null" aria-hidden="true">#</a> c.左外连接查询(左表数据全部显示，如果右边不满足，则显示null)</h4><p>需求:查询部门及其部门的员工</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SELECT d.name,e.name
    FROM dept d
    LEFT OUTER JOIN employee e
    ON d.id=e.deptId;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="d-右外连接查询-右表数据全部显示-如果左边不满足-则显示null" tabindex="-1"><a class="header-anchor" href="#d-右外连接查询-右表数据全部显示-如果左边不满足-则显示null" aria-hidden="true">#</a> d.右外连接查询(右表数据全部显示，如果左边不满足，则显示null)</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SELECT d.name,e.name
FROM employee e
RIGHT OUTER JOIN dept d
ON e.deptId=d.id;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27);function g(w,x){const e=i("ExternalLinkIcon");return t(),o("div",null,[d,l("more"),u,s("ul",null,[k,s("li",null,[v,s("ul",null,[m,s("li",null,[a("更多参考："),s("a",b,[a("MySQL常用函数"),c(e)])])])])]),h])}const E=p(r,[["render",g],["__file","02.180322-mysql基本语法学习小结.html.vue"]]);export{E as default};
