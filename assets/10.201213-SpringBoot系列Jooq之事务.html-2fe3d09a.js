import{_ as o,V as e,W as c,X as l,Y as n,Z as s,$ as t,a1 as p,F as i}from"./framework-094145d2.js";const u="/tutorial/imgs/201213/00.jpg",r={},k=n("p",null,[s("在SpringBoot中使用事务比较简单，大部分场景下，直接借助"),n("code",null,"@Transactional"),s("注解即可，本文将介绍一下Jooq中使用事务的两种方式")],-1),d=p(`<h2 id="i-项目搭建" tabindex="-1"><a class="header-anchor" href="#i-项目搭建" aria-hidden="true">#</a> I. 项目搭建</h2><p>本项目借助<code>SpringBoot 2.2.1.RELEASE</code> + <code>maven 3.5.3</code> + <code>IDEA</code>进行开发</p><h3 id="_1-项目依赖" tabindex="-1"><a class="header-anchor" href="#_1-项目依赖" aria-hidden="true">#</a> 1. 项目依赖</h3><p>关于如何创建一个SpringBoot的项目工程，不再本文的描述范围内，如有兴趣可以到文末的个人站点获取</p><p>在这个示例工程中，我们的选用h2dabase作为数据库（方便有兴趣的小伙伴直接获取工程源码之后，直接测试体验），因此对应的pom核心依赖如下</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-jooq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.h2database<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>h2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-数据准备" tabindex="-1"><a class="header-anchor" href="#_2-数据准备" aria-hidden="true">#</a> 2. 数据准备</h3><p>本文对应的项目工程，和前面介绍增加删除的一致，所以这里直接使用之前新增的数据</p><figure><img src="`+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="ii-使用姿势" tabindex="-1"><a class="header-anchor" href="#ii-使用姿势" aria-hidden="true">#</a> II. 使用姿势</h2><h3 id="_0-前期准备" tabindex="-1"><a class="header-anchor" href="#_0-前期准备" aria-hidden="true">#</a> 0. 前期准备</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Repository</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PoetryTransactionRepository</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">PoetTB</span> poetTable <span class="token operator">=</span> <span class="token class-name">PoetTB</span><span class="token punctuation">.</span><span class="token constant">POET</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">PoetryTB</span> poetryTable <span class="token operator">=</span> <span class="token class-name">PoetryTB</span><span class="token punctuation">.</span><span class="token constant">POETRY</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">DSLContext</span> dsl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-transactional-注解用法" tabindex="-1"><a class="header-anchor" href="#_1-transactional-注解用法" aria-hidden="true">#</a> 1. @Transactional 注解用法</h3>`,13),v=n("code",null,"@Transactional",-1),g={href:"https://spring.hhui.top/spring-blog/2020/02/03/200203-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E4%BA%8B%E5%8A%A1%E4%B8%8D%E7%94%9F%E6%95%88%E7%9A%84%E5%87%A0%E7%A7%8Dcase/",target:"_blank",rel:"noopener noreferrer"},m=p(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">PoetryPO</span> poetryPO <span class="token operator">=</span> dsl<span class="token punctuation">.</span><span class="token function">newRecord</span><span class="token punctuation">(</span>poetryTable<span class="token punctuation">)</span><span class="token punctuation">;</span>
    poetryPO<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    poetryPO<span class="token punctuation">.</span><span class="token function">setPoetId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    poetryPO<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">&quot;事务插入的标题&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    poetryPO<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token string">&quot;事务插入的内容&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    poetryPO<span class="token punctuation">.</span><span class="token function">setCreateAt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Timestamp</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> ans <span class="token operator">=</span> poetryPO<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 这个会插入失败，长度超限</span>
    <span class="token class-name">PoetPO</span> record <span class="token operator">=</span> dsl<span class="token punctuation">.</span><span class="token function">newRecord</span><span class="token punctuation">(</span>poetTable<span class="token punctuation">)</span><span class="token punctuation">;</span>
    record<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    record<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;123456789100918237645412738123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> ans2 <span class="token operator">=</span> record<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ans2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-jooq声明式事务" tabindex="-1"><a class="header-anchor" href="#_2-jooq声明式事务" aria-hidden="true">#</a> 2. jooq声明式事务</h3><p>一般使用Spring的<code>@Transactional</code>注解时，需要注意不能是同类的内部方法调用，因为这样不会走代理，导致事务不生效；</p><p>如果确实存在事务的业务需求，但是又不想拆分到另外一个对象类，那么可以考虑一下声明式事务的用法，如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">trans2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">boolean</span> ans <span class="token operator">=</span> dsl<span class="token punctuation">.</span><span class="token function">transactionResult</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TransactionalCallable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> configuration<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
            <span class="token keyword">final</span> <span class="token class-name">DSLContext</span> inner <span class="token operator">=</span> <span class="token constant">DSL</span><span class="token punctuation">.</span><span class="token function">using</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">PoetryPO</span> poetryPO <span class="token operator">=</span> inner<span class="token punctuation">.</span><span class="token function">newRecord</span><span class="token punctuation">(</span>poetryTable<span class="token punctuation">)</span><span class="token punctuation">;</span>
            poetryPO<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            poetryPO<span class="token punctuation">.</span><span class="token function">setPoetId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            poetryPO<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">&quot;事务插入的标题2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            poetryPO<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token string">&quot;事务插入的内容2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            poetryPO<span class="token punctuation">.</span><span class="token function">setCreateAt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Timestamp</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">boolean</span> ans <span class="token operator">=</span> poetryPO<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 这个会插入失败，长度超限</span>
            <span class="token class-name">PoetPO</span> record <span class="token operator">=</span> inner<span class="token punctuation">.</span><span class="token function">newRecord</span><span class="token punctuation">(</span>poetTable<span class="token punctuation">)</span><span class="token punctuation">;</span>
            record<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            record<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;123456789100918237645412738123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">boolean</span> ans2 <span class="token operator">=</span> record<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ans2<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-测试" tabindex="-1"><a class="header-anchor" href="#_3-测试" aria-hidden="true">#</a> 3. 测试</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestRest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">PoetryTransactionRepository</span> poetryTransactionRepository<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;trans&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">transaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            poetryTransactionRepository<span class="token punctuation">.</span><span class="token function">transaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            poetryTransactionRepository<span class="token punctuation">.</span><span class="token function">trans2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    
        <span class="token keyword">return</span> <span class="token string">&quot;over&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际输出如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token boolean">true</span>
jOOQ<span class="token punctuation">;</span> SQL <span class="token punctuation">[</span>insert into <span class="token string">&quot;PUBLIC&quot;</span><span class="token builtin class-name">.</span><span class="token string">&quot;POET&quot;</span> <span class="token punctuation">(</span><span class="token string">&quot;ID&quot;</span>, <span class="token string">&quot;NAME&quot;</span><span class="token punctuation">)</span> values <span class="token punctuation">(</span>cast<span class="token punctuation">(</span>? as int<span class="token punctuation">)</span>, cast<span class="token punctuation">(</span>? as varchar<span class="token punctuation">))</span><span class="token punctuation">]</span><span class="token punctuation">;</span> Value too long <span class="token keyword">for</span> <span class="token function">column</span> <span class="token string">&quot;NAME VARCHAR(20)&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&#39;123456789100918237645412738123&#39; (30)&quot;</span><span class="token punctuation">;</span> SQL statement:
insert into <span class="token string">&quot;PUBLIC&quot;</span><span class="token builtin class-name">.</span><span class="token string">&quot;POET&quot;</span> <span class="token punctuation">(</span><span class="token string">&quot;ID&quot;</span>, <span class="token string">&quot;NAME&quot;</span><span class="token punctuation">)</span> values <span class="token punctuation">(</span>cast<span class="token punctuation">(</span>? as int<span class="token punctuation">)</span>, cast<span class="token punctuation">(</span>? as varchar<span class="token punctuation">))</span> <span class="token punctuation">[</span><span class="token number">22001</span>-200<span class="token punctuation">]</span><span class="token punctuation">;</span> nested exception is org.h2.jdbc.JdbcSQLDataException: Value too long <span class="token keyword">for</span> <span class="token function">column</span> <span class="token string">&quot;NAME VARCHAR(20)&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&#39;123456789100918237645412738123&#39; (30)&quot;</span><span class="token punctuation">;</span> SQL statement:
insert into <span class="token string">&quot;PUBLIC&quot;</span><span class="token builtin class-name">.</span><span class="token string">&quot;POET&quot;</span> <span class="token punctuation">(</span><span class="token string">&quot;ID&quot;</span>, <span class="token string">&quot;NAME&quot;</span><span class="token punctuation">)</span> values <span class="token punctuation">(</span>cast<span class="token punctuation">(</span>? as int<span class="token punctuation">)</span>, cast<span class="token punctuation">(</span>? as varchar<span class="token punctuation">))</span> <span class="token punctuation">[</span><span class="token number">22001</span>-200<span class="token punctuation">]</span>
<span class="token boolean">true</span>
jOOQ<span class="token punctuation">;</span> SQL <span class="token punctuation">[</span>insert into <span class="token string">&quot;PUBLIC&quot;</span><span class="token builtin class-name">.</span><span class="token string">&quot;POET&quot;</span> <span class="token punctuation">(</span><span class="token string">&quot;ID&quot;</span>, <span class="token string">&quot;NAME&quot;</span><span class="token punctuation">)</span> values <span class="token punctuation">(</span>cast<span class="token punctuation">(</span>? as int<span class="token punctuation">)</span>, cast<span class="token punctuation">(</span>? as varchar<span class="token punctuation">))</span><span class="token punctuation">]</span><span class="token punctuation">;</span> Value too long <span class="token keyword">for</span> <span class="token function">column</span> <span class="token string">&quot;NAME VARCHAR(20)&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&#39;123456789100918237645412738123&#39; (30)&quot;</span><span class="token punctuation">;</span> SQL statement:
insert into <span class="token string">&quot;PUBLIC&quot;</span><span class="token builtin class-name">.</span><span class="token string">&quot;POET&quot;</span> <span class="token punctuation">(</span><span class="token string">&quot;ID&quot;</span>, <span class="token string">&quot;NAME&quot;</span><span class="token punctuation">)</span> values <span class="token punctuation">(</span>cast<span class="token punctuation">(</span>? as int<span class="token punctuation">)</span>, cast<span class="token punctuation">(</span>? as varchar<span class="token punctuation">))</span> <span class="token punctuation">[</span><span class="token number">22001</span>-200<span class="token punctuation">]</span><span class="token punctuation">;</span> nested exception is org.h2.jdbc.JdbcSQLDataException: Value too long <span class="token keyword">for</span> <span class="token function">column</span> <span class="token string">&quot;NAME VARCHAR(20)&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&#39;123456789100918237645412738123&#39; (30)&quot;</span><span class="token punctuation">;</span> SQL statement:
insert into <span class="token string">&quot;PUBLIC&quot;</span><span class="token builtin class-name">.</span><span class="token string">&quot;POET&quot;</span> <span class="token punctuation">(</span><span class="token string">&quot;ID&quot;</span>, <span class="token string">&quot;NAME&quot;</span><span class="token punctuation">)</span> values <span class="token punctuation">(</span>cast<span class="token punctuation">(</span>? as int<span class="token punctuation">)</span>, cast<span class="token punctuation">(</span>? as varchar<span class="token punctuation">))</span> <span class="token punctuation">[</span><span class="token number">22001</span>-200<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-其他" tabindex="-1"><a class="header-anchor" href="#ii-其他" aria-hidden="true">#</a> II. 其他</h2><h3 id="_0-项目" tabindex="-1"><a class="header-anchor" href="#_0-项目" aria-hidden="true">#</a> 0. 项目</h3><p><strong>系列博文</strong></p>`,12),b={href:"https://spring.hhui.top/spring-blog/2020/12/11/201211-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E5%A4%9A%E8%A1%A8%E8%81%94%E5%90%88%E6%9F%A5%E8%AF%A2/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://spring.hhui.top/spring-blog/2020/12/10/201210-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/",target:"_blank",rel:"noopener noreferrer"},E={href:"https://spring.hhui.top/spring-blog/2020/12/05/201204-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E8%81%9A%E5%90%88%E6%9F%A5%E8%AF%A2/",target:"_blank",rel:"noopener noreferrer"},B={href:"https://spring.hhui.top/spring-blog/2020/12/03/201203-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E8%AE%B0%E5%BD%95%E6%9F%A5%E8%AF%A2%E5%9F%BA%E7%A1%80%E7%AF%87/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://spring.hhui.top/spring-blog/2020/12/02/201202-SpingBoot%E7%B3%BB%E5%88%97Jooq%E6%89%B9%E9%87%8F%E5%86%99%E5%85%A5%E9%87%87%E5%9D%91%E8%AE%B0%E5%BD%95/",target:"_blank",rel:"noopener noreferrer"},q={href:"https://spring.hhui.top/spring-blog/2020/09/30/200930-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E8%AE%B0%E5%BD%95%E6%9B%B4%E6%96%B0%E4%B8%8E%E5%88%A0%E9%99%A4/",target:"_blank",rel:"noopener noreferrer"},y={href:"http://spring.hhui.top/spring-blog/2020/09/20/200920-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%B9%8B%E6%96%B0%E5%A2%9E%E8%AE%B0%E5%BD%95%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/",target:"_blank",rel:"noopener noreferrer"},_={href:"http://spring.hhui.top/spring-blog/2020/09/16/200916-SpringBoot%E7%B3%BB%E5%88%97Jooq%E4%BB%A3%E7%A0%81%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90/",target:"_blank",rel:"noopener noreferrer"},A={href:"http://spring.hhui.top/spring-blog/2020/09/15/200915-SpringBoot%E7%B3%BB%E5%88%97Jooq%E5%88%9D%E4%BD%93%E9%AA%8C/",target:"_blank",rel:"noopener noreferrer"},w=n("p",null,[n("strong",null,"项目源码")],-1),S={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"},P={href:"https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/108-jooq-curd",target:"_blank",rel:"noopener noreferrer"};function I(T,x){const a=i("ExternalLinkIcon");return e(),c("div",null,[k,l(" more "),d,n("p",null,[s("直接借助Spring的"),v,s("注解来实现事务相关业务逻辑，在实际的时候需要注意一下，使用姿势不当，可能导致事务不生效，对此有疑问的小伙伴，可以查看博文"),n("a",g,[s("【SpringBoot DB系列】事务不生效的几种case"),t(a)])]),m,n("ul",null,[n("li",null,[n("a",b,[s("【SpringBoot DB系列】Jooq之多表联合查询"),t(a)])]),n("li",null,[n("a",h,[s("【SpringBoot DB系列】Jooq之常用函数使用姿势"),t(a)])]),n("li",null,[n("a",E,[s("【SpringBoot DB系列】Jooq之聚合查询"),t(a)])]),n("li",null,[n("a",B,[s("【SpringBoot DB系列】Jooq之记录查询基础篇"),t(a)])]),n("li",null,[n("a",f,[s("【SpringBoot DB系列】Jooq批量写入采坑记录"),t(a)])]),n("li",null,[n("a",q,[s("【SpringBoot DB系列】Jooq之记录更新与删除"),t(a)])]),n("li",null,[n("a",y,[s("【SpringBoot DB系列】Jooq之新增记录使用姿势"),t(a)])]),n("li",null,[n("a",_,[s("【SpringBoot DB系列】Jooq代码自动生成"),t(a)])]),n("li",null,[n("a",A,[s("【SpringBoot DB系列】Jooq初体验"),t(a)])])]),w,n("ul",null,[n("li",null,[s("工程："),n("a",S,[s("https://github.com/liuyueyi/spring-boot-demo"),t(a)])]),n("li",null,[s("项目源码: "),n("a",P,[s("https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/108-jooq-curd"),t(a)])])])])}const O=o(r,[["render",I],["__file","10.201213-SpringBoot系列Jooq之事务.html.vue"]]);export{O as default};
