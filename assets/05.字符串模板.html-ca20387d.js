import{_ as e,V as o,W as p,X as s,Y as n,Z as c,a0 as a,F as l}from"./framework-23f3cf9b.js";const i={},r=a(`<h2 id="_1-背景-为什么需要字符串模板" tabindex="-1"><a class="header-anchor" href="#_1-背景-为什么需要字符串模板" aria-hidden="true">#</a> 1. 背景：为什么需要字符串模板？</h2><p>在Java中，字符串拼接是常见的操作，但传统方式存在诸多问题：</p><ol><li><strong>可读性差</strong>：使用<code>+</code>或<code>StringBuilder</code>拼接字符串时，代码冗长且难以维护</li><li><strong>安全性低</strong>：直接拼接用户输入可能导致SQL注入或XSS攻击</li><li><strong>性能开销</strong>：频繁拼接字符串可能产生大量临时对象，影响性能</li></ol><p><strong>字符串模板</strong>（String Templates）是JDK21引入的一项新特性（预览），旨在提供一种更安全、更直观的字符串构建方式。它结合了<strong>模板引擎</strong>的灵活性和<strong>Java类型系统</strong>的安全性。</p><p><strong>基本概念</strong></p><p>字符串模板是一种允许在字符串字面量中嵌入表达式的机制。传统的 Java 字符串拼接通常使用 + 运算符或 String.format 方法，这在处理复杂的字符串拼接时会使代码变得冗长且不易阅读。而字符串模板通过将表达式直接嵌入到字符串中，使代码更加简洁和直观。</p><h2 id="_2-原理-字符串模板如何工作" tabindex="-1"><a class="header-anchor" href="#_2-原理-字符串模板如何工作" aria-hidden="true">#</a> 2. 原理：字符串模板如何工作？</h2><h3 id="_2-1-传统字符串拼接-vs-字符串模板" tabindex="-1"><a class="header-anchor" href="#_2-1-传统字符串拼接-vs-字符串模板" aria-hidden="true">#</a> 2.1 传统字符串拼接 vs 字符串模板</h3><h4 id="传统方式" tabindex="-1"><a class="header-anchor" href="#传统方式" aria-hidden="true">#</a> 传统方式</h4><ul><li><strong><code>+</code>操作符</strong>：简单但性能较差，可读性低</li><li><strong><code>StringBuilder</code></strong>：性能较好，但代码冗长</li><li><strong><code>String.format</code></strong>：可读性较高，但类型安全性差</li></ul><h4 id="字符串模板" tabindex="-1"><a class="header-anchor" href="#字符串模板" aria-hidden="true">#</a> 字符串模板</h4><ul><li><strong>嵌入式表达式</strong>：在字符串中直接嵌入变量或表达式</li><li><strong>类型安全</strong>：编译器检查表达式类型，避免运行时错误</li><li><strong>自定义处理器</strong>：支持通过处理器（Processor）自定义字符串生成逻辑</li></ul><h3 id="核心机制" tabindex="-1"><a class="header-anchor" href="#核心机制" aria-hidden="true">#</a> 核心机制</h3><ol><li><p><strong>模板语法</strong><br> 使用<code>\\{...}</code>嵌入表达式，例如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;Java&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span><span class="token string">&quot;Hello, \\{name}!&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>模板处理器</strong><br> 字符串模板支持自定义处理器，例如：</p><ul><li><code>STR</code>：标准处理器，直接拼接字符串</li><li><code>FMT</code>：格式化处理器，支持格式化字符串</li><li>自定义处理器：实现<code>StringTemplate.Processor</code>接口</li></ul></li><li><p><strong>类型安全</strong><br> 编译器会检查嵌入表达式的类型，确保其与模板兼容。</p></li><li><p><strong>性能优化</strong><br> 字符串模板在编译时生成高效的字节码，减少运行时开销。</p></li></ol><h3 id="_2-2-优势-为什么选择字符串模板" tabindex="-1"><a class="header-anchor" href="#_2-2-优势-为什么选择字符串模板" aria-hidden="true">#</a> 2.2 优势：为什么选择字符串模板？</h3><table><thead><tr><th>特性</th><th>传统方式</th><th>字符串模板</th></tr></thead><tbody><tr><td>可读性</td><td>低</td><td><strong>高</strong></td></tr><tr><td>类型安全性</td><td>无</td><td><strong>有</strong></td></tr><tr><td>性能</td><td>较差</td><td><strong>优化</strong></td></tr><tr><td>灵活性</td><td>有限</td><td><strong>高</strong></td></tr></tbody></table><ol><li><strong>代码简洁</strong>：减少样板代码，提升开发效率</li><li><strong>类型安全</strong>：编译器检查表达式类型，减少运行时错误</li><li><strong>性能优化</strong>：编译时生成高效字节码，减少运行时开销</li><li><strong>灵活扩展</strong>：支持自定义处理器，满足多样化需求</li></ol><h2 id="_3-使用示例" tabindex="-1"><a class="header-anchor" href="#_3-使用示例" aria-hidden="true">#</a> 3. 使用示例</h2><h3 id="语法" tabindex="-1"><a class="header-anchor" href="#语法" aria-hidden="true">#</a> 语法</h3><p>字符串模板主要有两种形式：简单字符串模板和带标签的字符串模板。</p><p><strong>简单字符串模板</strong></p><p>使用 STR 标签来标识字符串模板，在字符串中使用 <code>\\{}</code> 语法嵌入表达式。</p><p><strong>带标签的字符串模板</strong></p><p>除了 STR 标签，我们还可以自定义标签来处理字符串模板。</p><ul><li>自定义标签是一个方法，它接收一个 TemplateContext 对象和一个 Object[] 数组作为参数。</li></ul><p>如</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 这里是一个自定义的标签，借助Formatter实现字符串替换</span>
<span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">MY_FORMAT</span><span class="token punctuation">(</span><span class="token class-name">TemplateContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Formatter</span> formatter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Formatter</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>
    formatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">rawString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;Bob&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> score <span class="token operator">=</span> <span class="token number">85</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token constant">MY_FORMAT</span><span class="token punctuation">.</span><span class="token string">&quot;Student \\{name} scored \\{score} points.&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="示例1-基本使用" tabindex="-1"><a class="header-anchor" href="#示例1-基本使用" aria-hidden="true">#</a> 示例1：基本使用</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;Java&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span><span class="token string">&quot;Hello, \\{name}!&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: Hello, Java!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="示例2-多行字符串" tabindex="-1"><a class="header-anchor" href="#示例2-多行字符串" aria-hidden="true">#</a> 示例2：多行字符串</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;Java&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> version <span class="token operator">=</span> <span class="token string">&quot;21&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span><span class="token triple-quoted-string string">&quot;&quot;&quot;
    Hello, \\{name}!
    Welcome to JDK \\{version}.
    &quot;&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="示例3-格式化字符串" tabindex="-1"><a class="header-anchor" href="#示例3-格式化字符串" aria-hidden="true">#</a> 示例3：格式化字符串</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">double</span> price <span class="token operator">=</span> <span class="token number">19.99</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token constant">FMT</span><span class="token punctuation">.</span><span class="token string">&quot;Price: %-10.2f\\{price} USD&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: Price: 19.99      USD</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="示例4-自定义处理器" tabindex="-1"><a class="header-anchor" href="#示例4-自定义处理器" aria-hidden="true">#</a> 示例4：自定义处理器</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">var</span> <span class="token constant">JSON</span> <span class="token operator">=</span> <span class="token class-name">StringTemplate<span class="token punctuation">.</span>Processor</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>
    <span class="token punctuation">(</span><span class="token class-name">StringTemplate</span> st<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">interpolate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;Java&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> version <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span>
<span class="token class-name">JSONObject</span> json <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token triple-quoted-string string">&quot;&quot;&quot;
    {
        &quot;name&quot;: &quot;\\{name}&quot;,
        &quot;version&quot;: \\{version}
    }
    &quot;&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-应用场景探索" tabindex="-1"><a class="header-anchor" href="#_4-应用场景探索" aria-hidden="true">#</a> 4. 应用场景探索</h2><p>字符串模板的特性可以有效的应用在我们实际的业务场景中，如</p><h3 id="_4-1-构建动态消息" tabindex="-1"><a class="header-anchor" href="#_4-1-构建动态消息" aria-hidden="true">#</a> 4.1 构建动态消息</h3><p>在生成包含动态数据的消息时，字符串模板非常有用。比如生成用户欢迎消息、日志记录信息等。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token string">&quot;Eve&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> loginTime <span class="token operator">=</span> <span class="token string">&quot;2024-10-01 10:00&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> logMessage <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span><span class="token string">&quot;User \\{username} logged in at \\{loginTime}.&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>logMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-sql拼接" tabindex="-1"><a class="header-anchor" href="#_4-2-sql拼接" aria-hidden="true">#</a> 4.2 SQL拼接</h3><p>在构建 SQL 查询语句时，经常需要将变量值插入到 SQL 字符串中。使用字符串模板可以使代码更加清晰。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> tableName <span class="token operator">=</span> <span class="token string">&quot;users&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> userId <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span><span class="token string">&quot;SELECT * FROM \\{tableName} WHERE id = \\{userId}&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-小结" tabindex="-1"><a class="header-anchor" href="#_5-小结" aria-hidden="true">#</a> 5. 小结</h2><h3 id="_4-1-注意事项" tabindex="-1"><a class="header-anchor" href="#_4-1-注意事项" aria-hidden="true">#</a> 4.1 注意事项</h3><ol><li><p><strong>语法兼容性</strong><br> 字符串模板使用<code>\\{...}</code>语法，需确保与现有代码无冲突。</p></li><li><p><strong>处理器选择</strong><br> 根据需求选择合适的处理器，例如：</p><ul><li><code>STR</code>：普通字符串拼接</li><li><code>FMT</code>：格式化字符串</li><li>自定义处理器：复杂逻辑处理</li></ul></li><li><p><strong>性能测试</strong><br> 在性能敏感场景中，需测试字符串模板的性能表现。对于性能要求较高的场景，建议使用<code>StringBuilder</code>进行手动拼接</p></li><li><p><strong>安全性</strong><br> 使用自定义处理器时，确保对用户输入进行验证和转义，避免安全漏洞。</p></li><li><p><strong>表达式复杂度</strong> 嵌入的表达式应尽量保持简单，避免使用过于复杂的表达式，以免影响代码的可读性。</p></li><li><p><strong>转义字符</strong> 在字符串模板中，需要注意转义字符的使用。如果需要在字符串中包含 <code>\\{</code> 或 <code>}</code>，需要进行适当的转义。</p></li></ol><h3 id="_4-2-总结" tabindex="-1"><a class="header-anchor" href="#_4-2-总结" aria-hidden="true">#</a> 4.2 总结</h3><p>JDK21字符串模板通过以下革新提升Java字符串处理的效率：</p><ul><li>✅ 简化字符串拼接代码</li><li>✅ 提升类型安全性和可读性</li><li>✅ 支持多行字符串和格式化</li><li>✅ 灵活扩展自定义处理器</li></ul>`,49),u={href:"https://openjdk.org/jeps/430",target:"_blank",rel:"noopener noreferrer"},d=a(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 现在，用字符串模板让拼接更优雅！</span>
<span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span><span class="token string">&quot;Hello, \\{name}!&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function k(v,m){const t=l("ExternalLinkIcon");return o(),p("div",null,[r,s("p",null,[n("字符串模板是Java字符串处理的重要扩展，有兴趣的小伙伴可参考"),s("a",u,[n("官方文档"),c(t)]),n("以掌握最佳实践。")]),d])}const h=e(i,[["render",k],["__file","05.字符串模板.html.vue"]]);export{h as default};
