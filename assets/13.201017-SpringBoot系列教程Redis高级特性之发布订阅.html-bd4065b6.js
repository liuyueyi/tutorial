import{_ as t,V as p,W as o,X as i,Y as n,Z as s,$ as e,a1 as c,F as l}from"./framework-094145d2.js";const u="/tutorial/imgs/201017/00.gif",r={},d=n("p",null,"通常来讲，当我们业务存在消息的业务逻辑时更多的是直接使用成熟的rabbitmq,rocketmq，但是一些简单的业务场景中，真的有必要额外的引入一个mq么？本文将介绍一下redis的发布订阅方式，来实现简易的消息系统逻辑",-1),k=c(`<h2 id="i-基本使用" tabindex="-1"><a class="header-anchor" href="#i-基本使用" aria-hidden="true">#</a> I. 基本使用</h2><h3 id="_1-配置" tabindex="-1"><a class="header-anchor" href="#_1-配置" aria-hidden="true">#</a> 1. 配置</h3><p>我们使用SpringBoot <code>2.2.1.RELEASE</code>来搭建项目环境，直接在<code>pom.xml</code>中添加redis依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们的redis是默认配置，则可以不额外添加任何配置；也可以直接在<code>application.yml</code>配置中，如下</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> 127.0.0.1
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>
    <span class="token key atrule">password</span><span class="token punctuation">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-使用姿势" tabindex="-1"><a class="header-anchor" href="#_2-使用姿势" aria-hidden="true">#</a> 2. 使用姿势</h3><p>redis的发布/订阅，主要就是利用两个命令<code>publish/subscribe</code>; 在SpringBoot中使用发布订阅模式比较简单，借助RedisTemplate可以很方便的实现</p><h4 id="a-消息发布" tabindex="-1"><a class="header-anchor" href="#a-消息发布" aria-hidden="true">#</a> a. 消息发布</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PubSubBean</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> redisTemplate<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">publish</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RedisCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">doInRedis</span><span class="token punctuation">(</span><span class="token class-name">RedisConnection</span> redisConnection<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DataAccessException</span> <span class="token punctuation">{</span>
                redisConnection<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="b-订阅消息" tabindex="-1"><a class="header-anchor" href="#b-订阅消息" aria-hidden="true">#</a> b. 订阅消息</h4><p>消息订阅这里，需要注意我们借助<code>org.springframework.data.redis.connection.MessageListener</code>来实现消费逻辑</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">MessageListener</span> messageListener<span class="token punctuation">,</span> <span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RedisCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">doInRedis</span><span class="token punctuation">(</span><span class="token class-name">RedisConnection</span> redisConnection<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DataAccessException</span> <span class="token punctuation">{</span>
            redisConnection<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>messageListener<span class="token punctuation">,</span> key<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="c-测试case" tabindex="-1"><a class="header-anchor" href="#c-测试case" aria-hidden="true">#</a> c. 测试case</h4><p>写一个简单的测试case，来验证一下上面的发布订阅，顺带理解一下这个<code>MessageListener</code>的使用姿势；我们创建一个简单的WEB工程，提供两个rest接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;rest&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoRest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">PubSubBean</span> pubSubBean<span class="token punctuation">;</span>
    
    <span class="token comment">// 发布消息</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;pub&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">pubTest</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        pubSubBean<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;over&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 新增消费者</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;sub&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> uuid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        pubSubBean<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>uuid <span class="token operator">+</span> <span class="token string">&quot; ==&gt; msg:&quot;</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;over&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面通过一个动图来演示一下case</p><figure><img src="`+u+`" alt="a.gif" tabindex="0" loading="lazy"><figcaption>a.gif</figcaption></figure><p>我们先创建了两个消费者，然后发送消息时，两个都收到；再新增一个消费者，发送消息时，三个都能收到</p><h3 id="_3-使用说明与应用场景" tabindex="-1"><a class="header-anchor" href="#_3-使用说明与应用场景" aria-hidden="true">#</a> 3. 使用说明与应用场景</h3><p>redis的发布订阅，只适用于比较简单的场景，从上面的使用说明也能看出，它就是一个简单的发布订阅模型，支持1对N，而且发送的消息，只有在线的消费者才能get到（至于不在线的，那就只能说遗憾了）而且对于redis而言，消息推出去之后就完事了，至于消费者能不能正常消费，那就不care了</p><p>划重点：</p><ul><li>只有在线的消费者能接收到消息</li><li>对于消费者一个消息只能拿到一次</li></ul><p>接下来的问题就来了，什么样的场景下可以使用redis的发布订阅呢？</p><p><strong>基于内存的缓存失效</strong></p><p>利用reids + 内存做二级缓存，可以说是比较常见的方式了，借助基于内存的缓存，可以有效的提高系统的负载，但是问题也很明显，内存中缓存数据失效是个问题，特别是当一个应用部署多台服务器时，如果我希望同时失效所有服务器的某个内存缓存，使用redis的发布/订阅就是一个比较好的选择</p><p><strong>SpringCloud Config配置刷新</strong></p><p>使用SpringCloud Config做配置中心的小伙伴可能会经常遇到这个问题，配置修改之后的动态刷新是个问题（当然官方是支持通过mq走bus总线来同步，也可以通过spring boot admin来强刷）</p><p>借助redis发布/订阅，实现配置动态刷新也是一个不错的备选方案（后面给出一个具体的实现demo，如有兴趣请持续关注一灰灰Blog）</p><p><strong>redis key失效订阅</strong></p><p>我们在使用redis做缓存时，通常会设置一个过期时间，redis提供了一个过期的事件，当然默认是不开启的；我们也是可以通过subscribe来订阅缓存失效的事件</p><p>修改配置，开启key失效事件</p><div class="language-conf line-numbers-mode" data-ext="conf"><pre class="language-conf"><code>notify-keyspace-events Ex
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>重启redis之后，订阅失效事件即可</p><div class="language-conf line-numbers-mode" data-ext="conf"><pre class="language-conf"><code>subscribe __keyevent@0__:expired
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="ii-其他" tabindex="-1"><a class="header-anchor" href="#ii-其他" aria-hidden="true">#</a> II. 其他</h2><h3 id="_0-项目" tabindex="-1"><a class="header-anchor" href="#_0-项目" aria-hidden="true">#</a> 0. 项目</h3><p><strong>系列博文</strong></p>`,38),g={href:"https://spring.hhui.top/spring-blog/2020/10/14/201014-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRedis%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B9%8BBitmap%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E5%8F%8A%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%E4%BB%8B%E7%BB%8D/",target:"_blank",rel:"noopener noreferrer"},E={href:"https://spring.hhui.top/spring-blog/2020/04/11/200411-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRedis%E4%B9%8B%E7%AE%A1%E9%81%93Pipelined%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://spring.hhui.top/spring-blog/2019/09/27/190927-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BRedis%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://spring.hhui.top/spring-blog/2019/05/13/190513-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8B%E5%80%9F%E5%8A%A9Redis%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%AB%99%E7%82%B9%E7%BB%9F%E8%AE%A1%E6%9C%8D%E5%8A%A1/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://spring.hhui.top/spring-blog/2018/12/25/181225-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8B%E5%80%9F%E5%8A%A9Redis%E5%AE%9E%E7%8E%B0%E6%8E%92%E8%A1%8C%E6%A6%9C%E5%8A%9F%E8%83%BD/",target:"_blank",rel:"noopener noreferrer"},B={href:"https://spring.hhui.top/spring-blog/2018/12/12/181212-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BZSet%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://spring.hhui.top/spring-blog/2018/12/11/181211-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BSet%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/",target:"_blank",rel:"noopener noreferrer"},A={href:"https://spring.hhui.top/spring-blog/2018/12/02/181202-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BHash%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://spring.hhui.top/spring-blog/2018/11/09/181109-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BList%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://spring.hhui.top/spring-blog/2018/11/08/181108-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BString%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E8%AF%BB%E5%86%99/",target:"_blank",rel:"noopener noreferrer"},y={href:"https://spring.hhui.top/spring-blog/2018/11/01/181101-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BJedis%E9%85%8D%E7%BD%AE/",target:"_blank",rel:"noopener noreferrer"},S={href:"https://spring.hhui.top/spring-blog/2018/10/29/181029-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8B%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/",target:"_blank",rel:"noopener noreferrer"},w=n("p",null,[n("strong",null,"工程源码")],-1),R={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"},D={href:"https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/122-redis-template",target:"_blank",rel:"noopener noreferrer"};function F(x,C){const a=l("ExternalLinkIcon");return p(),o("div",null,[d,i(" more "),k,n("ul",null,[n("li",null,[n("a",g,[s("【DB系列】Redis高级特性之Bitmap使用姿势及应用场景介绍"),e(a)])]),n("li",null,[n("a",E,[s("【DB系列】Redis之管道Pipelined使用姿势"),e(a)])]),n("li",null,[n("a",b,[s("【DB系列】Redis集群环境配置"),e(a)])]),n("li",null,[n("a",v,[s("【DB系列】借助Redis搭建一个简单站点统计服务（应用篇）"),e(a)])]),n("li",null,[n("a",m,[s("【DB系列】借助Redis实现排行榜功能（应用篇）"),e(a)])]),n("li",null,[n("a",B,[s("【DB系列】Redis之ZSet数据结构使用姿势"),e(a)])]),n("li",null,[n("a",h,[s("【DB系列】Redis之Set数据结构使用姿势"),e(a)])]),n("li",null,[n("a",A,[s("【DB系列】Redis之Hash数据结构使用姿势"),e(a)])]),n("li",null,[n("a",_,[s("【DB系列】Redis之List数据结构使用姿势"),e(a)])]),n("li",null,[n("a",f,[s("【DB系列】Redis之String数据结构的读写"),e(a)])]),n("li",null,[n("a",y,[s("【DB系列】Redis之Jedis配置"),e(a)])]),n("li",null,[n("a",S,[s("【DB系列】Redis之基本配置"),e(a)])])]),w,n("ul",null,[n("li",null,[s("工程："),n("a",R,[s("https://github.com/liuyueyi/spring-boot-demo"),e(a)])]),n("li",null,[s("项目源码: "),n("a",D,[s("https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/122-redis-template"),e(a)])])])])}const j=t(r,[["render",F],["__file","13.201017-SpringBoot系列教程Redis高级特性之发布订阅.html.vue"]]);export{j as default};
