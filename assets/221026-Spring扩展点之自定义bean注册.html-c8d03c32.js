import{_ as p,V as o,W as i,X as c,Y as n,Z as s,$ as e,a1 as t,F as l}from"./framework-094145d2.js";const u={},r=n("p",null,[s("接着上一篇容器刷新前的扩展点，我们继续往下走；接下来来到的就是bean的定义扩展处，它是在Spring容器刷新之后，应用的bean定义加载完成、实例化之前提供的切入点，主要是通过实现"),n("code",null,"BeanDefinitionRegistryPostProcessor"),s("接口的两个方法，来实现自定义的bean定义，或者对已注册的bean进行修改or代理替换")],-1),d=n("p",null,"本文将带来的知识点如下：",-1),k=n("ul",null,[n("li",null,"BeanDefinitionRegistryPostProcessor： 基本使用姿势"),n("li",null,[n("code",null,"postProcessBeanDefinitionRegistry"),s(" 方法 优先于 "),n("code",null,"postProcessBeanFactory"),s(" 方法执行")]),n("li",null,"实现自定义的bean注册，实现对容器的bean定义进行修改")],-1),m=t('<h2 id="i-项目准备" tabindex="-1"><a class="header-anchor" href="#i-项目准备" aria-hidden="true">#</a> I. 项目准备</h2><p>本文创建的实例工程采用<code>SpringBoot 2.2.1.RELEASE</code> + <code>maven 3.5.3</code> + <code>idea</code>进行开发</p><p>具体的SpringBoot项目工程创建就不赘述了，核心的pom文件，无需额外的依赖； 配置文件 <code>application.yml</code>， 也没有什么特殊的配置</p><p><strong>说明</strong></p><ul><li>源码工程参考文末的源码</li><li>虽然本文是基于 <code>2.2.1.RELEASE</code> 版本进行实测；实际上这些基础的扩展点，在更高的版本中表现也不会有太大的变动，基本上可以无修改复现</li></ul><h2 id="ii-自定义bean注册" tabindex="-1"><a class="header-anchor" href="#ii-自定义bean注册" aria-hidden="true">#</a> II. 自定义bean注册</h2><p>有关注过博主一灰灰的朋友，应该在我之前的文章中可以翻到bean的动态注册的内容，其中其实也介绍到通过<code>BeanDefinitionRegistryPostProcessor</code>来实现bean的动态注册，有兴趣的小伙伴可以翻一下，链接如下</p>',7),v={href:"https://spring.hhui.top/spring-blog/2018/10/13/181013-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C/",target:"_blank",rel:"noopener noreferrer"},b=t(`<p>接下来我们开始进入正题</p><h3 id="_1-自定义bean注册" tabindex="-1"><a class="header-anchor" href="#_1-自定义bean注册" aria-hidden="true">#</a> 1. 自定义bean注册</h3><p>现在我们定义一个普通的bean对象，也定义了几个常见的bean初始化之后的回调方法，顺带验证两个知识点</p><ul><li>自定义注册的bean是否表现和普通的bean一致</li><li>初始化后的方法执行的顺序</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoBean</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> initCode<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">DemoBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        initCode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;demo bean create! -&gt; &quot;</span> <span class="token operator">+</span> initCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;PostConstruct&quot;</span> <span class="token operator">+</span> initCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;afterPropertiesSet&quot;</span> <span class="token operator">+</span> initCode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getInitCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> initCode<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再定义一个bean，构造方法依赖其他的bean</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoBeanWrapper</span> <span class="token keyword">extends</span> <span class="token class-name">DemoBean</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">DemoBean</span> demoBean<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">DemoBeanWrapper</span><span class="token punctuation">(</span><span class="token class-name">DemoBean</span> demoBean<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>demoBean <span class="token operator">=</span> demoBean<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们再看一下这两个bean如何进行注册</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutoBeanDefinitionRegistryPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanDefinitionRegistryPostProcessor</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanDefinitionRegistry</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinitionRegistry</span> beanDefinitionRegistry<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;========&gt; postProcessBeanDefinitionRegistry ---&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 这个接口主要是在读取项目中的 beanDefinition 之后执行，简单来说就是项目本身的bean定义读取完毕之后，如果我们还想补充一些自定义的bean注册信息，则可以用它</span>
        <span class="token comment">// 注意两个核心点： Spring上下文的注册Bean定义的逻辑都跑完后，但是所有的Bean都还没真正实例化之前</span>

        <span class="token comment">// 构建bean的定义</span>
        <span class="token class-name">BeanDefinitionBuilder</span> beanDefinitionBuilder <span class="token operator">=</span> <span class="token class-name">BeanDefinitionBuilder</span><span class="token punctuation">.</span><span class="token function">genericBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">DemoBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 这个方法可以定义这个bean的实例创建方式，如构造函数之后还想调用其他的方法，也可以在这里做</span>
            <span class="token class-name">DemoBean</span> demoBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DemoBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> demoBean<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BeanDefinition</span> beanDefinition <span class="token operator">=</span> beanDefinitionBuilder<span class="token punctuation">.</span><span class="token function">getRawBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//注册bean定义</span>
        beanDefinitionRegistry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">&quot;demoBean&quot;</span><span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> configurableListableBeanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;========&gt; postProcessBeanFactory ---&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 这个方法调用时再上面的方法执行之后，如加载自定义的bean注册依赖有其他的bean对象时，可以执行这个方法</span>

        <span class="token class-name">BeanDefinitionBuilder</span> builder <span class="token operator">=</span> <span class="token class-name">BeanDefinitionBuilder</span><span class="token punctuation">.</span><span class="token function">genericBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">DemoBeanWrapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">DemoBeanWrapper</span> autoFacDIBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DemoBeanWrapper</span><span class="token punctuation">(</span>configurableListableBeanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;demoBean&quot;</span><span class="token punctuation">,</span> <span class="token class-name">DemoBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> autoFacDIBean<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">BeanDefinition</span> beanDefinition <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">getRawBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">)</span> configurableListableBeanFactory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">&quot;demoBeanWrapper&quot;</span><span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>bean的注册从上面的代码来看比较简单，先看DemoBean的注册</p><p><strong>方法： <code>postProcessBeanDefinitionRegistry</code></strong></p><p>在这个方法中进行简单的bean注册，除了上面这个稍显复杂的注册方式之外，也可以使用更简单的策略，如下，省略掉<code>BeanDefinitionBuilder.genericBeanDefinition</code>第二个参数</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BeanDefinitionBuilder</span> beanDefinitionBuilder <span class="token operator">=</span> <span class="token class-name">BeanDefinitionBuilder</span><span class="token punctuation">.</span><span class="token function">genericBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">DemoBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BeanDefinition</span> beanDefinition <span class="token operator">=</span> beanDefinitionBuilder<span class="token punctuation">.</span><span class="token function">getRawBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//注册bean定义</span>
beanDefinitionRegistry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">&quot;demoBean&quot;</span><span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个方法内的bean注册，更适用于简单的bean对象注册，如当其构造方法依赖其他的bean时，放在这个方法中好像没辙，此时则放在第二个方法中就更合适了</p><p><strong>方法： <code>postProcessBeanFactory</code></strong></p><p>这个方法的参数是BeanFactory，可以通过它获取其他的bean对象，因此适用于DemoBeanWrapper的注册了，当然除了上面的使用姿势之外，也可以如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> configurableListableBeanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
    <span class="token class-name">BeanDefinitionBuilder</span> builder <span class="token operator">=</span> <span class="token class-name">BeanDefinitionBuilder</span><span class="token punctuation">.</span><span class="token function">genericBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">DemoBeanWrapper</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//  用下面这种方式指定构造方法的传参也可以</span>
    builder<span class="token punctuation">.</span><span class="token function">addConstructorArgValue</span><span class="token punctuation">(</span>configurableListableBeanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;demoBean&quot;</span><span class="token punctuation">,</span> <span class="token class-name">DemoBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BeanDefinition</span> beanDefinition <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">getRawBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">DefaultListableBeanFactory</span><span class="token punctuation">)</span> configurableListableBeanFactory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">&quot;demoBeanWrapper&quot;</span><span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-bean注册知识点" tabindex="-1"><a class="header-anchor" href="#_2-bean注册知识点" aria-hidden="true">#</a> 2.bean注册知识点</h3><p>单独看上面的代码可能对知识点理解不够直观清晰，那么我们就进行知识点归纳一下</p><p><strong>bean注册方式</strong></p><p>如何生成Bean的定义 <code>BeanDefinition</code> ?</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 1. bean定义构造器</span>
<span class="token class-name">BeanDefinitionBuilder</span> beanDefinitionBuilder <span class="token operator">=</span> <span class="token class-name">BeanDefinitionBuilder</span><span class="token punctuation">.</span><span class="token function">genericBeanDefinition</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span> 
  <span class="token comment">// bean实例化 实现方式, 若bean存在无参构造方法，则可以省略这个参数</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 2. bean定义获取</span>
<span class="token class-name">BeanDefinition</span> beanDefinition <span class="token operator">=</span> beanDefinitionBuilder<span class="token punctuation">.</span><span class="token function">getRawBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 拿到上面的bean定义之后，可以设置构造方法参数，作用域等</span>

<span class="token comment">// 3. 注册</span>
beanDefinitionRegistry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>两个方法的选择</strong></p><ul><li><code>postProcessBeanDefinitionRegistry</code> 方法执行先于 <code>postProcessBeanFactory</code></li><li><code>postProcessBeanDefinitionRegistry</code> 在bean实例化之前触发，可用于注册简单的自定义bean对象</li><li><code>postProcessBeanFactory</code>: 若bean的定义中需要依赖其他的bean对象，则放在这个方法内实现，通过BeanFactory参数获取其他bean</li></ul><h3 id="_3-bean定义扩展" tabindex="-1"><a class="header-anchor" href="#_3-bean定义扩展" aria-hidden="true">#</a> 3. bean定义扩展</h3><p>文章开头介绍了除了自定义bean之外，还可以做一些其他的操作，如针对现有的bean定义进行修改，下面给一个基础的demo，针对一个已有的bean，设置它的init方法</p><p>新增一个普通的bean对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NormalBean</span> <span class="token keyword">implements</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">DemoBean</span> demoBean<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">DemoBeanWrapper</span> demoBeanWrapper<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;NormalBean: postConstruct&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>demoBean<span class="token punctuation">.</span><span class="token function">getInitCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>demoBeanWrapper<span class="token punctuation">.</span><span class="token function">getInitCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;NormalBean: method init&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;NormalBean: afterPropertiesSet&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们通过修改bean注册，来指定bean加载完之后，执行init方法，在前面的<code>AutoBeanDefinitionRegistryPostProcessor</code>中进行扩展</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> configurableListableBeanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
    <span class="token comment">// ....</span>

    <span class="token comment">// 针对已有的bean定义进行调整</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> beanName <span class="token operator">:</span> configurableListableBeanFactory<span class="token punctuation">.</span><span class="token function">getBeanDefinitionNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">BeanDefinition</span> definition <span class="token operator">=</span> configurableListableBeanFactory<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>definition<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token class-name">NormalBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 手动指定一下初始化方法</span>
            definition<span class="token punctuation">.</span><span class="token function">setInitMethodName</span><span class="token punctuation">(</span><span class="token string">&quot;init&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们将整个项目执行以下，看下会输出些啥</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">&gt;</span> postProcessBeanDefinitionRegistry ---<span class="token operator">&gt;</span>
<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">&gt;</span> postProcessBeanFactory ---<span class="token operator">&gt;</span>
<span class="token comment"># 下面是DemoBean的相关输出</span>
demo bean create<span class="token operator">!</span> -<span class="token operator">&gt;</span> <span class="token number">58</span>
afterPropertiesSet58
<span class="token comment"># 下面是DemoBeanWrapper的相关输出</span>
demo bean create<span class="token operator">!</span> -<span class="token operator">&gt;</span> <span class="token number">46</span>
PostConstruct46
afterPropertiesSet46
<span class="token comment"># 下面是NormalBean的相关输出</span>
NormalBean: postConstruct
<span class="token number">58</span>
<span class="token number">46</span>
NormalBean: afterPropertiesSet
NormalBean: method init
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的输出也可以看出，我们的几个自定义bean都被正常的加载、注入，依赖使用也没有什么问题；而且从日志输出还可以看出bean初始化后的触发方法，也有先后顺序</p><ul><li><code>@PostConstruct</code> &gt; <code>InitializingBean#afterPropertiesSet</code> &gt; <code>init-method</code> (这个可以理解为xml定义bean中的初始化方法, @Bean注解中的initMethod)</li></ul><h3 id="_4-小结" tabindex="-1"><a class="header-anchor" href="#_4-小结" aria-hidden="true">#</a> 4. 小结</h3><p>最后进入大家喜闻乐见的知识点汇总环节，本文中主要介绍的是bean定义加载之后、实例化之前的扩展点<code>BeanDefinitionRegistryPostProcessor</code></p><h4 id="_4-1-知识点一-核心方法说明" tabindex="-1"><a class="header-anchor" href="#_4-1-知识点一-核心方法说明" aria-hidden="true">#</a> 4.1 知识点一：核心方法说明</h4><p>通过它，我们可以实现自定义的bean注册，也可以实现对现有的bean定义进行扩展修改；有两个方法</p><p><strong>postProcessBeanDefinitionRegistry</strong></p><ul><li>执行顺序在下面的方法之前，通常是在bean实例化之前被触发</li><li>适用于通用的bean注册定义</li></ul><p><strong>postProcessBeanFactory</strong></p><ul><li>其参数为BeanFactory，因此可以通过它获取Spring容器中的其他bean对象</li></ul><h4 id="_4-2-知识点二-bean注册" tabindex="-1"><a class="header-anchor" href="#_4-2-知识点二-bean注册" aria-hidden="true">#</a> 4.2 知识点二：bean注册</h4><p><strong>bean注册方式</strong></p><p>如何生成Bean的定义 <code>BeanDefinition</code> ?</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 1. bean定义构造器</span>
<span class="token class-name">BeanDefinitionBuilder</span> beanDefinitionBuilder <span class="token operator">=</span> <span class="token class-name">BeanDefinitionBuilder</span><span class="token punctuation">.</span><span class="token function">genericBeanDefinition</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span> 
  <span class="token comment">// bean实例化 实现方式, 若bean存在无参构造方法，则可以省略这个参数</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 2. bean定义获取</span>
<span class="token class-name">BeanDefinition</span> beanDefinition <span class="token operator">=</span> beanDefinitionBuilder<span class="token punctuation">.</span><span class="token function">getRawBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 拿到上面的bean定义之后，可以设置构造方法参数，作用域等</span>

<span class="token comment">// 3. 注册</span>
beanDefinitionRegistry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-3-知识点三-使用场景" tabindex="-1"><a class="header-anchor" href="#_4-3-知识点三-使用场景" aria-hidden="true">#</a> 4.3 知识点三：使用场景</h4><p>看完本文之后，勤于思考的小伙伴可能就会想，这个东西到底有啥用，有真实的应用场景么？</p><p><strong>自定义bean注册实例场景</strong></p><p>这个应用场景就非常的典型了，用过mybatis的小伙伴都知道，我们会定义一个Mapper接口，用于与对应的xml文件进行映射，那么这些mapper接口是怎么注册到Spring容器的呢？</p><ul><li>核心实现 <code>org.mybatis.spring.mapper.MapperScannerConfigurer</code></li><li>借助<code>BeanDefinitionRegistryPostProcessor</code>与<code>ClassPathBeanDefinitionScanner</code>来实现扫描相关的类，并注册bean</li></ul><p><strong>bean定义修改实例场景</strong></p><p>对于已有的bean定义进行修改，同样也有一个应用场景，在SpringCloud中，有个<code>RefreshAutoConfiguration#RefreshScopeBeanDefinitionEnhancer</code></p><p>它会捞出<code>HikariDataSource</code>数据源bean对象，添加<code>RefreshScope</code>的能力增强，支持配置文件的动态加载</p><p>从而实现数据源配置的热加载更新（不发版，直接改数据库连接池，是不是很方便？）</p><h4 id="_4-4-知识点四-bean初始化后执行方法先后顺序" tabindex="-1"><a class="header-anchor" href="#_4-4-知识点四-bean初始化后执行方法先后顺序" aria-hidden="true">#</a> 4.4 知识点四：bean初始化后执行方法先后顺序</h4><p>我们知道在bean创建之后执行某些方法有多种策略，那么不同的方式先后顺序是怎样的呢？</p><p>bean创建到销毁的先后执行顺序如下</p><ul><li>构造方法</li><li>@PostConstruct修饰的方法</li><li>InitializingBean接口的实现方法</li><li>xml/@Bean中定义的initMethod</li><li>@PreDestroy bean销毁前的执行方法</li></ul><h4 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h4><p>本文为Spring扩展点系列中的第二篇，接下来的扩展知识点同样是bean定义之后，实例化之前的<code>BeanFactoryPostProcessor</code>，那么这两个究竟又有什么区别呢？ 应用场景又有什么区别呢？我是一灰灰，欢迎关注我的Spring专栏，咱们下文见</p>`,61),f={href:"https://hhui.top/spring-extention/",target:"_blank",rel:"noopener noreferrer"},g=n("h2",{id:"iii-不能错过的源码和相关知识点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#iii-不能错过的源码和相关知识点","aria-hidden":"true"},"#"),s(" III. 不能错过的源码和相关知识点")],-1),B=n("h3",{id:"_0-项目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0-项目","aria-hidden":"true"},"#"),s(" 0. 项目")],-1),h={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"},y={href:"https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-extention/101-bean-definition",target:"_blank",rel:"noopener noreferrer"};function D(w,_){const a=l("ExternalLinkIcon");return o(),i("div",null,[r,d,k,c(" more "),m,n("blockquote",null,[n("ul",null,[n("li",null,[n("a",v,[s("【基础系列】Bean之动态注册 | 一灰灰Blog"),e(a)])])])]),b,n("ul",null,[n("li",null,[n("a",f,[s("一灰灰的Spring专栏"),e(a)])])]),g,B,n("ul",null,[n("li",null,[s("工程："),n("a",h,[s("https://github.com/liuyueyi/spring-boot-demo"),e(a)])]),n("li",null,[s("源码："),n("a",y,[s("https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-extention/101-bean-definition"),e(a)])])])])}const x=p(u,[["render",D],["__file","221026-Spring扩展点之自定义bean注册.html.vue"]]);export{x as default};
