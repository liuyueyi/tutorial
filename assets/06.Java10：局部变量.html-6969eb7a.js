import{_ as n,V as a,W as s,a1 as e}from"./framework-094145d2.js";const p={},t=e(`<h2 id="引言" tabindex="-1"><a class="header-anchor" href="#引言" aria-hidden="true">#</a> 引言</h2><p>嘿，Java开发者们！是不是每次写代码，都要在类型声明上浪费好多时间？比如，声明一个变量，还得写上长长的类型名，感觉特别繁琐？别担心，Java 10来救场啦！它带来了一个超酷的新特性——局部变量类型推断。用<code>var</code>关键字，编译器就能自动帮你搞定类型声明，代码瞬间变得简洁又清爽！今天，咱们就来聊聊这个新特性，看看它是怎么让代码“飞起来”的。</p><h2 id="什么是局部变量类型推断" tabindex="-1"><a class="header-anchor" href="#什么是局部变量类型推断" aria-hidden="true">#</a> 什么是局部变量类型推断</h2><h3 id="传统局部变量声明方式回顾" tabindex="-1"><a class="header-anchor" href="#传统局部变量声明方式回顾" aria-hidden="true">#</a> 传统局部变量声明方式回顾</h3><p>想象一下，你正在写代码，突然需要声明一个整型变量。你得这么写：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>是不是感觉有点多余？再看看声明一个字符串变量：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;Hello, Java!&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要是类型更复杂，比如声明一个存储整数的<code>ArrayList</code>，代码就更长了：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这代码写起来是不是有点累？要是类型声明能简单点就好了，对吧？</p><h3 id="java-10的变革-var关键字登场" tabindex="-1"><a class="header-anchor" href="#java-10的变革-var关键字登场" aria-hidden="true">#</a> Java 10的变革：<code>var</code>关键字登场</h3><p>Java 10终于“开窍”了！它引入了<code>var</code>关键字，让你再也不用显式声明变量类型。编译器会自动根据变量的初始值推断类型。比如，上面的代码可以改写成这样：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;Hello, Java!&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>是不是瞬间清爽多了？编译器会根据右侧的值推断出变量的类型，<code>num</code>是<code>int</code>，<code>str</code>是<code>String</code>，<code>list</code>是<code>ArrayList&lt;Integer&gt;</code>。这不仅减少了代码冗余，还让代码更易读。</p><p><strong>小贴士</strong>：<code>var</code>是Java 10的新宠，用它来简化代码，绝对让你爽到飞起！</p><h2 id="局部变量类型推断的工作原理" tabindex="-1"><a class="header-anchor" href="#局部变量类型推断的工作原理" aria-hidden="true">#</a> 局部变量类型推断的工作原理</h2><h3 id="编译器如何推断类型" tabindex="-1"><a class="header-anchor" href="#编译器如何推断类型" aria-hidden="true">#</a> 编译器如何推断类型</h3><p>编译器是怎么做到的呢？其实很简单，它会根据变量初始化表达式的右侧值来推断类型。比如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>编译器看到<code>10</code>是一个整数，就会推断<code>num</code>是<code>int</code>类型。再复杂一点：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>编译器会根据<code>new ArrayList&lt;Integer&gt;()</code>推断出<code>list</code>是<code>ArrayList&lt;Integer&gt;</code>类型。</p><p>要是不信，可以反编译代码看看。比如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VarExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>反编译后，代码会变成这样：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VarExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>是不是很神奇？编译器在编译阶段就把<code>var</code>替换成了具体类型。</p><h3 id="静态类型语言的本质未变" tabindex="-1"><a class="header-anchor" href="#静态类型语言的本质未变" aria-hidden="true">#</a> 静态类型语言的本质未变</h3><p>虽然有了<code>var</code>，但Java依然是静态类型语言。变量的类型在编译时就已经确定，不是运行时才决定的。比如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
num <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 编译错误，类型不匹配</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>编译器会报错，因为<code>num</code>的类型已经被推断为<code>int</code>，你不能给它赋一个字符串值。这就是Java的静态类型特性，即使用了<code>var</code>，代码依然安全可靠。</p><p><strong>小贴士</strong>：<code>var</code>只是让代码更简洁，Java的类型安全依然有保障！</p><h2 id="var的使用场景" tabindex="-1"><a class="header-anchor" href="#var的使用场景" aria-hidden="true">#</a> <code>var</code>的使用场景</h2><h3 id="基础类型变量声明" tabindex="-1"><a class="header-anchor" href="#基础类型变量声明" aria-hidden="true">#</a> 基础类型变量声明</h3><p>声明基础类型变量时，<code>var</code>让代码更简洁。比如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// int类型</span>
<span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span> <span class="token comment">// double类型</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>是不是感觉特别清爽？类型一目了然，代码也更紧凑。</p><h3 id="泛型类型变量声明" tabindex="-1"><a class="header-anchor" href="#泛型类型变量声明" aria-hidden="true">#</a> 泛型类型变量声明</h3><p>对于复杂的泛型类型，<code>var</code>的优势更明显。比如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">var</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;two&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要是不用<code>var</code>，就得写<code>Map&lt;String, Integer&gt; map = new HashMap&lt;String, Integer&gt;();</code>，代码瞬间变长。</p><p><strong>小贴士</strong>：<code>var</code>是处理复杂类型的好帮手，用它来简化代码，特别方便！</p><h3 id="循环中的应用" tabindex="-1"><a class="header-anchor" href="#循环中的应用" aria-hidden="true">#</a> 循环中的应用</h3><p>在循环中，<code>var</code>也能大显身手。比如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>i</code>的类型被推断为<code>int</code>，代码更简洁。在增强的<code>for</code>循环中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;banana&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;cherry&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>item</code>的类型会根据<code>list</code>的元素类型被推断为<code>String</code>，代码看起来更自然。</p><h3 id="方法中的局部变量与返回值" tabindex="-1"><a class="header-anchor" href="#方法中的局部变量与返回值" aria-hidden="true">#</a> 方法中的局部变量与返回值</h3><p>在方法内部，<code>var</code>也能让代码更清晰。比如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VarMethodExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">calculateSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> sum <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token comment">// 局部变量</span>
        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">calculateSum</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 返回值</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;The sum is: &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>是不是感觉代码瞬间清爽多了？</p><h3 id="三元运算结果存储" tabindex="-1"><a class="header-anchor" href="#三元运算结果存储" aria-hidden="true">#</a> 三元运算结果存储</h3><p>使用三元运算符时，<code>var</code>也能派上用场。比如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> flag<span class="token operator">?</span> <span class="token string">&quot;Yes&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;No&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>编译器会根据三元运算的结果类型推断出<code>result</code>是<code>String</code>类型，代码更简洁。</p><h3 id="流操作中的应用" tabindex="-1"><a class="header-anchor" href="#流操作中的应用" aria-hidden="true">#</a> 流操作中的应用</h3><p>在流操作中，<code>var</code>也能简化代码。比如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> numbers <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> squaredList <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                         <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>n <span class="token operator">-&gt;</span> n <span class="token operator">*</span> n<span class="token punctuation">)</span>
                         <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>var</code>让流操作的代码更简洁流畅，不用再写长长的类型声明。</p><h2 id="使用var的注意事项和限制" tabindex="-1"><a class="header-anchor" href="#使用var的注意事项和限制" aria-hidden="true">#</a> 使用<code>var</code>的注意事项和限制</h2><h3 id="必须初始化变量" tabindex="-1"><a class="header-anchor" href="#必须初始化变量" aria-hidden="true">#</a> 必须初始化变量</h3><p>用<code>var</code>声明变量时，必须同时初始化，因为编译器需要通过初始值来推断类型。比如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 正确</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但下面的代码会报错：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">var</span> num<span class="token punctuation">;</span> <span class="token comment">// 编译错误，未初始化</span>
num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>小贴士</strong>：用<code>var</code>时，记得初始化变量，否则编译器会懵圈。</p><h3 id="不能用于特定场景" tabindex="-1"><a class="header-anchor" href="#不能用于特定场景" aria-hidden="true">#</a> 不能用于特定场景</h3><p>虽然<code>var</code>很强大，但它不能用于所有场景。比如，它不能用于类的实例变量、方法参数、方法返回类型、<code>catch</code>块或<code>lambda</code>表达式中。比如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VarLimitExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 错误，不能用于实例变量</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printName</span><span class="token punctuation">(</span><span class="token keyword">var</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 错误，不能用于方法参数</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">var</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 错误，不能用于方法返回类型</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// some code</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token keyword">var</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 错误，不能用于catch块</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">Runnable</span> r <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// 正确，局部变量</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token class-name">Runnable</span> r2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">var</span> num<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// 错误，不能用于lambda参数</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些场景还是得用传统的显式类型声明。</p><p><strong>小贴士</strong>：<code>var</code>是局部变量的专属，其他地方别乱用哦！</p><h3 id="避免影响代码可读性" tabindex="-1"><a class="header-anchor" href="#避免影响代码可读性" aria-hidden="true">#</a> 避免影响代码可读性</h3><p>虽然<code>var</code>能简化代码，但过度使用可能会让代码难以理解。比如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">someComplexMethodThatReturnsAComplexType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果方法的返回类型很复杂，用<code>var</code>可能会让读者摸不着头脑。所以，类型不明显时，还是老老实实写类型吧。</p><p><strong>小贴士</strong>：用<code>var</code>要适度，别让代码变得晦涩难懂。</p><h2 id="总结与展望" tabindex="-1"><a class="header-anchor" href="#总结与展望" aria-hidden="true">#</a> 总结与展望</h2><p>Java 10的局部变量类型推断功能，绝对是Java开发者的福音！用<code>var</code>关键字，代码不仅更简洁，还保持了Java的类型安全性。在实际开发中，合理使用<code>var</code>，能让代码更易读，开发效率也更高。</p><p>不过，用<code>var</code>时，记得遵循它的规则和限制，避免滥用。比如，记得初始化变量，别在不适用的场景中乱用，类型不明显时别偷懒。</p><p>如果你对<code>var</code>还有疑问，或者在实际开发中遇到过有趣的场景，欢迎在评论区分享哦！</p>`,82),o=[t];function c(l,i){return a(),s("div",null,o)}const d=n(p,[["render",c],["__file","06.Java10：局部变量.html.vue"]]);export{d as default};
