const n=JSON.parse('{"key":"v-9a392408","path":"/spring/springai/%E5%9F%BA%E7%A1%80%E7%AF%87/09.ChatClient%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E.html","title":"09.ChatClient使用说明","lang":"zh-CN","frontmatter":{"order":9,"title":"09.ChatClient使用说明","tag":["Spring","SpringAI"],"category":["SpringAI"],"date":"2025-08-01T18:24:07.000Z","keywords":"SpringAI","description":"09.ChatClient使用说明 SpringAI中，ChatModel作为与大模型交互的具体实现，更上一层的应用推荐则是使用ChatClient，特别是在结构化输出、多轮对话的场景，ChatClient提供了更方便的调用方式 如结构化输出，两者的写法对比如下 // 结构化返回场景: // chatModel方式 BeanOutputConverter&lt;ActorsFilms&gt; beanOutputConverter = new BeanOutputConverter&lt;&gt;(ActorsFilms.class); String format = beanOutputConverter.getFormat(); PromptTemplate template = new PromptTemplate(\\"\\"\\" 帮我返回五个{actor}导演的电影名 {format} \\"\\"\\"); Prompt prompt = template.create(Map.of(\\"actor\\", actor, \\"format\\", format)); Generation generation = chatModel.call(prompt).getResult(); if (generation == null) { return null; } return beanOutputConverter.convert(generation.getOutput().getText()); // ChatClient方式 PromptTemplate template = new PromptTemplate(\\"帮我返回五个{actor}导演的电影名，要求中文返回\\"); Prompt prompt = template.create(Map.of(\\"actor\\", actor)); ActorsFilms films = ChatClient.create(chatModel).prompt(prompt).call().entity(ActorsFilms.class);","head":[["meta",{"property":"og:url","content":"https://liuyueyi.github.io/tutorial/spring/springai/%E5%9F%BA%E7%A1%80%E7%AF%87/09.ChatClient%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E.html"}],["meta",{"property":"og:site_name","content":"一灰灰的站点"}],["meta",{"property":"og:title","content":"09.ChatClient使用说明"}],["meta",{"property":"og:description","content":"09.ChatClient使用说明 SpringAI中，ChatModel作为与大模型交互的具体实现，更上一层的应用推荐则是使用ChatClient，特别是在结构化输出、多轮对话的场景，ChatClient提供了更方便的调用方式 如结构化输出，两者的写法对比如下 // 结构化返回场景: // chatModel方式 BeanOutputConverter&lt;ActorsFilms&gt; beanOutputConverter = new BeanOutputConverter&lt;&gt;(ActorsFilms.class); String format = beanOutputConverter.getFormat(); PromptTemplate template = new PromptTemplate(\\"\\"\\" 帮我返回五个{actor}导演的电影名 {format} \\"\\"\\"); Prompt prompt = template.create(Map.of(\\"actor\\", actor, \\"format\\", format)); Generation generation = chatModel.call(prompt).getResult(); if (generation == null) { return null; } return beanOutputConverter.convert(generation.getOutput().getText()); // ChatClient方式 PromptTemplate template = new PromptTemplate(\\"帮我返回五个{actor}导演的电影名，要求中文返回\\"); Prompt prompt = template.create(Map.of(\\"actor\\", actor)); ActorsFilms films = ChatClient.create(chatModel).prompt(prompt).call().entity(ActorsFilms.class);"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-08T02:51:24.000Z"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"SpringAI"}],["meta",{"property":"article:published_time","content":"2025-08-01T18:24:07.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-08T02:51:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"09.ChatClient使用说明\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-08-01T18:24:07.000Z\\",\\"dateModified\\":\\"2025-08-08T02:51:24.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"一、基本使用","slug":"一、基本使用","link":"#一、基本使用","children":[{"level":3,"title":"1. 创建ChatClient","slug":"_1-创建chatclient","link":"#_1-创建chatclient","children":[]},{"level":3,"title":"2. OpenAI兼容API的客户端初始化方式","slug":"_2-openai兼容api的客户端初始化方式","link":"#_2-openai兼容api的客户端初始化方式","children":[]},{"level":3,"title":"3. 提示词传入","slug":"_3-提示词传入","link":"#_3-提示词传入","children":[]},{"level":3,"title":"4. 响应","slug":"_4-响应","link":"#_4-响应","children":[]},{"level":3,"title":"5. 流式调用","slug":"_5-流式调用","link":"#_5-流式调用","children":[]}]},{"level":2,"title":"二、进阶使用","slug":"二、进阶使用","link":"#二、进阶使用","children":[{"level":3,"title":"1. 提示词模板","slug":"_1-提示词模板","link":"#_1-提示词模板","children":[]},{"level":3,"title":"2. stream结构化返回","slug":"_2-stream结构化返回","link":"#_2-stream结构化返回","children":[]},{"level":3,"title":"3. 默认值","slug":"_3-默认值","link":"#_3-默认值","children":[]},{"level":3,"title":"4. Advisor","slug":"_4-advisor","link":"#_4-advisor","children":[]}]},{"level":2,"title":"三、小结","slug":"三、小结","link":"#三、小结","children":[]}],"git":{"createdTime":1754621484000,"updatedTime":1754621484000,"contributors":[{"name":"yihui","email":"bangzewu@126.com","commits":1}]},"readingTime":{"minutes":8,"words":2401},"filePathRelative":"spring/springai/基础篇/09.ChatClient使用说明.md","localizedDate":"2025年8月1日","excerpt":"<h1> 09.ChatClient使用说明</h1>\\n<p>SpringAI中，<code>ChatModel</code>作为与大模型交互的具体实现，更上一层的应用推荐则是使用<code>ChatClient</code>，特别是在结构化输出、多轮对话的场景，<code>ChatClient</code>提供了更方便的调用方式</p>\\n<p>如结构化输出，两者的写法对比如下</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token comment\\">// 结构化返回场景:</span>\\n<span class=\\"token comment\\">// chatModel方式</span>\\n<span class=\\"token class-name\\">BeanOutputConverter</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">ActorsFilms</span><span class=\\"token punctuation\\">&gt;</span></span> beanOutputConverter <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">BeanOutputConverter</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token punctuation\\">&gt;</span></span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">ActorsFilms</span><span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">class</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">String</span> format <span class=\\"token operator\\">=</span> beanOutputConverter<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getFormat</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token class-name\\">PromptTemplate</span> template <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">PromptTemplate</span><span class=\\"token punctuation\\">(</span><span class=\\"token triple-quoted-string string\\">\\"\\"\\"\\n        帮我返回五个{actor}导演的电影名\\n        {format}\\n    \\"\\"\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">Prompt</span> prompt <span class=\\"token operator\\">=</span> template<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">create</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Map</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">of</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"actor\\"</span><span class=\\"token punctuation\\">,</span> actor<span class=\\"token punctuation\\">,</span> <span class=\\"token string\\">\\"format\\"</span><span class=\\"token punctuation\\">,</span> format<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">Generation</span> generation <span class=\\"token operator\\">=</span> chatModel<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">call</span><span class=\\"token punctuation\\">(</span>prompt<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getResult</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>generation <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n<span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n<span class=\\"token keyword\\">return</span> beanOutputConverter<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">convert</span><span class=\\"token punctuation\\">(</span>generation<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getOutput</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getText</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n\\n<span class=\\"token comment\\">// ChatClient方式</span>\\n<span class=\\"token class-name\\">PromptTemplate</span> template <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">PromptTemplate</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"帮我返回五个{actor}导演的电影名，要求中文返回\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">Prompt</span> prompt <span class=\\"token operator\\">=</span> template<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">create</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Map</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">of</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"actor\\"</span><span class=\\"token punctuation\\">,</span> actor<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">ActorsFilms</span> films <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">ChatClient</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">create</span><span class=\\"token punctuation\\">(</span>chatModel<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">prompt</span><span class=\\"token punctuation\\">(</span>prompt<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">call</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">entity</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">ActorsFilms</span><span class=\\"token punctuation\\">.</span><span class=\\"token keyword\\">class</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{},"autoDesc":true}');export{n as data};
