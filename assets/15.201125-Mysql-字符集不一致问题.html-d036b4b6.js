import{_ as a,V as e,W as n,X as o,a1 as s}from"./framework-094145d2.js";const c="/tutorial/hexblog/imgs/201125/00.jpg",t="/tutorial/hexblog/imgs/201125/01.jpg",i={},l=s(`<p>做一个简单的如下的连表查询，居然直接提示错误，居然是字符集不一致的问题，本文记录一下mysql的字符集类型，以及下面这个问题的解决方案</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> a<span class="token punctuation">.</span>id<span class="token punctuation">,</span> b<span class="token punctuation">.</span>id <span class="token keyword">from</span> tt <span class="token keyword">as</span> a<span class="token punctuation">,</span> t2 <span class="token keyword">as</span> b <span class="token keyword">where</span> a<span class="token punctuation">.</span>xx <span class="token operator">=</span> b<span class="token punctuation">.</span>xx

<span class="token comment">-- Illegal mix of collations (utf8mb4_unicode_ci,IMPLICIT) and (utf8mb4_general_ci,IMPLICIT) for operation &#39;=&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),p=s(`<h3 id="_1-解决方法" tabindex="-1"><a class="header-anchor" href="#_1-解决方法" aria-hidden="true">#</a> 1. 解决方法</h3><p>先来看上面这个问题的解决方法，最容易想到的就是统一两张表的字符集，要么都是<code>utf8mb4_general_ci</code>，要么就都是<code>utf8mb4_unicode_ci</code>，统一一下这个问题就自然解决了</p><p>如果我不想修改表的字符集呢？毕竟生产环境下，做这种操作还是有风险的，下面是一种不太优雅的解决方法</p><ul><li>在字段后面指定字符集（可以全部都指定为<code>utf8mb4_general_ci</code> 当然也可以全部指定为 <code>utf8mb4_unicode_ci</code>， 根据实际需要进行处理即可）</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> a<span class="token punctuation">.</span>id<span class="token punctuation">,</span> b<span class="token punctuation">.</span>id <span class="token keyword">from</span> tt <span class="token keyword">as</span> a<span class="token punctuation">,</span> t2 <span class="token keyword">as</span> b <span class="token keyword">where</span> a<span class="token punctuation">.</span>xx <span class="token operator">=</span> b<span class="token punctuation">.</span>xx <span class="token keyword">collate</span> utf8mb4_general_ci
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-mysql字符集" tabindex="-1"><a class="header-anchor" href="#_2-mysql字符集" aria-hidden="true">#</a> 2. mysql字符集</h3><p><strong>字符集</strong></p><p>对于国内的小伙伴，一般而言我们常见的字符集有下面三种</p><ul><li><code>gbk</code>: 两字节</li><li><code>utf8</code>: 三个字节</li><li><code>utf8mb4</code>: 四个字节</li></ul><p>而mysql实际支持的就比较多了，可以通过<code>show charset;</code>进行查询</p><figure><img src="`+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>校验规则</strong></p><p>在实际的case中，经常会看到下面几种</p><ul><li><code>utf8_bin</code></li><li><code>utf8mb4_unicode_ci</code></li><li><code>utf8mb4_general_ci</code></li><li><code>latin1_general_cs</code></li></ul><p>当然我们也可以通过 <code>show collation;</code>查看所支持的校验规则</p><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>请注意上面的写法</p><ul><li>ci: <code>case insensitive的缩写</code> 大小写不敏感</li><li>cs: <code>case sensitive</code> 大小写敏感</li><li>bin: 二进制存储，大小写敏感</li></ul>',18);function d(r,u){return e(),n("div",null,[l,o(" more "),p])}const m=a(i,[["render",d],["__file","15.201125-Mysql-字符集不一致问题.html.vue"]]);export{m as default};
