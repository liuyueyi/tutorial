import{_ as p,V as e,W as o,X as c,Y as n,Z as s,$ as t,a1 as i,F as l}from"./framework-094145d2.js";const u="/tutorial/imgs/200412/00.jpg",k="/tutorial/imgs/200412/01.jpg",d={},r=n("p",null,[s("在SpringBoot中，想使用定时器比较简单，一个注解"),n("code",null,"@Scheduled"),s("配合上cron表达式即可支持各种定时任务了；")],-1),v=n("p",null,"单机任务还是比较简单的，但是当我们的服务有多个实例在运行时，如果只希望一个实例上的定时任务执行，可以怎么出了呢？",-1),m=i(`<h2 id="i-场景分析" tabindex="-1"><a class="header-anchor" href="#i-场景分析" aria-hidden="true">#</a> I. 场景分析</h2><h3 id="_1-需求说明" tabindex="-1"><a class="header-anchor" href="#_1-需求说明" aria-hidden="true">#</a> 1. 需求说明</h3><p>简单来讲，就是我们的应用中，有一个定时任务（如每天八点给用户推送早报），为了保证我们的应用可靠性，这个应用部署了三台实例</p><p>因此当我们对定时任务不做任何处理时，每台实例上的定时任务到了八点就执行，用户就会接收到三次推送</p><p>所以为了避免上面的场景出现，我们希望，三个实例中只能有一个实例的定时任务生效，其他的两个不执行</p><h3 id="_2-方案设计" tabindex="-1"><a class="header-anchor" href="#_2-方案设计" aria-hidden="true">#</a> 2. 方案设计</h3><p>从上面的场景描述，可以看成是一个分布式的任务调度的问题，当然我们接下来并不是要实现一个功能完备的分布式任务调度（已经有很多相关的优秀框架了... 如果感兴趣的话，也不是不可以再造一个轮子）；</p><p>我们可以采用一个简单的方案来实现这种排他性，比如我们选择一个公用的配置信息用来存储允许执行定时任务的实例ip，当实例的定时任务执行之前，先判断一下实例ip与配置的ip是否相同，如果是，则可以执行定时任务；否则不执行</p><p><strong>注意：上面这种方式可以实现排他性，但是有风险哦（如配置中的ip不对，或者这个ip对应的实例下线了，可能导致定时任务没有实例运行哦）</strong></p><h2 id="ii-分布式定时任务实现" tabindex="-1"><a class="header-anchor" href="#ii-分布式定时任务实现" aria-hidden="true">#</a> II. 分布式定时任务实现</h2><h3 id="_0-分析" tabindex="-1"><a class="header-anchor" href="#_0-分析" aria-hidden="true">#</a> 0. 分析</h3><p>在我们上面的设计中，有几个问题是需要我们关心的</p><ul><li>配置如何处理？</li><li>如何拦截定时器的操作</li></ul><p><strong>配置存储</strong></p><p>一般来讲，应用部署多个实例的情况下，多半实在微服务的架构下，如果我们有可用的配置中心，这也是一个比较好的存储配置的方案；</p><p>当然如果没有配置中心，使用redis/db进行配置的存储，也是ok的，具体的选择取决于我们的应用实际情况；唯一需要注意的是，这个配置对于所有的实例公用，仅存一份</p><p><strong>定时器拦截</strong></p><p>关于定时器的拦截，最容易想到的就是AOP，拦截目标方法，然后在切面中判断是否需要执行</p><p>直接使用AOP拦截所有的<code>@Scheduled</code>方法貌似可以，但是有以下缺陷</p><ul><li>定时任务的方法需要是<code>public/package/protected</code>，不然切面不会生效（请注意，定时任务注解<code>@Scheduled</code>是可以修饰private方法，并生效的哦，它的具体实现方式和我们常见的AOP有一些区别）</li><li>当系统中存在分布式定时任务和普通定时任务（即每个实例的定时任务都需要正常执行）时，不太合适 <ul><li>因此入股使用AOP，可以考虑新建一个注解，来实现</li></ul></li></ul><p><strong>定时任务扩展</strong></p><p>这里走的是另外一条思路，在Spring扫描定时任务的时候，我们扩展一下最终的任务逻辑，在具体的执行之前，做一个过滤规则</p><h3 id="_1-aop实现方式" tabindex="-1"><a class="header-anchor" href="#_1-aop实现方式" aria-hidden="true">#</a> 1. AOP实现方式</h3><blockquote><p>为了简化后续的测试逻辑，我们用一个简单的方式用来替代多实例的测试，将多实例的单任务执行，简化为单实例中，多个定时任务只允许一个执行，通过方法名来判断到底允许哪个任务执行</p></blockquote><p>首先自定义一个注解</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">DistributeTask</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * lock key
     *
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token class-name">String</span> <span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>写一个简单的获取配置的Mock类，用来模拟配置竞争</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExecutiveLock</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> lockMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ExecutiveLock</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExecutiveLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">ExecutiveLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> lockVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> old <span class="token operator">=</span> lockMap<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> lockVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> lockVal<span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>old<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心的切面逻辑，</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Aspect</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoAop</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">&quot;@annotation(DistributeTask)&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">doAround</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token class-name">Method</span> method <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">MethodSignature</span><span class="token punctuation">)</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> lock <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">DistributeTask</span> task <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">DistributeTask</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ExecutiveLock</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lock<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Aop allow: &quot;</span> <span class="token operator">+</span> lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Aop ignore : &quot;</span> <span class="token operator">+</span> lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>写两个定时任务，请注意两个方法不能是<code>private</code>，否则启动会失败</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 每s执行一次
 *
 * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">InterruptedException</span></span>
 */</span>
<span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">&quot;0/5 * * * * ?&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@DistributeTask</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">&quot;tt&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">scheduleAtFixRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Rate1: &quot;</span> <span class="token operator">+</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; &gt;&gt;&gt; &quot;</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token doc-comment comment">/**
 * 每s执行一次
 *
 * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">InterruptedException</span></span>
 */</span>
<span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">&quot;0/5 * * * * ?&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@DistributeTask</span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token string">&quot;tt&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">scheduleAtFixRate2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Rate2: &quot;</span> <span class="token operator">+</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; &gt;&gt;&gt; &quot;</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来是启动类，请注意看注解</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableScheduling</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-定时任务扩展" tabindex="-1"><a class="header-anchor" href="#_2-定时任务扩展" aria-hidden="true">#</a> 2. 定时任务扩展</h3><p>上面aop的方式除了要求定时任务方法不能是private之外，没有什么其他的问题；</p><p>但如果我就希望定时任务可以是private方法时，可以怎么办？</p><p>接下来我们通过自定义的定时任务来替换Spring提供的，使用的Spring版本为<code>5.2.1.RELEASE</code>（不同的版本实现方式会有些区别哦）</p><p>自定义<code>ScheduledAnnotationBeanPostProcessor</code>，重写生成定时任务的方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyScheduledAnnotationBeanPostProcessor</span> <span class="token keyword">extends</span> <span class="token class-name">ScheduledAnnotationBeanPostProcessor</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">Runnable</span> <span class="token function">createRunnable</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getParameterCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;Only no-arg methods may be annotated with @Scheduled&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Method</span> invocableMethod <span class="token operator">=</span> <span class="token class-name">AopUtils</span><span class="token punctuation">.</span><span class="token function">selectInvocableMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyScheduledMethodRunnable</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> invocableMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在我们自定义的定时任务中，添加判断逻辑<code>MyScheduledMethodRunnable</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyScheduledMethodRunnable</span> <span class="token keyword">extends</span> <span class="token class-name">ScheduledMethodRunnable</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DistributeTask</span> distributeTask<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MyScheduledMethodRunnable</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span>
        distributeTask <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">DistributeTask</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>distributeTask <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> lock <span class="token operator">=</span> <span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ExecutiveLock</span><span class="token punctuation">.</span>instance<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span>distributeTask<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lock<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;扩展 run: &quot;</span> <span class="token operator">+</span> lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;扩展 ignore: &quot;</span> <span class="token operator">+</span> lock<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>引用我们自定义的定时任务处理类替换默认的实现</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">MyScheduledAnnotationBeanPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">EnableDistributeScheduling</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们的启动类，需要修改一下，将<code>@EnableScheduling</code>替换为<code>@EnableDistributeScheduling</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@EnableDistributeScheduling</span>
<span class="token comment">//@EnableScheduling</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后将我们的定时任务，添加上private修饰，最终测试输出结果如下图</p><figure><img src="`+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上面介绍的这种实现方式，主要是接入定时任务的生成逻辑，在这里我们有更多的操作空间，比如某些不满足条件的定时任务直接不生成，避免无用的调度</p><h2 id="ii-其他" tabindex="-1"><a class="header-anchor" href="#ii-其他" aria-hidden="true">#</a> II. 其他</h2><h3 id="_0-项目" tabindex="-1"><a class="header-anchor" href="#_0-项目" aria-hidden="true">#</a> 0. 项目</h3>',52),b={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-case/009-distribute-scheduler-task",target:"_blank",rel:"noopener noreferrer"};function h(y,f){const a=l("ExternalLinkIcon");return e(),o("div",null,[r,v,c(" more "),m,n("ul",null,[n("li",null,[s("工程："),n("a",b,[s("https://github.com/liuyueyi/spring-boot-demo"),t(a)])]),n("li",null,[s("源码："),n("a",g,[s("https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-case/009-distribute-scheduler-task"),t(a)])])])])}const _=p(d,[["render",h],["__file","01.200412-SpringBoot系列教程之实现一个简单的分布式定时任务.html.vue"]]);export{_ as default};
