import{_ as s,V as e,W as t,X as p,Y as n,Z as a,a1 as o}from"./framework-094145d2.js";const c={},l=n("h1",{id:"实战18-随机数生成怎么选",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#实战18-随机数生成怎么选","aria-hidden":"true"},"#"),a(" 实战18：随机数生成怎么选")],-1),i=n("p",null,[a("随机数生成，java中有一个专门的Random类来实现，除此之外，使用"),n("code",null,"Math.random"),a("的也比较多，接下来我们简单学习下，随机数的使用姿势")],-1),d=o(`<h2 id="_1-随机数生成" tabindex="-1"><a class="header-anchor" href="#_1-随机数生成" aria-hidden="true">#</a> 1.随机数生成</h2><h3 id="_1-1-math-random" tabindex="-1"><a class="header-anchor" href="#_1-1-math-random" aria-hidden="true">#</a> 1.1. Math.random</h3><p>jdk提供的基础工具类Math中封装一些常用的基础方法，比如我们今天的主题，生成随机数，使用姿势如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">double</span> val <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用起来比较简单，生成的是[0,1)之间的浮点数，但是不要以为它就真的只能生成0-1之间的随机数，举例如下</p><p>如果想利用它，生成一个 <code>[120, 500]</code> 这个区间的随机数，怎么整？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">381</span> <span class="token operator">+</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>为啥上面的可行？</p><p>将上面的代码翻译一下，取值区间如</p><p><code>Math.random() * 381 + 120</code> 取值范围如下</p><ul><li>[0, 1) * 381 + 120</li><li>[0, 381) + 120</li><li>[120, 501)</li></ul><p>借助<code>Math.ceil</code>只取浮点数中的整数部分，这样我们的取值范围就是 [120, 500]了，和我们的预期一致</p><p>最后简单来看下，<code>Math.random()</code>是怎么实现随机数的</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">RandomNumberGeneratorHolder</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Random</span> randomNumberGenerator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">RandomNumberGeneratorHolder</span><span class="token punctuation">.</span>randomNumberGenerator<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意上面的实现，原来底层依然使用的是<code>Random</code>类来生成随机数，而且上面这种写法属于非常经典的单例模式写法（不同于我们常见的双重判定方式，这种属于内部类的玩法，后面再说为啥可以这么用）</p><h3 id="_1-2-random" tabindex="-1"><a class="header-anchor" href="#_1-2-random" aria-hidden="true">#</a> 1.2. Random</h3><p>除了使用上面的Math.random来获取随机数之外，直接使用Random类也是很常见的case；接下来先简单看一下Random的使用姿势</p><p><strong>创建Random对象</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 以当前时间戳作为随机种子</span>
<span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 以固定的数字作为随机种子，好处是每次执行时生成的随机数是一致的，便于场景复现</span>
<span class="token class-name">Random</span> random2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>生成随机数</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// [0, max) 之间的随机整数</span>
random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 随机返回ture/false</span>
random<span class="token punctuation">.</span><span class="token function">nextBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 随机长整数</span>
random<span class="token punctuation">.</span><span class="token function">nextLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 随机浮点数</span>
random<span class="token punctuation">.</span><span class="token function">nextFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
random<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>伪随机高斯分布双精度数</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>random<span class="token punctuation">.</span><span class="token function">nextGaussian</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>随机类的nextGaussian()方法返回下一个伪随机数，即与随机数生成器序列的平均值为0.0，标准差为1.0的高斯(正态)分布双精度值</p><p>这种使用场景可能用在更专业的场景，至少我接触过的业务开发中，没有用过这个😂</p><h3 id="_1-3-math-random-与-random如何选" tabindex="-1"><a class="header-anchor" href="#_1-3-math-random-与-random如何选" aria-hidden="true">#</a> 1.3. Math.random 与 Random如何选</h3><p>上面两个都可以用来生成随机数，那么在实际使用的时候，怎么选择呢？</p><p>从前面的描述也可以知道，它们两没啥本质区别，底层都是用的Random类，在实际的运用过程中，如果我们希望可以场景复现，比如测试中奖概率的场景下，选择Random类，指定随机种子可能更友好；如果只是简单的随机数生成使用，那么选择<code>Math.random</code>即可，至少使用起来一行代码即可</p>`,28);function u(r,m){return e(),t("div",null,[l,i,p(" more "),d])}const v=s(c,[["render",u],["__file","18.随机数生成怎么选.html.vue"]]);export{v as default};
