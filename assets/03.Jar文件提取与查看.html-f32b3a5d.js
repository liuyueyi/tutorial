import{_ as l,V as i,W as r,X as d,Y as a,Z as n,$ as e,a1 as c,F as t}from"./framework-094145d2.js";const o={},p=a("p",null,[n("最近遇到一个奇怪的问题，一个jar包无法解压，直接使用"),a("code",null,"jar xvf xxx.jar"),n("没有任何响应")],-1),u=a("p",null,[n("因为实际想看的只是jar包中的某个class文件，基于此可以通过 "),a("code",null,"jar tf"),n(" 查看文件列表，在通过 "),a("code",null,"jar xf xxx.jar xxxfile"),n("的方式来解压指定文件来实现目的")],-1),v=a("p",null,"接下来记录一下jar包的几个操作case",-1),h=c(`<h3 id="_1-jar包生成" tabindex="-1"><a class="header-anchor" href="#_1-jar包生成" aria-hidden="true">#</a> 1. jar包生成</h3><p>直接通过jar命令可以非常简单的将class文件打包到一个jar中</p><p>一个简单的java类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打包jar命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>javac Hello.java
jar xvf Hello.jar Hello.class
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>直接使用上面这种打包，会有一个问题，当jar包中，有多个class文件存在main方法时，会提示没有主清单属性</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">java</span> <span class="token parameter variable">-jar</span> Hello.jar
没有主清单属性
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>主要原因就是在清单文件<code>MANIFEST.MF</code>中，没有指定主类</p><p>指定主类</p><div class="language-MF line-numbers-mode" data-ext="MF"><pre class="language-MF"><code>Manifest-Version: 1.0
Created-By: 1.8.0_171 (Oracle Corporation)
Main-Class: Hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打包命令如下（下面新增了一个Wel.java，源码就不说了）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>jar cvfm B.jar MAINFEST.MF <span class="token parameter variable">-c</span> Hello.class Wel.class
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-jar文件列表查看" tabindex="-1"><a class="header-anchor" href="#_2-jar文件列表查看" aria-hidden="true">#</a> 2. jar文件列表查看</h3><p>查看jar中有哪些文件，除了直接使用vim之外，还可考虑通过下面的命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># tf 来查看jar包中的文件列表</span>
$ jar tf B.jar
META-INF/
META-INF/MANIFEST.MF
Hello.class
Wel.class
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用tf进行查看，就可以结合 grep 来过滤指定的文件</p><h3 id="_3-指定文件提取" tabindex="-1"><a class="header-anchor" href="#_3-指定文件提取" aria-hidden="true">#</a> 3. 指定文件提取</h3><p>对于jar文件整个解压，可以直接使用</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>jar xvf B.jar
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当我们只希望提取jar包中的某个文件时，可以在后面添加需要提取的文件路径</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 指定文件提取</span>
jar xf B.jar Hello.class
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="一灰灰的联系方式" tabindex="-1"><a class="header-anchor" href="#一灰灰的联系方式" aria-hidden="true">#</a> 一灰灰的联系方式</h2><p>尽信书则不如无书，以上内容，纯属一家之言，因个人能力有限，难免有疏漏和错误之处，如发现bug或者有更好的建议，欢迎批评指正，不吝感激</p>`,24),m={href:"https://blog.hhui.top",target:"_blank",rel:"noopener noreferrer"},b={href:"https://weibo.com/p/1005052169825577/home",target:"_blank",rel:"noopener noreferrer"},g=a("li",null,"QQ： 一灰灰/3302797840",-1),_=a("li",null,[n("微信公众号："),a("strong",null,"一灰灰blog")],-1),j=a("figure",null,[a("img",{src:"https://spring.hhui.top/spring-blog/imgs/info/info.png",alt:"QrCode",tabindex:"0",loading:"lazy"}),a("figcaption",null,"QrCode")],-1);function k(f,x){const s=t("ExternalLinkIcon");return i(),r("div",null,[p,u,v,d(" more "),h,a("ul",null,[a("li",null,[n("个人站点："),a("a",m,[n("https://blog.hhui.top"),e(s)])]),a("li",null,[n("微博地址: "),a("a",b,[n("小灰灰Blog"),e(s)])]),g,_]),j])}const F=l(o,[["render",k],["__file","03.Jar文件提取与查看.html.vue"]]);export{F as default};
