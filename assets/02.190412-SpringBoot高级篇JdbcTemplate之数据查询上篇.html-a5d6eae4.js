import{_ as p,V as o,W as c,X as l,Y as n,Z as s,$ as t,a1 as e,F as i}from"./framework-094145d2.js";const u="/tutorial/imgs/190412/00.jpg",r="/tutorial/imgs/190412/01.jpg",d="/tutorial/imgs/190412/02.jpg",k="/tutorial/imgs/190412/03.jpg",m="/tutorial/imgs/190412/04.jpg",v={},b=n("p",null,"前面一篇介绍如何使用JdbcTemplate实现插入数据，接下来进入实际业务中，最常见的查询篇。由于查询的姿势实在太多，对内容进行了拆分，本篇主要介绍几个基本的使用姿势",-1),g=n("ul",null,[n("li",null,"queryForMap"),n("li",null,"queryForList"),n("li",null,"queryForObject")],-1),y=n("h2",{id:"i-环境准备",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#i-环境准备","aria-hidden":"true"},"#"),s(" I. 环境准备")],-1),h={href:"http://spring.hhui.blog/spring-blog/2019/04/07/190407-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%8F%92%E5%85%A5%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E8%AF%A6%E8%A7%A3/",target:"_blank",rel:"noopener noreferrer"},q={href:"https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/101-jdbctemplate",target:"_blank",rel:"noopener noreferrer"},f=e('<p>我们查询所用数据，正是前面一篇插入的结果，如下图</p><figure><img src="'+u+`" alt="db mysql" tabindex="0" loading="lazy"><figcaption>db mysql</figcaption></figure><h2 id="ii-查询使用说明" tabindex="-1"><a class="header-anchor" href="#ii-查询使用说明" aria-hidden="true">#</a> II. 查询使用说明</h2><h3 id="_1-queryformap" tabindex="-1"><a class="header-anchor" href="#_1-queryformap" aria-hidden="true">#</a> 1. queryForMap</h3><p>queryForMap，一般用于查询单条数据，然后将db中查询的字段，填充到map中，key为列名，value为值</p><h4 id="a-基本使用姿势" tabindex="-1"><a class="header-anchor" href="#a-基本使用姿势" aria-hidden="true">#</a> a. 基本使用姿势</h4><p>最基本的使用姿势，就是直接写完整的sql，执行</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;select * from money where id=1&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForMap</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;QueryForMap by direct sql ans: &quot;</span> <span class="token operator">+</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种用法的好处是简单，直观；但是有个非常致命的缺点，如果你提供了一个接口为</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">String</span> condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;select * from money where name=&quot;</span> <span class="token operator">+</span> condition<span class="token punctuation">;</span>
  <span class="token keyword">return</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForMap</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接看上面代码，会发现问题么？？？</p><p>有经验的小伙伴，可能一下子就发现了sql注入的问题，如果传入的参数是 <code>&#39;一灰灰blog&#39; or 1=1 order by id desc limit 1</code>, 这样输出和我们预期的一致么？</p><h4 id="b-占位符替换" tabindex="-1"><a class="header-anchor" href="#b-占位符替换" aria-hidden="true">#</a> b. 占位符替换</h4><p>正是因为直接拼sql，可能到只sql注入的问题，所以更推荐的写法是通过占位符 + 传参的方式</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 使用占位符替换方式查询</span>
sql <span class="token operator">=</span> <span class="token string">&quot;select * from money where id=?&quot;</span><span class="token punctuation">;</span>
map <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForMap</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;QueryForMap by ? ans: &quot;</span> <span class="token operator">+</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 指定传参类型, 通过传参来填充sql中的占位</span>
sql <span class="token operator">=</span> <span class="token string">&quot;select * from money where id =?&quot;</span><span class="token punctuation">;</span>
map <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForMap</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;QueryForMap by ? ans: &quot;</span> <span class="token operator">+</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的例子中也可以看出，占位符的使用很简单，用问好（<code>?</code>）来代替具体的取值，然后传参</p><p>传参有两种姿势，一个是传入<code>Object[]</code>数组；另外一个是借助java的不定长参数方式进行传参；两个的占位替换都是根据顺序来的，也就是如果你有一个值想替换多个占位符，那就得血多次</p><p>如：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sql = &quot;select * from money where (name=? and id=?) or (name=? and id=?)&quot;;
map = jdbcTemplate.queryForMap(sql, &quot;一灰灰blog&quot;, 1, &quot;一灰灰blog&quot;, 2);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="c-查不到的case" tabindex="-1"><a class="header-anchor" href="#c-查不到的case" aria-hidden="true">#</a> c. 查不到的case</h4><p>使用queryForMap有个不得不注意的事项，就是如果查不到数据时，会抛一个异常出来，所以需要针对这种场景进行额外处理</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 查不到数据的情况</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    sql <span class="token operator">=</span> <span class="token string">&quot;select * from money where id =?&quot;</span><span class="token punctuation">;</span>
    map <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForMap</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;QueryForMap by ? ans: &quot;</span> <span class="token operator">+</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">EmptyResultDataAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+r+`" alt="查询不到异常" tabindex="0" loading="lazy"><figcaption>查询不到异常</figcaption></figure><h3 id="_2-queryforlist" tabindex="-1"><a class="header-anchor" href="#_2-queryforlist" aria-hidden="true">#</a> 2. queryForList</h3><p>前面针对的主要是单个查询，如果有多个查询的场景，可能就需要用到<code>queryForList</code>了，它的使用姿势和上面其实差别不大；</p><h4 id="a-基本使用姿势-1" tabindex="-1"><a class="header-anchor" href="#a-基本使用姿势-1" aria-hidden="true">#</a> a. 基本使用姿势</h4><p>最基本的使用姿势当然是直接写sql执行了</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;============ query for List! ==============&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> sql <span class="token operator">=</span>
        <span class="token string">&quot;select id, \`name\`, money, is_deleted as isDeleted, unix_timestamp(create_at) as created, unix_timestamp(update_at) as updated from money limit 3;&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 默认返回 List&lt;Map&lt;String, Object&gt;&gt; 类型数据，如果一条数据都没有，则返回一个空的集合</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;basicQueryForList: &quot;</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意返回的结果是<code>List&lt;Map&lt;String, Object&gt;&gt;</code>， 如果一条都没有命中，会返回一个空集合, 和 <code>QueryForMap</code> 抛异常是不一样的</p><h4 id="b-占位符替换-1" tabindex="-1"><a class="header-anchor" href="#b-占位符替换-1" aria-hidden="true">#</a> b. 占位符替换</h4><p>直接使用sql的查询方式，依然和前面一样，可能有注入问题，当然优先推荐的使用通过占位来传参方式</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> sql2 <span class="token operator">=</span> <span class="token string">&quot;select id, \`name\`, money, is_deleted as isDeleted, unix_timestamp(create_at) as created, &quot;</span> <span class="token operator">+</span>
        <span class="token string">&quot;unix_timestamp(update_at) as updated from money where id=? or name=?;&quot;</span><span class="token punctuation">;</span>
res <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span>sql2<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;一灰灰2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;queryForList by template: &quot;</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-queryforobject" tabindex="-1"><a class="header-anchor" href="#_3-queryforobject" aria-hidden="true">#</a> 3. queryForObject</h3><p>如果是简单查询，直接用上面两个也就够了，但是对于使用过mybatis，Hibernate的同学来说，每次返回<code>Map&lt;String, Object&gt;</code>，就真的有点蛋疼了, 对于mysql这种数据库，表的结构基本不变，完全可以和POJO进行关联，对于业务开发者而言，当然是操作具体的POJO比Map要简单直观多了</p><p>下面将介绍下，如何使用 <code>queryForObject</code> 来达到我们的目标</p><h4 id="a-原始使用姿势" tabindex="-1"><a class="header-anchor" href="#a-原始使用姿势" aria-hidden="true">#</a> a. 原始使用姿势</h4><p>首先介绍下利用 <code>RowMapper</code> 来演示下，最原始的使用姿势</p><p>第一步是定义对应的POJO类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MoneyPO</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5423883314375017670L</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> money<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> isDeleted<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> created<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> updated<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后就是使用姿势</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// sql + 指定返回类型方式访问</span>
<span class="token comment">// 使用这种sql的有点就是方便使用反射方式，实现PO的赋值</span>
<span class="token class-name">String</span> sql <span class="token operator">=</span>
        <span class="token string">&quot;select id, \`name\`, money, is_deleted as isDeleted, unix_timestamp(create_at) as created, unix_timestamp(update_at) as updated from money limit 1;&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 需要注意，下标以1开始</span>
<span class="token class-name">MoneyPO</span> moneyPO <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MoneyPO</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">MoneyPO</span> <span class="token function">mapRow</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">,</span> <span class="token keyword">int</span> rowNum<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token class-name">MoneyPO</span> po <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MoneyPO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        po<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        po<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        po<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        po<span class="token punctuation">.</span><span class="token function">setDeleted</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        po<span class="token punctuation">.</span><span class="token function">setCreated</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        po<span class="token punctuation">.</span><span class="token function">setUpdated</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> po<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;queryFroObject by RowMapper: &quot;</span> <span class="token operator">+</span> moneyPO<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从使用姿势上看，<code>RowMapper</code> 就是一个sql执行之后的回调，实现结果封装，这里需要注意的就是 <code>ResultSet</code> 封装了完整的返回结果，可以通过下标方式指定，下标是从1开始，而不是我们常见的0，需要额外注意</p><p>这个下标从1开始，感觉有点蛋疼，总容易记错，所以更推荐的方法是直接通过列名获取数据</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 直接使用columnName来获取对应的值，这里就可以考虑使用反射方式来赋值，减少getter/setter</span>
moneyPO <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MoneyPO</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">MoneyPO</span> <span class="token function">mapRow</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> rs<span class="token punctuation">,</span> <span class="token keyword">int</span> rowNum<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
        <span class="token class-name">MoneyPO</span> po <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MoneyPO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        po<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        po<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        po<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">&quot;money&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        po<span class="token punctuation">.</span><span class="token function">setDeleted</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string">&quot;isDeleted&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        po<span class="token punctuation">.</span><span class="token function">setCreated</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token string">&quot;created&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        po<span class="token punctuation">.</span><span class="token function">setUpdated</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token string">&quot;updated&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> po<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;queryFroObject by RowMapper: &quot;</span> <span class="token operator">+</span> moneyPO<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="b-高级使用" tabindex="-1"><a class="header-anchor" href="#b-高级使用" aria-hidden="true">#</a> b. 高级使用</h4><p>当sql返回的列名和POJO的属性名可以完全匹配上的话，上面的这种写法就显得非常冗余和麻烦了，我需要更优雅简洁的使用姿势，最好就是直接传入<code>POJO</code>类型，自动实现转换</p><p>如果希望得到这个效果，你需要的就是下面这个了: <code>BeanPropertyRowMapper</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 更简单的方式，直接通过BeanPropertyRowMapper来实现属性的赋值，前提是sql返回的列名能正确匹配</span>
moneyPO <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanPropertyRowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">MoneyPO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;queryForObject by BeanPropertyRowMapper: &quot;</span> <span class="token operator">+</span> moneyPO<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="c-易错使用姿势" tabindex="-1"><a class="header-anchor" href="#c-易错使用姿势" aria-hidden="true">#</a> c. 易错使用姿势</h4><p>查看JdbcTemplate提供的接口时，可以看到下面这个接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">queryForObject</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> requiredType<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DataAccessException</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">queryForObject</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token function">getSingleColumnRowMapper</span><span class="token punctuation">(</span>requiredType<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自然而然的想到，直接传入POJO的类型进去，是不是就可以得到我们预期的结果了?</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> sql <span class="token operator">=</span>
                <span class="token string">&quot;select id, \`name\`, money, is_deleted as isDeleted, unix_timestamp(create_at) as created, unix_timestamp(update_at) as updated from money limit 1;&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token class-name">MoneyPO</span> po <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token class-name">MoneyPO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;queryForObject by requireType return: &quot;</span> <span class="token operator">+</span> po<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行上面的代码，抛出异常</p><figure><img src="`+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从上面的源码也可以看到，上面的使用姿势，适用于sql只返回一列数据的场景，即下面的case</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 下面开始测试下 org.springframework.jdbc.core.JdbcTemplate.queryForObject(java.lang.String, java.lang.Class&lt;T&gt;, java.lang.Object...)</span>
<span class="token comment">// 根据测试，这个类型，只能是基本类型</span>
<span class="token class-name">String</span> sql2 <span class="token operator">=</span> <span class="token string">&quot;select id from money where id=?&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">Integer</span> res <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span>sql2<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;queryForObject by requireId return: &quot;</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+k+'" alt="show" tabindex="0" loading="lazy"><figcaption>show</figcaption></figure><h3 id="_4-测试" tabindex="-1"><a class="header-anchor" href="#_4-测试" aria-hidden="true">#</a> 4. 测试</h3>',59),j={href:"https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/101-jdbctemplate/src/main/java/com/git/hui/boot/jdbc/query/QueryService.java",target:"_blank",rel:"noopener noreferrer"},_=e(`<p>简单的继承调用下上面的所有方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">QueryService</span> queryService<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Application</span><span class="token punctuation">(</span><span class="token class-name">QueryService</span> queryService<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>queryService <span class="token operator">=</span> queryService<span class="token punctuation">;</span>

        <span class="token function">queryTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queryTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        queryService<span class="token punctuation">.</span><span class="token function">queryForMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        queryService<span class="token punctuation">.</span><span class="token function">queryForObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        queryService<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下</p><figure><img src="`+m+'" alt="result" tabindex="0" loading="lazy"><figcaption>result</figcaption></figure><h2 id="iii-小结" tabindex="-1"><a class="header-anchor" href="#iii-小结" aria-hidden="true">#</a> III. 小结</h2><p>本篇博文主要介绍了JdbcTemplate查询的简单使用姿势，主要是<code>queryForMap</code>, <code>queryForList</code>, <code>queryForObject</code>三种方法的调用</p><h3 id="_1-根据返回结果数量" tabindex="-1"><a class="header-anchor" href="#_1-根据返回结果数量" aria-hidden="true">#</a> 1. 根据返回结果数量</h3><p><strong>单条记录查询</strong></p><ul><li><code>queryForMap</code> ： 返回一条记录，返回的结果塞入<code>Map&lt;String, Object&gt;</code>， key为固定的String对应查询的列名；value为实际值</li><li><code>queryForObject</code> ：同样返回一条数据，与上面的区别在于可以借助<code>RowMapper</code>来实现返回结果转换为对应的POJO</li></ul><p>需要注意的是，上面的查询，必须有一条记录返回，如果查不到，则抛异常</p><p><strong>批量查询</strong></p><ul><li><code>queryForList</code> ：一次查询&gt;=0条数据，返回类型为 <code>List&lt;Map&lt;String, Object&gt;&gt;</code></li></ul><h3 id="_2-根据sql类型" tabindex="-1"><a class="header-anchor" href="#_2-根据sql类型" aria-hidden="true">#</a> 2. 根据sql类型</h3><p>有两种sql传参方式</p><ul><li>一个是写完整的sql语句，就和我们普通的sql查询一样；问题是存在注入的风险</li><li>其次是使用占位符(?), 实际的值通过参数方式传入</li></ul><h2 id="iv-其他" tabindex="-1"><a class="header-anchor" href="#iv-其他" aria-hidden="true">#</a> IV. 其他</h2>',16),w={href:"http://spring.hhui.blog/spring-blog/2019/04/07/190407-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%8F%92%E5%85%A5%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E8%AF%A6%E8%A7%A3/",target:"_blank",rel:"noopener noreferrer"},O={href:"http://spring.hhui.top/spring-blog/2019/04/12/190412-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87JdbcTemplate%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E4%B8%8A%E7%AF%87/",target:"_blank",rel:"noopener noreferrer"},S=n("h3",{id:"_0-项目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0-项目","aria-hidden":"true"},"#"),s(" 0. 项目")],-1),F={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"},x={href:"https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/101-jdbctemplate",target:"_blank",rel:"noopener noreferrer"};function M(E,A){const a=i("ExternalLinkIcon");return o(),c("div",null,[b,g,l(" more "),y,n("p",null,[s("环境依然借助前面一篇的配置，链接如： "),n("a",h,[s("190407-SpringBoot高级篇JdbcTemplate之数据插入使用姿势详解"),t(a)])]),n("p",null,[s("或者直接查看项目源码： "),n("a",q,[s("https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/101-jdbctemplate"),t(a)])]),f,n("p",null,[s("上面所有代码可以查看: "),n("a",j,[s("https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/101-jdbctemplate/src/main/java/com/git/hui/boot/jdbc/query/QueryService.java"),t(a)])]),_,n("ul",null,[n("li",null,[n("a",w,[s("190407-SpringBoot高级篇JdbcTemplate之数据插入使用姿势详解"),t(a)])]),n("li",null,[n("a",O,[s("190412-SpringBoot高级篇JdbcTemplate之数据查询上篇"),t(a)])])]),S,n("ul",null,[n("li",null,[s("工程："),n("a",F,[s("https://github.com/liuyueyi/spring-boot-demo"),t(a)])]),n("li",null,[s("项目："),n("a",x,[s("https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/101-jdbctemplate"),t(a)])])])])}const T=p(v,[["render",M],["__file","02.190412-SpringBoot高级篇JdbcTemplate之数据查询上篇.html.vue"]]);export{T as default};
