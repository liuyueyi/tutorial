import{_ as t,V as p,W as o,X as c,Y as n,Z as s,$ as e,a1 as i,F as l}from"./framework-094145d2.js";const u="/tutorial/imgs/231220/00.jpg",d="/tutorial/imgs/231220/01.jpg",r={},k=n("p",null,"前面介绍的几篇是消息广播，所有在群组内的小伙伴都可以收到消息；那么如果后台只想给某个用户私发消息，可以怎么实现呢？",-1),m=n("p",null,"本文将主要介绍服务端如何给客户端发送消息",-1),v=i(`<h2 id="i-实例演示" tabindex="-1"><a class="header-anchor" href="#i-实例演示" aria-hidden="true">#</a> I. 实例演示</h2><h3 id="_1-项目搭建" tabindex="-1"><a class="header-anchor" href="#_1-项目搭建" aria-hidden="true">#</a> 1. 项目搭建</h3><p>项目搭建过程与前文类似，请直接参考上文 或者 查看文末的项目源码</p><h3 id="_2-websocket配置" tabindex="-1"><a class="header-anchor" href="#_2-websocket配置" aria-hidden="true">#</a> 2. WebSocket配置</h3><p>核心的websocket配置依然与之前一致，实现<code>WebSocketMessageBrokerConfigurer</code>接口，定义端点、消息代理、认证授权拦截器</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableWebSocketMessageBroker</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StompConfiguration</span> <span class="token keyword">implements</span> <span class="token class-name">WebSocketMessageBrokerConfigurer</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 这里定义的是客户端接收服务端消息的相关信息
     *
     * <span class="token keyword">@param</span> <span class="token parameter">registry</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureMessageBroker</span><span class="token punctuation">(</span><span class="token class-name">MessageBrokerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 消息代理指定了客户端订阅地址，前端订阅的就是这个路径, 接收后端发送的消息</span>
        <span class="token comment">// 对应 index.js中的 stompClient.subscribe(&#39;/topic/hello&#39;</span>
        registry<span class="token punctuation">.</span><span class="token function">enableSimpleBroker</span><span class="token punctuation">(</span><span class="token string">&quot;/topic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 表示配置一个或多个前缀，通过这些前缀过滤出需要被注解方法处理的消息。</span>
        <span class="token comment">// 例如，前缀为 /app 的 destination 可以通过@MessageMapping注解的方法处理，</span>
        <span class="token comment">// 而其他 destination （例如 /topic /queue）将被直接交给 broker 处理</span>
        registry<span class="token punctuation">.</span><span class="token function">setApplicationDestinationPrefixes</span><span class="token punctuation">(</span><span class="token string">&quot;/app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 添加一个服务端点，来接收客户端的连接
     * 即客户端创建ws时，指定的地址, let socket = new WebSocket(&quot;ws://ws/hello&quot;);
     *
     * <span class="token keyword">@param</span> <span class="token parameter">registry</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerStompEndpoints</span><span class="token punctuation">(</span><span class="token class-name">StompEndpointRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Endpoint指定了客户端建立连接时的请求地址</span>
        registry<span class="token punctuation">.</span><span class="token function">addEndpoint</span><span class="token punctuation">(</span><span class="token string">&quot;/ws/chat/{channel}&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/video/{target}&quot;</span><span class="token punctuation">)</span>
                <span class="token comment">// 用于设置连接的用户身份识别</span>
                <span class="token punctuation">.</span><span class="token function">setHandshakeHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AuthHandshakeHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">// 设置拦截器，从cookie中识别出登录用户</span>
                <span class="token punctuation">.</span><span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token function">authHandshakeInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">withSockJS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">AuthHandshakeInterceptor</span> <span class="token function">authHandshakeInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AuthHandshakeInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-消息发送" tabindex="-1"><a class="header-anchor" href="#_3-消息发送" aria-hidden="true">#</a> 3. 消息发送</h3><h4 id="_3-1-sendto-返回消息" tabindex="-1"><a class="header-anchor" href="#_3-1-sendto-返回消息" aria-hidden="true">#</a> 3.1 @SendTo 返回消息</h4><p>对于服务器若需要将消息发送给客户端，最简单的方式就是接收消息时，直接返回，如</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 当接受到客户端发送的消息时, 发送的路径是： /app/hello (这个/app前缀是 StompConfiguration 中的配置的)
 * 将返回结果推送给所有订阅了 /topic/hello 的消费者
 *
 * <span class="token keyword">@param</span> <span class="token parameter">content</span>
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@MessageMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SendTo</span><span class="token punctuation">(</span><span class="token string">&quot;/topic/hello&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">String</span> content<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;resp: &quot;</span> <span class="token operator">+</span> content <span class="token operator">+</span> <span class="token string">&quot; | &quot;</span> <span class="token operator">+</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这个实现，即表示接收 <code>/app/hello</code> 发送的消息，然后将结果转发给所有订阅了 <code>/topic/hello</code> 的客户端</p><h4 id="_3-2-simpmessagingtemplate-返回消息" tabindex="-1"><a class="header-anchor" href="#_3-2-simpmessagingtemplate-返回消息" aria-hidden="true">#</a> 3.2 SimpMessagingTemplate 返回消息</h4><p>若我们希望更灵活的返回消息，比如后台主动的返回消息，此时则可以借助Spring封装的<code>SimpMessagingTemplate</code>来实现消息回传</p><p>直接通过<code>@Autowired</code>的方式注入</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WsAnswerHelper</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">SimpMessagingTemplate</span> simpMessagingTemplate<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">WsAnswerHelper</span><span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">publish</span><span class="token punctuation">(</span><span class="token class-name">String</span> destination<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        instance<span class="token punctuation">.</span>simpMessagingTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>destination<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">publish</span><span class="token punctuation">(</span><span class="token class-name">String</span> user<span class="token punctuation">,</span> <span class="token class-name">String</span> destination<span class="token punctuation">,</span> <span class="token class-name">Object</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        instance<span class="token punctuation">.</span>simpMessagingTemplate<span class="token punctuation">.</span><span class="token function">convertAndSendToUser</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> destination<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的工具类，主要封装了官方提供的两种返回方式</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 向目标地址广播消息</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token class-name">D</span> destination<span class="token punctuation">,</span> <span class="token class-name">Object</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 给特定用户发送消息</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">convertAndSendToUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> user<span class="token punctuation">,</span> <span class="token class-name">String</span> destination<span class="token punctuation">,</span> <span class="token class-name">Object</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然上面提供了两种方式，但是看一下<code>convertAndSendToUser</code>的源码实现会发现，它的底层依然调用的是<code>convertAndSend</code>，向特定用户发送消息，无非就是调整 <code>destination</code> 的取值</p><figure><img src="`+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>重点看一下<code>destination</code>的取值 = <code>this.destinationPrefix + user + destination</code> = <code>&quot;/user/&quot; + user + destination</code></p><p>所以当我们希望给特定用户发送消息时；需要用户订阅 <code>/user/destination</code> 的地址， 如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>stompClient<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">/user/topic/notify</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 订阅用户的私人broker，用于接收系统私发消息； 后台通过向 /user/xxx/topic/notify 发送消息，来传递给某个私人用户</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;系统消息: &quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">showGreeting</span><span class="token punctuation">(</span><span class="token string">&#39;systemMsg&#39;</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于客户端而言，虽然我订阅的是 <code>/user/topic/notify</code>， 但是后台返回消息的目的地，实际上则是 <code>/user/xxxx/topic/notify</code> ，其中的xxx则是用户标识</p><p>现在的问题就是，这个用户的标识，是怎么确定的呢?</p><ul><li>主要就是我们前面做用户身份鉴权中介绍到的<code>HandshakeHandler</code>中定义的Principal</li><li>在webscoket的生命周期内，通过Principal来识别用户身份，当需要向后端发送消息时，也是基于它来确定user</li></ul><h3 id="_4-使用实例" tabindex="-1"><a class="header-anchor" href="#_4-使用实例" aria-hidden="true">#</a> 4. 使用实例</h3><p>比如写一个定时器，给每个3s给当前登录的用户报时</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 用户登录缓存：key 用户名 value sessionId
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> userCache<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedRate <span class="token operator">=</span> <span class="token number">3000</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">autoSendMsgToUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        userCache<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>uname <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;用户广播消息: {}&quot;</span><span class="token punctuation">,</span> uname<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">WsAnswerHelper</span><span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>uname<span class="token punctuation">,</span> <span class="token string">&quot;/topic/notify&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;【%s】当前时间: %s&quot;</span><span class="token punctuation">,</span> uname<span class="token punctuation">,</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_5-小结" tabindex="-1"><a class="header-anchor" href="#_5-小结" aria-hidden="true">#</a> 5. 小结</h3><p>本文主要介绍的是后端如何给客户端发送消息，其中重点介绍了一下当我们希望给用户私发消息时，可以借助<code>simpMessagingTemplate.convertAndSendToUser</code>来实现，当然对应的用户也需要订阅<code>/user/xxx</code>的channel</p><p>到目前位置，我们的所有聊天还局限于文本的交流，如果我们希望传图，可以怎么做呢？</p><h2 id="ii-不能错过的源码和相关知识点" tabindex="-1"><a class="header-anchor" href="#ii-不能错过的源码和相关知识点" aria-hidden="true">#</a> II. 不能错过的源码和相关知识点</h2><h3 id="_0-项目" tabindex="-1"><a class="header-anchor" href="#_0-项目" aria-hidden="true">#</a> 0. 项目</h3>',34),b={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-case/207-websocket-chat",target:"_blank",rel:"noopener noreferrer"};function h(f,y){const a=l("ExternalLinkIcon");return p(),o("div",null,[k,m,c(" more "),v,n("ul",null,[n("li",null,[s("工程："),n("a",b,[s("https://github.com/liuyueyi/spring-boot-demo"),e(a)])]),n("li",null,[s("源码："),n("a",g,[s("https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-case/207-websocket-chat"),e(a)])])])])}const _=t(r,[["render",h],["__file","231220-SpringBoot系列之WebSocket消息发送示例.html.vue"]]);export{_ as default};
