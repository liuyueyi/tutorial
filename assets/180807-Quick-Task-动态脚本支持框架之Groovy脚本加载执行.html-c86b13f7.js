import{_ as t,V as o,W as p,Y as n,Z as s,$ as e,X as c,a1 as l,F as i}from"./framework-094145d2.js";const u={},r=n("h1",{id:"quick-task-动态脚本支持框架之groovy脚本加载执行",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#quick-task-动态脚本支持框架之groovy脚本加载执行","aria-hidden":"true"},"#"),s(" Quick-Task 动态脚本支持框架之Groovy脚本加载执行")],-1),k=n("p",null,"上一篇简答说了如何判断有任务动态添加、删除或更新，归于一点就是监听文件的变化，判断目录下的Groovy文件是否有新增删除和改变，从而判定是否有任务的变更；",-1),d=n("p",null,"接下来的问题就比较明显了，当任务变更之后，就需要重新加载任务了，即如何动态的编译并执行Groovy文件呢？",-1),h=n("p",null,"相关系列博文：",-1),v={href:"https://liuyueyi.github.io/hexblog/2018/06/28/180628-%E5%8A%A8%E6%80%81%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E6%A1%86%E6%9E%B6%E6%83%B3%E6%B3%95%E7%AF%87/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://blog.hhui.top/hexblog/2018/07/02/180702-QuickTask%E5%8A%A8%E6%80%81%E8%84%9A%E6%9C%AC%E6%94%AF%E6%8C%81%E6%A1%86%E6%9E%B6%E6%95%B4%E4%BD%93%E4%BB%8B%E7%BB%8D%E7%AF%87/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://liuyueyi.github.io/hexblog/2018/07/23/180723-Quick-Task-%E5%8A%A8%E6%80%81%E8%84%9A%E6%9C%AC%E6%94%AF%E6%8C%81%E6%A1%86%E6%9E%B6%E4%B9%8B%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1%E7%AF%87/",target:"_blank",rel:"noopener noreferrer"},E={href:"https://liuyueyi.github.io/hexblog/2018/07/29/180729-Quick-Task-%E5%8A%A8%E6%80%81%E8%84%9A%E6%9C%AC%E6%94%AF%E6%8C%81%E6%A1%86%E6%9E%B6%E4%B9%8B%E4%BB%BB%E5%8A%A1%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD/",target:"_blank",rel:"noopener noreferrer"},b=l(`<h2 id="i-groovy文件动态加载" tabindex="-1"><a class="header-anchor" href="#i-groovy文件动态加载" aria-hidden="true">#</a> I. Groovy文件动态加载</h2><p>要想动态加载类，可以怎么办？如果对JVM有一定了解的朋友可能知道，自定义一个ClassLoader，可以实现从文件/网络/DB/Jar包中读取class文件，而Groovy，动态语言，简单来说就是.groovy文件可以直接运行，那么我们编码中要怎么玩？</p><h3 id="_1-依赖" tabindex="-1"><a class="header-anchor" href="#_1-依赖" aria-hidden="true">#</a> 1. 依赖</h3><p>让我自己来实现Groovy文件的编译执行，目前基本上是看不到啥希望的，所以果断的借助第三方工具类加载Groovy文件</p><p>pom文件添加依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.codehaus.groovy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>groovy-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.4.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-加载groovy" tabindex="-1"><a class="header-anchor" href="#_2-加载groovy" aria-hidden="true">#</a> 2. 加载Groovy</h3><p>直接利用上面jar包中提供的GroovyCalssLoader来加载Groovy文件即可，使用也比较简单</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GroovyCompile</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">compile</span><span class="token punctuation">(</span><span class="token class-name">File</span> codeSource<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> interfaceType<span class="token punctuation">,</span> <span class="token class-name">ClassLoader</span> classLoader<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> <span class="token class-name">CompileTaskScriptException</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">GroovyClassLoader</span> loader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GroovyClassLoader</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Class</span> clz <span class="token operator">=</span> loader<span class="token punctuation">.</span><span class="token function">parseClass</span><span class="token punctuation">(</span>codeSource<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 接口校验</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>interfaceType<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>clz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CompileTaskScriptException</span><span class="token punctuation">(</span><span class="token string">&quot;illegal script type!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> clz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;load code from {} error! e: {}&quot;</span><span class="token punctuation">,</span> codeSource<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CompileTaskScriptException</span><span class="token punctuation">(</span><span class="token string">&quot;load code from &quot;</span> <span class="token operator">+</span> codeSource <span class="token operator">+</span> <span class="token string">&quot; error!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CompileTaskScriptException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;initial script error! codePath: {}, e: {}&quot;</span><span class="token punctuation">,</span> codeSource<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CompileTaskScriptException</span><span class="token punctuation">(</span>
                    <span class="token string">&quot;initial script error! clz: &quot;</span> <span class="token operator">+</span> codeSource <span class="token operator">+</span> <span class="token string">&quot; msg: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面看着挺多，关键地方就三行，编译为class对象之后，借助反射来创建对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">GroovyClassLoader</span> loader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GroovyClassLoader</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Class</span> clz <span class="token operator">=</span> loader<span class="token punctuation">.</span><span class="token function">parseClass</span><span class="token punctuation">(</span>codeSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> clz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另外还有一行，也可以顺带凑一眼，判断一个class是否为另一个class的子类，用的是</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>interfaceType<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>clz<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>而判断某个对象是否为某类的子类用的则是 <code>instance of</code></p><h3 id="_3-调用包装" tabindex="-1"><a class="header-anchor" href="#_3-调用包装" aria-hidden="true">#</a> 3. 调用包装</h3><p>上面既然提供了一个工具类，那么接上篇的获取变动文件之后，获取File对象，借此拿到任务对象，就比较清晰了</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScriptLoadUtil</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ITask</span> <span class="token function">loadScript</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">GroovyCompile</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token class-name">ITask</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">ScriptLoadUtil</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CompileTaskScriptException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;un-expect error! e: {}&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-小结" tabindex="-1"><a class="header-anchor" href="#_4-小结" aria-hidden="true">#</a> 4. 小结</h3><p>本篇内容比较简单，知识点也没多少，一个是利用<code>GroovyClassLoader</code>来编译Groovy文件并获取实例；另一个就是如何判断一个class是否为另一个class的子类</p><p>还有一个隐藏的点上面没有说，那就是上面的GroovyCompile文件中，每次加载Groovy文件时，都是新创建了一个GroovyClassLoader，并由它来加载并实例Groovy任务，那么问题来了</p><ul><li>能否用一个GoorvyClassLoader来管理所有的Groovy任务呢？</li><li>上面的代码实现中，不同的Groovy任务之间，可以相互通信么？</li></ul><p>针对上面的问题，暂不给出答案，后面再说</p><h2 id="ii-其他" tabindex="-1"><a class="header-anchor" href="#ii-其他" aria-hidden="true">#</a> II. 其他</h2><h3 id="_0-相关" tabindex="-1"><a class="header-anchor" href="#_0-相关" aria-hidden="true">#</a> 0. 相关</h3><p><strong>博文：</strong></p>`,25),_={href:"https://liuyueyi.github.io/hexblog/2018/06/28/180628-%E5%8A%A8%E6%80%81%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E6%A1%86%E6%9E%B6%E6%83%B3%E6%B3%95%E7%AF%87/",target:"_blank",rel:"noopener noreferrer"},y={href:"https://blog.hhui.top/hexblog/2018/07/02/180702-QuickTask%E5%8A%A8%E6%80%81%E8%84%9A%E6%9C%AC%E6%94%AF%E6%8C%81%E6%A1%86%E6%9E%B6%E6%95%B4%E4%BD%93%E4%BB%8B%E7%BB%8D%E7%AF%87/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://liuyueyi.github.io/hexblog/2018/07/23/180723-Quick-Task-%E5%8A%A8%E6%80%81%E8%84%9A%E6%9C%AC%E6%94%AF%E6%8C%81%E6%A1%86%E6%9E%B6%E4%B9%8B%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1%E7%AF%87/",target:"_blank",rel:"noopener noreferrer"},A={href:"https://liuyueyi.github.io/hexblog/2018/07/29/180729-Quick-Task-%E5%8A%A8%E6%80%81%E8%84%9A%E6%9C%AC%E6%94%AF%E6%8C%81%E6%A1%86%E6%9E%B6%E4%B9%8B%E4%BB%BB%E5%8A%A1%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD/",target:"_blank",rel:"noopener noreferrer"},B=n("p",null,[n("strong",null,"项目：")],-1),x={href:"https://github.com/liuyueyi/quick-task",target:"_blank",rel:"noopener noreferrer"},C={id:"_1-一灰灰blog-https-liuyueyi-github-io-hexblog",tabindex:"-1"},w=n("a",{class:"header-anchor",href:"#_1-一灰灰blog-https-liuyueyi-github-io-hexblog","aria-hidden":"true"},"#",-1),T={href:"https://liuyueyi.github.io/hexblog",target:"_blank",rel:"noopener noreferrer"},G={href:"https://liuyueyi.github.io/hexblog",target:"_blank",rel:"noopener noreferrer"},q=n("p",null,"一灰灰的个人博客，记录所有学习和工作中的博文，欢迎大家前去逛逛",-1),S=n("h3",{id:"_2-声明",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-声明","aria-hidden":"true"},"#"),s(" 2. 声明")],-1),Q=n("p",null,"尽信书则不如，已上内容，纯属一家之言，因个人能力有限，难免有疏漏和错误之处，如发现bug或者有更好的建议，欢迎批评指正，不吝感激",-1),F={href:"https://weibo.com/p/1005052169825577/home",target:"_blank",rel:"noopener noreferrer"},L=n("li",null,"QQ： 一灰灰/3302797840",-1),j=n("h3",{id:"_3-扫描关注",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-扫描关注","aria-hidden":"true"},"#"),s(" 3. 扫描关注")],-1),I=n("p",null,[n("strong",null,"一灰灰blog")],-1),z=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/liuyueyi/Source/master/img/info/blogInfoV2.png",alt:"QrCode",tabindex:"0",loading:"lazy"}),n("figcaption",null,"QrCode")],-1),D=n("p",null,[n("strong",null,"知识星球")],-1),V=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/liuyueyi/Source/master/img/info/goals.png",alt:"goals",tabindex:"0",loading:"lazy"}),n("figcaption",null,"goals")],-1);function N(J,M){const a=i("ExternalLinkIcon");return o(),p("div",null,[r,k,d,h,n("ul",null,[n("li",null,[n("a",v,[s("180628-Quick-Task 动态任务执行框架想法篇"),e(a)])]),n("li",null,[n("a",g,[s("180702-Quick-Task 动态脚本支持框架整体介绍篇"),e(a)])]),n("li",null,[n("a",m,[s("180723-Quick-Task 动态脚本支持框架之结构设计篇"),e(a)])]),n("li",null,[n("a",E,[s("180729-Quick-Task 动态脚本支持框架之任务动态加载"),e(a)])])]),c("more"),b,n("ul",null,[n("li",null,[n("a",_,[s("180628-Quick-Task 动态任务执行框架想法篇"),e(a)])]),n("li",null,[n("a",y,[s("180702-Quick-Task 动态脚本支持框架整体介绍篇"),e(a)])]),n("li",null,[n("a",f,[s("180723-Quick-Task 动态脚本支持框架之结构设计篇"),e(a)])]),n("li",null,[n("a",A,[s("180729-Quick-Task 动态脚本支持框架之任务动态加载"),e(a)])])]),B,n("ul",null,[n("li",null,[n("a",x,[s("https://github.com/liuyueyi/quick-task"),e(a)])])]),n("h3",C,[w,s(" 1. "),n("a",T,[s("一灰灰Blog"),e(a)]),s("： "),n("a",G,[s("https://liuyueyi.github.io/hexblog"),e(a)])]),q,S,Q,n("ul",null,[n("li",null,[s("微博地址: "),n("a",F,[s("小灰灰Blog"),e(a)])]),L]),j,I,z,D,V])}const W=t(u,[["render",N],["__file","180807-Quick-Task-动态脚本支持框架之Groovy脚本加载执行.html.vue"]]);export{W as default};
