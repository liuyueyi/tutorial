import{_ as p,V as o,W as c,X as i,Y as n,Z as a,$ as e,a1 as t,F as l}from"./framework-094145d2.js";const u="/tutorial/imgs/191213/00.jpg",r="/tutorial/imgs/191213/01.jpg",d="/tutorial/imgs/191213/02.jpg",k={},v=t("<p>我们知道在spring中可以通过<code>@Component</code>，<code>@Service</code>, <code>@Repository</code> 装饰一个类，通过自动扫描注册为bean；也可以通过在配置类中，借助<code>@Bean</code>来注册bean；那么除了这几种方式之外，还有什么其他的方式来声明一个类为bean么？</p><p>我们是否可以自定义一个注解，然后将这个注解装饰的类主动声明为bean注册到spring容器，从而实现类似<code>@Component</code>的效果呢？</p><p>接下来本文将介绍，如果通过<code>ImportBeanDefinitionRegistrar</code>结合自定义注解来实现bean注册，主要用到的知识点如下：</p><ul><li><code>ImportBeanDefinitionRegistrar</code> bean注册的核心类</li><li><code>@Import</code> 导入配置</li><li><code>ClassPathBeanDefinitionScanner</code></li></ul>",4),m=t(`<h2 id="i-自定义bean注册器" tabindex="-1"><a class="header-anchor" href="#i-自定义bean注册器" aria-hidden="true">#</a> I. 自定义bean注册器</h2><p>虽然我们的目标比较清晰，但是突然让我们来实现这么个东西，还真有点手足无措，应该从哪里下手呢？</p><h3 id="_0-寻找-致敬-对象" tabindex="-1"><a class="header-anchor" href="#_0-寻找-致敬-对象" aria-hidden="true">#</a> 0. 寻找&quot;致敬&quot;对象</h3><p>如果看过我之前关于SpringBoot结合java web三剑客（Filter, Servlet, Listener)的相关博文的同学，应该会记得一个重要的知识点：</p><ul><li><code>@WebListener</code>, <code>@WebServlet</code>, <code>@WebFilter</code> 这三个注解属于Servlet3+ 规范</li><li>在SpringBoot项目中，如需要上面注解生效，需要在启动类上添加注解 <code>@ServletComponentScan</code></li></ul><p>看到上面这个是不是会有一丝灵感被激发（在当时写上面博文的时候，特意的看了一下后面注解的逻辑），嘿嘿，感觉找到了一条通往成功之旅的道路</p><p>既然<code>@WebXxx</code>注解不是原生的Spring支持注解，所以让他生效的注解 <code>@ServletComponentScan</code>就显得很重要了，显然是它充当了桥梁（在搞事情了），然后我们致敬（抄袭）的对象就有了</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">ServletComponentScanRegistrar</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">ServletComponentScan</span> <span class="token punctuation">{</span>
	<span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">&quot;basePackages&quot;</span><span class="token punctuation">)</span>
	<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span>
	<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">basePackages</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">basePackageClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注解定义比较简单，最终生效的不用说，肯定是<code>ServletComponentScanRegistrar</code>了，再接着瞅一眼</p><figure><img src="`+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>（不同的SpringBoot版本，上面的实现类可能会有一定的差异，上面的源码截取自spring-boot 2.1.2.RELEASE版本的包内）</p><h3 id="_1-准备篇" tabindex="-1"><a class="header-anchor" href="#_1-准备篇" aria-hidden="true">#</a> 1. 准备篇</h3><p>致敬对象找到了，接下来开始正式实现前的一些准备工作，首先我们把目标具体事例化</p><ul><li>所有类上拥有自定义注解<code>@Meta</code>的类，会注册到Spring容器，作为一个普通的Bean对象</li></ul><p>然后就是测试测试验证是否生效的关键case了</p><ul><li>无外部依赖的<code>@Meta</code>类是否可以正常被spring识别</li><li><code>@Meta</code>类是否可以被其他<code>bean</code> or <code>@Meta</code>类通过<code>@Autowired</code>引入</li><li><code>@Meta</code>类是否可以正常依赖普通的<code>bean</code>，<code>@Meta</code>类</li></ul><h3 id="_2-开始实现" tabindex="-1"><a class="header-anchor" href="#_2-开始实现" aria-hidden="true">#</a> 2. 开始实现</h3><h4 id="a-meta注解定义" tabindex="-1"><a class="header-anchor" href="#a-meta注解定义" aria-hidden="true">#</a> a. @Meta注解定义</h4><p>类似<code>@Component</code>注解的功能，我们弄简单一点即可</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Meta</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="b-metacomponentscan注解" tabindex="-1"><a class="header-anchor" href="#b-metacomponentscan注解" aria-hidden="true">#</a> b. @MetaComponentScan注解</h4><p>这个注解和<code>@ServletComponentScan</code>作用差不多，主要是用来加载<code>ImportBeanDefinitionRegistrar</code>实现类，后者则是定义bean的核心类</p><p>实现如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">MetaAutoConfigureRegistrar</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MetaComponentScan</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">&quot;basePackages&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@AliasFor</span><span class="token punctuation">(</span><span class="token string">&quot;value&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">basePackages</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">basePackageClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先暂时无视Import的值，看一下注解的<code>basePackages</code>和<code>basePackageClasses</code></p><p>我们知道<code>@ComponentScan</code>的作用主要是用来指定哪些包路径下的类开启注解扫描；<code>MetaComponentScan</code>的几个成员主要作用和上面相同；</p><ul><li>当指定了值的时候，主要加载这些包路径下，包含<code>@Meta</code>注解的类；</li><li>如果全是默认值（即为空），则扫描这个注解所在类对应的包路径下所有包含<code>@Meta</code>的类</li></ul><h4 id="c-metaautoconfigureregistrar" tabindex="-1"><a class="header-anchor" href="#c-metaautoconfigureregistrar" aria-hidden="true">#</a> c. MetaAutoConfigureRegistrar</h4><p>接下来进入我们的核心类，它主要继承自<code>ImportBeanDefinitionRegistrar</code>，bean定义注册器，其核心方法为</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> importingClassMetadata<span class="token punctuation">,</span> <span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,30),b={href:"http://spring.hhui.top/spring-blog/2018/10/13/181013-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C/",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"@Meta",-1),h=t('<p>自然而然的想法</p><ul><li>扫描所有的类，判断是否有<code>@Meta</code>注解，有则通过registry手动注册</li></ul><p>然而在实际动手之前，再稍微停一停；扫描所有类判断是否有某个注解，这个操作在spring中应该属于比较常见的case（why?），应该是有一些可供我们使用的辅助类</p><p>继续撸&quot;致敬&quot;的对象，<code>ServletComponentScanRegistrar</code>类主要是注册<code>servletComponentRegisteringPostProcessor</code>，所以我们再转移目标到后者的详情(下图来自<code>org.springframework.boot.web.servlet.ServletComponentRegisteringPostProcessor#createComponentProvider</code>)</p><figure><img src="'+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>到这里我们的思路又打开了，可以借助<code>ClassPathScanningCandidateComponentProvider</code>来实现bean注册</p><hr><p>上面的一段内容属于前戏，放在脑海里迅速的过一过就好了，接下来进入正文；</p><p>首先是创建一个<code>ClassPathScanningCandidateComponentProvider</code>的子类，注册一个<code>AnnotationTypeFilter</code>，确保过滤获取所有<code>@Meta</code>注解的类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MetaBeanDefinitionScanner</span> <span class="token keyword">extends</span> <span class="token class-name">ClassPathBeanDefinitionScanner</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">MetaBeanDefinitionScanner</span><span class="token punctuation">(</span><span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">,</span> <span class="token keyword">boolean</span> useDefaultFilters<span class="token punctuation">,</span>
            <span class="token class-name">Environment</span> environment<span class="token punctuation">,</span> <span class="token class-name">ResourceLoader</span> resourceLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> useDefaultFilters<span class="token punctuation">,</span> environment<span class="token punctuation">,</span> resourceLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">registerFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">registerFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">addIncludeFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AnnotationTypeFilter</span><span class="token punctuation">(</span><span class="token class-name">Meta</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后就是获取扫描的包路径了，通过解析前面定义的<code>MetaComponentScan</code>的属性来获取</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getPackagesToScan</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> metadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">AnnotationAttributes</span> attributes <span class="token operator">=</span>
            <span class="token class-name">AnnotationAttributes</span><span class="token punctuation">.</span><span class="token function">fromMap</span><span class="token punctuation">(</span>metadata<span class="token punctuation">.</span><span class="token function">getAnnotationAttributes</span><span class="token punctuation">(</span><span class="token class-name">MetaComponentScan</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> basePackages <span class="token operator">=</span> attributes<span class="token punctuation">.</span><span class="token function">getStringArray</span><span class="token punctuation">(</span><span class="token string">&quot;basePackages&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> basePackageClasses <span class="token operator">=</span> attributes<span class="token punctuation">.</span><span class="token function">getClassArray</span><span class="token punctuation">(</span><span class="token string">&quot;basePackageClasses&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> packagesToScan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>basePackages<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span> clz <span class="token operator">:</span> basePackageClasses<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        packagesToScan<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span>clz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>packagesToScan<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        packagesToScan<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span>metadata<span class="token punctuation">.</span><span class="token function">getClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> packagesToScan<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以完整的MetaAutoConfigureRegistrar的实现就有了</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MetaAutoConfigureRegistrar</span>
        <span class="token keyword">implements</span> <span class="token class-name">ImportBeanDefinitionRegistrar</span><span class="token punctuation">,</span> <span class="token class-name">ResourceLoaderAware</span><span class="token punctuation">,</span> <span class="token class-name">EnvironmentAware</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">ResourceLoader</span> resourceLoader<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Environment</span> environment<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setResourceLoader</span><span class="token punctuation">(</span><span class="token class-name">ResourceLoader</span> resourceLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader <span class="token operator">=</span> resourceLoader<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEnvironment</span><span class="token punctuation">(</span><span class="token class-name">Environment</span> environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>environment <span class="token operator">=</span> environment<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> importingClassMetadata<span class="token punctuation">,</span> <span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">MetaBeanDefinitionScanner</span> scanner <span class="token operator">=</span>
                <span class="token keyword">new</span> <span class="token class-name">MetaBeanDefinitionScanner</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> packagesToScan <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getPackagesToScan</span><span class="token punctuation">(</span>importingClassMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>
        scanner<span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span>packagesToScan<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MetaBeanDefinitionScanner</span> <span class="token keyword">extends</span> <span class="token class-name">ClassPathBeanDefinitionScanner</span> <span class="token punctuation">{</span>
      <span class="token comment">// ... 参考前面，这里省略</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getPackagesToScan</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> metadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// ... 参考前面，这省略</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-测试与小结" tabindex="-1"><a class="header-anchor" href="#ii-测试与小结" aria-hidden="true">#</a> II. 测试与小结</h2><p>上面实现现在看来非常简单了（两个注解定义，一个核心类，也复杂不到哪里去了）；接下来就需要验证这个是否生效了</p><h3 id="_1-case0-meta注解类" tabindex="-1"><a class="header-anchor" href="#_1-case0-meta注解类" aria-hidden="true">#</a> 1. case0 Meta注解类</h3><p>如果被spring识别为bean，则构造方法会被调用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Meta</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoBean1</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span>  <span class="token class-name">DemoBean1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;DemoBean1 register!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-case1-meat注解类-依赖bean" tabindex="-1"><a class="header-anchor" href="#_2-case1-meat注解类-依赖bean" aria-hidden="true">#</a> 2. case1 Meat注解类，依赖Bean</h3><p>定义一个普通的bean对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NormalBean</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">NormalBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;normal bean&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后定义一个Meta装饰的类，依赖 NormalBean</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Meta</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DependBean</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">DependBean</span><span class="token punctuation">(</span><span class="token class-name">NormalBean</span> normalBean<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;depend bean! &quot;</span> <span class="token operator">+</span> normalBean<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-case2-bean-依赖-meta注解类" tabindex="-1"><a class="header-anchor" href="#_3-case2-bean-依赖-meta注解类" aria-hidden="true">#</a> 3. case2 bean 依赖 Meta注解类</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ABean</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">ABean</span><span class="token punctuation">(</span><span class="token class-name">DemoBean1</span> demoBean1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;a bean : &quot;</span> <span class="token operator">+</span> demoBean1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-测试" tabindex="-1"><a class="header-anchor" href="#_4-测试" aria-hidden="true">#</a> 4. 测试</h3><p>启动类，注意需要添加上我们自定义的<code>@MetaComponentScan</code>注解</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token annotation punctuation">@MetaComponentScan</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行输出结果</p><figure><img src="`+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_5-小结" tabindex="-1"><a class="header-anchor" href="#_5-小结" aria-hidden="true">#</a> 5. 小结</h3><p>本文主要介绍了如何通过<code>ImportBeanDefinitionRegistrar</code>来实现自定义的bean注册器的全过程，包括面向新手可以怎样通过&quot;致敬&quot;既有的代码逻辑，来&quot;巧妙&quot;的实现我们的目标</p><h2 id="ii-其他" tabindex="-1"><a class="header-anchor" href="#ii-其他" aria-hidden="true">#</a> II. 其他</h2><h3 id="_0-项目" tabindex="-1"><a class="header-anchor" href="#_0-项目" aria-hidden="true">#</a> 0. 项目</h3>',35),f={href:"http://spring.hhui.top/spring-blog/2018/10/13/181013-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C/",target:"_blank",rel:"noopener noreferrer"},y={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"},S={href:"https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-case/006-importbean",target:"_blank",rel:"noopener noreferrer"};function w(_,B){const s=l("ExternalLinkIcon");return o(),c("div",null,[v,i(" more "),m,n("p",null,[a("两个参数，第一个顾名思义，注解元数据，多半是用来获取注解的属性；第二个bean定义注册器，我们在学习bean的动态注册时(详情参考: "),n("a",b,[a("181013-SpringBoot基础篇Bean之动态注册"),e(s)]),a(") 知道可以用BeanDefinitionRegistry注册bean，因为我们这里的目标是注册所有带 "),g,a(" 注解的类")]),h,n("ul",null,[n("li",null,[n("a",f,[a("181013-SpringBoot基础篇Bean之动态注册"),e(s)])]),n("li",null,[a("工程："),n("a",y,[a("https://github.com/liuyueyi/spring-boot-demo"),e(s)])]),n("li",null,[a("项目："),n("a",S,[a("https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-case/006-importbean"),e(s)])])])])}const M=p(k,[["render",w],["__file","13.191213-SpringBoot应用篇之从0到1实现一个自定义Bean注册器.html.vue"]]);export{M as default};
