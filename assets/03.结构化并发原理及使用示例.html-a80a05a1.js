import{_ as p,V as e,W as o,Y as s,Z as n,$ as c,a1 as a,F as u}from"./framework-094145d2.js";const l={},i=a(`<h2 id="_1-背景-为什么需要结构化并发" tabindex="-1"><a class="header-anchor" href="#_1-背景-为什么需要结构化并发" aria-hidden="true">#</a> 1. 背景：为什么需要结构化并发？</h2><p>在传统Java并发编程中，开发者通过<code>ExecutorService</code>、<code>Future</code>或<code>CompletableFuture</code>管理多线程任务。然而，这些方式存在显著问题：</p><ol><li><strong>生命周期管理困难</strong>：子任务可能脱离父任务独立运行，导致“线程泄漏”</li><li><strong>错误处理复杂</strong>：异常可能被静默吞噬，难以追踪问题根源</li><li><strong>资源浪费</strong>：未及时关闭的线程池可能持续占用系统资源</li></ol><p><strong>结构化并发</strong>（Structured Concurrency）的概念源自结构化编程，核心思想是<strong>任务的生命周期应与其创建者的作用域严格绑定</strong>。JDK21通过JEP 453引入结构化并发API（第二次预览），旨在以同步代码风格实现可靠的异步任务管理。</p><hr><h2 id="_2-原理-结构化并发如何工作" tabindex="-1"><a class="header-anchor" href="#_2-原理-结构化并发如何工作" aria-hidden="true">#</a> 2. 原理：结构化并发如何工作？</h2><h3 id="_2-1-传统并发-vs-结构化并发" tabindex="-1"><a class="header-anchor" href="#_2-1-传统并发-vs-结构化并发" aria-hidden="true">#</a> 2.1 传统并发 vs 结构化并发</h3><h4 id="传统并发模型" tabindex="-1"><a class="header-anchor" href="#传统并发模型" aria-hidden="true">#</a> 传统并发模型</h4><ul><li><strong>松散的任务关系</strong>：父任务与子任务之间无强制绑定</li><li><strong>手动管理关闭</strong>：需显式调用<code>shutdown()</code>或<code>cancel()</code></li><li><strong>错误传播困难</strong>：子任务异常无法自动传递到父任务</li></ul><h4 id="结构化并发模型" tabindex="-1"><a class="header-anchor" href="#结构化并发模型" aria-hidden="true">#</a> 结构化并发模型</h4><ul><li><strong>任务作用域</strong>：所有子任务必须在父任务的作用域内执行</li><li><strong>自动关闭保证</strong>：作用域退出时自动取消未完成子任务</li><li><strong>异常冒泡机制</strong>：子任务异常会直接中断父任务执行</li></ul><h3 id="核心机制" tabindex="-1"><a class="header-anchor" href="#核心机制" aria-hidden="true">#</a> 核心机制</h3><ol><li><p><strong>作用域（Scope）</strong><br> 通过<code>StructuredTaskScope</code>定义一个任务作用域，所有子任务必须在此作用域内创建和执行。作用域关闭时，自动清理所有子任务。</p></li><li><p><strong>关闭顺序控制</strong></p><ul><li>父任务作用域关闭时，首先取消所有未完成的子任务</li><li>等待所有子任务终止后才继续执行后续代码</li></ul></li><li><p><strong>错误传播</strong><br> 任一子任务抛出异常时，自动终止作用域内所有任务，并将异常传递给父任务。</p></li><li><p><strong>结果聚合</strong><br> 支持通过<code>ShutdownOnSuccess</code>（任一成功即返回）或<code>ShutdownOnFailure</code>（任一失败即终止）策略聚合结果。</p></li></ol><h3 id="_2-2-架构示意图" tabindex="-1"><a class="header-anchor" href="#_2-2-架构示意图" aria-hidden="true">#</a> 2.2 架构示意图</h3><div class="language-plaintext line-numbers-mode" data-ext="plaintext"><pre class="language-plaintext"><code>┌───────────────────┐
│ 父任务作用域       │
│  (StructuredTaskScope) 
│                   │
│  ├─ 子任务1 ──────┤
│  ├─ 子任务2 ──────┤
│  └─ 子任务3 ──────┤
└───────────────────┘
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>所有子任务的生命周期严格限定在父作用域内</em></p><hr><h2 id="_3-优势-为什么选择结构化并发" tabindex="-1"><a class="header-anchor" href="#_3-优势-为什么选择结构化并发" aria-hidden="true">#</a> 3. 优势：为什么选择结构化并发？</h2><table><thead><tr><th>特性</th><th>传统并发</th><th>结构化并发</th></tr></thead><tbody><tr><td>任务关系</td><td>松散</td><td><strong>严格层级化</strong></td></tr><tr><td>生命周期管理</td><td>手动</td><td><strong>自动管理</strong></td></tr><tr><td>异常传播</td><td>需显式处理</td><td><strong>自动冒泡</strong></td></tr><tr><td>代码可读性</td><td>回调嵌套复杂</td><td><strong>线性流程</strong></td></tr></tbody></table><ol><li><strong>可靠性提升</strong>：避免线程泄漏，确保资源及时释放</li><li><strong>调试简化</strong>：通过线程转储（jstack）可清晰查看任务关系树</li><li><strong>错误处理统一</strong>：集中处理所有子任务的异常</li><li><strong>资源利用率优化</strong>：自动回收未完成任务占用的资源</li></ol><hr><h2 id="_4-使用示例" tabindex="-1"><a class="header-anchor" href="#_4-使用示例" aria-hidden="true">#</a> 4. 使用示例</h2><p>结构化并发的核心思想是将一组相关的并发任务视为一个单一的工作单元，这个工作单元有明确的开始和结束。在这个工作单元中，所有的子任务都在一个统一的作用域内执行，当工作单元完成或其中一个子任务失败时，整个工作单元会被正确地关闭，所有未完成的子任务也会被取消。这种方式使得并发代码的结构更加清晰，错误处理更加统一，从而提高了代码的可维护性和可靠性。</p><p>结构化并发通过 <code>StructuredTaskScope</code> 类来实现。<code>StructuredTaskScope</code> 提供了两种主要的模式：<code>ShutdownOnFailure</code> 和 <code>ShutdownOnSuccess</code></p><ul><li><code>ShutdownOnFailure：</code>当任何一个子任务失败时，会立即取消所有其他未完成的子任务，并抛出失败任务的异常。</li><li><code>ShutdownOnSuccess：</code>当任何一个子任务成功完成时，会立即取消所有其他未完成的子任务，并返回成功任务的结果。</li></ul><h3 id="示例1-基本使用" tabindex="-1"><a class="header-anchor" href="#示例1-基本使用" aria-hidden="true">#</a> 示例1：基本使用</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StructuredTaskScope<span class="token punctuation">.</span>ShutdownOnFailure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> userFuture <span class="token operator">=</span> scope<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">fetchUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> orderFuture <span class="token operator">=</span> scope<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">fetchOrders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    scope<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 等待所有子任务完成</span>
    scope<span class="token punctuation">.</span><span class="token function">throwIfFailed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 检查是否有异常</span>
    
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;User: &quot;</span> <span class="token operator">+</span> userFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, Orders: &quot;</span> <span class="token operator">+</span> orderFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="示例2-订单处理-超时控制-异常处理" tabindex="-1"><a class="header-anchor" href="#示例2-订单处理-超时控制-异常处理" aria-hidden="true">#</a> 示例2：订单处理（超时控制+异常处理）</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Response</span> <span class="token function">handleOrderRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StructuredTaskScope<span class="token punctuation">.</span>ShutdownOnFailure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserInfo</span><span class="token punctuation">&gt;</span></span> userFuture <span class="token operator">=</span> scope<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">getUserFromDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Inventory</span><span class="token punctuation">&gt;</span></span> stockFuture <span class="token operator">=</span> scope<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">checkInventory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        scope<span class="token punctuation">.</span><span class="token function">joinUntil</span><span class="token punctuation">(</span><span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plusSeconds</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设置3秒超时</span>
        
        <span class="token comment">// 任一子任务失败则抛出异常</span>
        scope<span class="token punctuation">.</span><span class="token function">throwIfFailed</span><span class="token punctuation">(</span><span class="token class-name">ExecutionException</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span>userFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stockFuture<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TimeoutException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Response</span><span class="token punctuation">.</span><span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="示例3-并行聚合数据" tabindex="-1"><a class="header-anchor" href="#示例3-并行聚合数据" aria-hidden="true">#</a> 示例3：并行聚合数据</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">&gt;</span></span> <span class="token function">recommendProducts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StructuredTaskScope<span class="token punctuation">.</span>ShutdownOnSuccess</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 并行获取三种推荐策略的结果</span>
        scope<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> strategyA<span class="token punctuation">.</span><span class="token function">getProducts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scope<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> strategyB<span class="token punctuation">.</span><span class="token function">getProducts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        scope<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> strategyC<span class="token punctuation">.</span><span class="token function">getProducts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 任一策略成功即返回结果</span>
        <span class="token keyword">return</span> scope<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="_5-小结" tabindex="-1"><a class="header-anchor" href="#_5-小结" aria-hidden="true">#</a> 5. 小结</h2><h3 id="_5-1-注意事项" tabindex="-1"><a class="header-anchor" href="#_5-1-注意事项" aria-hidden="true">#</a> 5.1 注意事项</h3><ol><li><p><strong>作用域必须关闭</strong><br> 始终使用try-with-resources确保作用域关闭：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// ✅ 正确做法</span>
<span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StructuredTaskScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>

<span class="token comment">// ❌ 危险做法</span>
<span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StructuredTaskScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
scope<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可能造成资源泄漏</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>避免跨作用域传递结果</strong><br> 子任务的结果应在同一作用域内消费：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> future<span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StructuredTaskScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    future <span class="token operator">=</span> scope<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token string">&quot;data&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    scope<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ❌ 此时作用域已关闭！</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>合理选择关闭策略</strong></p><ul><li><code>ShutdownOnSuccess</code>：适合快速获取首个成功结果（如多CDN择优）</li><li><code>ShutdownOnFailure</code>：适合所有子任务必须成功的场景（如支付验证）</li></ul></li><li><p><strong>与虚拟线程协同</strong><br> 结构化并发通常与虚拟线程配合使用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newVirtualThreadPerTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StructuredTaskScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h3 id="_5-2-小结" tabindex="-1"><a class="header-anchor" href="#_5-2-小结" aria-hidden="true">#</a> 5.2 小结</h3><p>JDK21结构化并发通过以下革新提升Java并发可靠性：</p><ul><li>✅ 将并发任务组织为可维护的树形结构</li><li>✅ 自动生命周期管理减少资源泄漏风险</li><li>✅ 异常传播机制提升调试效率</li><li>✅ 与虚拟线程协同实现高并发+高可靠</li></ul><p><strong>适用场景</strong>：</p><ul><li>微服务中的并行API调用</li><li>批量数据处理任务</li><li>需要严格资源管理的长期运行任务</li></ul>`,40),r=s("code",null,"--enable-preview",-1),k={href:"https://openjdk.org/jeps/453",target:"_blank",rel:"noopener noreferrer"},d=a(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 现在，让并发任务像结构化代码一样清晰可控！</span>
<span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StructuredTaskScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 你的并发代码</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function v(m,h){const t=u("ExternalLinkIcon");return e(),o("div",null,[i,s("p",null,[n("目前结构化并发API仍处于预览阶段，可通过"),r,n("启用。 建议结合"),s("a",k,[n("官方指南"),c(t)]),n("进行实践，这将为Java并发编程带来前所未有的代码清晰度与可靠性。")]),d])}const b=p(l,[["render",v],["__file","03.结构化并发原理及使用示例.html.vue"]]);export{b as default};
