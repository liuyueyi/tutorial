const e=JSON.parse('{"key":"v-46780fdc","path":"/java/jdk/jdk21/04.%E8%AE%B0%E5%BD%95%E6%A8%A1%E5%BC%8F%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B.html","title":"04.JDK21记录模式：简化数据解构与模式匹配","lang":"zh-CN","frontmatter":{"order":4,"title":"04.JDK21记录模式：简化数据解构与模式匹配","tag":["jdk"],"category":["Java","JDK21"],"date":"2025-02-13T16:48:09.000Z","keywords":["Java","JDK21","记录模式"],"description":"1. 背景：为什么需要记录模式？ 在Java中，处理复杂数据结构（如嵌套对象或记录类）时，通常需要编写大量样板代码来提取和验证数据。例如： 手动解构嵌套对象 使用instanceof和类型转换 编写冗长的条件分支 记录模式（Record Patterns）是Java模式匹配的进一步扩展，旨在简化数据解构和模式匹配的代码。它结合了记录类（Record）和模式匹配的特性，使开发者能够以声明式的方式提取和处理数据。","head":[["meta",{"property":"og:url","content":"https://liuyueyi.github.io/tutorial/java/jdk/jdk21/04.%E8%AE%B0%E5%BD%95%E6%A8%A1%E5%BC%8F%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B.html"}],["meta",{"property":"og:site_name","content":"一灰灰的站点"}],["meta",{"property":"og:title","content":"04.JDK21记录模式：简化数据解构与模式匹配"}],["meta",{"property":"og:description","content":"1. 背景：为什么需要记录模式？ 在Java中，处理复杂数据结构（如嵌套对象或记录类）时，通常需要编写大量样板代码来提取和验证数据。例如： 手动解构嵌套对象 使用instanceof和类型转换 编写冗长的条件分支 记录模式（Record Patterns）是Java模式匹配的进一步扩展，旨在简化数据解构和模式匹配的代码。它结合了记录类（Record）和模式匹配的特性，使开发者能够以声明式的方式提取和处理数据。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-13T08:59:24.000Z"}],["meta",{"property":"article:tag","content":"jdk"}],["meta",{"property":"article:published_time","content":"2025-02-13T16:48:09.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-13T08:59:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"04.JDK21记录模式：简化数据解构与模式匹配\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-02-13T16:48:09.000Z\\",\\"dateModified\\":\\"2025-02-13T08:59:24.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"1. 背景：为什么需要记录模式？","slug":"_1-背景-为什么需要记录模式","link":"#_1-背景-为什么需要记录模式","children":[]},{"level":2,"title":"2. 原理：记录模式如何工作？","slug":"_2-原理-记录模式如何工作","link":"#_2-原理-记录模式如何工作","children":[{"level":3,"title":"2.1 传统数据解构 vs 记录模式","slug":"_2-1-传统数据解构-vs-记录模式","link":"#_2-1-传统数据解构-vs-记录模式","children":[]},{"level":3,"title":"核心机制","slug":"核心机制","link":"#核心机制","children":[]},{"level":3,"title":"2.2 架构示意图","slug":"_2-2-架构示意图","link":"#_2-2-架构示意图","children":[]}]},{"level":2,"title":"3. 优势：为什么选择记录模式？","slug":"_3-优势-为什么选择记录模式","link":"#_3-优势-为什么选择记录模式","children":[]},{"level":2,"title":"4. 使用示例","slug":"_4-使用示例","link":"#_4-使用示例","children":[{"level":3,"title":"示例1：基本使用","slug":"示例1-基本使用","link":"#示例1-基本使用","children":[]},{"level":3,"title":"示例2：嵌套记录类","slug":"示例2-嵌套记录类","link":"#示例2-嵌套记录类","children":[]},{"level":3,"title":"示例3：在switch中使用记录模式","slug":"示例3-在switch中使用记录模式","link":"#示例3-在switch中使用记录模式","children":[]},{"level":3,"title":"示例4：结合泛型使用","slug":"示例4-结合泛型使用","link":"#示例4-结合泛型使用","children":[]}]},{"level":2,"title":"5. 小结","slug":"_5-小结","link":"#_5-小结","children":[{"level":3,"title":"5.1 注意事项","slug":"_5-1-注意事项","link":"#_5-1-注意事项","children":[]}]},{"level":2,"title":"5.2 总结","slug":"_5-2-总结","link":"#_5-2-总结","children":[]}],"git":{"createdTime":1739437164000,"updatedTime":1739437164000,"contributors":[{"name":"yihui","email":"bangzewu@126.com","commits":1}]},"readingTime":{"minutes":4.23,"words":1269},"filePathRelative":"java/jdk/jdk21/04.记录模式介绍及使用示例.md","localizedDate":"2025年2月13日","excerpt":"<h2> 1. 背景：为什么需要记录模式？</h2>\\n<p>在Java中，处理复杂数据结构（如嵌套对象或记录类）时，通常需要编写大量样板代码来提取和验证数据。例如：</p>\\n<ul>\\n<li>手动解构嵌套对象</li>\\n<li>使用<code>instanceof</code>和类型转换</li>\\n<li>编写冗长的条件分支</li>\\n</ul>\\n<p><strong>记录模式</strong>（Record Patterns）是Java模式匹配的进一步扩展，旨在简化数据解构和模式匹配的代码。它结合了<strong>记录类</strong>（Record）和<strong>模式匹配</strong>的特性，使开发者能够以声明式的方式提取和处理数据。</p>","copyright":{},"autoDesc":true}');export{e as data};
