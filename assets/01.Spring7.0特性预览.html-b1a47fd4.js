import{_ as p,V as o,W as c,X as n,Y as s,Z as t,a0 as e,F as i}from"./framework-23f3cf9b.js";const l={},u=n("p",null,"Spring 官方已经发布了 Spring Boot 4.0 的快照版本，内置 Spring Framework 7.0。",-1),r=n("p",null,"接下来我们快速预览一下Spring7.0又带来了哪些改变",-1),d={href:"https://github.com/spring-projects/spring-framework/wiki/Spring-Framework-7.0-Release-Notes",target:"_blank",rel:"noopener noreferrer"},k=e(`<h2 id="_1-最低环境要求" tabindex="-1"><a class="header-anchor" href="#_1-最低环境要求" aria-hidden="true">#</a> 1. 最低环境要求</h2><p>JDK的版本要求没有变更， JDK 17-27 均支持</p><ul><li>Jakarta EE 11 (Tomcat 11+)</li><li>Kotlin 2.x</li><li>JSONassert 2.0</li><li>GraalVM 23</li></ul><h2 id="_2-移除的api" tabindex="-1"><a class="header-anchor" href="#_2-移除的api" aria-hidden="true">#</a> 2. 移除的API</h2><h3 id="_2-1-spring-jcl-停用" tabindex="-1"><a class="header-anchor" href="#_2-1-spring-jcl-停用" aria-hidden="true">#</a> 2.1 Spring JCL 停用</h3><p><code>Java Commons Logging（JCL）</code> 是 Apache 提供的日志门面（Facade），允许开发者通过统一接口调用不同底层日志框架;</p><h3 id="_2-2-移除-javax-annotation-和-javax-inject注解" tabindex="-1"><a class="header-anchor" href="#_2-2-移除-javax-annotation-和-javax-inject注解" aria-hidden="true">#</a> 2.2 移除 <code>javax.annotation</code> 和 <code>javax.inject</code>注解</h3><p>这两个包下我们常见的注解有 <code>@Resource</code> ， <code>@PostConstruct</code>, <code>@Inject</code>，这些在SpringBoot2+的生态下，应该是非常常见的使用注解了，如果你在SpringBoot4(Spring7)之后继续使用，那么需要改成 <code>jakarta.annotation</code> 和 <code>jakarta.inject packages</code>下的依赖</p><h3 id="_2-3-路径映射选项删除" tabindex="-1"><a class="header-anchor" href="#_2-3-路径映射选项删除" aria-hidden="true">#</a> 2.3 路径映射选项删除</h3><p>自 6.0 版本以来，多个路径映射选项已被标记为删除。 下面这些选项现已被彻底删除。 其中包括：</p><ol><li><code>suffixPatternMatch</code>/<code>registeredSuffixPatternMatch</code> 注解控制方法</li></ol><p>控制是否允许通过 <strong>URL 路径后缀</strong>（如 .json、.xml）匹配控制器方法。</p><ul><li><code>suffixPatternMatch=true</code>：允许通过后缀匹配（例如 /data.json 映射到 @RequestMapping(&quot;/data&quot;)）。</li><li><code>registeredSuffixPatternMatch=true</code>：仅允许匹配已注册的后缀（需配合 ContentNegotiationManager 配置）。</li></ul><p>一个简单使用场景</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableWebMvc</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configurePathMatch</span><span class="token punctuation">(</span><span class="token class-name">PathMatchConfigurer</span> configurer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        configurer<span class="token punctuation">.</span><span class="token function">setUseSuffixPatternMatch</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// 启用后缀匹配</span>
                  <span class="token punctuation">.</span><span class="token function">setUseRegisteredSuffixPatternMatch</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 仅匹配已注册后缀</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>：</p><ul><li>启用后缀匹配可能导致安全风险（如通过 .jsp 访问未授权资源），建议结合白名单使用。</li><li>默认情况下，registeredSuffixPatternMatch 为 false。</li></ul><ol start="2"><li><code>trailingSlashMatch</code> （AbstractHandlerMapping 扩展）</li></ol><p><strong>作用</strong>： 控制是否忽略 URL 末尾的斜杠（/）。</p><ul><li>trailingSlashMatch=true：/path 和 /path/ 视为同一路径。</li><li>trailingSlashMatch=false：严格区分末尾斜杠。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configurePathMatch</span><span class="token punctuation">(</span><span class="token class-name">PathMatchConfigurer</span> configurer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    configurer<span class="token punctuation">.</span><span class="token function">setUseTrailingSlashMatch</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 严格匹配末尾斜杠</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意事项</strong>： Spring Boot 2.3+ 默认禁用末尾斜杠匹配，需手动启用。</p><ol start="3"><li>内容协商配置</li></ol><p><strong>favorPathExtension / ignoreUnknownPathExtensions</strong></p><p><em>作用</em>：</p><ul><li>favorPathExtension=true：优先通过 URL 后缀（如 .json）决定响应内容类型。</li><li>ignoreUnknownPathExtensions=true：忽略未识别的后缀（返回默认内容类型）。</li></ul><p><em>关联策略类</em>：</p><ul><li>PathExtensionContentNegotiationStrategy：基于路径后缀协商。</li><li>ServletPathExtensionContentNegotiationStrategy：基于 Servlet 容器特性协商。</li></ul><p><em>Java Config 示例</em>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">ContentNegotiationManagerFactoryBean</span> <span class="token function">contentNegotiationManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ContentNegotiationManagerFactoryBean</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContentNegotiationManagerFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    factory<span class="token punctuation">.</span><span class="token function">setFavorPathExtension</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    factory<span class="token punctuation">.</span><span class="token function">setIgnoreUnknownExtensions</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> factory<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>MVC Java Config</em></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>@Override
public void configureContentNegotiation(ContentNegotiationConfigurer configurer) {
    configurer.favorPathExtension(true)
              .ignoreUnknownExtensions(true);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>路径模式解析配置</li></ol><p><strong><code>matchOptionalTrailingSeparator</code> in <code>PathPatternParser</code></strong></p><p><em>作用</em>： 控制路径匹配时是否允许可选的尾部斜杠。</p><ul><li>true：/path 和 /path/ 匹配同一控制器方法。</li><li>false：严格区分尾部斜杠。</li></ul><p><em>配置示例</em>（Spring Boot 2.3+）</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># application.properties</span>
<span class="token key attr-name">spring.mvc.pathmatch.matching-strategy</span><span class="token punctuation">=</span><span class="token value attr-value">ant_path_matcher</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>需配合 PathPatternParser 使用（默认策略为 AntPathMatcher）</p><h2 id="_3-弃用" tabindex="-1"><a class="header-anchor" href="#_3-弃用" aria-hidden="true">#</a> 3.弃用</h2><ol><li>Spring MVC 的 <code>&lt;mvc:*&gt;</code> XML 配置命名空间现已弃用，推荐改用 Java 配置方式。目前暂无完全移除 XML 配置的计划，但后续更新将不再适配 Java 配置模型。其他命名空间（如 <code>&lt;bean&gt;</code>）未弃用。</li><li>Kotlin 团队计划在未来的 Kotlin 2.x 版本中移除对 JSR 223 的支持，因此 Spring 中针对 Kotlin 脚本的模板功能已被标记为弃用。</li><li>Spring TestContext Framework 对 JUnit 4 的支持已弃用，推荐使用 JUnit Jupiter 的 SpringExtension。<br> 弃用的类包括： <ul><li>SpringRunner</li><li>SpringClassRule</li><li>SpringMethodRule</li><li>AbstractJUnit4SpringContextTests</li><li>AbstractTransactionalJUnit4SpringContextTests及相关支持类。</li></ul></li><li>Jackson 2.x 的支持已弃用，推荐迁移到 Jackson 3.x</li></ol><h2 id="_4-null安全" tabindex="-1"><a class="header-anchor" href="#_4-null安全" aria-hidden="true">#</a> 4. Null安全</h2><p>新版本采用 JSpecify 注解来声明 API 的空值安全性，使用 @Nullable 表示可为 Null，使用 @NonNull 表示不能为空，并且会通过 Idea 配合提示警告或错误信息，例如以下代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>jspecify<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">NonNull</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>jspecify<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Nullable</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Nullable</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-http代理" tabindex="-1"><a class="header-anchor" href="#_5-http代理" aria-hidden="true">#</a> 5. HTTP代理</h2><p>新版本提供了 @ImportHttpServices 注解，让你为 HTTP 接口创建代理更加容易，示例代码如下（它允许您轻松声明、检测和配置整个 HTTP 服务组）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ImportHttpServices</span><span class="token punctuation">(</span>group <span class="token operator">=</span> <span class="token string">&quot;weather&quot;</span><span class="token punctuation">,</span> types <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">FreeWeather</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">CommercialWeather</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ImportHttpServices</span><span class="token punctuation">(</span>group <span class="token operator">=</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> types <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">UserServiceInternal</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">UserServiceOfficial</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">HttpServicesConfiguration</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractHttpServiceRegistrar</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Bean</span>
	<span class="token keyword">public</span> <span class="token class-name">RestClientHttpServiceGroupConfigurer</span> <span class="token function">groupConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> groups <span class="token operator">-&gt;</span> groups<span class="token punctuation">.</span><span class="token function">filterByName</span><span class="token punctuation">(</span><span class="token string">&quot;weather&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span>
				<span class="token punctuation">.</span><span class="token function">configureClient</span><span class="token punctuation">(</span><span class="token punctuation">(</span>group<span class="token punctuation">,</span> builder<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> builder<span class="token punctuation">.</span><span class="token function">defaultHeader</span><span class="token punctuation">(</span><span class="token string">&quot;User-Agent&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;My-Application&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-bean注入" tabindex="-1"><a class="header-anchor" href="#_6-bean注入" aria-hidden="true">#</a> 6. Bean注入</h2><p>Bean 注册器实现使用 BeanRegistry 和 Environment API，以简洁灵活的方式通过编程方式注册 Bean。例如，它允许通过 if 表达式、for 循环等进行自定义注册。</p><p>在之前，我们使用Configuration来注册bean，如</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">MyBeanRegistrar</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">MyConfiguration</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在则可以通过实现<code>BeanRegistrar</code>来实现更灵活的bean注册</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">MyBeanRegistrar</span> <span class="token keyword">implements</span> <span class="token class-name">BeanRegistrar</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">BeanRegistry</span> registry<span class="token punctuation">,</span> <span class="token class-name">Environment</span> env<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        registry<span class="token punctuation">.</span><span class="token function">registerBean</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Foo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        registry<span class="token punctuation">.</span><span class="token function">registerBean</span><span class="token punctuation">(</span><span class="token string">&quot;bar&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Bar</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> spec <span class="token operator">-&gt;</span> spec
                <span class="token punctuation">.</span><span class="token function">prototype</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">lazyInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">description</span><span class="token punctuation">(</span><span class="token string">&quot;Custom description&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">supplier</span><span class="token punctuation">(</span>context <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">bean</span><span class="token punctuation">(</span><span class="token class-name">Foo</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>env<span class="token punctuation">.</span><span class="token function">matchesProfiles</span><span class="token punctuation">(</span><span class="token string">&quot;baz&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            registry<span class="token punctuation">.</span><span class="token function">registerBean</span><span class="token punctuation">(</span><span class="token class-name">Baz</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> spec <span class="token operator">-&gt;</span> spec
                    <span class="token punctuation">.</span><span class="token function">supplier</span><span class="token punctuation">(</span>context <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token class-name">Baz</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-接口版本控制" tabindex="-1"><a class="header-anchor" href="#_7-接口版本控制" aria-hidden="true">#</a> 7. 接口版本控制</h2><p>新版本引入了优雅的 API 版本控制支持，允许开发者通过 @RequestMapping 注解中的 version 参数来实现版本控制，如下代码所示</p>`,55),v={href:"https://github.com/spring-projects/spring-framework/wiki/Spring-Framework-7.0-Release-Notes",target:"_blank",rel:"noopener noreferrer"},m=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/account/{id}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountController</span> <span class="token punctuation">{</span>

	<span class="token comment">// 1</span>
	<span class="token annotation punctuation">@GetMapping</span>  
	<span class="token keyword">public</span> <span class="token class-name">Account</span> <span class="token function">getAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 2</span>
	<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>version <span class="token operator">=</span> <span class="token string">&quot;1.1&quot;</span><span class="token punctuation">)</span> 
	<span class="token keyword">public</span> <span class="token class-name">Account</span> <span class="token function">getAccount1_1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 3</span>
	<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>version <span class="token operator">=</span> <span class="token string">&quot;1.2+&quot;</span><span class="token punctuation">)</span> 
	<span class="token keyword">public</span> <span class="token class-name">Account</span> <span class="token function">getAccount1_2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 4</span>
	<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>version <span class="token operator">=</span> <span class="token string">&quot;1.5&quot;</span><span class="token punctuation">)</span> 
	<span class="token keyword">public</span> <span class="token class-name">Account</span> <span class="token function">getAccount1_5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>匹配任何版本</li><li>匹配 version 1.1</li><li>匹配 1.2 and above</li><li>匹配 1.5</li></ol><p>然后通过请求参数来控制不同的版本，v1/v2的请求分别为</p>`,3),g={href:"http://localhost:8080/account/1?version=1",target:"_blank",rel:"noopener noreferrer"},b={href:"http://localhost:8080/account/1?version=1.1",target:"_blank",rel:"noopener noreferrer"},h={href:"http://localhost:8080/account/1?version=1.3",target:"_blank",rel:"noopener noreferrer"},f={href:"http://localhost:8080/account/1?version=1.5",target:"_blank",rel:"noopener noreferrer"},y={href:"http://localhost:8080/account/1?version=1.6",target:"_blank",rel:"noopener noreferrer"},_=n("ul",null,[n("li",null,"这种场景表示当前请求的版本比我们服务提供的最大版本还高，不响应")],-1),w=e(`<h2 id="_8-其他优化" tabindex="-1"><a class="header-anchor" href="#_8-其他优化" aria-hidden="true">#</a> 8.其他优化</h2><ol><li>SPEL 表达式升级：SPEL 表达式中支持空安全和 Elvis 运算符，例如以下代码：</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;#{systemProperties[&#39;pop3.port&#39;] ?: 25}&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它表示，将注入系统属性 pop3.port 的值，如果未定义该属性值，注入 25 这个值。</p><ol start="2"><li><p>GraalVM 原生应用支持：借助 Spring AOT 技术，将应用编译成原生镜像，极大地缩短了启动时间。</p></li><li><p>支持 Jackson 3.x：放弃对 Jackson 2.x 的支持，升级为 Jackson 3.x。</p></li><li><p>Servlet 和 WebSocket 版本升级：使用 Servlet 6.1 和 WebSocket 2.2 作为 Web 应用程序的底层实现，这意味着应用程序应该部署在最新的 Servlet 容器上，比如 Tomcat 11+ 和 Jetty 12.1+。</p></li><li><p>HttpHeaders 优化：HttpHeaders 操作如下：</p></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/headers&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token class-name">HttpHeaders</span> headers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 旧方式（已废弃）</span>
        <span class="token comment">// headers.getFirst(&quot;X-Custom-Header&quot;);</span>

        <span class="token comment">// 新方式</span>
        <span class="token class-name">String</span> value <span class="token operator">=</span> headers<span class="token punctuation">.</span><span class="token function">firstValue</span><span class="token punctuation">(</span><span class="token string">&quot;X-Custom-Header&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 遍历所有头部</span>
        headers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> values<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">+</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token string">&quot;Processed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-小结" tabindex="-1"><a class="header-anchor" href="#_9-小结" aria-hidden="true">#</a> 9.小结</h2><p>SpringBoot3+都还没尝上鲜，这下4.0就来了，还在用java8的小伙伴，你们还学得动吗😭</p>`,8);function x(S,j){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,r,n("blockquote",null,[n("p",null,[s("以下所有内容来自官方WiKi: "),n("a",d,[s("Spring-Framework-7.0-Release-Notes"),t(a)])])]),k,n("blockquote",null,[n("p",null,[n("a",v,[s("https://github.com/spring-projects/spring-framework/wiki/Spring-Framework-7.0-Release-Notes"),t(a)])])]),m,n("ul",null,[n("li",null,[n("a",g,[s("http://localhost:8080/account/1?version=1"),t(a)]),s(" getAccount()")]),n("li",null,[n("a",b,[s("http://localhost:8080/account/1?version=1.1"),t(a)]),s(" 对应 getAccount1_1()")]),n("li",null,[n("a",h,[s("http://localhost:8080/account/1?version=1.3"),t(a)]),s(" 对应 getAccount1_2()， 因为没有直接的1.3版本，因此找最近的一个满足的")]),n("li",null,[n("a",f,[s("http://localhost:8080/account/1?version=1.5"),t(a)]),s(" 对应 getAccount1_5()")]),n("li",null,[n("a",y,[s("http://localhost:8080/account/1?version=1.6"),t(a)]),s(" 正常1、3都可以匹配，但是因为有了4对应的1.5版本，但是没有1.6版本，则1、3都无法正确响应，返回400错误 "),_])]),w])}const M=p(l,[["render",x],["__file","01.Spring7.0特性预览.html.vue"]]);export{M as default};
