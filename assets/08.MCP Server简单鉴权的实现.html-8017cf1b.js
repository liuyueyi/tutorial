import{_ as o,V as c,W as l,Y as s,Z as n,$ as a,a0 as i,a1 as u,F as t}from"./framework-094145d2.js";const r="/tutorial/imgs/column/springai/08-1.webp",k={},d=s("h1",{id:"_08-mcpserver简单鉴权的实现",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_08-mcpserver简单鉴权的实现","aria-hidden":"true"},"#"),n(" 08.MCPServer简单鉴权的实现")],-1),v=u(`<h2 id="一、mcp-server搭建" tabindex="-1"><a class="header-anchor" href="#一、mcp-server搭建" aria-hidden="true">#</a> 一、MCP Server搭建</h2><p>我们直接在前面的搭建的McpServer基础上进行能力扩展，因此整个项目的搭建和相关配置与上文一致，这里不再赘述过程，只贴下核心的信息</p><h3 id="_1-项目配置" tabindex="-1"><a class="header-anchor" href="#_1-项目配置" aria-hidden="true">#</a> 1. 项目配置</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.ai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-ai-starter-mcp-server-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置文件指定mcp server相关参数：<code>application.yml</code></p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">ai</span><span class="token punctuation">:</span>
    <span class="token key atrule">mcp</span><span class="token punctuation">:</span>
      <span class="token key atrule">server</span><span class="token punctuation">:</span>
        <span class="token key atrule">name</span><span class="token punctuation">:</span> date<span class="token punctuation">-</span>server
        <span class="token key atrule">version</span><span class="token punctuation">:</span> 1.0.0
        <span class="token key atrule">type</span><span class="token punctuation">:</span> SYNC
        <span class="token key atrule">instructions</span><span class="token punctuation">:</span> <span class="token string">&quot;提供获取不同时区的当前时间，并按照北京时间进行展示&quot;</span>
        <span class="token key atrule">sse-message-endpoint</span><span class="token punctuation">:</span> /mcp/messages
        <span class="token key atrule">sse-endpoint</span><span class="token punctuation">:</span> /sse
        <span class="token key atrule">capabilities</span><span class="token punctuation">:</span>
          <span class="token key atrule">tool</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否支持工具</span>
          <span class="token key atrule">resource</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否支持资源</span>
          <span class="token key atrule">prompt</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否支持提示词</span>
          <span class="token key atrule">completion</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否支持补全</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-mcp-server创建" tabindex="-1"><a class="header-anchor" href="#_2-mcp-server创建" aria-hidden="true">#</a> 2. MCP Server创建</h3><p>一个根据传入时区，返回对应的时间的工具</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Tool</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">&quot;传入时区，返回对应时区的当前时间给用户&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getTimeByZoneId</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ToolParam</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">&quot;需要查询时间的时区&quot;</span><span class="token punctuation">)</span> <span class="token class-name">ZoneId</span> area<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 根据系统当前时间，获取指定时区的时间</span>
        <span class="token class-name">ZonedDateTime</span> time <span class="token operator">=</span> <span class="token class-name">ZonedDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 格式化时间</span>
        <span class="token class-name">DateTimeFormatter</span> formatter <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> ans <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>formatter<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;传入的时区是：&quot;</span> <span class="token operator">+</span> area <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ToolConfig</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Bean</span>
  <span class="token keyword">public</span> <span class="token class-name">ToolCallbackProvider</span> <span class="token function">dateProvider</span><span class="token punctuation">(</span><span class="token class-name">DateService</span> dateService<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">MethodToolCallbackProvider</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toolObjects</span><span class="token punctuation">(</span>dateService<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、权限管控" tabindex="-1"><a class="header-anchor" href="#二、权限管控" aria-hidden="true">#</a> 二、权限管控</h2><h3 id="_1-权限管理" tabindex="-1"><a class="header-anchor" href="#_1-权限管理" aria-hidden="true">#</a> 1. 权限管理</h3><p>我们这里直接采用Http的权限管控，即在请求头中添加<code>Authorization</code>字段，值为<code>Bearer &lt;token&gt;</code> 或者 <code>Basic &lt;user:password&gt;</code>方式</p><p>为了针对MCP Server的权限进行管理，我们考虑通过自定义的<code>Filter</code>来实现，具体的逻辑为：</p><ul><li>拦截 <code>/sse</code>, <code>/mcp/messages</code>请求</li><li>校验请求头中的<code>Authorization</code>字段，判断是否满足要求</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>asyncSupported <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReqFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TOKEN</span> <span class="token operator">=</span> <span class="token string">&quot;yihuihui-blog&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">USER</span> <span class="token operator">=</span> <span class="token string">&quot;yihui&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">PWD</span> <span class="token operator">=</span> <span class="token string">&quot;12345678&quot;</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 打印请求日志</span>
        <span class="token class-name">HttpServletRequest</span> req <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> servletRequest<span class="token punctuation">;</span>
        <span class="token class-name">String</span> url <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> params <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getQueryString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;请求 &quot;</span> <span class="token operator">+</span> url <span class="token operator">+</span> <span class="token string">&quot; params=&quot;</span> <span class="token operator">+</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">String</span> auth <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Authorization&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;/sse&quot;</span><span class="token punctuation">)</span> <span class="token operator">||</span> url<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;/mcp/messages&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>auth <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;认证头格式错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>auth<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;Bearer &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 令牌方式</span>
                <span class="token comment">// &quot;Authorization: Bearer &lt;有效的访问令牌&gt;&quot;</span>
                <span class="token class-name">String</span> token <span class="token operator">=</span> auth<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;Bearer &quot; 长度为7</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token constant">TOKEN</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;token error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;token鉴权通过!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>auth<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;Basic &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 标准Basic Auth格式解析 Authorization: Basic eWlodWk6MTIzNDU2Nzg=</span>
                <span class="token comment">// Base64编码的 &quot;username:password</span>
                <span class="token class-name">String</span> encodedCredentials <span class="token operator">=</span> auth<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;Basic &quot; 长度为6</span>
                <span class="token class-name">String</span> decodedCredentials <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>encodedCredentials<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> credentials <span class="token operator">=</span> decodedCredentials<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;:&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">String</span> username <span class="token operator">=</span> credentials<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token class-name">String</span> password <span class="token operator">=</span> credentials<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token constant">USER</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token constant">PWD</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;用户名密码错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;basic auth 鉴权通过!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span> servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的实现中，注意两点：</p><ul><li>注解<code>@WebFilter</code>，表示这是一个过滤器，并且异步支持（这个异步支持必须开启，否则mcp客户端无法正常连接）</li><li>拦截的url为<code>/sse</code>或者<code>/mcp/messages</code>: 这里我们分别处理sse请求和mcp请求，将他们与其他的请求区分开 <ul><li>鉴权逻辑：从请求头中获取<code>Authorization</code>字段，判断是否满足要求</li></ul></li></ul><p>然后调整启动类，支持扫描自定义的过滤器</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ServletComponentScan</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">S08Application</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">S08Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-trae调整mcp配置" tabindex="-1"><a class="header-anchor" href="#_2-trae调整mcp配置" aria-hidden="true">#</a> 2. Trae调整MCP配置</h3><p>因为添加了权限管控，所以需要调整MCP的配置，在之前的基础上，加一个请求头</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;mcpServers&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;时间MCP&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;sse&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;url&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http://localhost:8080/sse&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;headers&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;Authorization&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Bearer yihuihui-blog&quot;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来走一个验证对比，分别是没有添加权限的以及加了权限管控的</p><figure><img src="`+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>说明：如果是用户名+密码的鉴权方式，则可以将上面json配置中的 <code>Authorization</code>相关内容替换为:</p><ul><li><code>&quot;Authorization&quot;: &quot;Basic eWlodWk6MTIzNDU2Nzg=&quot;</code></li><li><code>eWlodWk6MTIzNDU2Nzg=</code> 为用户名密码的base64编码，解码之后为 <code>yihui:12345678</code></li></ul><h3 id="_3-小结" tabindex="-1"><a class="header-anchor" href="#_3-小结" aria-hidden="true">#</a> 3. 小结</h3><p>这里我们实现了一个简单的权限管控，通过自定义的过滤器来实现，具体的逻辑为：</p><ul><li>拦截 <code>/sse</code>, <code>/mcp/messages</code>请求</li><li>校验请求头中的<code>Authorization</code>字段，判断是否满足要求</li><li>添加权限的MCP配置</li></ul><p>当然，这里只是简单的实现，实际生产中，我们可以通过数据库来实现权限的存储和查询，也可以通过其他方式来实现权限的验证，例如通过JWT+OAuth2.0的方式来实现；不管是哪种方式，核心的原理依然是web应用鉴权这一套，无非是应用的场景不同，一个是web用户、一个是mcp客户端而已</p>',30),m={href:"https://github.com/liuyueyi/spring-ai-demo/tree/master/S08-mcp-server-basic-auth",target:"_blank",rel:"noopener noreferrer"};function b(g,h){const p=t("RouterLink"),e=t("ExternalLinkIcon");return c(),l("div",null,[d,s("p",null,[n("上面一篇 "),a(p,{to:"/spring/springai/%E5%9F%BA%E7%A1%80%E7%AF%87/07.%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84McpServer.html"},{default:i(()=>[n("实现一个简单的McpServer")]),_:1}),n(" 带大家构建了一个自己的McpServer，其功能非常简单，接下来我们尝试逐步进行补全，我们下来看一下，如何给其加上权限管控，避免服务被白嫖")]),v,s("p",null,[n("文中所有涉及到的代码，可以到项目中获取 "),s("a",m,[n("https://github.com/liuyueyi/spring-ai-demo"),a(e)])])])}const q=o(k,[["render",b],["__file","08.MCP Server简单鉴权的实现.html.vue"]]);export{q as default};
