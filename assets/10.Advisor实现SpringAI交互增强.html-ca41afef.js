import{_ as t,V as e,W as p,Y as n,Z as s,$ as o,a1 as c,F as i}from"./framework-094145d2.js";const l="/tutorial/imgs/column/springai/10-1.webp",u="/tutorial/imgs/column/springai/10-2.webp",d="/tutorial/imgs/column/springai/10-3.webp",r="/tutorial/imgs/column/springai/10-4.webp",k={},v=c(`<h1 id="_10-advisor实现springai能力增强" tabindex="-1"><a class="header-anchor" href="#_10-advisor实现springai能力增强" aria-hidden="true">#</a> 10.Advisor实现SpringAI能力增强</h1><p>SpringAI通过<code>Advisor API</code>为拦截、修改、增强Spring应用中的AI交互提供了灵活且强大的能力支撑</p><p>核心优势在于：封装可复用的生成式AI模式、转换与大语言模型（LLM）交互的数据、实现跨模型与用例的可移植性。</p><h2 id="一、基础知识" tabindex="-1"><a class="header-anchor" href="#一、基础知识" aria-hidden="true">#</a> 一、基础知识</h2><h3 id="_1-核心组件" tabindex="-1"><a class="header-anchor" href="#_1-核心组件" aria-hidden="true">#</a> 1. 核心组件</h3><p>因为大模型一般支持同步/异步流式两种访问方式，相应的SpringAI也提供同步调用<code>call</code> 和 流式调用 <code>stream</code> 两种方式；</p><p>这两种不同的方式，对应的<code>Advisor</code>也不太一样</p><ul><li>流式：<code>StreamAdvisor</code> 和 <code>StreamAdvisorChain</code></li><li>非流式：<code>CallAdvisor</code> 和 <code>CallAdvisorChain</code></li></ul><p>接口定义如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StreamAdvisor</span> <span class="token keyword">extends</span> <span class="token class-name">Advisor</span> <span class="token punctuation">{</span>
    <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ChatClientResponse</span><span class="token punctuation">&gt;</span></span> <span class="token function">adviseStream</span><span class="token punctuation">(</span><span class="token class-name">ChatClientRequest</span> chatClientRequest<span class="token punctuation">,</span> <span class="token class-name">StreamAdvisorChain</span> streamAdvisorChain<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CallAdvisor</span> <span class="token keyword">extends</span> <span class="token class-name">Advisor</span> <span class="token punctuation">{</span>
    <span class="token class-name">ChatClientResponse</span> <span class="token function">adviseCall</span><span class="token punctuation">(</span><span class="token class-name">ChatClientRequest</span> chatClientRequest<span class="token punctuation">,</span> <span class="token class-name">CallAdvisorChain</span> callAdvisorChain<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中<code>ChatClientRequest</code>表示未密封的请求参数，<code>ChatClientResponse</code>表示的聊天完成响应的结果</p><figure><img src="`+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从上面的继承关系图也可以看出，核心的方法为 <code>adviseCall</code> 和 <code>adviseStream</code>，在这两个方法内，执行检查未密封的 Prompt 数据、定制与增强 Prompt 内容、调用 Advisor 链中的下一实体、选择性阻断请求、分析聊天完成响应，并通过抛出异常标识处理错误等步骤</p><ul><li>getOrder() 方法决定 Advisor 在链中的执行顺序</li><li>getName() 则提供唯一的 Advisor 标识名称</li></ul><h3 id="_2-advisor执行流程" tabindex="-1"><a class="header-anchor" href="#_2-advisor执行流程" aria-hidden="true">#</a> 2. Advisor执行流程</h3><p>下面流程图展示了 <code>Advisor</code> 链与聊天模型的交互过程：</p><figure><img src="'+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li>封装用户的提示词，创建 <code>ChatClientRequest</code> 对象，并创建一个空的 <code>Advisor</code>上下文对象</li><li>链中每个 <code>Advisor</code> 依次处理请求并可进行修改，也可选择阻断请求（不调用下一实体）。若选择阻断，该 <code>Advisor</code> 需负责填充响应内容。</li><li>链中的最后一个 <code>Advisor</code> 调用模型</li><li>聊天模型响应结果返回给 <code>Advisor Chain</code>，并被转换为包含共享 AdvisorContext 实例的 AdvisedResponse 对象。</li><li>链中每个 <code>Advisor</code> 一次处理或修改响应</li><li>通过提取 <code>ChatCompletion</code> 内容，最终生成的 <code>ChatClientResponse</code> 将返回给客户端</li></ol><h3 id="_3-执行顺序" tabindex="-1"><a class="header-anchor" href="#_3-执行顺序" aria-hidden="true">#</a> 3. 执行顺序</h3><p>链中 Advisor 的执行顺序由 getOrder() 方法决定</p><ol><li>数值越小，优先级越高</li><li><code>Advisor</code> 链采用栈式结构运作 <ul><li>链首的 <code>Advisor</code> 优先处理请求</li><li>链尾的 <code>Advisor</code> 优先处理响应</li></ul></li><li>控制执行顺序 <ul><li>通过调整 <code>order</code> 值，来控制执行顺序</li><li>当多个<code>Advisor</code>的<code>order</code>值相同时，则无法完全确认执行顺序</li></ul></li></ol><h2 id="二、自定义advisor开发" tabindex="-1"><a class="header-anchor" href="#二、自定义advisor开发" aria-hidden="true">#</a> 二、自定义<code>Advisor</code>开发</h2><p>接下来我们通过实现一个自定义的 <code>Advisor</code> 来实现大模型交互的耗时统计</p><h3 id="_1-耗时统计advisor" tabindex="-1"><a class="header-anchor" href="#_1-耗时统计advisor" aria-hidden="true">#</a> 1. 耗时统计Advisor</h3><p>接下来，我们实现一个简单的 <code>advisor</code> 用于统计大模型的耗时情况。首先创建一个 <code>CostAdvisor</code> 分别实现 <code>CallAdvisor</code> 和 <code>StreamAdvisor</code> 接口，让它同时适用于同步/流式场景</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CostAdvisor</span> <span class="token keyword">implements</span> <span class="token class-name">CallAdvisor</span><span class="token punctuation">,</span> <span class="token class-name">StreamAdvisor</span> <span class="token punctuation">{</span>
   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">public</span> <span class="token class-name">ChatClientResponse</span> <span class="token function">adviseCall</span><span class="token punctuation">(</span><span class="token class-name">ChatClientRequest</span> chatClientRequest<span class="token punctuation">,</span> <span class="token class-name">CallAdvisorChain</span> callAdvisorChain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       
   <span class="token punctuation">}</span>

   <span class="token annotation punctuation">@Override</span>
   <span class="token keyword">public</span> <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ChatClientResponse</span><span class="token punctuation">&gt;</span></span> <span class="token function">adviseStream</span><span class="token punctuation">(</span><span class="token class-name">ChatClientRequest</span> chatClientRequest<span class="token punctuation">,</span> <span class="token class-name">StreamAdvisorChain</span> streamAdvisorChain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来是关键的类实现，既然是耗时统计，那就设定这个 <code>Advisor</code> 优先级最高，在执行前后分别计时，用于获取耗时情况；并将相关信息写入到上下文中</p><p>因此一个完整的实现可以如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CostAdvisor</span> <span class="token keyword">implements</span> <span class="token class-name">CallAdvisor</span><span class="token punctuation">,</span> <span class="token class-name">StreamAdvisor</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span>LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">CostAdvisor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 同步调用
     *
     * <span class="token keyword">@param</span> <span class="token parameter">chatClientRequest</span>
     * <span class="token keyword">@param</span> <span class="token parameter">callAdvisorChain</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">ChatClientResponse</span> <span class="token function">adviseCall</span><span class="token punctuation">(</span><span class="token class-name">ChatClientRequest</span> chatClientRequest<span class="token punctuation">,</span> <span class="token class-name">CallAdvisorChain</span> callAdvisorChain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        chatClientRequest<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;start-time&quot;</span><span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// AdvisorChain 的调度执行 (有点类似 Filter 的链式执行 )</span>
        <span class="token class-name">ChatClientResponse</span> response <span class="token operator">=</span> callAdvisorChain<span class="token punctuation">.</span><span class="token function">nextCall</span><span class="token punctuation">(</span>chatClientRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> cost <span class="token operator">=</span> end <span class="token operator">-</span> start<span class="token punctuation">;</span>
        response<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;end-time&quot;</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>
        response<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;cost-time&quot;</span><span class="token punctuation">,</span> cost<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Prompt call cost: {} ms&quot;</span><span class="token punctuation">,</span> cost<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> response<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 流式调用
     *
     * <span class="token keyword">@param</span> <span class="token parameter">chatClientRequest</span>
     * <span class="token keyword">@param</span> <span class="token parameter">streamAdvisorChain</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ChatClientResponse</span><span class="token punctuation">&gt;</span></span> <span class="token function">adviseStream</span><span class="token punctuation">(</span><span class="token class-name">ChatClientRequest</span> chatClientRequest<span class="token punctuation">,</span> <span class="token class-name">StreamAdvisorChain</span> streamAdvisorChain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        chatClientRequest<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;start-time&quot;</span><span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ChatClientResponse</span><span class="token punctuation">&gt;</span></span> response <span class="token operator">=</span> streamAdvisorChain<span class="token punctuation">.</span><span class="token function">nextStream</span><span class="token punctuation">(</span>chatClientRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ChatClientMessageAggregator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">aggregateChatClientResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">long</span> cost <span class="token operator">=</span> end <span class="token operator">-</span> start<span class="token punctuation">;</span>
            <span class="token comment">// 添加耗时</span>
            res<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;end-time&quot;</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>
            res<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;cost-time&quot;</span><span class="token punctuation">,</span> cost<span class="token punctuation">)</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Prompt stream cost: {} ms&quot;</span><span class="token punctuation">,</span> cost<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;costAdvisor&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 指定最高优先级</span>
        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同步的实现比较好理解，重点说一下流式调用中，耗时时间的打印情况，这里借助的<code>MessageAggregator</code>工具类，用于将 Flux 响应聚合为 <code>AdvisedResponse</code>。适用于观察完整响应（即回答完毕之后），记录耗时时间</p><p>其次就是上下文的传递，可以通过 <code>chatClientRequest.context().put(&quot;start-time&quot;, start);</code> 和 <code>response.context().put(&quot;end-time&quot;, end);</code> 方式设置用于共享的上下文参数</p><h3 id="_2-测试验证" tabindex="-1"><a class="header-anchor" href="#_2-测试验证" aria-hidden="true">#</a> 2. 测试验证</h3><p>写一个简单的端点用于验证 CostAdvisor</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChatController</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span>Logger</span> log <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span></span>LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">ChatController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ChatClient</span> chatClient<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ChatController</span><span class="token punctuation">(</span><span class="token class-name">ChatModel</span> chatModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        chatClient <span class="token operator">=</span> <span class="token class-name">ChatClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>chatModel<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">defaultSystem</span><span class="token punctuation">(</span><span class="token string">&quot;你现在扮演盛唐的著名诗人李白，我们开始对话&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">defaultAdvisors</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CostAdvisor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/call&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ChatClientResponse</span> response <span class="token operator">=</span> chatClient<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">chatClientResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;上下文：{}&quot;</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">chatResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;/stream&quot;</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token string">&quot;text/event-stream&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">stream</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> ans <span class="token operator">=</span> chatClient<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从上面的访问截图也可以看出，<code>CostAdvisor</code> 拦截了请求，并记录了耗时情况，并打印在控制台</p><h2 id="三、小结" tabindex="-1"><a class="header-anchor" href="#三、小结" aria-hidden="true">#</a> 三、小结</h2><p>本篇文章主要介绍了SpringAI如何通过 <code>Advisor</code> 来实现大模型交互能力的增强，并通过实现了一个简单的 <code>CostAdvisor</code> 演示如何实现自定义的advisor</p><p>SpringAI 内置了一些常用的 advisor， 比如我们之前介绍过的上下文、日志打印等</p><ol><li>对话历史相关</li></ol><ul><li><code>MessageChatMemoryAdvisor</code><ul><li>检索记忆并将其作为信息集合添加到提示中。这种方法可以保持对话历史的结构。注意，并非所有人工智能模型都支持这种方法。</li></ul></li><li><code>PromptChatMemoryAdvisor</code><ul><li>检索记忆内容并将其整合到提示词的系统文本中。</li></ul></li><li><code>VectorStoreChatMemoryAdvisor</code><ul><li>从向量存储库检索记忆内容并注入提示词的系统文本。该 Advisor 能高效搜索海量数据集中的相关信息。</li></ul></li></ul><ol start="2"><li>问答相关</li></ol><ul><li><code>QuestionAnswerAdvisor</code><ul><li>该 Advisor 通过向量存储实现问答功能，采用检索增强生成（RAG）模式。</li></ul></li></ul><ol start="3"><li>内容安全</li></ol><ul><li><code>SafeGuardAdvisor</code><ul><li>基础防护型 Advisor，用于阻止模型生成有害或不恰当内容。</li></ul></li></ul><p>此外需要重点注意的是，我们实现的 <code>advisor</code> 需要同时考虑同步和流式的两种方式</p><figure><img src="'+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>非流式 Advisor 处理完整请求与响应。</li><li>流式 Advisor 采用响应式编程理念（如 Flux 处理响应），以连续流形式处理请求与响应。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">Flux</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ChatClientResponse</span><span class="token punctuation">&gt;</span></span> <span class="token function">adviseStream</span><span class="token punctuation">(</span><span class="token class-name">ChatClientRequest</span> chatClientRequest<span class="token punctuation">,</span> <span class="token class-name">StreamAdvisorChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span>  <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span>chatClientRequest<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">publishOn</span><span class="token punctuation">(</span><span class="token class-name">Schedulers</span><span class="token punctuation">.</span><span class="token function">boundedElastic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>request <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token comment">// This can be executed by blocking and non-blocking Threads.</span>
                <span class="token comment">// Advisor before next section</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">flatMapMany</span><span class="token punctuation">(</span>request <span class="token operator">-&gt;</span> chain<span class="token punctuation">.</span><span class="token function">nextStream</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>response <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token comment">// Advisor after next section</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,49),m={href:"https://github.com/liuyueyi/spring-ai-demo/tree/master/S10-cost-advise",target:"_blank",rel:"noopener noreferrer"};function b(g,h){const a=i("ExternalLinkIcon");return e(),p("div",null,[v,n("p",null,[s("文中所有涉及到的代码，可以到项目中获取 "),n("a",m,[s("https://github.com/liuyueyi/spring-ai-demo"),o(a)])])])}const f=t(k,[["render",b],["__file","10.Advisor实现SpringAI交互增强.html.vue"]]);export{f as default};
