import{_ as e,V as o,W as c,X as n,Y as s,Z as t,a0 as l,F as i}from"./framework-23f3cf9b.js";const p="/tutorial/imgs/column/quick-media/image/13203703_6IVg.jpg",u={},k=l('<h1 id="图片合成" tabindex="-1"><a class="header-anchor" href="#图片合成" aria-hidden="true">#</a> 图片合成</h1><blockquote><p>利用Java的绘图方法，实现图片合成</p></blockquote><p>在开始之前，先定一个小目标，我们希望通过图片合成的方式，创建一个类似下面样式的图片</p><figure><img src="'+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="i-设计思路" tabindex="-1"><a class="header-anchor" href="#i-设计思路" aria-hidden="true">#</a> I. 设计思路</h3><blockquote><p>首先解析一下我们的目标实现图片合成，那么这些合成的基本组成单元有些什么？</p></blockquote><p><strong>组成基本单元</strong></p><ul><li>图片</li><li>文字</li><li>几何图形</li></ul><p>也就是说，我们可以将任意个图片，文字，几何图形，按照自己的意愿进行拼接，那么问题就转变成两个</p><ul><li>基本单元如何在画布上渲染</li><li>基本单元之间如何配合使用</li></ul><h3 id="ii-基本单元绘制" tabindex="-1"><a class="header-anchor" href="#ii-基本单元绘制" aria-hidden="true">#</a> II. 基本单元绘制</h3><p>首先定义一个基本单元的接口，之后所有组合的元素都继承自这个接口</p><p>接口<code>IMergeCell</code>只定义一个绘制的方法，用于实现该基本单元的绘制方式</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IMergeCell</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token class-name">Graphics2D</span> g2d<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-图片绘制" tabindex="-1"><a class="header-anchor" href="#_1-图片绘制" aria-hidden="true">#</a> 1. 图片绘制</h4><p>绘制图片，一般来讲需要知道：</p><ul><li>绘制的坐标(x,y)</li><li>绘制图片的宽高(w,h)，当目标是绘制原图时，宽高一般为图片本身的宽高</li></ul><p>结合上面两点，图片组成单元的定义如下: <code>ImgCell</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Builder</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImgCell</span> <span class="token keyword">implements</span> <span class="token class-name">IMergeCell</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">BufferedImage</span> img<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Integer</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token punctuation">,</span> h<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token class-name">Graphics2D</span> g2d<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>w <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            w <span class="token operator">=</span> img<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            h <span class="token operator">=</span> img<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        g2d<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token punctuation">,</span> h<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-文本绘制" tabindex="-1"><a class="header-anchor" href="#_2-文本绘制" aria-hidden="true">#</a> 2. 文本绘制</h4><blockquote><p>图片绘制比较简单，相比而言，文字绘制就麻烦一点，主要是文本绘制的对齐方式，竖排还是横排布局</p></blockquote><p><strong>首先分析我们需要的基本信息</strong></p><ul><li><p>考虑对齐方式（居中对齐，靠左，靠上，靠右，靠下）</p><ul><li>因此需要确定文本绘制的区域，所以需要两个坐标 (startX, startY), (endX, endY)</li></ul></li><li><p>文本绘制参数</p><ul><li>可以指定字体<code>Font</code>，文本颜色 <code>Color</code>，行间距 <code>lineSpace</code></li></ul></li><li><p>绘制的文本信息</p><ul><li>文本内容 <code>List&lt;String&gt;</code></li></ul></li></ul><p><strong>绘制实现</strong></p><ul><li><p>若单行的文本超过长度上限，则需要自动换行，所以有 <code>batchSplitText</code> 方法，对原文本内容进行分割，确保不会超过边界</p></li><li><p>不同的对齐方式，绘制的起始坐标需要计算, 所以在水平布局文字时，需要通过 <code>calculateX</code>方法获取新的x坐标；竖直布局文字时，需要通过 <code>calculateY</code>获取新的y坐标</p></li></ul><p>实际代码如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TextCell</span> <span class="token keyword">implements</span> <span class="token class-name">IMergeCell</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> texts<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Color</span> color <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span>black<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Font</span> font <span class="token operator">=</span> <span class="token class-name">FontUtil</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_FONT</span><span class="token punctuation">;</span>


    <span class="token keyword">private</span> <span class="token keyword">int</span> lineSpace<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> startX<span class="token punctuation">,</span> startY<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> endX<span class="token punctuation">,</span> endY<span class="token punctuation">;</span>


    <span class="token doc-comment comment">/**
     * 绘制样式
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">ImgCreateOptions<span class="token punctuation">.</span>DrawStyle</span> drawStyle <span class="token operator">=</span> <span class="token class-name">ImgCreateOptions<span class="token punctuation">.</span>DrawStyle</span><span class="token punctuation">.</span><span class="token constant">HORIZONTAL</span><span class="token punctuation">;</span>


    <span class="token keyword">private</span> <span class="token class-name">ImgCreateOptions<span class="token punctuation">.</span>AlignStyle</span> alignStyle <span class="token operator">=</span> <span class="token class-name">ImgCreateOptions<span class="token punctuation">.</span>AlignStyle</span><span class="token punctuation">.</span><span class="token constant">LEFT</span><span class="token punctuation">;</span>


    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addText</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>texts <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            texts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        texts<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token class-name">Graphics2D</span> g2d<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        g2d<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>
        g2d<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">FontMetrics</span> fontMetrics <span class="token operator">=</span> <span class="token class-name">FontUtil</span><span class="token punctuation">.</span><span class="token function">getFontMetric</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> tmpHeight <span class="token operator">=</span> fontMetrics<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tmpW <span class="token operator">=</span> font<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> tmpY <span class="token operator">=</span> startY<span class="token punctuation">,</span> tmpX <span class="token operator">=</span> startX<span class="token punctuation">;</span>
        <span class="token keyword">int</span> offsetX <span class="token operator">=</span> drawStyle <span class="token operator">==</span> <span class="token class-name">ImgCreateOptions<span class="token punctuation">.</span>DrawStyle</span><span class="token punctuation">.</span><span class="token constant">VERTICAL_LEFT</span>
                <span class="token operator">?</span> <span class="token punctuation">(</span>font<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> fontMetrics<span class="token punctuation">.</span><span class="token function">getDescent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> lineSpace<span class="token punctuation">)</span>
                <span class="token operator">:</span> <span class="token operator">-</span><span class="token punctuation">(</span>font<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> fontMetrics<span class="token punctuation">.</span><span class="token function">getDescent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> lineSpace<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 单行文本自动换行分割</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> splitText <span class="token operator">=</span> <span class="token function">batchSplitText</span><span class="token punctuation">(</span>texts<span class="token punctuation">,</span> fontMetrics<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> info <span class="token operator">:</span> splitText<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>drawStyle <span class="token operator">==</span> <span class="token class-name">ImgCreateOptions<span class="token punctuation">.</span>DrawStyle</span><span class="token punctuation">.</span><span class="token constant">HORIZONTAL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
                g2d<span class="token punctuation">.</span><span class="token function">drawString</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> <span class="token function">calculateX</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> fontMetrics<span class="token punctuation">)</span><span class="token punctuation">,</span> tmpY<span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// 换行，y坐标递增一位</span>
                tmpY <span class="token operator">+=</span> fontMetrics<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> lineSpace<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 垂直绘制文本</span>
                <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> info<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                tmpY <span class="token operator">=</span> <span class="token function">calculateY</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> fontMetrics<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    tmpX <span class="token operator">=</span> <span class="token class-name">PunctuationUtil</span><span class="token punctuation">.</span><span class="token function">isPunctuation</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> tmpW <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
                    g2d<span class="token punctuation">.</span><span class="token function">drawString</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                            tmpX <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">PunctuationUtil</span><span class="token punctuation">.</span><span class="token function">isPunctuation</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> tmpW <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                            tmpY<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    tmpY <span class="token operator">+=</span> tmpHeight<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token comment">// 换一列</span>
                tmpX <span class="token operator">+=</span> offsetX<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>


    <span class="token comment">// 若单行文本超过长度限制，则自动进行换行</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">batchSplitText</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> texts<span class="token punctuation">,</span> <span class="token class-name">FontMetrics</span> fontMetrics<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>drawStyle <span class="token operator">==</span> <span class="token class-name">ImgCreateOptions<span class="token punctuation">.</span>DrawStyle</span><span class="token punctuation">.</span><span class="token constant">HORIZONTAL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> lineLen <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>endX <span class="token operator">-</span> startX<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> t<span class="token operator">:</span> texts<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                ans<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token class-name">GraphicUtil</span><span class="token punctuation">.</span><span class="token function">splitStr</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> lineLen<span class="token punctuation">,</span> fontMetrics<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> lineLen <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>endY <span class="token operator">-</span> startY<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> t<span class="token operator">:</span> texts<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                ans<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token class-name">GraphicUtil</span><span class="token punctuation">.</span><span class="token function">splitVerticalStr</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> lineLen<span class="token punctuation">,</span> fontMetrics<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">calculateX</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token class-name">FontMetrics</span> fontMetrics<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>alignStyle <span class="token operator">==</span> <span class="token class-name">ImgCreateOptions<span class="token punctuation">.</span>AlignStyle</span><span class="token punctuation">.</span><span class="token constant">LEFT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> startX<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>alignStyle <span class="token operator">==</span> <span class="token class-name">ImgCreateOptions<span class="token punctuation">.</span>AlignStyle</span><span class="token punctuation">.</span><span class="token constant">RIGHT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> endX <span class="token operator">-</span> fontMetrics<span class="token punctuation">.</span><span class="token function">stringWidth</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> startX <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>endX <span class="token operator">-</span> startX <span class="token operator">-</span> fontMetrics<span class="token punctuation">.</span><span class="token function">stringWidth</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>


    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">calculateY</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token class-name">FontMetrics</span> fontMetrics<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>alignStyle <span class="token operator">==</span> <span class="token class-name">ImgCreateOptions<span class="token punctuation">.</span>AlignStyle</span><span class="token punctuation">.</span><span class="token constant">TOP</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> startY<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>alignStyle <span class="token operator">==</span> <span class="token class-name">ImgCreateOptions<span class="token punctuation">.</span>AlignStyle</span><span class="token punctuation">.</span><span class="token constant">BOTTOM</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> size <span class="token operator">=</span> fontMetrics<span class="token punctuation">.</span><span class="token function">stringWidth</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token operator">+</span> fontMetrics<span class="token punctuation">.</span><span class="token function">getDescent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> endY <span class="token operator">-</span> size<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> size <span class="token operator">=</span> fontMetrics<span class="token punctuation">.</span><span class="token function">stringWidth</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token operator">+</span> fontMetrics<span class="token punctuation">.</span><span class="token function">getDescent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>text<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> startY <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>endY <span class="token operator">-</span> endX <span class="token operator">-</span> size<span class="token punctuation">)</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>说明:</em></p><ul><li>单行文本的分割，使用了博文系列中的工具方法 <code>GraphicUtil.splitStr</code>，有兴趣的关注源码进行查看</li><li>水平布局时，期望 <code>startX &lt; endX</code>, 从习惯来讲，基本上我们都是从左到右进行阅读</li><li>水平or垂直布局，都希望是 <code>startY &lt; endY</code></li><li>垂直布局时，以字符为单位进行绘制；标点符号的绘制时，x坐标有一个偏移量</li></ul><h4 id="_3-line直线绘制" tabindex="-1"><a class="header-anchor" href="#_3-line直线绘制" aria-hidden="true">#</a> 3. Line直线绘制</h4><p>几何图形之直线绘制，给出起点和结束点坐标，绘制一条直线，比较简单；这里给出了虚线的支持</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Builder</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LineCell</span> <span class="token keyword">implements</span> <span class="token class-name">IMergeCell</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 起点坐标
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> x1<span class="token punctuation">,</span> y1<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 终点坐标
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 颜色
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Color</span> color<span class="token punctuation">;</span>


    <span class="token doc-comment comment">/**
     * 是否是虚线
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> dashed<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 虚线样式
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Stroke</span> stroke <span class="token operator">=</span> <span class="token class-name">CellConstants</span><span class="token punctuation">.</span><span class="token constant">LINE_DEFAULT_STROKE</span><span class="token punctuation">;</span>


    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token class-name">Graphics2D</span> g2d<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        g2d<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dashed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            g2d<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 绘制虚线时，需要保存下原有的画笔用于恢复</span>
            <span class="token class-name">Stroke</span> origin <span class="token operator">=</span> g2d<span class="token punctuation">.</span><span class="token function">getStroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            g2d<span class="token punctuation">.</span><span class="token function">setStroke</span><span class="token punctuation">(</span>stroke<span class="token punctuation">)</span><span class="token punctuation">;</span>
            g2d<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">)</span><span class="token punctuation">;</span>
            g2d<span class="token punctuation">.</span><span class="token function">setStroke</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-矩形框绘制" tabindex="-1"><a class="header-anchor" href="#_4-矩形框绘制" aria-hidden="true">#</a> 4. 矩形框绘制</h4><p>矩形框绘制，同直线绘制，支持圆角矩形，支持虚线框</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@Builder</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RectCell</span> <span class="token keyword">implements</span> <span class="token class-name">IMergeCell</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 起始坐标
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 矩形宽高
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> w<span class="token punctuation">,</span> h<span class="token punctuation">;</span>


    <span class="token doc-comment comment">/**
     * 颜色
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Color</span> color<span class="token punctuation">;</span>


    <span class="token doc-comment comment">/**
     * 是否为虚线
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> dashed<span class="token punctuation">;</span>


    <span class="token doc-comment comment">/**
     * 虚线样式
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Stroke</span> stroke<span class="token punctuation">;</span>


    <span class="token doc-comment comment">/**
     * 圆角弧度
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> radius<span class="token punctuation">;</span>


    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token class-name">Graphics2D</span> g2d<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        g2d<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dashed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            g2d<span class="token punctuation">.</span><span class="token function">drawRoundRect</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token punctuation">,</span> h<span class="token punctuation">,</span> radius<span class="token punctuation">,</span> radius<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">Stroke</span> stroke <span class="token operator">=</span> g2d<span class="token punctuation">.</span><span class="token function">getStroke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            g2d<span class="token punctuation">.</span><span class="token function">setStroke</span><span class="token punctuation">(</span>stroke<span class="token punctuation">)</span><span class="token punctuation">;</span>
            g2d<span class="token punctuation">.</span><span class="token function">drawRoundRect</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token punctuation">,</span> h<span class="token punctuation">,</span> radius<span class="token punctuation">,</span> radius<span class="token punctuation">)</span><span class="token punctuation">;</span>
            g2d<span class="token punctuation">.</span><span class="token function">setStroke</span><span class="token punctuation">(</span>stroke<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-矩形区域填充" tabindex="-1"><a class="header-anchor" href="#_5-矩形区域填充" aria-hidden="true">#</a> 5. 矩形区域填充</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Builder</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RectFillCell</span> <span class="token keyword">implements</span> <span class="token class-name">IMergeCell</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Font</span> font<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Color</span> color<span class="token punctuation">;</span>


    <span class="token keyword">private</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>w<span class="token punctuation">,</span>h<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">draw</span><span class="token punctuation">(</span><span class="token class-name">Graphics2D</span> g2d<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        g2d<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span>
        g2d<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
        g2d<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="iii-封装" tabindex="-1"><a class="header-anchor" href="#iii-封装" aria-hidden="true">#</a> III. 封装</h3><p>上面实现了几个常见的基本单元绘制，接下来则是封装绘制, 这块的逻辑就比较简单了如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImgMergeWrapper</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">BufferedImage</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IMergeCell</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">,</span> <span class="token keyword">int</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">BufferedImage</span> img <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedImage</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> h<span class="token punctuation">,</span> <span class="token class-name">BufferedImage</span><span class="token punctuation">.</span><span class="token constant">TYPE_INT_ARGB</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Graphics2D</span> g2d <span class="token operator">=</span> <span class="token class-name">GraphicUtil</span><span class="token punctuation">.</span><span class="token function">getG2d</span><span class="token punctuation">(</span>img<span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>cell <span class="token operator">-&gt;</span> cell<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>g2d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> img<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="iv-测试" tabindex="-1"><a class="header-anchor" href="#iv-测试" aria-hidden="true">#</a> IV. 测试</h3><p>写了一个模板<code>QrCodeCardTemplateBuilder</code>，用于拼装上图的样式，代码较长，不贴了，有兴趣的查看原图</p><p>测试代码如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">BufferedImage</span> logo <span class="token operator">=</span> <span class="token class-name">ImageUtil</span><span class="token punctuation">.</span><span class="token function">getImageByPath</span><span class="token punctuation">(</span><span class="token string">&quot;logo.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BufferedImage</span> qrCode <span class="token operator">=</span> <span class="token class-name">ImageUtil</span><span class="token punctuation">.</span><span class="token function">getImageByPath</span><span class="token punctuation">(</span><span class="token string">&quot;/Users/yihui/Desktop/12.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;小灰灰blog&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> desc <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;我是一灰灰，一匹不吃羊的狼   专注码农技术分享&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token keyword">int</span> w <span class="token operator">=</span> <span class="token class-name">QrCodeCardTemplate</span><span class="token punctuation">.</span>w<span class="token punctuation">,</span> h <span class="token operator">=</span> <span class="token class-name">QrCodeCardTemplate</span><span class="token punctuation">.</span>h<span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IMergeCell</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">QrCodeCardTemplateBuilder</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>logo<span class="token punctuation">,</span> name<span class="token punctuation">,</span> desc<span class="token punctuation">,</span> qrCode<span class="token punctuation">,</span> <span class="token string">&quot;微 信 公 众 号&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name">BufferedImage</span> bg <span class="token operator">=</span> <span class="token class-name">ImgMergeWrapper</span><span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> w<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">ImageIO</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bg<span class="token punctuation">,</span> <span class="token string">&quot;jpg&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;/Users/yihui/Desktop/merge.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>演示图如下:</p><figure><img src="`+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="v-其他" tabindex="-1"><a class="header-anchor" href="#v-其他" aria-hidden="true">#</a> V. 其他</h3><p><strong>项目地址：</strong></p>',48),r={href:"https://github.com/liuyueyi/quick-media",target:"_blank",rel:"noopener noreferrer"},d=n("li",null,[n("code",null,"QuickMedia"),s(" 目标是创建一个专注图文，音视频，二维码处理的开源项目")],-1),v=n("p",null,[n("strong",null,"系列博文")],-1),m={href:"https://my.oschina.net/u/566591/blog/1359432",target:"_blank",rel:"noopener noreferrer"},b={href:"https://my.oschina.net/u/566591/blog/1457164",target:"_blank",rel:"noopener noreferrer"},g={href:"https://my.oschina.net/u/566591/blog/1491697",target:"_blank",rel:"noopener noreferrer"},y={href:"https://my.oschina.net/u/566591/blog/1507162",target:"_blank",rel:"noopener noreferrer"},f={href:"https://my.oschina.net/u/566591/blog/1514644",target:"_blank",rel:"noopener noreferrer"},h={href:"https://my.oschina.net/u/566591/blog/1529564",target:"_blank",rel:"noopener noreferrer"},w={href:"https://my.oschina.net/u/566591/blog/1535380",target:"_blank",rel:"noopener noreferrer"},x={href:"https://my.oschina.net/u/566591/blog/1536078",target:"_blank",rel:"noopener noreferrer"};function _(S,I){const a=i("ExternalLinkIcon");return o(),c("div",null,[k,n("ul",null,[n("li",null,[n("a",r,[s("https://github.com/liuyueyi/quick-media"),t(a)])]),d]),v,n("ul",null,[n("li",null,[n("a",m,[s("spring-boot & ffmpeg 搭建一个音频转码服务"),t(a)])]),n("li",null,[n("a",b,[s("spring-boot & zxingy 搭建二维码服务"),t(a)])]),n("li",null,[n("a",g,[s("二维码服务拓展(支持logo，圆角logo，背景图，颜色配置)"),t(a)])]),n("li",null,[n("a",y,[s("zxing二维码生成服务之深度定制"),t(a)])]),n("li",null,[n("a",f,[s("Java实现长图文生成"),t(a)])]),n("li",null,[n("a",h,[s("Java竖排长图文生成"),t(a)])]),n("li",null,[n("a",w,[s("Java实现markdown 转 html"),t(a)])]),n("li",null,[n("a",x,[s("Java实现html 转 image"),t(a)])])])])}const M=e(u,[["render",_],["__file","01.图片合成.html.vue"]]);export{M as default};
