import{_ as t,V as o,W as i,X as c,Y as n,Z as s,$ as e,a1 as p,F as l}from"./framework-094145d2.js";const u={},r=n("h1",{id:"背景介绍",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#背景介绍","aria-hidden":"true"},"#"),s(" 背景介绍")],-1),d=n("blockquote",null,[n("p",null,"SPI的全名为Service Provider Interface，简单的总结下java spi机制的思想。我们系统里抽象的各个模块，往往有很多不同的实现方案，比如日志模块的方案，xml解析模块、jdbc模块的方案等。面向的对象的设计里，我们一般推荐模块之间基于接口编程，模块之间不对实现类进行硬编码。一旦代码里涉及具体的实现类，就违反了可拔插的原则，如果需要替换一种实现，就需要修改代码。为了实现在模块装配的时候能不在程序里动态指明，这就需要一种服务发现机制。 java spi就是提供这样的一个机制：为某个接口寻找服务实现的机制")],-1),k=p(`<h2 id="_1-背景" tabindex="-1"><a class="header-anchor" href="#_1-背景" aria-hidden="true">#</a> 1. 背景</h2><p>上面摘抄了一下spi的概念，接着以个人的理解，简单的谈一下为什么会用到SPI， 什么场景下可以用到这个， 以及使用了SPI机制后有什么优越性</p><h3 id="什么是spi" tabindex="-1"><a class="header-anchor" href="#什么是spi" aria-hidden="true">#</a> 什么是SPI</h3><p>虽然最开始就引用了spi的解释，这里浅谈一下个人理解。<code>Service Provider Interface</code> 以接口方式提供服务， 和API不同，spi的机制是定义一套标准规范的接口，实现交给其他人来做。</p><p>所以一个接口，可以有很多的实现，你完全可以根据自己的需要去选择具体的实现方式，因为是面向接口的开发，所以你的业务代码基本上就不用修改，就可以切到另一个实现了</p><h3 id="什么场景可以用" tabindex="-1"><a class="header-anchor" href="#什么场景可以用" aria-hidden="true">#</a> 什么场景可以用</h3><blockquote><p>分别从框架层面和业务层面，给出一个我认为比较合适的场景</p></blockquote><h4 id="_1-日志输出-slf4j" tabindex="-1"><a class="header-anchor" href="#_1-日志输出-slf4j" aria-hidden="true">#</a> 1. 日志输出 <code>SLF4j</code></h4><p>SLF4j：大名鼎鼎的日志输出接口，这个jar包里面提供的都只是接口方式，具体的实现需要自己去实现，当然比较常用的 <code>logback</code> 就是一个具体的实现包了， 在项目中使用 <code>slf4j</code> 的api进行日志的输出， 通过简单的配置，引入logback， 就可以使用logback来实现具体的日志输出； 也可以换一个日志实现 <code>commons-logging</code>，业务上不需要任何的改动，就可以用不同的实现来输出日志</p><h4 id="_2-业务场景" tabindex="-1"><a class="header-anchor" href="#_2-业务场景" aria-hidden="true">#</a> 2. 业务场景</h4><p>假设你现在有个用户注册成功后的欢迎用户的业务，不同渠道（微信，qq，微博等）注册的，显示的欢迎不同，对此有两种不同的实现方式</p><ul><li>如果每个不同的渠道进来的，都有一个独立的应用来响应 （因为绝大多数的业务都一样，可能就欢迎词不同，如果做到代码最大程度的复用）</li><li>只有一个应用，来处理所有的这些场景</li></ul><h3 id="可以怎么用" tabindex="-1"><a class="header-anchor" href="#可以怎么用" aria-hidden="true">#</a> 可以怎么用</h3><blockquote><p>结合上面的业务场景，来描述下可以怎么用</p></blockquote><h4 id="_1-代码复用" tabindex="-1"><a class="header-anchor" href="#_1-代码复用" aria-hidden="true">#</a> 1. 代码复用</h4><p>为了实现代码最大程度的复用，那么可以将不同的地方，抽象成一个SPI接口，在业务层通过接口来代替具体的实现类实现业务逻辑；</p><p>每个渠道，都有个独立的应用，那么在微信渠道，创建一个 WeixinSpiImpl来实现接口</p><p>在qq渠道，实现 QQSpiImpl；那么在具体的接口调用处，实际上就是执行的spi实现类方法</p><h4 id="_2-业务场景的选择区分" tabindex="-1"><a class="header-anchor" href="#_2-业务场景的选择区分" aria-hidden="true">#</a> 2. 业务场景的选择区分</h4><p>这个与上面不同，同一个服务接口，根据不同的业务场景，选择不同的实现来执行；当然你是完全可以使用 if， else来实现这种场景，唯一的问题就是扩展比较麻烦；</p><p>这种场景下，我们希望的就是这个接口，能自动的根据业务场景，来选择最合适的实现类来执行</p><p><strong>简单来讲，就是spi接口执行之前，其实需要有一个自动选择匹配的实现类的前置过程；</strong></p><p>通常这种业务场景下，具体的spi实现会有多个，但是需要有一个选择的策略</p><hr><h2 id="_2-小目标" tabindex="-1"><a class="header-anchor" href="#_2-小目标" aria-hidden="true">#</a> 2. 小目标</h2><blockquote><p>在具体的实现之前，先定义一个小目标，我们想要实现一个什么样子的东西出来</p></blockquote><p>通过上面的背景描述，我们的小目标也就很明确了，我们的实现至少需要满足两个场景</p><ol><li>静态选择SPI实现， 即在选择完成之后，所有对这个spi接口的引用都是确定由这个实现来承包</li><li>动态选择SPI实现， 不到运行之时，你都不知道会是哪个spi实现来干这件事</li></ol><hr><h2 id="_3-技术储备" tabindex="-1"><a class="header-anchor" href="#_3-技术储备" aria-hidden="true">#</a> 3. 技术储备</h2><blockquote><p>java本身就提供了一套spi的支持方式: <code>ServiceLoader</code>，我们后续的开发，也会在这个基础之上进行</p></blockquote><p>利用java的 <code>ServiceLoader</code> 找到服务接口的实现类，有一些约定，下面给出要求说明和一个测试case</p><p><strong>一般实现流程</strong></p><ul><li>定义spi接口 ： <code>IXxx</code></li><li>具体的实现类: <code>AXxx</code>, <code>BXxx</code></li><li>在jar包的<code>META-INF/services/</code>目录下新建一个文件，命名为 spi接口的完整类名，内容为spi接口实现的完整类名，一个实现类占一行</li></ul><p><strong>测试case如下</strong></p><p>spi接口 <code>com.hust.hui.quicksilver.commons.spi.HelloInterface</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hust<span class="token punctuation">.</span>hui<span class="token punctuation">.</span>quicksilver<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>spi</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Created by yihui on 2017/3/17.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HelloInterface</span> <span class="token punctuation">{</span>

    <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>spi接口的两个实现类</p><p><code>com.hust.hui.quicksilver.commons.spi.impl.ImageHello.java</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hust<span class="token punctuation">.</span>hui<span class="token punctuation">.</span>quicksilver<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>spi<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>hust<span class="token punctuation">.</span>hui<span class="token punctuation">.</span>quicksilver<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>spi<span class="token punctuation">.</span></span><span class="token class-name">HelloInterface</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Created by yihui on 2017/3/17.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImageHello</span> <span class="token keyword">implements</span> <span class="token class-name">HelloInterface</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;image hello!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>com.hust.hui.quicksilver.commons.spi.impl.TextHello.java</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hust<span class="token punctuation">.</span>hui<span class="token punctuation">.</span>quicksilver<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>spi<span class="token punctuation">.</span>impl</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>hust<span class="token punctuation">.</span>hui<span class="token punctuation">.</span>quicksilver<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>spi<span class="token punctuation">.</span></span><span class="token class-name">HelloInterface</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Created by yihui on 2017/3/17.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TextHello</span> <span class="token keyword">implements</span> <span class="token class-name">HelloInterface</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;text hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置文件 <code>com.hust.hui.quicksilver.commons.spi.HelloInterface</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>com.hust.hui.quicksilver.commons.spi.impl.ImageHello
com.hust.hui.quicksilver.commons.spi.impl.TextHello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>测试类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloSpiTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSPI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ServiceLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HelloInterface</span><span class="token punctuation">&gt;</span></span> serviceLoader <span class="token operator">=</span> <span class="token class-name">ServiceLoader</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">HelloInterface</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HelloInterface</span> hello<span class="token operator">:</span> serviceLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            hello<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出如下:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>image hello!
text hello
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>测试类演示如下图:</p><figure><img src="https://static.oschina.net/uploads/img/201705/26171232_e3Hb.gif" alt="演示图" tabindex="0" loading="lazy"><figcaption>演示图</figcaption></figure><hr><h2 id="_4-设计思路" tabindex="-1"><a class="header-anchor" href="#_4-设计思路" aria-hidden="true">#</a> 4. 设计思路</h2><p>画了一下结构图，方便理解, 下面的核心是 <code>SpiLoader</code> 类， 负责加载spi接口的所有实现类， 初始化所有定义的选择器， 返回一个spi接口的实现类初始化用户自定义的spi对象，然后用户持有此对象调用spi接口中提供的方法即可</p>`,53),h=n("img",{src:"https://static.oschina.net/uploads/img/201705/26185143_ULnL.png",alt:"https://static.oschina.net/uploads/img/201705/26185143_ULnL.png",tabindex:"0",loading:"lazy"},null,-1),m={href:"https://static.oschina.net/uploads/img/201705/26185143_ULnL.png",target:"_blank",rel:"noopener noreferrer"},v=n("h2",{id:"_5-其他",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_5-其他","aria-hidden":"true"},"#"),s(" 5. 其他")],-1),b=n("h3",{id:"博客系列链接",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#博客系列链接","aria-hidden":"true"},"#"),s(" 博客系列链接：")],-1),g={href:"/hexblog/2018/05/30/SPI%E6%A1%86%E6%9E%B6%E5%AE%9E%E7%8E%B0%E4%B9%8B%E6%97%85%E5%9B%9B%EF%BC%9A%E4%BD%BF%E7%94%A8%E6%B5%8B%E8%AF%95/",target:"_blank",rel:"noopener noreferrer"},_={href:"/hexblog/2018/05/30/SPI%E6%A1%86%E6%9E%B6%E5%AE%9E%E7%8E%B0%E4%B9%8B%E6%97%85%E4%B8%89%EF%BC%9A%E5%AE%9E%E7%8E%B0%E8%AF%B4%E6%98%8E/",target:"_blank",rel:"noopener noreferrer"},f={href:"/hexblog/2018/05/30/SPI%E6%A1%86%E6%9E%B6%E5%AE%9E%E7%8E%B0%E4%B9%8B%E6%97%85%E4%BA%8C%EF%BC%9A%E6%95%B4%E4%BD%93%E8%AE%BE%E8%AE%A1/",target:"_blank",rel:"noopener noreferrer"},E={href:"/hexblog/2017/05/29/SPI%E6%A1%86%E6%9E%B6%E5%AE%9E%E7%8E%B0%E4%B9%8B%E6%97%85%E4%B8%80%EF%BC%9A%E8%83%8C%E6%99%AF%E4%BB%8B%E7%BB%8D/",target:"_blank",rel:"noopener noreferrer"},x=n("h3",{id:"项目-quickalarm",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#项目-quickalarm","aria-hidden":"true"},"#"),s(" 项目: QuickAlarm")],-1),y={href:"https://github.com/liuyueyi/quick-spi",target:"_blank",rel:"noopener noreferrer"},B={href:"https://liuyueyi.github.io/hexblog/",target:"_blank",rel:"noopener noreferrer"},I={id:"个人博客-z-blog",tabindex:"-1"},S=n("a",{class:"header-anchor",href:"#个人博客-z-blog","aria-hidden":"true"},"#",-1),q={href:"https://liuyueyi.github.io/hexblog",target:"_blank",rel:"noopener noreferrer"},j=n("p",null,"基于hexo + github pages搭建的个人博客，记录所有学习和工作中的博文，欢迎大家前去逛逛",-1),w=n("h3",{id:"声明",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#声明","aria-hidden":"true"},"#"),s(" 声明")],-1),A={href:"https://weibo.com/p/1005052169825577/home",target:"_blank",rel:"noopener noreferrer"},H=n("h3",{id:"扫描关注",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#扫描关注","aria-hidden":"true"},"#"),s(" 扫描关注")],-1),P=n("figure",null,[n("img",{src:"https://s17.mogucdn.com/mlcdn/c45406/180209_74fic633aebgh5dgfhid2fiiggc99_1220x480.png",alt:"QrCode",tabindex:"0",loading:"lazy"}),n("figcaption",null,"QrCode")],-1);function L(C,F){const a=l("ExternalLinkIcon");return o(),i("div",null,[r,d,c("more"),k,n("figure",null,[h,n("figcaption",null,[n("a",m,[s("https://static.oschina.net/uploads/img/201705/26185143_ULnL.png"),e(a)])])]),v,b,n("ul",null,[n("li",null,[n("a",g,[s("SPI框架实现之旅四：使用测试"),e(a)])]),n("li",null,[n("a",_,[s("SPI框架实现之旅三：实现说明"),e(a)])]),n("li",null,[n("a",f,[s("SPI框架实现之旅二：整体设计"),e(a)])]),n("li",null,[n("a",E,[s("SPI框架实现之旅一：背景介绍"),e(a)])])]),x,n("ul",null,[n("li",null,[s("项目地址： "),n("a",y,[s("Quick-SPI"),e(a)])]),n("li",null,[s("博客地址： "),n("a",B,[s("小灰灰Blog"),e(a)])])]),n("h3",I,[S,s(" 个人博客： "),n("a",q,[s("Z+|blog"),e(a)])]),j,w,n("p",null,[s("尽信书则不如，已上内容，纯属一家之言，因本人能力一般，见识有限，如发现bug或者有更好的建议，随时欢迎批评指正，我的微博地址: "),n("a",A,[s("小灰灰Blog"),e(a)])]),H,P])}const N=t(u,[["render",L],["__file","SPI框架实现之旅一：背景介绍.html.vue"]]);export{N as default};
