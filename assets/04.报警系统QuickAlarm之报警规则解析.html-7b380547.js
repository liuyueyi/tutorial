import{_ as p,V as l,W as c,X as o,Y as n,Z as s,$ as e,a1 as t,F as i}from"./framework-094145d2.js";const u={},r=n("p",null,"前面两篇分别说了报警执行器和报警规则的定义及用户扩展加载，接下来就是比较核心的一块了，如何将报警规则和报警执行器关联起来，即当发生报警时，应该call哪一个报警执行器",-1),d=t('<h2 id="i-背景知识点" tabindex="-1"><a class="header-anchor" href="#i-背景知识点" aria-hidden="true">#</a> I. 背景知识点</h2><h3 id="_0-声明" tabindex="-1"><a class="header-anchor" href="#_0-声明" aria-hidden="true">#</a> 0. 声明</h3><p>在正式进入之前，有必要额外声明一下，因为目前的v1版本，没有开放报警规则的自定义，也就是说，目前只支持默认的报警规则，所以接下来的主要内容将集中在</p><ul><li>系统默认的报警规则的解析</li><li>即基于报警频率阀值，自动选择报警执行器的规则解析</li></ul><h3 id="_1-报警规则" tabindex="-1"><a class="header-anchor" href="#_1-报警规则" aria-hidden="true">#</a> 1. 报警规则</h3>',5),k={href:"https://liuyueyi.github.io/hexblog/2018/02/09/%E6%8A%A5%E8%AD%A6%E7%B3%BB%E7%BB%9FQuickAlarm%E4%B9%8B%E6%8A%A5%E8%AD%A6%E8%A7%84%E5%88%99%E7%9A%84%E8%AE%BE%E5%AE%9A%E4%B8%8E%E5%8A%A0%E8%BD%BD/",target:"_blank",rel:"noopener noreferrer"},m=t(`<p>这里简单的进行说明，系统中默认的报警规则结构为：</p><ul><li>key为报警类型（即用户执行报警时，传进来的报警类型参数）</li><li>value为具体报警规则 <ul><li>每个报警执行器拥有一个报警频率区间，通过报警频率映射到报警执行器的区间来选择对应的AlarmExecutor，这就是系统定义的报警规则</li></ul></li></ul><h2 id="ii-报警规则解析" tabindex="-1"><a class="header-anchor" href="#ii-报警规则解析" aria-hidden="true">#</a> II. 报警规则解析</h2><p>通过前面的报警规则的简单说明，基本上也可以捞出报警规则的解析原则了</p><ul><li>每种报警类型，对应一个报警规则</li><li>每个报警规则中，可以有多个报警执行器</li><li>每个报警执行器都有一个对应的报警频率的阀值</li><li>根据阀值对所有的报警执行器排序</li><li>计算报警频率，映射到哪个区间，则选择哪个报警执行器</li></ul><p>上面是一个简单的解析规则，当然实际上和这个差不多，但有一些问题需要额外注意</p><ol><li>只想选择一种报警方式，是否可以支持？</li><li>多重报警方式同时调用怎么处理？（如我希望用短信提示说有问题，同时用邮件包含详细的异常堆栈）</li><li>频率限制</li><li>报警类型没有设置报警规则如何处理？</li><li>报警规则中使用了一个未注册的报警执行器会怎样？</li></ol><h3 id="_1-实现方案说明" tabindex="-1"><a class="header-anchor" href="#_1-实现方案说明" aria-hidden="true">#</a> 1. 实现方案说明</h3><p>再次将报警规则类拿出来看一下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 报警用户
 */</span>
<span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> users<span class="token punctuation">;</span>


<span class="token doc-comment comment">/**
 * 报警的阀值
 */</span>
<span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AlarmThreshold</span><span class="token punctuation">&gt;</span></span> alarmThreshold<span class="token punctuation">;</span>


<span class="token doc-comment comment">/**
 * 最小的报警数
 */</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> minLimit<span class="token punctuation">;</span>


<span class="token doc-comment comment">/**
 * 最大的报警数
 */</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> maxLimit<span class="token punctuation">;</span>


<span class="token doc-comment comment">/**
 * 报警类型 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">IExecute</span><span class="token punctuation">#</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
 */</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> alarmLevel<span class="token punctuation">;</span>


<span class="token doc-comment comment">/**
 * true 表示当报警超过当前的阀值之后, 将提升报警的程度
 */</span>
<span class="token keyword">private</span> <span class="token keyword">boolean</span> autoIncEmergency<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>针对上面的问题，逐一说明</p><ul><li>首先是 <code>autoIncEmergency</code> 这个参数，如果为true，则表示可以走上面的哪个区间映射的规则；否则就全部走AlarmConfig中默认的报警类型了</li><li>minLimit : 表示发生报警的频率下限值，小于这个值就不会执行具体的报警逻辑</li><li>maxLimit : 最大的报警频率，超过了也不报警（简单的频率控制）</li><li>alarmLevel: 对应的就是具体的报警类型</li><li>alarmThreshold: 这个只有在<code>autoIncEmergency=true</code>时，才有小，也就是我们前面说的不同的报警执行器，根据阀值区间进行排序，开启之后，遍历，判断频率是否在这个区间内，若在，则表示可以选择它了</li><li>如果不存在报警规则，则采用默认的兜底规则</li><li>若报警执行器也不存在，就直接采用系统定义的日志报警执行器</li></ul><h3 id="_2-实现" tabindex="-1"><a class="header-anchor" href="#_2-实现" aria-hidden="true">#</a> 2. 实现</h3><p>基本上前面已经将整个逻辑都说了，所以实际的编码反而比较清晰了</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 获取具体的报警执行器
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
 * 1. 未开启严重等级上升时, 直接返回
 * 2. 开启之后, 判断当前的计数 范围
 *
 * <span class="token keyword">@param</span> <span class="token parameter">alarmConfig</span> 报警配置项, 内部所有的参数都不可能为null
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecuteHelper</span> <span class="token function">getExecute</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">AlarmConfig</span> alarmConfig<span class="token punctuation">,</span> 
  <span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 未达到报警的下限 or 超过报警的上限时</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> alarmConfig<span class="token punctuation">.</span><span class="token function">getMinLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> count <span class="token operator">&gt;</span> alarmConfig<span class="token punctuation">.</span><span class="token function">getMaxLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ExecuteHelper</span><span class="token punctuation">(</span><span class="token class-name">SimpleExecuteFactory</span><span class="token punctuation">.</span><span class="token function">getExecute</span><span class="token punctuation">(</span><span class="token class-name">NoneExecute</span><span class="token punctuation">.</span><span class="token constant">NAME</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
        alarmConfig<span class="token punctuation">.</span><span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 未开启报警升级, 直接返回</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>alarmConfig<span class="token punctuation">.</span><span class="token function">isAutoIncEmergency</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ExecuteHelper</span><span class="token punctuation">(</span><span class="token class-name">SimpleExecuteFactory</span><span class="token punctuation">.</span>
          <span class="token function">getExecute</span><span class="token punctuation">(</span>alarmConfig<span class="token punctuation">.</span><span class="token function">getAlarmLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
          alarmConfig<span class="token punctuation">.</span><span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token comment">// 报警等级开启上升之趋势</span>
    <span class="token comment">// 1. 获取设置的默认等级</span>
    <span class="token comment">// 2. 判断当前的报警次数, 选择对应的报警类型</span>
    <span class="token comment">// 3. 选择具体的报警类型</span>
    <span class="token class-name">String</span> defaultLevel <span class="token operator">=</span> alarmConfig<span class="token punctuation">.</span><span class="token function">getAlarmLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> selectLevel <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> selectUser <span class="token operator">=</span> alarmConfig<span class="token punctuation">.</span><span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AlarmThreshold</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> alarmConfig<span class="token punctuation">.</span><span class="token function">getAlarmThreshold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> useNew <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> containDefaultLevel <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">AlarmThreshold</span> alarmThreshold <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>alarmThreshold<span class="token punctuation">.</span><span class="token function">getAlarmLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> defaultLevel<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            containDefaultLevel <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">AlarmThreshold</span> alarmThreshold <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 表示当前的报警等级已经赶上默认的报警等级了, 所以要选择新的报警类型</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>alarmThreshold<span class="token punctuation">.</span><span class="token function">getAlarmLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> defaultLevel<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            useNew <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> alarmThreshold<span class="token punctuation">.</span><span class="token function">getThreshold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        selectLevel <span class="token operator">=</span> alarmThreshold<span class="token punctuation">.</span><span class="token function">getAlarmLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 选择新的报警类型时, 需要更新报警用户</span>
        selectUser <span class="token operator">=</span> alarmThreshold<span class="token punctuation">.</span><span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>


    <span class="token comment">// 阀值列表中不包含默认报警类型，则根据新的来</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>containDefaultLevel <span class="token operator">&amp;&amp;</span> selectLevel <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ExecuteHelper</span><span class="token punctuation">(</span><span class="token class-name">SimpleExecuteFactory</span><span class="token punctuation">.</span><span class="token function">getExecute</span><span class="token punctuation">(</span>selectLevel<span class="token punctuation">)</span><span class="token punctuation">,</span> selectUser<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token comment">// 如果阀值列表中包含了默认报警类型, 且已经超过默认阀值</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>useNew <span class="token operator">&amp;&amp;</span> selectLevel <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ExecuteHelper</span><span class="token punctuation">(</span><span class="token class-name">SimpleExecuteFactory</span><span class="token punctuation">.</span><span class="token function">getExecute</span><span class="token punctuation">(</span>selectLevel<span class="token punctuation">)</span><span class="token punctuation">,</span> selectUser<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ExecuteHelper</span><span class="token punctuation">(</span><span class="token class-name">SimpleExecuteFactory</span><span class="token punctuation">.</span><span class="token function">getExecute</span><span class="token punctuation">(</span>defaultLevel<span class="token punctuation">)</span><span class="token punctuation">,</span> alarmConfig<span class="token punctuation">.</span><span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>具体的实现基本和我们前面分析的一样，但有一个地方需要额外注意</strong></p><ul><li>默认报警阀值，可以直接决定是否需要报警</li><li>因此定义的其他报警方式的阀值，应该在默认的阀值区间内</li><li>当然<code>AlarmThreshold</code>中不包含默认报警方式时，优先选择阀值区间的报警方式</li><li>当然<code>AlarmThreshold</code>中包含默认报警方式时，根据新的规则做处理</li></ul><p>（吐槽：上面这个实现有点绕，后面想办法规避下，搞得不太好理解了）</p><p><strong>另外一个问题就是，上面的实现没有支持可以同时选择多个报警执行器的情况</strong></p><p>因为考虑到后面肯定会对报警规则的定义和解析放开，所以先实现了一个简单的场景，具体的放在后面处理</p><h2 id="iii-小结" tabindex="-1"><a class="header-anchor" href="#iii-小结" aria-hidden="true">#</a> III. 小结</h2><p>到这里报警规则和报警执行器之间的解析关系已确定，剩下的东西就简单了，一个维持报警频率计数，一个报警线程池，再加上一个对外接口的封装而言</p><p>基本上，到这里主要的核心逻辑已经完成，小结一下本系统中的核心设计理念 -- 一切可自定义（当然目前差得有点远）</p><h3 id="_1-报警执行器" tabindex="-1"><a class="header-anchor" href="#_1-报警执行器" aria-hidden="true">#</a> 1. 报警执行器</h3><ul><li>通过SPI机制支持用户自定义扩展</li><li>要求 Executor 拥有唯一标识</li><li>因为报警执行器支持扩展，所以Executor的内部实现，完全可以由用户决定</li></ul><h3 id="_2-报警规则" tabindex="-1"><a class="header-anchor" href="#_2-报警规则" aria-hidden="true">#</a> 2. 报警规则</h3><ul><li>目前报警规则只提供默认的基于频率区间的选择方案</li><li>报警规则通过报警执行器的name与之唯一对应，若对应不上，则选择默认执行器</li><li>报警规则的加载同样基于SPI，支持自定义，因此报警规则可以存在任何地方</li><li>报警规则加载器，提供一个报警规则变动的钩子(load()),若采用自定义的加载类，则确保规则变动时，主动回调这个方法</li><li>默认的报警规则加载类，是基于系统的配置文件实现，内部托管了文件的变动更新事件（使用commons-io实现）</li></ul><h3 id="项目-quickalarm" tabindex="-1"><a class="header-anchor" href="#项目-quickalarm" aria-hidden="true">#</a> 项目: QuickAlarm</h3>`,28),v={href:"https://github.com/liuyueyi/quick-alarm",target:"_blank",rel:"noopener noreferrer"},b={href:"https://liuyueyi.github.io/hexblog/",target:"_blank",rel:"noopener noreferrer"};function h(f,g){const a=i("ExternalLinkIcon");return l(),c("div",null,[r,o(" more "),d,n("p",null,[s("如果对于报警规则，依然不是很清晰的，可以阅读一下"),n("a",k,[s("《报警系统QuickAlarm之报警规则的设定与加载》"),e(a)])]),m,n("ul",null,[n("li",null,[s("项目地址： "),n("a",v,[s("Quick-Alarm"),e(a)])]),n("li",null,[s("博客地址： "),n("a",b,[s("小灰灰Blog"),e(a)])])])])}const _=p(u,[["render",h],["__file","04.报警系统QuickAlarm之报警规则解析.html.vue"]]);export{_ as default};
