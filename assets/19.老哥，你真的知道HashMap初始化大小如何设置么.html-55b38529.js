import{_ as n,V as s,W as a,X as p,Y as e,a1 as t}from"./framework-094145d2.js";const c={},o=e("p",null,"HashMap对于javer而言，可以说是非常非常熟悉的一个容器类了，可以说99.99%的java开发者都用过它，那么你知道怎样创建一个HashMap是最优雅的方式呢？",-1),l=t(`<h2 id="i-hashmap初始化大小的推荐姿势" tabindex="-1"><a class="header-anchor" href="#i-hashmap初始化大小的推荐姿势" aria-hidden="true">#</a> I. HashMap初始化大小的推荐姿势</h2><h3 id="_1-基本知识点" tabindex="-1"><a class="header-anchor" href="#_1-基本知识点" aria-hidden="true">#</a> 1. 基本知识点</h3><p>在指明正确的使用姿势之前，有必要先了解一下HashMap的基础知识；本文重点不会放在源码分析，所以直接给一些必要的知识点</p><p><strong>数据结构</strong></p><p>HashMap的数据存储结构，在jdk1.7中，属于标准的 <code>数组+链表</code>; 在jdk1.8中，为<code>数组 + 链表/红黑树</code></p><p>这里不关注1.8中链表-&gt;红黑树的转换，简单说一下存储逻辑</p><ul><li>根据key计算hash值，针对数组长度取余得到这对kv在数组中的下标</li><li>因为hash碰撞问题，不同的key，对应的数组下标可能一致，所以数组中存的内容按列表/红黑树方式串联在一起</li></ul><p><strong>数组大小</strong></p><p>在HashMap中的，数组的大小为2^n</p><p><strong>扩容机制</strong></p><p>HashMap默认采用了预扩容机制，简单来讲就是虽然实际存的数据量还没有达到数组的长度，就会提前扩容为原来的两倍(如果是单个加入时，扩容两倍；如果是批量加入时，可能为2^n倍)</p><h3 id="_2-一般使用初始化姿势" tabindex="-1"><a class="header-anchor" href="#_2-一般使用初始化姿势" aria-hidden="true">#</a> 2. 一般使用初始化姿势</h3><p>首先来看一下一般的HashMap使用姿势</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>xxx<span class="token punctuation">,</span> xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这种使用方式从语法上来看，并没有什么问题；但实际情况呢?</p><p>假如我们可以确定，我们需要往map中添加的数据量有1024个，使用上面的方式，会出现(<code>16 -&gt; 32 -&gt; 64 -&gt; 128 -&gt; 256 -&gt; 512 -&gt; 1024 -&gt; 2048</code>=8)次的扩容，而扩容就会导致创建新的数组，数据拷贝。而如果我们在初始化的时候，直接指定大小为2048，那么就不会出现扩容了</p><p>为了验证1024个元素，扩容的次数，写一个简单的demo测试一下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMap2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">{</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Field</span> field <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">&quot;table&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> lastLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> nowLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;=</span> <span class="token number">1024</span><span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        nowLen <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>lastLen <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            lastLen <span class="token operator">=</span> nowLen<span class="token punctuation">;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nowLen <span class="token operator">!=</span> lastLen<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;resize from %d -&gt; %d, index: %d&quot;</span><span class="token punctuation">,</span> lastLen<span class="token punctuation">,</span> nowLen<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        lastLen <span class="token operator">=</span> nowLen<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行上面的case，输出结果如下 (请注意，实例化HashMap对象时，并不会创建数组，只有在首次添加数据时才会创建数组)</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>resize from 16 -&gt; 32, index: 12
resize from 32 -&gt; 64, index: 24
resize from 64 -&gt; 128, index: 48
resize from 128 -&gt; 256, index: 96
resize from 256 -&gt; 512, index: 192
resize from 512 -&gt; 1024, index: 384
resize from 1024 -&gt; 2048, index: 768
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果将我们的map长度设置为2048，那么就不会有一次的扩容，上面的日志将不存在</p><p>那么我们应该如何确定Map的初始化大小呢？</p><h3 id="_3-推荐初始化姿势" tabindex="-1"><a class="header-anchor" href="#_3-推荐初始化姿势" aria-hidden="true">#</a> 3. 推荐初始化姿势</h3><p>仔细看一下上面的输出，结合第一节的内容，HashMap的扩容，并不是在达到数组的长度时，实现的扩容，比如在添加第13个元素时(从1开始计数），实现了16 -&gt; 32的扩容</p><p>看过HashMap源码的同学会知道，决定上面扩容阈值的主要来自于<code>loadFactor</code>这个参数，可以在初始化的时候指定，当然不太建议修改</p><p>默认的case下，<code>loadFactor == 0.75</code>，也就是说当map的数据量超过数组长度的3/4（<code>size &gt; len ** 0.75</code>）时，就会扩容</p><p>所以，在初始化HashMap时，特别是当你能预估map中数据量的大小为<code>len</code>时，请初始化时，指定大小 <code>size=2^n * 0.75 &gt; len的最小值</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>举几个实例</p><ul><li>map数量为2时，初始化大小为4</li><li>map数量为12时，初始化大小为16 (因为初始化为16时，扩容的阈值为12，正好没有超过阈值)</li><li>map数量为13时，初始化大小为32</li></ul><p>扩展一下：</p><ul><li>若项目中引入了Guava，那么有一个更好的方法来实现Map大小指定</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 传参为你预期的容器大小</span>
<span class="token class-name">Maps</span><span class="token punctuation">.</span><span class="token function">newHashMapWithExpectedSize</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,33);function i(u,d){return s(),a("div",null,[o,p(" more "),l])}const k=n(c,[["render",i],["__file","19.老哥，你真的知道HashMap初始化大小如何设置么.html.vue"]]);export{k as default};
