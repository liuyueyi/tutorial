import{_ as a,V as r,W as n,Y as e,Z as i,$ as t,X as s,a1 as l,F as c}from"./framework-094145d2.js";const p="/tutorial/imgs/211223/00.jpg",u="/tutorial/imgs/211223/01.jpg",d="/tutorial/imgs/211223/02.jpg",g="/tutorial/imgs/211223/03.jpg",h="/tutorial/imgs/211223/04.jpg",_="/tutorial/imgs/211223/05.jpg",m="/tutorial/imgs/211223/06.jpg",f="/tutorial/imgs/211223/07.jpg",E="/tutorial/imgs/211223/08.jpg",b={},B={href:"https://spring.hhui.top/spring-blog/2021/04/19/210419-SpringBoot%E6%95%B4%E5%90%88Prometheus%E5%AE%9E%E7%8E%B0%E5%BA%94%E7%94%A8%E7%9B%91%E6%8E%A7/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://spring.hhui.top/spring-blog/2021/12/22/211222-SpringBoot%E7%B3%BB%E5%88%97%E4%B9%8BPrometheus%E5%9F%BA%E4%BA%8EAOP%E5%AE%9E%E7%8E%B0%E5%9F%8B%E7%82%B9%E9%87%87%E9%9B%86%E4%B8%8A%E6%8A%A5/",target:"_blank",rel:"noopener noreferrer"},q=e("h2",{id:"i-大盘配置",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#i-大盘配置","aria-hidden":"true"},"#"),i(" I.大盘配置")],-1),A=e("h3",{id:"_1-基本盘选择",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1-基本盘选择","aria-hidden":"true"},"#"),i(" 1. 基本盘选择")],-1),P=e("p",null,"直接到官网查找模板大盘，这里选择SpringBoot搭建的服务器项目，可以输入spring关键字进行检索",-1),x={href:"https://grafana.com/grafana/dashboards?dataSource=prometheus&search=spring",target:"_blank",rel:"noopener noreferrer"},y=l('<p>比如我们这里选择 <code>6756</code> 作为基础模板；然后在Grafana上导入</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>导入之后，对于变量的依赖顺序根据实际情况调整一下，比如我希望第一个变量是application,在选择应用之后，再选择对应的实例ip；</p><p>修改步骤如下：</p><ul><li>依次选择：dashboard settings -&gt; variables</li><li>将application变量前置到instance前</li><li>application: <ul><li>修改query为: <code>label_values(jvm_classes_loaded_classes, application)</code></li></ul></li><li>instance: <ul><li>修改query为: <code>label_values(jvm_classes_loaded_classes{application=&quot;$application&quot;}, instance)</code></li></ul></li><li>新增service变量 <ul><li>query = <code>label_values(micro_service_histogram_seconds_count{application=&quot;$application&quot;, instance=&quot;$instance&quot;}, service)</code></li></ul></li></ul><figure><img src="'+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>注意</strong></p><ul><li>一个变量的取值依赖另一个变量，请注意将被依赖的变量顺序放在前面</li><li>一个变量的取值依赖另一个变量，写法是 <code>metric{tag=&quot;$valName&quot;}</code>， 这个变量名前缀是<code>$</code>，且使用双引号包裹</li><li>metric的选择，可以通过直接查看目标服务器的metric接口查看，比如service变量选择的metric就是自定义上报的<code>micro_service_histogram_seconds_count</code>，而application与instance则选取的是Prometheus-Spring组件上报的spring应用基础信息中的metric</li></ul><h3 id="_2-业务盘配置" tabindex="-1"><a class="header-anchor" href="#_2-业务盘配置" aria-hidden="true">#</a> 2. 业务盘配置</h3><p>常见的业务指标，如QPS + RT + TPS + SLA等，接下来看一下如何进行配置</p><h4 id="_2-1-qps-每秒请求数" tabindex="-1"><a class="header-anchor" href="#_2-1-qps-每秒请求数" aria-hidden="true">#</a> 2.1 qps 每秒请求数</h4><p>主要是借助内置函数<code>rate</code>来计算qps，通过一个计算时间窗口的平均增长速率，来展示接口的qps</p><div class="language-PrmomQL line-numbers-mode" data-ext="PrmomQL"><pre class="language-PrmomQL"><code>(rate(micro_service_histogram_seconds_count{application=&quot;$application&quot;, instance=&quot;$instance&quot;, service=&quot;$service&quot;}[1m]))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>使用rate来计算qps时，会存在一个<code>长尾问题</code>，因为它实际上是根据1min内的所有样本数据，来计算平均增长率，因此当一个时间窗口内，存在瞬时的大数据场景，将不能很好的反应出来</p><p>因此更关注瞬时场景时，可以考虑使用<code>irate</code>来代替，它是通过一个时间范围内的区间向量数据中最后两个来计算增长速率的</p><h4 id="_2-2-rt-接口响应平均耗时" tabindex="-1"><a class="header-anchor" href="#_2-2-rt-接口响应平均耗时" aria-hidden="true">#</a> 2.2 rt 接口响应平均耗时</h4><p>对于耗时的统计，也是比较重要的一个指标，用于判断我们系统的响应情况以及性能表现</p><p>核心配置： <code>rate(sum / count)</code></p><div class="language-PromQL line-numbers-mode" data-ext="PromQL"><pre class="language-PromQL"><code>(rate(micro_service_histogram_seconds_sum{application=&quot;$application&quot;, instance=&quot;$instance&quot;, service=&quot;$service&quot;}[1m]))/(rate(micro_service_histogram_seconds_count{application=&quot;$application&quot;, instance=&quot;$instance&quot;, service=&quot;$service&quot;}[1m]))
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意Y轴单位选择 <code>seconds</code></p><figure><img src="`+g+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_2-3-接口耗时分布统计" tabindex="-1"><a class="header-anchor" href="#_2-3-接口耗时分布统计" aria-hidden="true">#</a> 2.3 接口耗时分布统计</h4><p>基于Histogram样本数据，配合Grafana的热点图来配置耗时统计分布</p><div class="language-PromQL line-numbers-mode" data-ext="PromQL"><pre class="language-PromQL"><code>sum(rate(micro_service_histogram_seconds_bucket{application=&quot;$application&quot;, instance=&quot;$instance&quot;, service=&quot;$service&quot;}[1m])) by (le)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+h+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>几个关键的配置</p><ul><li>配置参数中的Format 选择 Heatmap</li><li>面板的Visualization中，选择 Heatmap</li><li>面板中的Display，mode选择Opacity</li></ul><p>根据颜色的深浅，来判断哪个bucket的请求量较多</p><h4 id="_2-4-sla可用率" tabindex="-1"><a class="header-anchor" href="#_2-4-sla可用率" aria-hidden="true">#</a> 2.4 SLA可用率</h4><p>根据成功响应的计数 / 总计数来表征接口请求成功率</p><div class="language-PromQL line-numbers-mode" data-ext="PromQL"><pre class="language-PromQL"><code>sum(micro_service_histogram_seconds_count{application=&quot;$application&quot;, instance=&quot;$instance&quot;, service=&quot;$service&quot;, err=&quot;false&quot;}) / sum(micro_service_histogram_seconds_count{application=&quot;$application&quot;, instance=&quot;$instance&quot;, service=&quot;$service&quot;}) * 100
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-应用维度统计支持" tabindex="-1"><a class="header-anchor" href="#_3-应用维度统计支持" aria-hidden="true">#</a> 3. 应用维度统计支持</h3><p>前面的几个配置，统计面板都是基于某个应用，某个实例中的某个方法的维度进行展示，但实际情况是我们也很关注整体应用维度的表现情况</p><p>因此我们需要在变量选择中，支持全部</p><ul><li>开启变量的include all， 并设置<code>custorm all value = .*</code></li></ul><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>第二步就是修改PromQL，将完全匹配调整为正则匹配 (将<code>=</code>改成<code>=~</code>)</li></ul><figure><img src="'+E+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_4-小结" tabindex="-1"><a class="header-anchor" href="#_4-小结" aria-hidden="true">#</a> 4.小结</h3><p>本文主要是通过grafana的大盘配置来展示如何使用Prometheus采集的数据，为了更好的使用采集数据，PromQL又是一个无法避免的知识点，下篇博文将带来PromQL的科普</p><h2 id="ii-不能错过的源码和相关知识点" tabindex="-1"><a class="header-anchor" href="#ii-不能错过的源码和相关知识点" aria-hidden="true">#</a> II. 不能错过的源码和相关知识点</h2><h3 id="_0-项目" tabindex="-1"><a class="header-anchor" href="#_0-项目" aria-hidden="true">#</a> 0. 项目</h3>',45),$={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"},L={href:"https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-case/421-prometheus-metric",target:"_blank",rel:"noopener noreferrer"},k=e("p",null,[e("strong",null,"系列博文：")],-1),S={href:"https://spring.hhui.top/spring-blog/2021/12/22/211222-SpringBoot%E7%B3%BB%E5%88%97%E4%B9%8BPrometheus%E5%9F%BA%E4%BA%8EAOP%E5%AE%9E%E7%8E%B0%E5%9F%8B%E7%82%B9%E9%87%87%E9%9B%86%E4%B8%8A%E6%8A%A5/",target:"_blank",rel:"noopener noreferrer"},Q={href:"https://spring.hhui.top/spring-blog/2021/11/19/211119-SpringBoot%E7%B3%BB%E5%88%97%E4%B9%8BPrometheus%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%8B%E7%82%B9%E5%A7%BF%E5%8A%BF%E4%BA%8C/",target:"_blank",rel:"noopener noreferrer"},j={href:"https://spring.hhui.top/spring-blog/2021/11/09/211109-SpringBoot%E4%B9%8BPrometheus%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%8B%E7%82%B9%E4%B8%8A%E6%8A%A5/",target:"_blank",rel:"noopener noreferrer"},z={href:"https://spring.hhui.top/spring-blog/2021/04/19/210419-SpringBoot%E6%95%B4%E5%90%88Prometheus%E5%AE%9E%E7%8E%B0%E5%BA%94%E7%94%A8%E7%9B%91%E6%8E%A7/",target:"_blank",rel:"noopener noreferrer"},F=e("h3",{id:"_1-微信公众号-一灰灰blog",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_1-微信公众号-一灰灰blog","aria-hidden":"true"},"#"),i(" 1. 微信公众号: 一灰灰Blog")],-1),V=e("p",null,"尽信书则不如，以上内容，纯属一家之言，因个人能力有限，难免有疏漏和错误之处，如发现bug或者有更好的建议，欢迎批评指正，不吝感激",-1),N=e("p",null,"下面一灰灰的个人博客，记录所有学习和工作中的博文，欢迎大家前去逛逛",-1),I={href:"https://blog.hhui.top",target:"_blank",rel:"noopener noreferrer"},O={href:"http://spring.hhui.top",target:"_blank",rel:"noopener noreferrer"},G=e("figure",null,[e("img",{src:"https://spring.hhui.top/spring-blog/imgs/info/info.png",alt:"一灰灰blog",tabindex:"0",loading:"lazy"}),e("figcaption",null,"一灰灰blog")],-1);function H(C,T){const o=c("ExternalLinkIcon");return r(),n("div",null,[e("p",null,[i("借助Grafana来实现大盘配置，关于Grafana的启用配置，这里就不详细说明，有兴趣的可以查看前文 * "),e("a",B,[i("【中间件】Prometheus实现应用监控 | 一灰灰Blog"),t(o)])]),e("p",null,[i("接下来主要是针对上一篇 "),e("a",v,[i("【中间件】Prometheus基于AOP实现埋点采集上报"),t(o)]),i(" 上报的Histogram数据，来配置一套相对完整的业务监控大盘")]),s(" more "),q,A,P,e("blockquote",null,[e("p",null,[i("官网："),e("a",x,[i("https://grafana.com/grafana/dashboards?dataSource=prometheus&search=spring"),t(o)])])]),y,e("ul",null,[e("li",null,[i("工程："),e("a",$,[i("https://github.com/liuyueyi/spring-boot-demo"),t(o)])]),e("li",null,[i("源码："),e("a",L,[i("https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-case/421-prometheus-metric"),t(o)])])]),k,e("ul",null,[e("li",null,[e("a",S,[i("【中间件】Prometheus基于AOP实现埋点采集上报"),t(o)])]),e("li",null,[e("a",Q,[i("【中间件】Prometheus自定义埋点姿势二"),t(o)])]),e("li",null,[e("a",j,[i("【中间件】Prometheus自定义埋点上报"),t(o)])]),e("li",null,[e("a",z,[i("【中间件】Prometheus实现应用监控"),t(o)])])]),F,V,N,e("ul",null,[e("li",null,[i("一灰灰Blog个人博客 "),e("a",I,[i("https://blog.hhui.top"),t(o)])]),e("li",null,[i("一灰灰Blog-Spring专题博客 "),e("a",O,[i("http://spring.hhui.top"),t(o)])])]),G])}const D=a(b,[["render",H],["__file","211223-SpringBoot系列之Prometheus大盘配置实战.html.vue"]]);export{D as default};
