import{_ as s,V as a,W as e,X as t,Y as n,a1 as p}from"./framework-094145d2.js";const c={},o=n("p",null,"使用json进行数据交互可以说是非常常见的常见，在java侧，常用的json解析框架也不少，比如gson, fastjson以及spring mvc中默认使用的jackson；本文将主要介绍一下jackson的基本使用姿势，比如常见的",-1),l=n("ul",null,[n("li",null,"普通对象转json字符串"),n("li",null,"json字符串转POJO，转Map/List"),n("li",null,"泛型支持"),n("li",null,"驼峰/下划线互转，自定义映射关系")],-1),i=p(`<h3 id="_1-项目依赖" tabindex="-1"><a class="header-anchor" href="#_1-项目依赖" aria-hidden="true">#</a> 1. 项目依赖</h3><p>使用maven来构建项目，需要使用Jackson进行序列化操作，核心引入下面的包</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.12.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-基本使用姿势" tabindex="-1"><a class="header-anchor" href="#_2-基本使用姿势" aria-hidden="true">#</a> 2. 基本使用姿势</h3><p>在Jackson中，若希望实现序列化/反序列化，都离不开<code>ObjectMapper</code></p><p>比如将对象转Json String</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">String</span> <span class="token function">encode</span><span class="token punctuation">(</span><span class="token class-name">T</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>反序列化</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> clz<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong></p><ul><li>jackson与gson/fastjson的一个显著区别在于它的序列化/反序列化有声明异常，使用时需要声明或者主动catch（这一点感觉不太友好）</li><li>其次，不推荐每次都创建一个ObjectMapper对象，可以考虑复用</li></ul><h3 id="_3-泛型反序列化" tabindex="-1"><a class="header-anchor" href="#_3-泛型反序列化" aria-hidden="true">#</a> 3. 泛型反序列化</h3><p>对于泛型的反序列化，直接使用上面，传入一个class对象，并不能很好的工作，和Gson/FastJson一样，Jackson也支持根据Type来返序列化</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">Type</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> objectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> objectMapper<span class="token punctuation">.</span><span class="token function">getTypeFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">constructType</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重点关注上面的传参，通过<code>objectMapper.getTypeFactory().constructType(type)</code>来创建需要的JavaType对象</p><p>一个demo使用姿势如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">GenericBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&gt;</span></span> gbean2 <span class="token operator">=</span> <span class="token class-name">JacksonUtil</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>core<span class="token punctuation">.</span>type
      <span class="token punctuation">.</span></span>TypeReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GenericBean</span><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>gbean2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-转map-list" tabindex="-1"><a class="header-anchor" href="#_4-转map-list" aria-hidden="true">#</a> 4. 转Map/List</h3><p>转普通的Map/List没有什么特殊的</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Map</span> <span class="token function">toMap</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> objectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JsonProcessingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span> <span class="token function">toList</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> objectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JsonProcessingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-jsonnode" tabindex="-1"><a class="header-anchor" href="#_5-jsonnode" aria-hidden="true">#</a> 5. JsonNode</h3><p>JsonNode为Jackson定义的节点对象，有些类似Gson的<code>JsonObject/JsonArray</code> 和 FastJson的<code>JSONObject/JSONArray</code>，使用它可以更友好的操作json对象（当然更推荐的是直接转JAVA bean）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">JsonNode</span> <span class="token function">toObj</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> objectMapper<span class="token punctuation">.</span><span class="token function">readTree</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JsonProcessingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用demo如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;{\\&quot;userId\\&quot;:12,\\&quot;userName\\&quot;:\\&quot;yh\\&quot;,\\&quot;userMoney\\&quot;:12.3,\\&quot;userSkills\\&quot;:[\\&quot;1\\&quot;,\\&quot;2\\&quot;,\\&quot;3\\&quot;],\\&quot;extra\\&quot;:{\\&quot;a\\&quot;:\\&quot;123\\&quot;,\\&quot;b\\&quot;:345,\\&quot;c\\&quot;:[\\&quot;1\\&quot;,\\&quot;2\\&quot;,\\&quot;3\\&quot;],\\&quot;d\\&quot;:35.1},\\&quot;hello\\&quot;:\\&quot;你好\\&quot;}&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">JsonNode</span> bean <span class="token operator">=</span> <span class="token class-name">JacksonUtil</span><span class="token punctuation">.</span><span class="token function">toObj</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> userId <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;userId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-驼峰与下划线" tabindex="-1"><a class="header-anchor" href="#_6-驼峰与下划线" aria-hidden="true">#</a> 6. 驼峰与下划线</h3><p>常见的一个case，json字符串key为下划线，Java bean为驼峰命名，针对这种场景，jackson可以很方便的支持</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 驼峰转下换线
 *
 * <span class="token keyword">@param</span> <span class="token parameter">obj</span>
 * <span class="token keyword">@return</span>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toUnderStr</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 驼峰转下划线</span>
    objectMapper<span class="token punctuation">.</span><span class="token function">setPropertyNamingStrategy</span><span class="token punctuation">(</span><span class="token class-name">PropertyNamingStrategies</span><span class="token punctuation">.</span><span class="token constant">SNAKE_CASE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> objectMapper<span class="token punctuation">.</span><span class="token function">writerWithDefaultPrettyPrinter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JsonProcessingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 下划线格式json串，转驼峰格式的Java bean
 */</span> 
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">fromUnderStr</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 驼峰转下划线</span>
    objectMapper<span class="token punctuation">.</span><span class="token function">setPropertyNamingStrategy</span><span class="token punctuation">(</span><span class="token class-name">PropertyNamingStrategies</span><span class="token punctuation">.</span><span class="token constant">SNAKE_CASE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> objectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> clz<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JsonProcessingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的代码也可以看出，驼峰与下划线的互转支持，主要是通过设置<code>PropertyNamingStrategies</code>来实现的，在jackson中，支持下面几种配置</p><ul><li><code>LOWER_CAMEL_CASE</code></li><li><code>UPPER_CAMEL_CASE</code></li><li><code>SNAKE_CASE</code></li><li><code>LOWER_CASE</code></li><li><code>KEBAB_CASE</code></li><li><code>LOWER_DOT_CASE</code></li></ul><p>使用上面这种方式适用于全局的下划线与驼峰的转换方式，如果我只希望针对单独某个类进行这样的设置呢？</p><p>可以借助注解<code>@JsonNaming</code>来实现</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@JsonNaming</span><span class="token punctuation">(</span><span class="token class-name">PropertyNamingStrategies<span class="token punctuation">.</span>SnakeCaseStrategy</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleBean</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">9111747337710917591L</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Integer</span> userId<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">double</span> userMoney<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这个case中，如果我们将SimpleBean对象序列化为json串，即便调用的是前面最基础的使用姿势 <code>new ObjectMapper().writeValueAsString(simpleBean)</code>，输出的也是下划线格式的json串；同理反序列化时，也是将下划线转为驼峰</p><h3 id="_7-字段别名" tabindex="-1"><a class="header-anchor" href="#_7-字段别名" aria-hidden="true">#</a> 7. 字段别名</h3><p>上面介绍的是驼峰与下划线命名方式，当然也会有一些其他特殊的场景，针对某个字段进行别名设置，可以通过注解<code>@JsonProperties</code>来标注</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@JsonProperty</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这个表示序列化为json字符串时，userName对应的key为<code>user</code></p><h3 id="_8-字段忽略" tabindex="-1"><a class="header-anchor" href="#_8-字段忽略" aria-hidden="true">#</a> 8. 字段忽略</h3><p>在序列化时，难免会遇到某些字段不进行序列化/反序列化的场景，这里有两种常用的方式</p><h4 id="_8-1-jsonignore注解" tabindex="-1"><a class="header-anchor" href="#_8-1-jsonignore注解" aria-hidden="true">#</a> 8.1 @JsonIgnore注解</h4><p>直接在希望忽略的字段上添加注解<code>@JsonIgnore</code>即可，如</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleBean</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">9111747337710917591L</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@JsonIgnore</span>
    <span class="token keyword">private</span> <span class="token class-name">SimpleBean</span> self<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_8-2-transient关键字" tabindex="-1"><a class="header-anchor" href="#_8-2-transient关键字" aria-hidden="true">#</a> 8.2 transient关键字</h4><p>除了使用上面的注解之外，也可以使用jdk原生提供的关键字<code>transient</code>来声明需要忽略的字段</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">SimpleBean</span> self<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>重点注意：</strong></p><ul><li>在jackson中，默认的场景下，即便字段上修饰有<code>transient</code>关键字，也不会忽略还需要如下处理</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 忽略 transient 关键字的配置</span>
<span class="token comment">// case1</span>
objectMapper<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">MapperFeature</span><span class="token punctuation">.</span><span class="token constant">PROPAGATE_TRANSIENT_MARKER</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// case2</span>
objectMapper<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>objectMapper<span class="token punctuation">.</span><span class="token function">getSerializationConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">getDefaultVisibilityChecker</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">withFieldVisibility</span><span class="token punctuation">(</span><span class="token class-name">JsonAutoDetect<span class="token punctuation">.</span>Visibility</span><span class="token punctuation">.</span><span class="token constant">ANY</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">withGetterVisibility</span><span class="token punctuation">(</span><span class="token class-name">JsonAutoDetect<span class="token punctuation">.</span>Visibility</span><span class="token punctuation">.</span><span class="token constant">NONE</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">withIsGetterVisibility</span><span class="token punctuation">(</span><span class="token class-name">JsonAutoDetect<span class="token punctuation">.</span>Visibility</span><span class="token punctuation">.</span><span class="token constant">NONE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面两种方式，都可以实现忽略<code>transient</code>关键字修饰的对象序列化</p><h3 id="_9-java-bean约定" tabindex="-1"><a class="header-anchor" href="#_9-java-bean约定" aria-hidden="true">#</a> 9. Java Bean约定</h3><h4 id="_9-1-get-set方法必须有" tabindex="-1"><a class="header-anchor" href="#_9-1-get-set方法必须有" aria-hidden="true">#</a> 9.1 get/set方法必须有</h4><p>Java Bean的get/set方法必须存在，否则额序列化与反序列化只会处理public修饰的成员</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleBean</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token class-name">Long</span> userId<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> desc <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token class-name">SimpleBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      name <span class="token operator">=</span> <span class="token string">&quot;yhh&quot;</span><span class="token punctuation">;</span>
      userId <span class="token operator">=</span> <span class="token number">10L</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>序列化后输出为 <code>{&quot;desc&quot;:&quot;hello world&quot;}</code>； 反序列化也不会更新 <code>name</code>, <code>userId</code>；</p><p>特别的，当Java Bean对象，所有的成员都是private，又没有get方法时，在序列化时，会抛异常，提示信息如下</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>No serializer found for class com.git.hui.spring.json.bean.SimpleBean and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_9-2-无参构造函数必须有" tabindex="-1"><a class="header-anchor" href="#_9-2-无参构造函数必须有" aria-hidden="true">#</a> 9.2 无参构造函数必须有</h4><p>如果java bean没有默认无参构造方法，那么在反序列化时，会抛出异常，无法实例化</p><p>一个如下的异常提示信息</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Cannot construct instance of \`com.git.hui.spring.json.bean.SimpleBean\` (although at least one Creator exists): cannot deserialize from Object value (no delegate- or property-based Creator)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_10-json串存在bean未定义字段忽略设置" tabindex="-1"><a class="header-anchor" href="#_10-json串存在bean未定义字段忽略设置" aria-hidden="true">#</a> 10. Json串存在Bean未定义字段忽略设置</h3><p>默认的使用姿势下，若json串中存在一个bean未定义的kv，会抛异常，一个示例如下</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Unrecognized field &quot;xxx&quot; (class com.git.hui.spring.json.bean.GenericBean), not marked as ignorable
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果希望忽略这种场景，那么就需要禁用<code>FAIL_ON_UNKNOWN_PROPERTIES</code>配置</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token class-name">DeserializationFeature</span><span class="token punctuation">.</span><span class="token constant">FAIL_ON_UNKNOWN_PROPERTIES</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token class-name">Xxx</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>扩展知识点</strong></p><ul><li>对于Spring MVC而言，默认使用的是Jackson序列化框架，如果我们定义接收参数为json串，那么当前端传参多了一个未定义的字段，会直接抛异常么？</li></ul><h3 id="_11-序列化输出时忽略null" tabindex="-1"><a class="header-anchor" href="#_11-序列化输出时忽略null" aria-hidden="true">#</a> 11. 序列化输出时忽略null</h3><p>默认场景下，将一个bean对象序列化为json串，即便成员变量为null，也会输出，如下</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;userId&quot;</span> <span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
  <span class="token property">&quot;userName&quot;</span> <span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
  <span class="token property">&quot;userMoney&quot;</span> <span class="token operator">:</span> <span class="token number">0.0</span><span class="token punctuation">,</span>
  <span class="token property">&quot;userSkills&quot;</span> <span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
  <span class="token property">&quot;extra&quot;</span> <span class="token operator">:</span> <span class="token null keyword">null</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种case某些场景下是合适的，比如生成接口文档示例时，更关心的是参数说明，即便为null，也是希望有这个；但是另外一些场景下则希望忽略，毕竟可以节省对象大小</p><p>需要忽略null字段时，可以如下设置</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSerializationInclusion</span><span class="token punctuation">(</span><span class="token class-name">JsonInclude<span class="token punctuation">.</span>Include</span><span class="token punctuation">.</span><span class="token constant">NON_NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">writerWithDefaultPrettyPrinter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>关键点就是配置 <code>setSerializationInclusion(JsonInclude.Include.NON_NULL)</code></p><h3 id="_12-key为null场景兼容" tabindex="-1"><a class="header-anchor" href="#_12-key为null场景兼容" aria-hidden="true">#</a> 12. key为null场景兼容</h3><p>对于普通的Java bean而言，不存在key为null的场景，但是如果是将一个Map对象，输出为json串时，那么就可能出现这种场景了，如</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这个执行，直接抛异常</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果希望兼容这个场景，则可以如下处理</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
objectMapper<span class="token punctuation">.</span><span class="token function">getSerializerProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNullKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JsonSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">Object</span> value<span class="token punctuation">,</span> <span class="token class-name">JsonGenerator</span> gen<span class="token punctuation">,</span> <span class="token class-name">SerializerProvider</span> serializers<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        gen<span class="token punctuation">.</span><span class="token function">writeFieldName</span><span class="token punctuation">(</span><span class="token string">&quot;null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这个做法，就是将key为null的，以<code>null</code>字符串来替代</p><p><strong>说明</strong></p><ul><li>既然key可能为null，当然也为其他类型，但是在序列化输出时，会转String</li></ul><p>如下面这个case</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Map</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出的字符串为</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;[]&quot;</span><span class="token operator">:</span><span class="token number">123</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_13-其他" tabindex="-1"><a class="header-anchor" href="#_13-其他" aria-hidden="true">#</a> 13 其他</h3><p>以上的知识点，基本上可以覆盖我们日常在使用Jackson进行序列化和反序列化中95%的场景，至于其他的比如自定义Name策略，反序列化的默认值类型，类型转换，json注释的支持与否等相对少见的姿势，看后续是否有空补上</p>`,91);function u(r,k){return a(),e("div",null,[o,l,t(" more "),i])}const v=s(c,[["render",u],["__file","01.Jackson-实用姿势小结.html.vue"]]);export{v as default};
