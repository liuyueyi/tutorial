import{_ as p,V as o,W as c,X as l,Y as a,Z as n,$ as e,a1 as t,F as i}from"./framework-094145d2.js";const u="/tutorial/imgs/180926/00.jpg",r={},d=a("p",null,"现在的完整的后端项目，基本上离不开DB、缓存，接下来开始进入DB篇的系列教程，首先确定我们的目标，一个是知道怎么配置，怎么用；接着就是更高级一点的多个数据源的配置，使用不同的方式来实现CURD（如Mybatis, JPDA, MyCat, Hibernate, Jooq等），数据库不得不谈到的事物管理，锁机制，以及高级一点的分库分表等；然后再进一步则是优秀的框架的学习了，大名鼎鼎的MyBaits的设计思路，Jooq的使用姿势也特别有意思",-1),k=a("p",null,"要学习的东西不少，要写的内容也挺多，先一步步来，本篇主要目的是先搭建一个可以跑DB的基础Demo，为后续的博文开开胃",-1),v=t(`<h2 id="i-基本配置" tabindex="-1"><a class="header-anchor" href="#i-基本配置" aria-hidden="true">#</a> I. 基本配置</h2><p>首先确认我们的DB采用的是MySql数据库，我们这里通过JdbcTemplate来对DB内容进行操作演示；在开始之前，请先准备好Mysql的安装以及相关配置，下面我们默认已经备好</p><h3 id="_1-依赖配置" tabindex="-1"><a class="header-anchor" href="#_1-依赖配置" aria-hidden="true">#</a> 1. 依赖配置</h3><p>对于SpringBoot而言，要想操作DB，需要引入如下的依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-配置" tabindex="-1"><a class="header-anchor" href="#_2-配置" aria-hidden="true">#</a> 2. 配置</h3><p>测试的MySql的配置如下</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://127.0.0.1:3306/story?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false</span>
<span class="token key attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.jdbc.Driver</span>
<span class="token key attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
<span class="token key attr-name">spring.datasource.password</span><span class="token punctuation">=</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试的库名为story, 表名为Subcribe，表结构如下</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>Subscribe<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>email<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>nick<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>status<span class="token punctuation">\`</span></span> <span class="token keyword">tinyint</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;0&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;0 订阅未激活， 1 订阅已激活 ， 2 取消订阅&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>created<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;0&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;创建时间&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>updated<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;0&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;更新时间&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>extra<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;扩展信息&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>channel<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;0&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;渠道, 0古诗，1博客&#39;</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">\`</span>email<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>email<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">5</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到此配置基本完成，具体到我们的项目中，也就是pom中添加两个依赖，设置下properties文件中的参数，然后就可以愉快的使用了</p><h2 id="ii-使用实例" tabindex="-1"><a class="header-anchor" href="#ii-使用实例" aria-hidden="true">#</a> II. 使用实例</h2><p>前面配置完成，接着就来测试，看下是否就真的可以用了</p><h3 id="_1-测试代码" tabindex="-1"><a class="header-anchor" href="#_1-测试代码" aria-hidden="true">#</a> 1. 测试代码</h3><p>直接用比较简单的JdbcTemplate来实现db的操作，至于如何获取这个实例呢？直接注入即可（后面说原因）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">Application</span><span class="token punctuation">(</span><span class="token class-name">JdbcTemplate</span> jdbcTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span><span class="token string">&quot;select * from Subscribe limit 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;result: {}&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为我们的项目结构比较简单，没有引入web的依赖，所以就把JdbcTemplate的测试放在了Application的构造方法中；执行完毕之后，项目就结束；而这个JdbcTemplate实例，则是由Spring框架来初始化，并注入的</p><h3 id="_2-结果截图" tabindex="-1"><a class="header-anchor" href="#_2-结果截图" aria-hidden="true">#</a> 2. 结果截图</h3><p>整个测试DB使用的项目就完成了，相比较之前的Spring时代，少了n多的xml配置和pom引入，简单了不少，下面是执行的截图</p><figure><img src="`+u+'" alt="测试结果" tabindex="0" loading="lazy"><figcaption>测试结果</figcaption></figure><h3 id="_3-默认配置分析" tabindex="-1"><a class="header-anchor" href="#_3-默认配置分析" aria-hidden="true">#</a> 3. 默认配置分析</h3>',21),m={href:"http://spring.hhui.top/spring-blog/2018/09/25/180925-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE/",target:"_blank",rel:"noopener noreferrer"},b=t(`<p>我们来看一下db相关的默认属性为</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># DATASOURCE (DataSourceAutoConfiguration &amp; DataSourceProperties)</span>
<span class="token key attr-name">spring.datasource.continue-on-error</span><span class="token punctuation">=</span><span class="token value attr-value">false # Whether to stop if an error occurs while initializing the database.</span>
<span class="token key attr-name">spring.datasource.data</span><span class="token punctuation">=</span> <span class="token value attr-value"># Data (DML) script resource references.</span>
<span class="token key attr-name">spring.datasource.data-username</span><span class="token punctuation">=</span> <span class="token value attr-value"># Username of the database to execute DML scripts (if different).</span>
<span class="token key attr-name">spring.datasource.data-password</span><span class="token punctuation">=</span> <span class="token value attr-value"># Password of the database to execute DML scripts (if different).</span>
<span class="token key attr-name">spring.datasource.dbcp2.*</span><span class="token punctuation">=</span> <span class="token value attr-value"># Commons DBCP2 specific settings</span>
<span class="token key attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span> <span class="token value attr-value"># Fully qualified name of the JDBC driver. Auto-detected based on the URL by default.</span>
<span class="token key attr-name">spring.datasource.generate-unique-name</span><span class="token punctuation">=</span><span class="token value attr-value">false # Whether to generate a random datasource name.</span>
<span class="token key attr-name">spring.datasource.hikari.*</span><span class="token punctuation">=</span> <span class="token value attr-value"># Hikari specific settings</span>
<span class="token key attr-name">spring.datasource.initialization-mode</span><span class="token punctuation">=</span><span class="token value attr-value">embedded # Initialize the datasource with available DDL and DML scripts.</span>
<span class="token key attr-name">spring.datasource.jmx-enabled</span><span class="token punctuation">=</span><span class="token value attr-value">false # Whether to enable JMX support (if provided by the underlying pool).</span>
<span class="token key attr-name">spring.datasource.jndi-name</span><span class="token punctuation">=</span> <span class="token value attr-value"># JNDI location of the datasource. Class, url, username &amp; password are ignored when set.</span>
<span class="token key attr-name">spring.datasource.name</span><span class="token punctuation">=</span> <span class="token value attr-value"># Name of the datasource. Default to &quot;testdb&quot; when using an embedded database.</span>
<span class="token key attr-name">spring.datasource.password</span><span class="token punctuation">=</span> <span class="token value attr-value"># Login password of the database.</span>
<span class="token key attr-name">spring.datasource.platform</span><span class="token punctuation">=</span><span class="token value attr-value">all # Platform to use in the DDL or DML scripts (such as schema-\${platform}.sql or data-\${platform}.sql).</span>
<span class="token key attr-name">spring.datasource.schema</span><span class="token punctuation">=</span> <span class="token value attr-value"># Schema (DDL) script resource references.</span>
<span class="token key attr-name">spring.datasource.schema-username</span><span class="token punctuation">=</span> <span class="token value attr-value"># Username of the database to execute DDL scripts (if different).</span>
<span class="token key attr-name">spring.datasource.schema-password</span><span class="token punctuation">=</span> <span class="token value attr-value"># Password of the database to execute DDL scripts (if different).</span>
<span class="token key attr-name">spring.datasource.separator</span><span class="token punctuation">=</span><span class="token value attr-value">; # Statement separator in SQL initialization scripts.</span>
<span class="token key attr-name">spring.datasource.sql-script-encoding</span><span class="token punctuation">=</span> <span class="token value attr-value"># SQL scripts encoding.</span>
<span class="token key attr-name">spring.datasource.tomcat.*</span><span class="token punctuation">=</span> <span class="token value attr-value"># Tomcat datasource specific settings</span>
<span class="token key attr-name">spring.datasource.type</span><span class="token punctuation">=</span> <span class="token value attr-value"># Fully qualified name of the connection pool implementation to use. By default, it is auto-detected from the classpath.</span>
<span class="token key attr-name">spring.datasource.url</span><span class="token punctuation">=</span> <span class="token value attr-value"># JDBC URL of the database.</span>
<span class="token key attr-name">spring.datasource.username</span><span class="token punctuation">=</span> <span class="token value attr-value"># Login username of the database.</span>
<span class="token key attr-name">spring.datasource.xa.data-source-class-name</span><span class="token punctuation">=</span> <span class="token value attr-value"># XA datasource fully qualified name.</span>
<span class="token key attr-name">spring.datasource.xa.properties</span><span class="token punctuation">=</span> <span class="token value attr-value"># Properties to pass to the XA data source.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的默认配置中东西挺多的，首先需要过滤出我们必要的几个参数</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span> <span class="token value attr-value"># Fully qualified name of the JDBC driver. Auto-detected based on the URL by default.</span>
<span class="token key attr-name">spring.datasource.url</span><span class="token punctuation">=</span> <span class="token value attr-value"># JDBC URL of the database.</span>
<span class="token key attr-name">spring.datasource.username</span><span class="token punctuation">=</span> <span class="token value attr-value"># Login username of the database.</span>
<span class="token key attr-name">spring.datasource.password</span><span class="token punctuation">=</span> <span class="token value attr-value"># Login password of the database.</span>
<span class="token key attr-name">spring.datasource.name</span><span class="token punctuation">=</span> <span class="token value attr-value"># Name of the datasource. Default to &quot;testdb&quot; when using an embedded database.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面可以看出，并没有给默认值，所以我们想要使用MySql，就必须填上必要的参数了（url, usernmae必须的），即我们只设置这两个参数，项目就可以愉快的玩耍了 （工程源码中只保留了两个基本参数）</p><h2 id="iii-小结" tabindex="-1"><a class="header-anchor" href="#iii-小结" aria-hidden="true">#</a> III. 小结</h2><p>本篇内容相对简单，主要介绍了如何使用SpringBoot搭建一个简单的可读写DB的示例DEMO，总得来说，配置很简单了</p><ul><li>pom依赖引入：<code>spring-boot-starter-jdbc</code>, <code>mysql-connector-java</code></li><li>数据库配置指定：<code>spring.datasource.url</code>, <code>spring.datasource.username</code> 这两个参数为必选</li><li>注入JdbcTemplate开始使用</li></ul><p>第一步是搭建起来了，接下来自然而然就有几个问题了</p><ul><li>如果项目需要连接多个不同的数据库怎么办?</li><li>JdbcTemplate操作DB的方式不太简单，用更高级的方式可以怎么玩？</li><li>听说druid号称是java中最好的数据库连接池，那这个到底是啥，要怎么用？有没有其他类似的东西呢？</li><li>关于db的使用相关姿势问题....</li></ul><p>基础环境搭建好，接下来开始上菜</p><h2 id="iv-其他" tabindex="-1"><a class="header-anchor" href="#iv-其他" aria-hidden="true">#</a> IV. 其他</h2><h3 id="_0-项目" tabindex="-1"><a class="header-anchor" href="#_0-项目" aria-hidden="true">#</a> 0. 项目</h3>`,13),g={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"};function h(y,f){const s=i("ExternalLinkIcon");return o(),c("div",null,[d,k,l(" more "),v,a("p",null,[n("前面讲配置的博文中，也说到了SpringBoot也一套默认的配置，具体博文可以查看: "),a("a",m,[n("180925-SpringBoot基础篇配置信息之默认配置"),e(s)])]),b,a("ul",null,[a("li",null,[n("工程："),a("a",g,[n("spring-boot-demo"),e(s)])])])])}const D=p(r,[["render",h],["__file","01.180926-SpringBoot高级篇DB之基本使用.html.vue"]]);export{D as default};
