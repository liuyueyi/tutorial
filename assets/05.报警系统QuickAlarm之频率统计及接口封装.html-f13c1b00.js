import{_ as e,V as p,W as c,X as o,Y as n,Z as s,$ as t,a1 as l,F as i}from"./framework-094145d2.js";const u={},k=n("p",null,"前面将报警规则的制定加载解析，以及报警执行器的定义加载和扩展进行了讲解，基本上核心的内容已经完结，接下来剩下内容就比较简单了",-1),r=n("ul",null,[n("li",null,"报警频率的统计"),n("li",null,"报警线程池"),n("li",null,"对外封装统一可用的解耦")],-1),d=l(`<h2 id="i-报警频率统计" tabindex="-1"><a class="header-anchor" href="#i-报警频率统计" aria-hidden="true">#</a> I. 报警频率统计</h2><h3 id="_1-设计" tabindex="-1"><a class="header-anchor" href="#_1-设计" aria-hidden="true">#</a> 1. 设计</h3><p>前面在解析报警规则时，就有一个count参数，用来确定具体选择什么报警执行器的核心参数，我们维护的方法也比较简单：</p><ul><li>针对报警类型，进行计数统计，没调用一次，则计数+1</li><li>每分钟清零一次</li></ul><h3 id="_2-实现" tabindex="-1"><a class="header-anchor" href="#_2-实现" aria-hidden="true">#</a> 2. 实现</h3><p>因为每种报警类型，都维护一个独立的计数器</p><p><strong>定义一个map来存储对应关系</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">&gt;</span></span> alarmCountMap<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>每分钟执行一次清零</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 每分钟清零一把报警计数</span>
<span class="token class-name">ScheduledExecutorService</span> scheduleExecutorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
scheduleExecutorService<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> alarmCountMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意上面的实现，就有什么问题？</p><p>有没有可能因为map中的数据过大（或者gc什么原因），导致每次清零花不少的时间，而导致计数不准呢？ （先不给出回答）</p><p><strong>计数加1操作</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 线程安全的获取报警总数 并自动加1
 *
 * <span class="token keyword">@param</span> <span class="token parameter">key</span>
 * <span class="token keyword">@return</span>
 */</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getAlarmCount</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>alarmCountMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>alarmCountMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                alarmCountMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> alarmCountMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-报警线程池" tabindex="-1"><a class="header-anchor" href="#ii-报警线程池" aria-hidden="true">#</a> II. 报警线程池</h2><p>目前也只是提供了一个非常简单的线程池实现，后面的考虑是抽象一个基于forkjoin的并发框架来处理（主要是最近接触到一个大神基于forkjoin写的并发器组件挺厉害的，所以等我研究透了，山寨一个）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 报警线程池</span>
<span class="token keyword">private</span> <span class="token class-name">ExecutorService</span> alarmExecutorService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span>
        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
        <span class="token keyword">new</span> <span class="token class-name">DefaultThreadFactory</span><span class="token punctuation">(</span><span class="token string">&quot;sms-sender&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>CallerRunsPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>任务提交执行</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">doSend</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ExecuteHelper</span> executeHelper<span class="token punctuation">,</span> 
  <span class="token keyword">final</span> <span class="token class-name">AlarmContent</span> alarmContent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    alarmExecutorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span>
      executeHelper<span class="token punctuation">.</span><span class="token function">getIExecute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendMsg</span><span class="token punctuation">(</span>
        executeHelper<span class="token punctuation">.</span><span class="token function">getUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
        alarmContent<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
        alarmContent<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iii-接口封装" tabindex="-1"><a class="header-anchor" href="#iii-接口封装" aria-hidden="true">#</a> III. 接口封装</h2><p>这个就没什么好说的了</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> content<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AlarmContent</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> title<span class="token punctuation">,</span> <span class="token class-name">String</span> content<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AlarmContent</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> title<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 1. 获取报警的配置项
 * 2. 获取当前报警的次数
 * 3. 选择适当的报警类型
 * 4. 执行报警
 * 5. 报警次数+1
 *
 * <span class="token keyword">@param</span> <span class="token parameter">alarmContent</span>
 */</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token class-name">AlarmContent</span> alarmContent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// get alarm config</span>
        <span class="token class-name">AlarmConfig</span> alarmConfig <span class="token operator">=</span> confLoader<span class="token punctuation">.</span><span class="token function">getAlarmConfig</span><span class="token punctuation">(</span>alarmContent<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// get alarm count</span>
        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token function">getAlarmCount</span><span class="token punctuation">(</span>alarmContent<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        alarmContent<span class="token punctuation">.</span><span class="token function">setCount</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token class-name">ExecuteHelper</span> executeHelper<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>confLoader<span class="token punctuation">.</span><span class="token function">alarmEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// get alarm execute</span>
            executeHelper <span class="token operator">=</span> <span class="token class-name">AlarmExecuteSelector</span><span class="token punctuation">.</span><span class="token function">getExecute</span><span class="token punctuation">(</span>alarmConfig<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment">// 报警关闭, 则走空报警流程, 将报警信息写入日志文件</span>
            executeHelper <span class="token operator">=</span> <span class="token class-name">AlarmExecuteSelector</span><span class="token punctuation">.</span><span class="token function">getDefaultExecute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>


        <span class="token comment">// do send msg</span>
        <span class="token function">doSend</span><span class="token punctuation">(</span>executeHelper<span class="token punctuation">,</span> alarmContent<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;AlarmWrapper.sendMsg error! content:{}, e:{}&quot;</span><span class="token punctuation">,</span> alarmContent<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接口封装完毕之后如何使用呢？</p><p>我们使用单例模式封装了唯一对外使用的类AlarmWrapper，使用起来也比较简单，下面就是一个测试case</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> key <span class="token operator">=</span> <span class="token string">&quot;NPE&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> title <span class="token operator">=</span> <span class="token string">&quot;NPE异常&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> msg <span class="token operator">=</span> <span class="token string">&quot;出现NPE异常了!!!&quot;</span><span class="token punctuation">;</span>

    <span class="token class-name">AlarmWrapper</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendMsg</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> title<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 微信报警</span>

    <span class="token comment">// 不存在异常配置类型, 采用默认报警, 次数较小, 则直接部署出</span>
    <span class="token class-name">AlarmWrapper</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token string">&quot;zzz&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;不存在xxx异常配置&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;报警嗒嗒嗒嗒&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用起来比较简单，就那么一行即可，从这个使用也可以知道，整个初始化，就是在这个对象首次被访问时进行</p><p>构造函数内容如下:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">AlarmWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 记录每种异常的报警数</span>
  alarmCountMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 加载报警配置信息</span>
  confLoader <span class="token operator">=</span> <span class="token class-name">ConfLoaderFactory</span><span class="token punctuation">.</span><span class="token function">loader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 初始化线程池</span>
  <span class="token function">initExecutorService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所有如果你希望在自己的应用使用之前就加载好所有的配置，不妨提前执行一下 <code>AlarmWrapper.getInstance()</code></p><h2 id="iv-小结" tabindex="-1"><a class="header-anchor" href="#iv-小结" aria-hidden="true">#</a> IV. 小结</h2><p>基于此，整个系统设计基本上完成，当然代码层面也ok了，剩下的就是使用手册了</p><p>再看一下我们的整个逻辑，基本上就是下面这个流程了</p><figure><img src="https://s17.mogucdn.com/mlcdn/c45406/180209_3f276k99cb3k1kec5g184f6c4hb7f_2030x996.jpg" alt="IMAGE" tabindex="0" loading="lazy"><figcaption>IMAGE</figcaption></figure><ol><li>提交报警</li></ol><ul><li>封装报警内容（报警类型，报警主题，报警内容）</li><li>维护报警计数（每分钟计数清零，每个报警类型对应一个报警计数）</li></ul><ol start="2"><li>选择报警</li></ol><ul><li>根据报警类型选择报警规则</li><li>根据报警规则，和当前报警频率选择报警执行器 <ul><li>若不开启区间映射，则返回默认执行器</li><li>否则遍历所有执行器的报警频率区间，选择匹配的报警规则</li></ul></li></ul><ol start="3"><li>执行报警</li></ol><ul><li>封装报警任务，提交线程池</li><li>报警执行器内部实现具体报警逻辑</li></ul><h3 id="项目-quickalarm" tabindex="-1"><a class="header-anchor" href="#项目-quickalarm" aria-hidden="true">#</a> 项目: QuickAlarm</h3>`,40),m={href:"https://github.com/liuyueyi/quick-alarm",target:"_blank",rel:"noopener noreferrer"},v={href:"https://liuyueyi.github.io/hexblog/",target:"_blank",rel:"noopener noreferrer"};function b(g,f){const a=i("ExternalLinkIcon");return p(),c("div",null,[k,r,o(" more "),d,n("ul",null,[n("li",null,[s("项目地址： "),n("a",m,[s("Quick-Alarm"),t(a)])]),n("li",null,[s("博客地址： "),n("a",v,[s("小灰灰Blog"),t(a)])])])])}const y=e(u,[["render",b],["__file","05.报警系统QuickAlarm之频率统计及接口封装.html.vue"]]);export{y as default};
