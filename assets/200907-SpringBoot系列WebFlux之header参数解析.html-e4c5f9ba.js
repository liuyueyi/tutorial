import{_ as t,V as p,W as o,X as i,Y as n,Z as s,$ as e,a1 as c,F as l}from"./framework-094145d2.js";const r={},u=n("p",null,"上一篇weblfux主要介绍了path参数的解析与映射关系，在我们进入url参数/post表单之前，先看一下另外的一种参数--请求头中的参数如何处理",-1),d=c(`<h2 id="i-项目环境" tabindex="-1"><a class="header-anchor" href="#i-项目环境" aria-hidden="true">#</a> I. 项目环境</h2><p>本项目借助<code>SpringBoot 2.2.1.RELEASE</code> + <code>maven 3.5.3</code> + <code>IDEA</code>进行开发</p><h3 id="_1-依赖" tabindex="-1"><a class="header-anchor" href="#_1-依赖" aria-hidden="true">#</a> 1. 依赖</h3><p>使用WebFlux，最主要的引入依赖如下（省略掉了SpringBoot的相关依赖，如对于如何创建SpringBoot项目不太清楚的小伙伴，可以关注一下我之前的博文）</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-webflux<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-请求头参数解析" tabindex="-1"><a class="header-anchor" href="#ii-请求头参数解析" aria-hidden="true">#</a> II. 请求头参数解析</h2><p>在实际的业务开发中，有几个请求头出现的频率特别高，如常用于反爬的<code>User-Agent</code>，鉴定强求来源的<code>referer</code>，跨域相关的<code>Access-Control-Allow-</code>，cookie、session自定义的请求头等</p><h3 id="_1-请求头限制" tabindex="-1"><a class="header-anchor" href="#_1-请求头限制" aria-hidden="true">#</a> 1. 请求头限制</h3><p>在<code>RequestMapping</code>或<code>GetMapping</code>中指定请求头参数时，表示只有请求中包含这个请求头才会匹配过去</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 只有请求头包含 myheader 且值为 myvalue的才可以访问到
 *
 * - 正常访问: curl &#39;http://127.0.0.1:8080/header/filter/yihhui&#39; -H &#39;myheader: myvalue&#39;
 * - 异常访问: curl &#39;http://127.0.0.1:8080/header/filter/yihhui&#39; -H &#39;myheader: myvalue2&#39;  因为请求头不匹配，404
 *
 * <span class="token keyword">@param</span> <span class="token parameter">name</span>
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;/filter/{name}&quot;</span><span class="token punctuation">,</span> headers <span class="token operator">=</span> <span class="token string">&quot;myheader=myvalue&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">headerFilter</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;request filter: &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实例如下:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>➜  ~ <span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080/header/filter/yihhui&#39;</span> <span class="token parameter variable">-H</span> <span class="token string">&#39;myheader: myvalue&#39;</span>
request filter: yihhui%

➜  ~ <span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080/header/filter/yihhui&#39;</span> <span class="token parameter variable">-H</span> <span class="token string">&#39;myheader: myvalue2&#39;</span>
<span class="token punctuation">{</span><span class="token string">&quot;timestamp&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;2020-09-07T00:40:34.493+0000&quot;</span>,<span class="token string">&quot;path&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;/header/filter/yihhui&quot;</span>,<span class="token string">&quot;status&quot;</span>:404,<span class="token string">&quot;error&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;Not Found&quot;</span>,<span class="token string">&quot;message&quot;</span>:null,<span class="token string">&quot;requestId&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;aa47f5a5&quot;</span><span class="token punctuation">}</span>%   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-请求头参数解析" tabindex="-1"><a class="header-anchor" href="#_2-请求头参数解析" aria-hidden="true">#</a> 2. 请求头参数解析</h3><p>WebFlux依然是可以通过注解<code>@RequestHeader</code>来获取对应的请求头</p><p>从使用姿势上来看，webflux与webmvc并没有什么区别</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 获取请求头
 *
 * curl &#39;http://127.0.0.1:8080/header/get&#39; -H &#39;myheader: myvalue&#39; -H &#39;user-agent: xxxxxxx&#39;
 *
 * <span class="token keyword">@param</span> <span class="token parameter">header</span>  注意，这个是自定义的请求头
 * <span class="token keyword">@param</span> <span class="token parameter">userAgent</span>
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;get&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span><span class="token string">&quot;myheader&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> header<span class="token punctuation">,</span>
        <span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span><span class="token string">&quot;user-agent&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> userAgent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;request headers: myheader=&quot;</span> <span class="token operator">+</span> header <span class="token operator">+</span> <span class="token string">&quot; userAgent=&quot;</span> <span class="token operator">+</span> userAgent<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试case如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>➜  ~ <span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080/header/get&#39;</span> <span class="token parameter variable">-H</span> <span class="token string">&#39;myheader: myvalue&#39;</span> <span class="token parameter variable">-H</span> <span class="token string">&#39;user-agent: xxxxxxx&#39;</span>
request headers: <span class="token assign-left variable">myheader</span><span class="token operator">=</span>myvalue <span class="token assign-left variable">userAgent</span><span class="token operator">=</span>xxxxxxx%  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-cookie获取" tabindex="-1"><a class="header-anchor" href="#_3-cookie获取" aria-hidden="true">#</a> 3. cookie获取</h3><p>利用cookie来标识用户身份可以说是非常普遍的场景了，我们通过专用的<code>CookieValue</code>来获取指定的cookies值</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 获取cookie
 *
 * curl &#39;http://127.0.0.1:8080/header/cookie&#39; --cookie &#39;tid=12343123;tt=abc123def&#39;
 *
 * <span class="token keyword">@param</span> <span class="token parameter">tid</span>
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;cookie&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token annotation punctuation">@CookieValue</span><span class="token punctuation">(</span><span class="token string">&quot;tid&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> tid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;request cookies tid=&quot;</span> <span class="token operator">+</span> tid<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的case中，标识只需要获取tid这个cookies值，其他的不care</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>➜  ~ <span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080/header/cookie&#39;</span> <span class="token parameter variable">--cookie</span> <span class="token string">&#39;tid=12343123;tt=abc123def&#39;</span>
request cookies <span class="token assign-left variable">tid</span><span class="token operator">=</span><span class="token number">12343123</span>% 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-其他" tabindex="-1"><a class="header-anchor" href="#ii-其他" aria-hidden="true">#</a> II. 其他</h2><h3 id="_0-项目" tabindex="-1"><a class="header-anchor" href="#_0-项目" aria-hidden="true">#</a> 0. 项目</h3>`,25),k={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/223-webflux-params",target:"_blank",rel:"noopener noreferrer"},v=n("p",null,[n("strong",null,"系列博文")],-1),g={href:"http://spring.hhui.top/spring-blog/2020/08/27/200827-SpringBoot%E7%B3%BB%E5%88%97WebFlux%E4%B9%8BPath%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E4%B8%8Eurl%E6%98%A0%E5%B0%84/",target:"_blank",rel:"noopener noreferrer"};function h(b,x){const a=l("ExternalLinkIcon");return p(),o("div",null,[u,i(" more "),d,n("ul",null,[n("li",null,[s("工程："),n("a",k,[s("https://github.com/liuyueyi/spring-boot-demo"),e(a)])]),n("li",null,[s("源码: "),n("a",m,[s("https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/223-webflux-params"),e(a)])])]),v,n("ul",null,[n("li",null,[n("a",g,[s("【WBE系列】WebFlux之Path参数解析与url映射"),e(a)])])])])}const f=t(r,[["render",h],["__file","200907-SpringBoot系列WebFlux之header参数解析.html.vue"]]);export{f as default};
