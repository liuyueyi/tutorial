import{_ as p,V as o,W as c,Y as n,Z as s,$ as t,X as l,a1 as e,F as i}from"./framework-094145d2.js";const u="/tutorial/hexblog/imgs/210715/00.jpg",r={},k=n("p",null,"Java 生态中，最最常见的json序列化工具有三个jackson, gson, fastsjon，当然我们常用的也就是这几个",-1),d={href:"https://mvnrepository.com/open-source/json-libraries",target:"_blank",rel:"noopener noreferrer"},v=n("figure",null,[n("img",{src:u,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),m=n("p",null,"json协议虽然是一致的，但是不同的框架对json的序列化支持却不尽相同，那么在项目中如何使用这些框架，怎样的使用才算优雅呢？",-1),b=e(`<p>Spring本身提供了比较多这种case，比如RestTemplate, RedisTemplate，可以让底层的redis\\http依赖包无缝切换；因此我们在使用序列化框架的时，也应该尽量向它靠齐</p><p>以下为我认为在使用json序列化时，比较好的习惯</p><h2 id="i-推荐规范" tabindex="-1"><a class="header-anchor" href="#i-推荐规范" aria-hidden="true">#</a> I. 推荐规范</h2><h3 id="_1-java-bean实现serializable接口" tabindex="-1"><a class="header-anchor" href="#_1-java-bean实现serializable接口" aria-hidden="true">#</a> 1. Java Bean实现Serializable接口</h3><p>遵循jdk的规范，如果一个Java Bean会被序列化（如对外提供VO/DTO对象）、持久化（如数据库实体Entity），建议实现<code>Serializable</code>接口，并持有一个<code>serialVersionUID</code>静态成员</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleBean</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">9111747337710917591L</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>why?</p><ul><li>声明为Serializable接口的对象，可以被序列化，jdk原生支持；一般来讲所有的序列化框架都认这个；如果一个对象没有实现这个接口，则不能保证所有的序列化框架都能正常序列化了</li><li>实现Serializable接口的，务必不要忘了初始化<code>serialVersionUID</code>(直接通过idea自动生成即可) <ul><li>idea设置自动生成提示步骤：</li><li><code>settings -&gt; inspections -&gt; Serializable class without serialVersionUID</code> 勾选</li></ul></li></ul><h3 id="_2-忽略字段" tabindex="-1"><a class="header-anchor" href="#_2-忽略字段" aria-hidden="true">#</a> 2. 忽略字段</h3><p>若实体中，某些字段不希望被序列化时，各序列化框架都有自己的支持方式，如:</p><ul><li>FastJson，使用JSONField注解</li><li>Gson，使用Expose注解</li><li>Jackson，使用JsonIgnore注解</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleBean</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">9111747337710917591L</span><span class="token punctuation">;</span>
    <span class="token comment">// jackson 序列化时，如果 transient 关键字，也有 getter/setter方法，那么也会被序列化出来</span>
    <span class="token annotation punctuation">@JsonIgnore</span>
    <span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>serialize <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> deserialize <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Expose</span><span class="token punctuation">(</span>serialize <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> deserialize <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">SimpleBean</span> self<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里强烈推荐使用jdk原生的关键字<code>transient</code>来修饰不希望被反序列化的成员</p><ul><li>优点：通用性更强</li></ul><p><strong>重点注意</strong></p><p>在使用jackson序列化框架时，成员变量如果有get方法，即便它被<code>transient</code>关键字修饰，输出json串的时候，也不会忽略它</p>`,16),g={href:"https://stackoverflow.com/questions/21745593/why-jackson-is-serializing-transient-member-also",target:"_blank",rel:"noopener noreferrer"},y=e(`<p>两种解决办法:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// case1</span>
objectMapper<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">MapperFeature</span><span class="token punctuation">.</span><span class="token constant">PROPAGATE_TRANSIENT_MARKER</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// case2</span>
objectMapper<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>objectMapper<span class="token punctuation">.</span><span class="token function">getSerializationConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDefaultVisibilityChecker</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">withFieldVisibility</span><span class="token punctuation">(</span><span class="token class-name">JsonAutoDetect<span class="token punctuation">.</span>Visibility</span><span class="token punctuation">.</span><span class="token constant">ANY</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">withGetterVisibility</span><span class="token punctuation">(</span><span class="token class-name">JsonAutoDetect<span class="token punctuation">.</span>Visibility</span><span class="token punctuation">.</span><span class="token constant">NONE</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">withIsGetterVisibility</span><span class="token punctuation">(</span><span class="token class-name">JsonAutoDetect<span class="token punctuation">.</span>Visibility</span><span class="token punctuation">.</span><span class="token constant">NONE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然jackson默认对<code>transient</code>关键字适配不友好，但是依然推荐使用这个关键字，然后添加上面的配置，这样替换json框架的时候，不需要修改源码</p><h3 id="_3-不要用map-list接收json串" tabindex="-1"><a class="header-anchor" href="#_3-不要用map-list接收json串" aria-hidden="true">#</a> 3. 不要用Map/List接收json串</h3><p>Java作为强类型语言在项目维护上有很高的优势，接收json串，推荐映射为对应的Java Bean，尽量不要用Map/List容器来接收，不然参数类型可能导致各种问题，可以看下面的默认值那一块说明</p><h2 id="ii-不同框架的差异性" tabindex="-1"><a class="header-anchor" href="#ii-不同框架的差异性" aria-hidden="true">#</a> II. 不同框架的差异性</h2><p>接下来将重点关注下三个框架在我们日常使用场景下的区别，定义一个Java Bean</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleBean</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">9111747337710917591L</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Integer</span> userId<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">double</span> userMoney<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> userSkills<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> extra<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> empty<span class="token punctuation">;</span>

    <span class="token comment">// jackson 序列化时，如果 transient 关键字，也有 getter/setter方法，那么也会被序列化出来</span>
    <span class="token annotation punctuation">@JsonIgnore</span>
    <span class="token annotation punctuation">@JSONField</span><span class="token punctuation">(</span>serialize <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> deserialize <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Expose</span><span class="token punctuation">(</span>serialize <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> deserialize <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">SimpleBean</span> self<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> hello <span class="token operator">=</span> <span class="token string">&quot;你好&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SimpleBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-json字段映射缺失场景" tabindex="-1"><a class="header-anchor" href="#_1-json字段映射缺失场景" aria-hidden="true">#</a> 1. json字段映射缺失场景</h3><p>如果json字符串中，存在一个key，在定义的bean对象不存在时，上面三种序列化框架的表现形式也不一样</p><p>json串如下</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;extra&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token property">&quot;a&quot;</span><span class="token operator">:</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;b&quot;</span><span class="token operator">:</span><span class="token number">345</span><span class="token punctuation">,</span><span class="token property">&quot;c&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">&quot;d&quot;</span><span class="token operator">:</span><span class="token number">35.1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token property">&quot;userId&quot;</span><span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token property">&quot;userMoney&quot;</span><span class="token operator">:</span><span class="token number">12.3</span><span class="token punctuation">,</span><span class="token property">&quot;userName&quot;</span><span class="token operator">:</span><span class="token string">&quot;yh&quot;</span><span class="token punctuation">,</span><span class="token property">&quot;userSkills2&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面这个json中，userSkills2这个字段，和SimpleBean映射不上，如果进行反序列化，会出现下面的场景</p><ul><li>fastjson, gson 会忽略json字符串中未匹配的key；jackson会抛异常</li></ul><p>若jackson希望忽略异常，需要如下配置</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 反序列化时，找不到属性时，忽略字段</span>
objectMapper<span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token class-name">DeserializationFeature</span><span class="token punctuation">.</span><span class="token constant">FAIL_ON_UNKNOWN_PROPERTIES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-字段没有get-set方法" tabindex="-1"><a class="header-anchor" href="#_2-字段没有get-set方法" aria-hidden="true">#</a> 2. 字段没有get/set方法</h3><p>若某个private字段没有get/set方法时，这个字段在序列化与反序列化时，表现不一致（public修饰话都可以序列化）</p><ul><li>gson: 可以序列化</li><li>fastjson/jackson: 忽略这个字段</li></ul><p>对于jackson，如果希望序列化一个没有<code>get/set</code>方法的属性时，如下设置</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>objectMapper<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>objectMapper<span class="token punctuation">.</span><span class="token function">getSerializationConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDefaultVisibilityChecker</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">withFieldVisibility</span><span class="token punctuation">(</span><span class="token class-name">JsonAutoDetect<span class="token punctuation">.</span>Visibility</span><span class="token punctuation">.</span><span class="token constant">ANY</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>fastjson，貌似没有相关的方法</p><p><strong>注意</strong></p><ul><li>建议对Java bean的字段添加get/set方法</li><li>若有 <code>getXxx()</code> 但是又没有属性<code>xxx</code>，会发现在序列化之后会多一个 <code>xxx</code></li></ul><h3 id="_3-value为null时-序列化时是否需要输出" tabindex="-1"><a class="header-anchor" href="#_3-value为null时-序列化时是否需要输出" aria-hidden="true">#</a> 3. value为null时，序列化时是否需要输出</h3><p>如果java bean中某个成员为null，默认表现如下</p><ul><li>fastjson/gson: 忽略这个字段</li><li>jackson: 保存这个字段，只是value为null</li></ul><p>如jackson对应的json串</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
	<span class="token property">&quot;empty&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通常来讲，推荐忽略null，对此jackson的设置如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// json串只包含非null的字段</span>
objectMapper<span class="token punctuation">.</span><span class="token function">setSerializationInclusion</span><span class="token punctuation">(</span><span class="token class-name">JsonInclude<span class="token punctuation">.</span>Include</span><span class="token punctuation">.</span><span class="token constant">NON_NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果null也希望输出（比如Swagger接口文档，需要把所有的key都捞出来），如下设置</p><p>fastjson配置如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 输出hvalue为null的字段</span>
<span class="token keyword">return</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token class-name">SerializerFeature<span class="token punctuation">.</span>WriteMapNullValue</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>gson配置如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Gson</span> gson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serializeNulls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出value为null的字段</span>
gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明</strong></p><ul><li>一般来讲，在序列化的时候，推荐忽略value为null的字段</li><li>jackson默认不会忽略，需要设置关闭</li></ul><h3 id="_4-默认值" tabindex="-1"><a class="header-anchor" href="#_4-默认值" aria-hidden="true">#</a> 4. 默认值</h3><p>将一个json串，转换为Map/List时，可以看到不同的数据类型与java数据类型的映射关系，下面是一些特殊的场景：</p><table><thead><tr><th>json数据类型</th><th>fastjson</th><th>gson</th><th style="text-align:left;">jackson</th></tr></thead><tbody><tr><td>浮点数</td><td>BigDecimal</td><td>double</td><td style="text-align:left;">double</td></tr><tr><td>整数</td><td>int/long</td><td>double</td><td style="text-align:left;">int/long</td></tr><tr><td>对象</td><td>JSONObject</td><td>LinkedTreeMap</td><td style="text-align:left;">LinkedHashMap</td></tr><tr><td>数组</td><td>JSONArray</td><td>ArrayList</td><td style="text-align:left;">ArrayList</td></tr><tr><td>null</td><td>null</td><td>null</td><td style="text-align:left;">null</td></tr><tr><td>输出Map</td><td>HashMap</td><td>LinkedTreeMap</td><td style="text-align:left;">LinkedHashMap</td></tr></tbody></table><p>如果希望三种框架保持一致，主要需要针对以下几个点：</p><ul><li>浮点数 -》 double</li><li>整数 -》 int/long</li><li>数组 -》 ArrayList</li><li>Map -》是否有序</li></ul><blockquote><p>输出map，虽然类型不一致，一般来说问题不大，最大的区别就是gson/jackson保证了顺序，而FastJson则没有</p></blockquote><p>fastjson额外配置如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 禁用浮点数转BigDecimal</span>
<span class="token keyword">int</span> features <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_PARSER_FEATURE</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token class-name">Feature<span class="token punctuation">.</span>UseBigDecimal</span><span class="token punctuation">.</span><span class="token function">getMask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 对象转Map，而不是JSONObject</span>
features <span class="token operator">=</span> features <span class="token operator">|</span> <span class="token class-name">Feature<span class="token punctuation">.</span>CustomMapDeserializer</span><span class="token punctuation">.</span><span class="token function">getMask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>数组转List而不是JSONArray，这个配置暂时未找到，可考虑自定义<code>ObjectDeserializer</code>来支持</li><li>Object转有序Map的配置也未找到，</li></ul><p>gson：</p>`,48),j={href:"https://stackoverflow.com/questions/15507997/how-to-prevent-gson-from-expressing-integers-as-floats",target:"_blank",rel:"noopener noreferrer"},f=e(`<p>对于gson而言，也没有配置可以直接设置整数转int/long而不是double，只能自己来适配</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GsonNumberFixDeserializer</span> <span class="token keyword">implements</span> <span class="token class-name">JsonDeserializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Map</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token class-name">JsonElement</span> jsonElement<span class="token punctuation">,</span> <span class="token class-name">Type</span> type<span class="token punctuation">,</span> <span class="token class-name">JsonDeserializationContext</span> jsonDeserializationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JsonParseException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">)</span> <span class="token function">read</span><span class="token punctuation">(</span>jsonElement<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">JsonElement</span> in<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">isJsonArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">JsonArray</span> arr <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">getAsJsonArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">JsonElement</span> anArr <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>anArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> list<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">isJsonObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedTreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">JsonObject</span> obj <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">getAsJsonObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">JsonElement</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> entitySet <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">JsonElement</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> entitySet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">read</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> map<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">isJsonPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">JsonPrimitive</span> prim <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">getAsJsonPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>prim<span class="token punctuation">.</span><span class="token function">isBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> prim<span class="token punctuation">.</span><span class="token function">getAsBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>prim<span class="token punctuation">.</span><span class="token function">isString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> prim<span class="token punctuation">.</span><span class="token function">getAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>prim<span class="token punctuation">.</span><span class="token function">isNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Number</span> num <span class="token operator">=</span> prim<span class="token punctuation">.</span><span class="token function">getAsNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> num<span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> num<span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">||</span> num<span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> num<span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> num<span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后注册到Gson</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">GsonBuilder</span> gsonBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
gsonBuilder<span class="token punctuation">.</span><span class="token function">registerTypeAdapter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TypeToken</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">GsonNumberFixDeserializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Gson</span> gson <span class="token operator">=</span> gsonBuilder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>jackson 就没有什么好说的了</p><p>在json字符串映射到Java的Map/List容器时，获取到的数据对象和预期的可能不一样，不同的框架处理方式不同；所以最佳的实践是：</p><ul><li>json字符串映射到Java bean，而不是容器</li><li>如果映射到容器时，取数据时，做好类型兼容，完全遵循json的规范 <ul><li>String：对应java的字符串</li><li>boolean: 对应java的Boolean</li><li>数值：对应Java的double <ul><li>原则上建议不要直接存数值类型，对于浮点数会有精度问题，用String类型进行替换最好</li><li>如确实为数值，为了保证不出问题，可以多绕一圈，如</li><li><code>Double.valueOf(String.valueOf(xxx)).xxxValue()</code></li></ul></li></ul></li></ul><h3 id="_5-key非string类型" tabindex="-1"><a class="header-anchor" href="#_5-key非string类型" aria-hidden="true">#</a> 5. key非String类型</h3><p>一般来说不存在key为null的情况，但是map允许key为null，所以将一个map序列化为json串的时候，就有可能出现这种场景</p><p>FastJson 输出</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">{</span><span class="token keyword">null</span><span class="token operator">:</span><span class="token string">&quot;empty key&quot;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token operator">:</span> <span class="token string">&quot;12&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Gson输出</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token punctuation">{</span><span class="token string">&quot;null&quot;</span><span class="token operator">:</span><span class="token string">&quot;empty key&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;12&quot;</span><span class="token operator">:</span> <span class="token string">&quot;12&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Jackson直接抛异常</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>说明</strong></p><ul><li>对于FastJson而言，若key不是String，那么输出为Json串时，key上不会有双引号，这种是不满足json规范的</li><li>gson则不管key是什么类型，都会转string</li><li>jackson 若key为非string类型，非null，则会转String</li></ul><p>推荐采用gson/jackson的使用姿势，key都转String，因此FastJson的姿势如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span><span class="token class-name">SerializerFeature<span class="token punctuation">.</span>WriteNonStringKeyAsString</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对于key为null，jackson的兼容策略</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// key 为null，不抛异常，改用&quot;null&quot;</span>
objectMapper<span class="token punctuation">.</span><span class="token function">getSerializerProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNullKeySerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JsonSerializer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">Object</span> value<span class="token punctuation">,</span> <span class="token class-name">JsonGenerator</span> gen<span class="token punctuation">,</span> <span class="token class-name">SerializerProvider</span> serializers<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        gen<span class="token punctuation">.</span><span class="token function">writeFieldName</span><span class="token punctuation">(</span><span class="token string">&quot;null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-类型不匹配" tabindex="-1"><a class="header-anchor" href="#_6-类型不匹配" aria-hidden="true">#</a> 6. 类型不匹配</h3><p>String转其他基本类型（int/long/float/double/boolean），若满足<code>Integer.valueOf(str)</code>这种，则没有问题，否则抛异常</p><h3 id="_7-未知属性" tabindex="-1"><a class="header-anchor" href="#_7-未知属性" aria-hidden="true">#</a> 7. 未知属性</h3><p>当json串中有一个key，在定义的bean中不存在，表现形式也不一样</p><ul><li>fastjson: 忽略这个key</li><li>gson：忽略</li><li>jackson: 抛异常</li></ul><p>一般来说，忽略是比较好的处理策略，jackson的配置如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 反序列化时，找不到属性时，忽略字段</span>
objectMapper<span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token class-name">DeserializationFeature</span><span class="token punctuation">.</span><span class="token constant">FAIL_ON_UNKNOWN_PROPERTIES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-循环引用" tabindex="-1"><a class="header-anchor" href="#_8-循环引用" aria-hidden="true">#</a> 8. 循环引用</h3><p>对于循环引用序列化时，不同的框架处理策略也不一致</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelfRefBean</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2808787760792080759L</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">SelfRefBean</span> bean<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出json串如下</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// FastJson
{&quot;bean&quot;:{&quot;$ref&quot;:&quot;@&quot;},&quot;name&quot;:&quot;yh&quot;}

// Gson
{&quot;name&quot;:&quot;yh&quot;}

// Jackson 抛异常
com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Direct self-reference leading to cycle
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了上面这种自引用的case，更常见的是另外一种循环引用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelfRefBean</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2808787760792080759L</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">SelfRefBean2</span> bean<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelfRefBean2</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2808787760792080759L</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">SelfRefBean</span> bean<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次序列化，表现如下</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// FastJson
{&quot;bean&quot;:{&quot;bean&quot;:{&quot;$ref&quot;:&quot;..&quot;},&quot;name&quot;:&quot;yhh&quot;},&quot;name&quot;:&quot;yh&quot;}

// Gson 栈溢出
Method threw &#39;java.lang.StackOverflowError&#39; exception.

// Jackson 栈溢出
com.fasterxml.jackson.databind.JsonMappingException: Infinite recursion (StackOverflowError) (through reference chain: 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从安全性来看，FastJson的处理方式是比较合适的，针对Gson/Jackson，到没有比较简单的设置方式</p><p>一般来说，如果有循环引用的场景，请忽略这个字段的序列化，推荐添加 <code>transient</code>关键字</p><h3 id="_9-驼峰与下划线" tabindex="-1"><a class="header-anchor" href="#_9-驼峰与下划线" aria-hidden="true">#</a> 9. 驼峰与下划线</h3><p>java采用驼峰命名格式，php下划线的风格，他们两个之间的交互通常会面临这个问题</p><table><thead><tr><th>FastJson</th><th>Gson</th><th>Jackson</th></tr></thead><tbody><tr><td>默认支持智能转换，也可以通过<code>@JSONField</code></td><td><code>@SerializedName</code></td><td><code>@JsonProperty</code></td></tr></tbody></table><p>虽然三种框架都提供了通过注解，来自定义输出json串的key的别名，但是更推荐使用全局的设置，来实现统一风格的转驼峰，转下划线</p><p><strong>FastJson 驼峰转下换线</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">String</span> <span class="token function">toUnderStr</span><span class="token punctuation">(</span><span class="token class-name">T</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 驼峰转下划线</span>
    <span class="token class-name">SerializeConfig</span> serializeConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SerializeConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// CamelCase 常见的驼峰格式</span>
    <span class="token comment">// PascalCase 单次首字母大写驼峰</span>
    <span class="token comment">// SnakeCase 下划线</span>
    <span class="token comment">// KebabCase 中划线</span>
    serializeConfig<span class="token punctuation">.</span><span class="token function">setPropertyNamingStrategy</span><span class="token punctuation">(</span><span class="token class-name">PropertyNamingStrategy<span class="token punctuation">.</span>SnakeCase</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> serializeConfig<span class="token punctuation">,</span> <span class="token class-name">SerializerFeature<span class="token punctuation">.</span>PrettyFormat</span><span class="token punctuation">,</span> <span class="token class-name">SerializerFeature<span class="token punctuation">.</span>IgnoreNonFieldGetter</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Gson 实现驼峰与下换线互转</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">String</span> <span class="token function">toUnderStr</span><span class="token punctuation">(</span><span class="token class-name">T</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">GsonBuilder</span> gsonBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 驼峰转下划线</span>
    gsonBuilder<span class="token punctuation">.</span><span class="token function">setFieldNamingPolicy</span><span class="token punctuation">(</span><span class="token class-name">FieldNamingPolicy</span><span class="token punctuation">.</span><span class="token constant">LOWER_CASE_WITH_UNDERSCORES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Gson</span> gson <span class="token operator">=</span> gsonBuilder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> gson<span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">fromUnderStr</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">GsonBuilder</span> gsonBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GsonBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 下划线的json串，反序列化为驼峰</span>
    gsonBuilder<span class="token punctuation">.</span><span class="token function">setFieldNamingPolicy</span><span class="token punctuation">(</span><span class="token class-name">FieldNamingPolicy</span><span class="token punctuation">.</span><span class="token constant">LOWER_CASE_WITH_UNDERSCORES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Gson</span> gson <span class="token operator">=</span> gsonBuilder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> clz<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Jackson实现驼峰与下划线的转换</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 驼峰转下换线
 *
 * <span class="token keyword">@param</span> <span class="token parameter">obj</span>
 * <span class="token keyword">@return</span>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">toUnderStr</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 驼峰转下划线</span>
    objectMapper<span class="token punctuation">.</span><span class="token function">setPropertyNamingStrategy</span><span class="token punctuation">(</span><span class="token class-name">PropertyNamingStrategies</span><span class="token punctuation">.</span><span class="token constant">SNAKE_CASE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 忽略 transient 关键字修饰的字段</span>
    objectMapper<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">MapperFeature</span><span class="token punctuation">.</span><span class="token constant">PROPAGATE_TRANSIENT_MARKER</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// json串只包含非null的字段</span>
    objectMapper<span class="token punctuation">.</span><span class="token function">setSerializationInclusion</span><span class="token punctuation">(</span><span class="token class-name">JsonInclude<span class="token punctuation">.</span>Include</span><span class="token punctuation">.</span><span class="token constant">NON_NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> objectMapper<span class="token punctuation">.</span><span class="token function">writerWithDefaultPrettyPrinter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JsonProcessingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">fromUnderStr</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> clz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 忽略 transient 修饰的属性</span>
    objectMapper<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">MapperFeature</span><span class="token punctuation">.</span><span class="token constant">PROPAGATE_TRANSIENT_MARKER</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 驼峰转下划线</span>
    objectMapper<span class="token punctuation">.</span><span class="token function">setPropertyNamingStrategy</span><span class="token punctuation">(</span><span class="token class-name">PropertyNamingStrategies</span><span class="token punctuation">.</span><span class="token constant">SNAKE_CASE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 忽略找不到的字段</span>
    objectMapper<span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token class-name">DeserializationFeature</span><span class="token punctuation">.</span><span class="token constant">FAIL_ON_UNKNOWN_PROPERTIES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> objectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> clz<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JsonProcessingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明</strong></p><ul><li>对于Gson/Jackson而言，如果使用上面的驼峰转下划线的json串，那么反序列化的时候也需要使用对应的下划线转驼峰的方式</li><li>FastJson则默认开启驼峰与下划线的互转</li></ul><h3 id="_10-jsonobject-jsonarray" tabindex="-1"><a class="header-anchor" href="#_10-jsonobject-jsonarray" aria-hidden="true">#</a> 10. JsonObject,JsonArray</h3><p>通常在java 生态中，更常见的是将Json串转为Java Bean，但某些场景也会希望直接获取JsonObject，JsonArray对象，当然是可以直接转为Map/List，使用前者的好处就是可以充分利用JsonElement的一些特性，如更安全的类型转换等</p><p>虽说三个框架的使用姿势不一样，但最终的表现差不多</p><p><strong>FastJson</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">JSONObject</span> <span class="token function">toObj</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">JSONArray</span> <span class="token function">toAry</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">JSONArray</span><span class="token punctuation">.</span><span class="token function">parseArray</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Gson</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">JsonObject</span> <span class="token function">toObj</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">JsonParser</span><span class="token punctuation">.</span><span class="token function">parseString</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAsJsonObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">JsonArray</span> <span class="token function">toAry</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">JsonParser</span><span class="token punctuation">.</span><span class="token function">parseString</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAsJsonArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Jackson</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">JsonNode</span> <span class="token function">toObj</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> objectMapper<span class="token punctuation">.</span><span class="token function">readTree</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JsonProcessingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这些没啥好说的，但是，请一定注意，不要多个json工具混用，比如Gson反序列化为JsonObject，然后又使用Jackson进行序列化，可能导致各种鬼畜的问题</p><p>简单来说，就是不要尝试对<code>JSONObject/JSONArray</code>, <code>JsonObject/JsonArray</code>, <code>JsonNode</code>调用 <code>jsonutil.encode</code></p><p>如果想输出json串，请直接调用 <code>toString/toJSONString</code>，千万不要搞事情</p><h3 id="_11-泛型" tabindex="-1"><a class="header-anchor" href="#_11-泛型" aria-hidden="true">#</a> 11. 泛型</h3><p>Json串，转泛型bean时，虽然各框架都有自己的TypeReference，但是底层的<code>Type</code>都是一致的</p><p><strong>FastJson</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">Type</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用姿势</span>
<span class="token class-name">FastjsonUtil</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span>TypeReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GenericBean</span><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Gson</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">Type</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用姿势</span>
<span class="token class-name">GsonUtil</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>gson<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span>TypeToken</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GenericBean</span><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Jackson</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">Type</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> objectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> objectMapper<span class="token punctuation">.</span><span class="token function">getTypeFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">constructType</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 使用姿势</span>
<span class="token class-name">JacksonUtil</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>core<span class="token punctuation">.</span>type<span class="token punctuation">.</span></span>TypeReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GenericBean</span><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iii-小结" tabindex="-1"><a class="header-anchor" href="#iii-小结" aria-hidden="true">#</a> III. 小结</h2><p>上面内容比较多，下面是提炼的干货</p><p><strong>序列化</strong></p><ul><li>java bean <ul><li>继承<code>Serializable</code>接口，持有<code>serialVersionUID</code>属性</li><li>每个需要序列化的，都需要有get/set方法</li><li>无参构造方法</li></ul></li><li>忽略字段 <ul><li>不希望输出的属性，使用关键字<code>transient</code>修饰，注意jackson需要额外配置</li></ul></li><li>循环引用 <ul><li>源头上避免出现这种场景，推荐直接在属性上添加 <code>transient</code>关键字</li></ul></li><li>忽略value为null的属性</li><li>遵循原生的json规范 <ul><li>即不要用单引号替换双引号</li><li>key都要用双引号包裹</li></ul></li><li>不要出现key为null的场景</li></ul><p><strong>反序列化</strong></p><ul><li>默认值 <ul><li>浮点型：转double，fastjson默认转为BigDecimal，需要额外处理</li><li>整数：转int/long <ul><li>gson 默认转为double，需要额外处理</li></ul></li><li>对象: 转Map <ul><li>fastJson需要额外处理</li></ul></li><li>数组: 转List <ul><li>fastJson转成了JSONArray，需要注意</li></ul></li></ul></li><li>未知属性，忽略 <ul><li>json串中有一个bean未定义的属性，建议直接忽略掉</li><li>jackson需要额外配置</li></ul></li><li>泛型： <ul><li>使用Type来精准的反序列化</li></ul></li></ul><p><strong>驼峰与下划线的互转</strong></p><ul><li>建议规则统一，如果输出下划线，就所有的都是下划线风格；不要出现混搭</li><li>不建议使用注解的别名方式来处理，直接在工具层进行统一是更好的选择，不会出现因为json框架不一致，导致结果不同的场景</li></ul><table><thead><tr><th>说明</th><th>实践策略</th><th>fastjson</th><th>gson</th><th>jackson</th></tr></thead><tbody><tr><td>Java Bean</td><td>实现Serializable接口</td><td>-</td><td>-</td><td>-</td></tr><tr><td>Java Bean</td><td>get/set方法，无参构造函数</td><td>-</td><td>-</td><td>-</td></tr><tr><td>key为null</td><td>原则上不建议出现这种场景；如出现也不希望抛异常</td><td>-</td><td>-</td><td><code>objectMapper.getSerializerProvider().setNullKeySerializer</code></td></tr><tr><td>循环引用</td><td>源头上避免这种场景</td><td>本身兼容</td><td>抛异常</td><td>抛异常</td></tr><tr><td>key非String</td><td>输出Json串的key转String</td><td><code>JSONObject.toJSONString(map,SerializerFeature.WriteNonStringKeyAsString)</code></td><td>-</td><td>-</td></tr><tr><td>忽略字段</td><td>transient 关键字</td><td>无需适配</td><td>无需适配</td><td>case1: <code>objectMapper.configure(MapperFeature.PROPAGATE_TRANSIENT_MARKER, true);</code> <br>case2: <code>objectMapper.setVisibility(objectMapper.getSerializationConfig().getDefaultVisibilityChecker().withFieldVisibility(JsonAutoDetect.Visibility.ANY).withGetterVisibility(JsonAutoDetect.Visibility.NONE).withIsGetterVisibility(JsonAutoDetect.Visibility.NONE))</code>;</td></tr><tr><td>值为null</td><td>忽略</td><td>无需适配</td><td>无需适配</td><td><code>objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);</code></td></tr><tr><td>属性找不到</td><td>忽略</td><td>无需适配</td><td>无需适配</td><td><code>objectMapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);</code></td></tr><tr><td>反序列化默认值</td><td>浮点数转double</td><td>JSONObject.parseObject(str, Map.class,JSON.DEFAULT_PARSER_FEATURE &amp; ~Feature.UseBigDecimal.getMask())</td><td>无需适配</td><td>无需适配</td></tr><tr><td>反序列化默认值</td><td>整数转int/long</td><td>无需适配</td><td>自定义JsonDeserializer，见上文</td><td>无需适配</td></tr><tr><td>反序列化默认值</td><td>对象转map</td><td><code>JSON.DEFAULT_PARSER_FEATURE 1 Feature.CustomMapDeserializer.getMask()</code></td><td>无需适配</td><td>无需适配</td></tr><tr><td>驼峰与下划线</td><td>统一处理</td><td>反序列化自动适配，序列化见上文</td><td>驼峰转下划线<br>下划线转驼峰必须配套使用</td><td>驼峰转下划线<br>下划线转驼峰必须配套使用</td></tr><tr><td>泛型</td><td>Type是最好的选择</td><td><code>new com.alibaba.fastjson.TypeReference&lt;br /&gt;&lt;GenericBean&lt;Map&gt;&gt;() {}.getType()</code></td><td><code>new com.google.gson.reflect.TypeToken&lt;br /&gt;&lt;GenericBean&lt;Map&gt;&gt;() {}.getType()</code></td><td><code>new com.fasterxml.jackson.core.type.TypeReference&lt;GenericBean&lt;Map&gt;&gt;() {}.getType()</code></td></tr></tbody></table>`,80);function h(w,S){const a=i("ExternalLinkIcon");return o(),c("div",null,[k,n("blockquote",null,[n("p",null,[n("a",d,[s("https://mvnrepository.com/open-source/json-libraries"),t(a)])])]),v,m,l(" more "),b,n("blockquote",null,[n("p",null,[s("说明链接: "),n("a",g,[s("https://stackoverflow.com/questions/21745593/why-jackson-is-serializing-transient-member-also"),t(a)])])]),y,n("blockquote",null,[n("p",null,[n("a",j,[s("https://stackoverflow.com/questions/15507997/how-to-prevent-gson-from-expressing-integers-as-floats"),t(a)])])]),f])}const _=p(r,[["render",h],["__file","03.Json序列化框架对比与最佳实践推荐.html.vue"]]);export{_ as default};
