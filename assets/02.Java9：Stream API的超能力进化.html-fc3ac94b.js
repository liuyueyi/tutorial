import{_ as n,V as s,W as a,a1 as t}from"./framework-094145d2.js";const p="/tutorial/imgs/column/java/jdk8_stream.jpg",e={},o=t('<p>嘿，朋友们！今天咱们来聊聊Java开发中的一个超级神器——Stream API。如果你是Java开发者，那你肯定知道，每次JDK版本更新都像是给开发者们打开了一扇新世界的大门，带来各种新特性和优化。而JDK 9的发布，简直就是Java开发界的“大事件”，尤其是Stream API的增强，更是让无数开发者眼前一亮。</p><p>想象一下，你手头有一堆数据，比如一堆水果，你得挑出所有的苹果，还得把它们按大小排个序。用传统的Java代码，你可能得写一大堆循环和条件判断，代码又长又难懂。但有了Stream API，这一切都变得简单了！它就像一个超级智能的助手，帮你轻松搞定这些繁琐的任务。</p><p>那么，JDK 9到底给Stream API带来了哪些新花样呢？接下来，咱们就一起探索一下，看看这些新特性到底有多厉害！</p><h2 id="jdk-8中stream-api基础回顾" tabindex="-1"><a class="header-anchor" href="#jdk-8中stream-api基础回顾" aria-hidden="true">#</a> JDK 8中Stream API基础回顾</h2><figure><img src="'+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在JDK 8时代，Stream API横空出世，彻底改变了Java开发者处理集合数据的方式。它就像一个神奇的魔法棒，让代码变得简洁又高效。用Stream API，你可以轻松地对集合进行过滤、映射、归约等操作。比如，你想从一堆水果里挑出苹果，用<code>filter</code>方法，告诉Stream“我只要苹果”，它就能帮你搞定。是不是很神奇？</p><p>再比如，你手头有一个员工信息列表，你想把每个员工的工资提取出来，用<code>map</code>方法，就能轻松得到一个工资列表。要是想计算工资总和，<code>reduce</code>方法也能帮你搞定。这比传统的循环累加方式简洁多了，代码可读性也高了不少。</p><p>总之，JDK 8的Stream API已经很厉害了，但JDK 9又给它加了不少新功能。接下来，咱们来看看JDK 9到底带来了哪些惊喜！</p><h2 id="jdk-9中stream-api的增强特性" tabindex="-1"><a class="header-anchor" href="#jdk-9中stream-api的增强特性" aria-hidden="true">#</a> JDK 9中Stream API的增强特性</h2><h3 id="takewhile-精准提取流元素" tabindex="-1"><a class="header-anchor" href="#takewhile-精准提取流元素" aria-hidden="true">#</a> takeWhile：精准提取流元素</h3><p>想象一下，你手头有一串数字，比如1到10，你只想挑出小于5的那些。在JDK 9之前，你可能得写个循环，一个个判断，代码又长又麻烦。但JDK 9的<code>takeWhile</code>方法，就像一个聪明的“筛选器”，能帮你轻松搞定。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> numbers <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                              <span class="token punctuation">.</span><span class="token function">takeWhile</span><span class="token punctuation">(</span>n <span class="token operator">-&gt;</span> n <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span>
                              <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码的意思是：“从头开始，只要数字小于5，就把它挑出来。”一旦遇到不小于5的数字，它就会停下来。这比<code>filter</code>方法更高效，因为<code>filter</code>会检查整个列表，而<code>takeWhile</code>一旦找到不满足条件的数字就直接“刹车”。</p><p><strong>小贴士</strong>：<code>takeWhile</code>特别适合处理大数据量的流，因为它能提前结束操作，节省时间和资源。</p><h3 id="dropwhile-反向筛选流数据" tabindex="-1"><a class="header-anchor" href="#dropwhile-反向筛选流数据" aria-hidden="true">#</a> dropWhile：反向筛选流数据</h3><p><code>dropWhile</code>和<code>takeWhile</code>正好相反，它会从流的开头开始，删掉满足条件的元素，直到遇到第一个不满足条件的元素。比如，你还是想处理1到10的数字，但这次你想去掉所有小于5的数字。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                              <span class="token punctuation">.</span><span class="token function">dropWhile</span><span class="token punctuation">(</span>n <span class="token operator">-&gt;</span> n <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span>
                              <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码的意思是：“从头开始，把小于5的数字都删掉。”这样一来，结果就只剩下5到10的数字了。这在处理日志数据时特别有用，比如跳过开头的无用信息，直接处理有用的部分。</p><h3 id="ofnullable-优雅处理空值流" tabindex="-1"><a class="header-anchor" href="#ofnullable-优雅处理空值流" aria-hidden="true">#</a> ofNullable：优雅处理空值流</h3><p>在实际开发中，空值（<code>null</code>）总是让人头疼。不小心碰到<code>null</code>，代码就可能直接崩溃。JDK 9的<code>ofNullable</code>方法，就像一个“保镖”，帮你安全地处理空值。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token class-name">Stream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stream <span class="token operator">=</span> <span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
stream<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码中，<code>ofNullable</code>会检查<code>name</code>是否为<code>null</code>。如果是<code>null</code>，它就生成一个空流；如果不是<code>null</code>，就生成一个包含<code>name</code>的流。这样一来，你就不怕空指针异常了。</p><p><strong>小贴士</strong>：<code>ofNullable</code>是处理空值的神器，能让你的代码更安全、更健壮。</p><h3 id="iterate-灵活迭代流数据" tabindex="-1"><a class="header-anchor" href="#iterate-灵活迭代流数据" aria-hidden="true">#</a> iterate：灵活迭代流数据</h3><p>在JDK 8中，<code>iterate</code>方法只能生成无限流，用起来有点局限。但在JDK 9中，<code>iterate</code>变得更强大了，你可以给它设置一个结束条件。</p><p>比如，你想生成斐波那契数列，直到某个数字超过100：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">iterate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> arr <span class="token operator">-&gt;</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span> arr <span class="token operator">-&gt;</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span>arr <span class="token operator">-&gt;</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码的意思是：“从<code>[0, 1]</code>开始，每次生成新的数对，直到第一个数字超过100为止。”这样一来，你就能灵活地生成和处理各种序列了。</p><h3 id="optional与stream的深度融合" tabindex="-1"><a class="header-anchor" href="#optional与stream的深度融合" aria-hidden="true">#</a> Optional与Stream的深度融合</h3><p>在JDK 9中，<code>Optional</code>和<code>Stream</code>也“牵手”了。<code>Optional</code>新增了<code>stream()</code>方法，可以把它转换成Stream，然后继续用Stream的各种方法。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> optionalName <span class="token operator">=</span> <span class="token class-name">Optional</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
optionalName<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">toUpperCase</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码的意思是：“把<code>Optional</code>里的字符串转成大写，然后打印出来。”如果<code>Optional</code>是空的，<code>stream()</code>方法会返回一个空流，后续操作也不会执行，完美避免了空指针异常。</p><p><strong>小贴士</strong>：<code>Optional</code>和<code>Stream</code>的结合，让代码更简洁、更安全。用起来就像“双剑合璧”，威力倍增！</p><h2 id="增强特性在实际开发中的应用场景" tabindex="-1"><a class="header-anchor" href="#增强特性在实际开发中的应用场景" aria-hidden="true">#</a> 增强特性在实际开发中的应用场景</h2><h3 id="数据处理与分析" tabindex="-1"><a class="header-anchor" href="#数据处理与分析" aria-hidden="true">#</a> 数据处理与分析</h3><p>在大数据时代，处理海量数据是家常便饭。JDK 9的Stream API增强特性，让这些任务变得简单又高效。</p><p>比如，你手头有一个员工信息列表，你想找出年龄大于30岁、工资高于5000元的员工，并按工资从高到低排序。用JDK 9的Stream API，几行代码就能搞定：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>employee <span class="token operator">-&gt;</span> employee<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">30</span> <span class="token operator">&amp;&amp;</span> employee<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">5000</span><span class="token punctuation">)</span>
                                      <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparingDouble</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                                      <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码的意思是：“筛选出符合条件的员工，按工资排序，然后收集到一个列表里。”是不是很简洁？</p><p>再比如，你想把一个数字列表分成每10个一组，用<code>takeWhile</code>和<code>dropWhile</code>也能轻松搞定：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> numbers <span class="token operator">=</span> <span class="token function">getNumbers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> groupSize <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> groupSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> group <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                 <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
                                 <span class="token punctuation">.</span><span class="token function">takeWhile</span><span class="token punctuation">(</span>n <span class="token operator">-&gt;</span> i <span class="token operator">+</span> groupSize <span class="token operator">&gt;</span> numbers<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>
                                 <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">processGroup</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码的意思是：“每次跳过已经处理过的数字，然后取出10个一组的数字。”这样一来，分组处理就变得超简单了。</p><h3 id="集合操作优化" tabindex="-1"><a class="header-anchor" href="#集合操作优化" aria-hidden="true">#</a> 集合操作优化</h3><p>在日常开发中，集合操作是家常便饭。JDK 9的Stream API增强特性，让这些操作变得更简单、更高效。</p><p>比如，你想处理一个字符串列表，直到遇到第一个空字符串为止。用<code>takeWhile</code>方法，几行代码就能搞定：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> strings <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cherry&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;date&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
strings<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
       <span class="token punctuation">.</span><span class="token function">takeWhile</span><span class="token punctuation">(</span>s <span class="token operator">-&gt;</span> <span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
       <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码的意思是：“从头开始，打印出所有非空字符串，直到遇到第一个空字符串。”这样一来，集合操作就变得更灵活了。</p><p><strong>小贴士</strong>：<code>takeWhile</code>和<code>dropWhile</code>是处理集合的利器，能让你的代码更简洁、更高效。</p><h2 id="性能与代码简洁性分析" tabindex="-1"><a class="header-anchor" href="#性能与代码简洁性分析" aria-hidden="true">#</a> 性能与代码简洁性分析</h2><h3 id="性能表现" tabindex="-1"><a class="header-anchor" href="#性能表现" aria-hidden="true">#</a> 性能表现</h3><p>咱们来对比一下JDK 8和JDK 9的性能。假设你有一个包含10000个数字的列表，你想计算所有偶数的和。用JDK 8的代码可能长这样：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> numbers <span class="token operator">=</span> <span class="token class-name">IntStream</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10001</span><span class="token punctuation">)</span>
                                 <span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                                 <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> sum <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                 <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>n <span class="token operator">-&gt;</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                 <span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">intValue</span><span class="token punctuation">)</span>
                 <span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而在JDK 9中，你可以用<code>takeWhile</code>优化一下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> sum <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                 <span class="token punctuation">.</span><span class="token function">takeWhile</span><span class="token punctuation">(</span>n <span class="token operator">-&gt;</span> n <span class="token operator">&lt;=</span> <span class="token number">10000</span><span class="token punctuation">)</span>
                 <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>n <span class="token operator">-&gt;</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
                 <span class="token punctuation">.</span><span class="token function">mapToInt</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token operator">::</span><span class="token function">intValue</span><span class="token punctuation">)</span>
                 <span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际测试发现，JDK 9的<code>takeWhile</code>方法在处理大数据量时更快，因为它能提前结束操作，避免不必要的计算。</p><h3 id="代码简洁性" tabindex="-1"><a class="header-anchor" href="#代码简洁性" aria-hidden="true">#</a> 代码简洁性</h3><p>再看看代码简洁性。比如，你想从员工列表中筛选出年龄大于30岁、工资高于5000元的员工，并按工资排序。用JDK 8的代码可能长这样：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
       <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>employee <span class="token operator">-&gt;</span> employee<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">30</span> <span class="token operator">&amp;&amp;</span> employee<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">5000</span><span class="token punctuation">)</span>
       <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparingDouble</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
       <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而在JDK 9中，你可以用<code>dropWhile</code>进一步简化代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> employees<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
         <span class="token punctuation">.</span><span class="token function">dropWhile</span><span class="token punctuation">(</span>employee <span class="token operator">-&gt;</span> employee<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">)</span>
         <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>employee <span class="token operator">-&gt;</span> employee<span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">5000</span><span class="token punctuation">)</span>
         <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparingDouble</span><span class="token punctuation">(</span><span class="token class-name">Employee</span><span class="token operator">::</span><span class="token function">getSalary</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
         <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码的意思是：“跳过年龄小于等于30岁的员工，然后筛选出工资高于5000元的员工，按工资排序。”这样一来，代码不仅更简洁，逻辑也更清晰。</p><p><strong>小贴士</strong>：JDK 9的Stream API增强特性，让代码更简洁、更高效。用起来就像“开了挂”，能让你的开发效率直线提升！</p><h2 id="总结与展望" tabindex="-1"><a class="header-anchor" href="#总结与展望" aria-hidden="true">#</a> 总结与展望</h2><p>JDK 9的Stream API增强特性，简直就是Java开发界的“超级英雄”。从精准提取数据，到优雅处理空值，再到强大的迭代和融合能力，这些新特性让我们的代码更简洁、更优雅、更健壮。</p><p>在实际开发中，这些特性已经展现出了巨大的优势。它们不仅能帮助我们高效处理海量数据，还能优化集合操作，提升代码的可读性和可维护性。无论是新手还是老司机，都能从这些增强特性中受益。</p><p>那么，你还在等什么呢？赶紧在你的项目中试试JDK 9的Stream API增强特性吧！相信我，一旦你用上了，就会发现它的魅力和价值。</p><p>最后，如果你对Stream API的更多高级用法感兴趣，我建议你去读读《Java Stream API Cookbook》这本书，里面有不少实用的案例和技巧，能帮你进一步提升开发技能。</p>`,67),c=[o];function l(u,i){return s(),a("div",null,c)}const r=n(e,[["render",l],["__file","02.Java9：Stream API的超能力进化.html.vue"]]);export{r as default};
