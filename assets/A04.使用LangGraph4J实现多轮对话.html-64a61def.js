import{_ as c,V as l,W as i,Y as s,Z as n,$ as a,a0 as u,a1 as p,F as t}from"./framework-094145d2.js";const k="/tutorial/imgs/column/springai/A04-1.webp",r={},d=p('<h1 id="_04-使用langgraph4j实现多轮对话" tabindex="-1"><a class="header-anchor" href="#_04-使用langgraph4j实现多轮对话" aria-hidden="true">#</a> 04.使用LangGraph4J实现多轮对话</h1><p>之前介绍的多轮对话，上下文存储主要是SpringAI提供的能力支持；接下来我们看一下，在agent开发时推荐使用的框架LangGraphJ，如何实现多轮对话</p><h2 id="一、langgraphj实现多轮对话" tabindex="-1"><a class="header-anchor" href="#一、langgraphj实现多轮对话" aria-hidden="true">#</a> 一、LangGraphJ实现多轮对话</h2><h3 id="_1-创建项目" tabindex="-1"><a class="header-anchor" href="#_1-创建项目" aria-hidden="true">#</a> 1. 创建项目</h3>',4),g=p(`<h3 id="_2-添加依赖" tabindex="-1"><a class="header-anchor" href="#_2-添加依赖" aria-hidden="true">#</a> 2. 添加依赖</h3><p>在pom.xml中添加关键依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>langgraph4j.version</span><span class="token punctuation">&gt;</span></span>1.6.0-rc4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>langgraph4j.version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.bsc.langgraph4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>langgraph4j-springai-agentexecutor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${langgraph4j.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.ai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-ai-starter-model-zhipuai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们这里直接依赖的是 <code>langgraph4j-springai-agentexecutor</code> 模块，该模块提供了基于SpringAI的AgentExecutor实现；使用的版本为当前(25/08/08)的最新版本，有需要的小伙伴根据实际情况进行调整</p><h3 id="_3-配置" tabindex="-1"><a class="header-anchor" href="#_3-配置" aria-hidden="true">#</a> 3. 配置</h3><p>在配置文件 <code>application.yml</code> 文件中，添加大模型配置，我们这里依然是使用ZhipuAI的模型进行演示</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">ai</span><span class="token punctuation">:</span>
    <span class="token key atrule">zhipuai</span><span class="token punctuation">:</span>
      <span class="token comment"># api-key 使用你自己申请的进行替换；如果为了安全考虑，可以通过启动参数进行设置</span>
      <span class="token key atrule">api-key</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>zhipuai<span class="token punctuation">-</span>api<span class="token punctuation">-</span>key<span class="token punctuation">}</span>
      <span class="token key atrule">chat</span><span class="token punctuation">:</span> <span class="token comment"># 聊天模型</span>
        <span class="token key atrule">options</span><span class="token punctuation">:</span>
          <span class="token key atrule">model</span><span class="token punctuation">:</span> GLM<span class="token punctuation">-</span>4<span class="token punctuation">-</span>Flash

<span class="token comment"># 修改日志级别</span>
<span class="token key atrule">logging</span><span class="token punctuation">:</span>
  <span class="token key atrule">level</span><span class="token punctuation">:</span>
    <span class="token key atrule">org.springframework.ai.chat.client.advisor.SimpleLoggerAdvisor</span><span class="token punctuation">:</span> debug
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-memagent实现" tabindex="-1"><a class="header-anchor" href="#_4-memagent实现" aria-hidden="true">#</a> 4. MemAgent实现</h3><p>实现一个MemAgent，用于获取对话的<code>CompileGraph</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MemAgent</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">StateGraph</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AgentExecutor<span class="token punctuation">.</span>State</span><span class="token punctuation">&gt;</span></span> graph<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">CompiledGraph</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AgentExecutor<span class="token punctuation">.</span>State</span><span class="token punctuation">&gt;</span></span> workflow<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MemAgent</span><span class="token punctuation">(</span><span class="token class-name">ChatModel</span> model<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">GraphStateException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MemorySaver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">MemAgent</span><span class="token punctuation">(</span><span class="token class-name">ChatModel</span> model<span class="token punctuation">,</span> <span class="token class-name">BaseCheckpointSaver</span> memorySaver<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">GraphStateException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>graph <span class="token operator">=</span> <span class="token class-name">AgentExecutor</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">chatModel</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 在 StateGraph 创建 CompiledGraph 时，通过指定 MemorySaver 来实现 Checkpoint 保存</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>workflow <span class="token operator">=</span> graph<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token class-name">CompileConfig</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">checkpointSaver</span><span class="token punctuation">(</span>memorySaver<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">CompiledGraph</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AgentExecutor<span class="token punctuation">.</span>State</span><span class="token punctuation">&gt;</span></span> <span class="token function">workflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> workflow<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意上面的实现， <code>MemorySaver</code> 是一个 <code>BaseCheckpointSaver</code> 的实现，用于实现 Checkpoint 的保存，对话历史保存到jvm内存中；使用<code>org.bsc.langgraph4j.RunnableConfig.threadId</code>来实现不同身份的会话隔离</p><h3 id="_5-多轮对话端点" tabindex="-1"><a class="header-anchor" href="#_5-多轮对话端点" aria-hidden="true">#</a> 5. 多轮对话端点</h3><p>提供一个聊天接口，第一个参数为用户标识，用于区分用户的聊天记录</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChatController</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">CompiledGraph</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">AgentExecutor<span class="token punctuation">.</span>State</span><span class="token punctuation">&gt;</span></span> workflow<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ChatController</span><span class="token punctuation">(</span><span class="token class-name">ChatModel</span> chatModel<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">GraphStateException</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>workflow <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MemAgent</span><span class="token punctuation">(</span>chatModel<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">workflow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 聊天对话
     *
     * <span class="token keyword">@param</span> <span class="token parameter">user</span>
     * <span class="token keyword">@param</span> <span class="token parameter">msg</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/{user}/chat&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">chat</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> user<span class="token punctuation">,</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这里主要是指定会话用户</span>
        <span class="token keyword">var</span> runnableConfig <span class="token operator">=</span> <span class="token class-name">RunnableConfig</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">threadId</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> state <span class="token operator">=</span> workflow<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;messages&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">UserMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> runnableConfig<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 最后一条消息为完整的返回结果</span>
        <span class="token keyword">return</span> state<span class="token punctuation">.</span><span class="token function">lastMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Content</span><span class="token operator">::</span><span class="token function">getText</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">&quot;No Response&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="二、小结" tabindex="-1"><a class="header-anchor" href="#二、小结" aria-hidden="true">#</a> 二、小结</h2><p>本文演示了通过 LangGraphJ 实现多轮对话的实现，虽然效果是实现了，但是对LangGraphJ不太了解的小伙伴，估计会有很多疑问，这个框架是怎么工作的呢？又该如何使用它来开发Agent呢？</p>',17),m={href:"https://github.com/liuyueyi/spring-ai-demo/tree/master/advance-projects/A04-memory-agent-langgraph",target:"_blank",rel:"noopener noreferrer"};function v(h,b){const e=t("RouterLink"),o=t("ExternalLinkIcon");return l(),i("div",null,[d,s("p",null,[n("创建一个SpringAI项目，基本流程同 "),a(e,{to:"/spring/springai/%E5%9F%BA%E7%A1%80%E7%AF%87/01.%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AASpringAI-Demo%E5%B7%A5%E7%A8%8B.html"},{default:u(()=>[n("创建一个SpringAI-Demo工程")]),_:1})]),g,s("p",null,[n("文中所有涉及到的代码，可以到项目中获取 "),s("a",m,[n("https://github.com/liuyueyi/spring-ai-demo"),a(o)])])])}const y=c(r,[["render",v],["__file","A04.使用LangGraph4J实现多轮对话.html.vue"]]);export{y as default};
