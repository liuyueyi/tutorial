const n=JSON.parse('{"key":"v-80389dae","path":"/java/jdk/jdk8_/","title":"00.jdk8+迭代记录","lang":"zh-CN","frontmatter":{"title":"00.jdk8+迭代记录","index":true,"description":"这里记录JDK8+之后的新的特性 Java 8（2014年发布）到 Java 21（2023年发布）经历了多次迭代，新增了大量特性和改进。以下是主要版本（Java 9 到 Java 21）中值得关注的新特性分类整理： 一、语言特性改进 模块化系统（Java 9） Jigsaw 项目：引入模块化（module-info.java），解决 JAR 依赖和封装问题，提升安全性和可维护性。 局部变量类型推断（Java 10） var 关键字：允许在局部变量声明时省略显式类型（如 var list = new ArrayList&lt;String&gt;();）。 文本块（Java 15 正式支持） 多行字符串：使用 \\"\\"\\" ... \\"\\"\\" 简化 HTML、JSON 等多行文本的编写。 模式匹配（逐步引入） instanceof 模式匹配（Java 16）：直接提取对象属性，如 if (obj instanceof String s) { ... }。 switch 表达式（Java 14）：支持箭头语法和返回值，避免 break 的繁琐。 模式匹配 switch（Java 21 正式）：支持类型匹配和复杂条件，例如：switch (obj) { case Integer i -&gt; System.out.println(\\"Integer: \\" + i); case String s when s.length() &gt; 5 -&gt; System.out.println(\\"Long string\\"); default -&gt; {} } 记录类（Record，Java 16 正式） 简化不可变数据类的定义，自动生成 equals()、hashCode() 等方法：record Point(int x, int y) {} 密封类（Sealed Classes，Java 17 正式） 限制类的继承关系，明确子类范围：public sealed class Shape permits Circle, Square {} 字符串模板（Java 21 预览） 类似其他语言的模板插值功能，例如：String name = \\"John\\"; String message = STR.\\"Hello \\\\{name}!\\";","head":[["meta",{"property":"og:url","content":"https://liuyueyi.github.io/tutorial/java/jdk/jdk8_/"}],["meta",{"property":"og:site_name","content":"一灰灰的站点"}],["meta",{"property":"og:title","content":"00.jdk8+迭代记录"}],["meta",{"property":"og:description","content":"这里记录JDK8+之后的新的特性 Java 8（2014年发布）到 Java 21（2023年发布）经历了多次迭代，新增了大量特性和改进。以下是主要版本（Java 9 到 Java 21）中值得关注的新特性分类整理： 一、语言特性改进 模块化系统（Java 9） Jigsaw 项目：引入模块化（module-info.java），解决 JAR 依赖和封装问题，提升安全性和可维护性。 局部变量类型推断（Java 10） var 关键字：允许在局部变量声明时省略显式类型（如 var list = new ArrayList&lt;String&gt;();）。 文本块（Java 15 正式支持） 多行字符串：使用 \\"\\"\\" ... \\"\\"\\" 简化 HTML、JSON 等多行文本的编写。 模式匹配（逐步引入） instanceof 模式匹配（Java 16）：直接提取对象属性，如 if (obj instanceof String s) { ... }。 switch 表达式（Java 14）：支持箭头语法和返回值，避免 break 的繁琐。 模式匹配 switch（Java 21 正式）：支持类型匹配和复杂条件，例如：switch (obj) { case Integer i -&gt; System.out.println(\\"Integer: \\" + i); case String s when s.length() &gt; 5 -&gt; System.out.println(\\"Long string\\"); default -&gt; {} } 记录类（Record，Java 16 正式） 简化不可变数据类的定义，自动生成 equals()、hashCode() 等方法：record Point(int x, int y) {} 密封类（Sealed Classes，Java 17 正式） 限制类的继承关系，明确子类范围：public sealed class Shape permits Circle, Square {} 字符串模板（Java 21 预览） 类似其他语言的模板插值功能，例如：String name = \\"John\\"; String message = STR.\\"Hello \\\\{name}!\\";"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-17T09:51:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-17T09:51:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"00.jdk8+迭代记录\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-17T09:51:00.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"一、语言特性改进","slug":"一、语言特性改进","link":"#一、语言特性改进","children":[]},{"level":3,"title":"二、API 增强","slug":"二、api-增强","link":"#二、api-增强","children":[]},{"level":3,"title":"三、并发与性能","slug":"三、并发与性能","link":"#三、并发与性能","children":[]},{"level":3,"title":"四、工具与 JVM 改进","slug":"四、工具与-jvm-改进","link":"#四、工具与-jvm-改进","children":[]},{"level":3,"title":"五、其他重要特性","slug":"五、其他重要特性","link":"#五、其他重要特性","children":[]},{"level":3,"title":"六、Java 21 核心特性总结","slug":"六、java-21-核心特性总结","link":"#六、java-21-核心特性总结","children":[]}],"git":{"createdTime":1739530338000,"updatedTime":1739785860000,"contributors":[{"name":"yihui","email":"bangzewu@126.com","commits":2}]},"readingTime":{"minutes":3.12,"words":936},"filePathRelative":"java/jdk/jdk8+/readme.md","localizedDate":"2025年2月14日","excerpt":"<blockquote>\\n<p>这里记录JDK8+之后的新的特性</p>\\n</blockquote>\\n<p>Java 8（2014年发布）到 Java 21（2023年发布）经历了多次迭代，新增了大量特性和改进。以下是主要版本（Java 9 到 Java 21）中值得关注的新特性分类整理：</p>\\n<hr>\\n<h3> <strong>一、语言特性改进</strong></h3>\\n<ol>\\n<li>\\n<p><strong>模块化系统（Java 9）</strong></p>\\n<ul>\\n<li><strong>Jigsaw 项目</strong>：引入模块化（<code>module-info.java</code>），解决 JAR 依赖和封装问题，提升安全性和可维护性。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>局部变量类型推断（Java 10）</strong></p>\\n<ul>\\n<li><strong><code>var</code> 关键字</strong>：允许在局部变量声明时省略显式类型（如 <code>var list = new ArrayList&lt;String&gt;();</code>）。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>文本块（Java 15 正式支持）</strong></p>\\n<ul>\\n<li><strong>多行字符串</strong>：使用 <code>\\"\\"\\" ... \\"\\"\\"</code> 简化 HTML、JSON 等多行文本的编写。</li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>模式匹配（逐步引入）</strong></p>\\n<ul>\\n<li><strong><code>instanceof</code> 模式匹配（Java 16）</strong>：直接提取对象属性，如 <code>if (obj instanceof String s) { ... }</code>。</li>\\n<li><strong><code>switch</code> 表达式（Java 14）</strong>：支持箭头语法和返回值，避免 <code>break</code> 的繁琐。</li>\\n<li><strong>模式匹配 <code>switch</code>（Java 21 正式）</strong>：支持类型匹配和复杂条件，例如：<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">switch</span> <span class=\\"token punctuation\\">(</span>obj<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">case</span> <span class=\\"token class-name\\">Integer</span> i <span class=\\"token operator\\">-&gt;</span> <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Integer: \\"</span> <span class=\\"token operator\\">+</span> i<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">case</span> <span class=\\"token class-name\\">String</span> s when s<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">length</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">&gt;</span> <span class=\\"token number\\">5</span> <span class=\\"token operator\\">-&gt;</span> <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Long string\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token keyword\\">default</span> <span class=\\"token operator\\">-&gt;</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>记录类（Record，Java 16 正式）</strong></p>\\n<ul>\\n<li>简化不可变数据类的定义，自动生成 <code>equals()</code>、<code>hashCode()</code> 等方法：<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">record</span> <span class=\\"token class-name\\">Point</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> x<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> y<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>密封类（Sealed Classes，Java 17 正式）</strong></p>\\n<ul>\\n<li>限制类的继承关系，明确子类范围：<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">sealed</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Shape</span> <span class=\\"token keyword\\">permits</span> <span class=\\"token class-name\\">Circle</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Square</span> <span class=\\"token punctuation\\">{</span><span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div></li>\\n</ul>\\n</li>\\n<li>\\n<p><strong>字符串模板（Java 21 预览）</strong></p>\\n<ul>\\n<li>类似其他语言的模板插值功能，例如：<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token class-name\\">String</span> name <span class=\\"token operator\\">=</span> <span class=\\"token string\\">\\"John\\"</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token class-name\\">String</span> message <span class=\\"token operator\\">=</span> <span class=\\"token constant\\">STR</span><span class=\\"token punctuation\\">.</span><span class=\\"token string\\">\\"Hello \\\\{name}!\\"</span><span class=\\"token punctuation\\">;</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ul>\\n</li>\\n</ol>","copyright":{},"autoDesc":true}');export{n as data};
