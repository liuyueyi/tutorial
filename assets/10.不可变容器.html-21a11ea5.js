import{_ as a,V as s,W as e,X as t,a1 as n}from"./framework-094145d2.js";const p={},c=n(`<h1 id="实战10-不可变容器" tabindex="-1"><a class="header-anchor" href="#实战10-不可变容器" aria-hidden="true">#</a> 实战10：不可变容器</h1><p>不可变容器，看着好像在实际的业务中不怎么会用到，但实则不然，相信每个小伙伴都用过，或者看到过下面的代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>今天我们来介绍一下如何使用不可变容器，以及使用时的注意事项</p>`,4),o=n(`<h2 id="_1-不可变容器" tabindex="-1"><a class="header-anchor" href="#_1-不可变容器" aria-hidden="true">#</a> 1. 不可变容器</h2><h3 id="_1-1-jdk不可变容器" tabindex="-1"><a class="header-anchor" href="#_1-1-jdk不可变容器" aria-hidden="true">#</a> 1.1. JDK不可变容器</h3><p>java原生提供了一些不可变容器，它们最大的特点就是不支持添加、删除、修改容器内的值</p><p><code>Collections.emptyXxx</code>空容器</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面三个是最常用的几个了，通常当我们一个方法的返回结果定义为容器类型时，可能为了避免npe，在返回空容器时，会如此使用</p><p>除了上面这几个空的不可变容器之外，还有</p><ul><li><code>UnmodifiableList</code></li><li><code>UnmodifiableMap</code></li><li><code>UnmodifiableSet</code></li></ul><p>它们的使用姿势，通常是借助<code>Collections</code>来实现</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableList</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如上面创建的List，就不支持set/remove等修改操作</p><p>使用不可变容容器，最大的好处就是基于它的不可修改特性，来实现公用，且不会被污染</p><ul><li>所以一个自然而然能想到的应用场景就是 <code>全局共享的配置</code></li></ul><h3 id="_1-2-guava不可变容器" tabindex="-1"><a class="header-anchor" href="#_1-2-guava不可变容器" aria-hidden="true">#</a> 1.2. Guava不可变容器</h3><p>上面是jdk提供的不可变容器，相比较与它们，在实际的项目中，使用Gauva的不可变容器的可能更多</p><ul><li><code>ImmutableXxx</code>；不可变容器</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">ImmutableList</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> <span class="token class-name">ImmutableSet</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token class-name">ImmutableMap</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面是最常见的三个容器对应的不可变型</p><p>从使用角度来看，初始化非常方便（相比较与jdk版而言）</p><h2 id="_2-注意事项" tabindex="-1"><a class="header-anchor" href="#_2-注意事项" aria-hidden="true">#</a> 2. 注意事项</h2><p>不可变容器虽好，但是使用不当也是很坑的；就我个人的一个观点</p><ul><li>如果是应用内的接口方法，容器传参，返回容器时，尽量不要使用不可变容器；因为你没办法保证别人拿到你的返回容器之后，会对它进行什么操作</li><li>如果是对外提供返回结果，特别是null的场景，使用不可变的空容器优于返回null</li><li>不可变容器，用于全局公用资源，共享配置参数；多线程的数据传递时，属于比较合适的场景</li></ul>`,22);function l(i,u){return s(),e("div",null,[c,t(" more "),o])}const k=a(p,[["render",l],["__file","10.不可变容器.html.vue"]]);export{k as default};
