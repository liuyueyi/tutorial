import{_ as p,V as o,W as i,X as c,Y as n,Z as s,$ as e,a1 as t,F as l}from"./framework-094145d2.js";const u="/tutorial/imgs/181019/00.gif",d={},r=t("<p>bean的条件注入，除了前面一篇博文中介绍的通过<code>@Conditional</code>注解配合<code>Condition</code>接口的实现之外，还提供了更多简化的注解使用方式，省略了自己实现<code>Condtion</code>接口，本篇博文主要介绍下面几个常用的注解使用方式</p><ul><li><code>@ConditionalOnBean</code></li><li><code>@ConditionalOnMissingBean</code></li><li><code>@ConditionalOnClass</code></li><li><code>@ConditionalOnMissingClass</code></li></ul>",2),k=t(`<h2 id="i-bean的存在与否作为条件" tabindex="-1"><a class="header-anchor" href="#i-bean的存在与否作为条件" aria-hidden="true">#</a> I. Bean的存在与否作为条件</h2><p>当Bean不存在时，创建一个默认的Bean，在Spring的生态中可以说比较常见了；接下来看下这种方式可以怎么用</p><h3 id="_1-conditionalonbean" tabindex="-1"><a class="header-anchor" href="#_1-conditionalonbean" aria-hidden="true">#</a> 1. <code>@ConditionalOnBean</code></h3><p>要求bean存在时，才会创建这个bean；如我提供了一个bean名为<code>RedisOperBean</code>，用于封装redis相关的操作；但是我这个bean需要依赖<code>restTemplate</code>这个bean，只有当应用引入了redis的相关依赖，并存在<code>RestTemplate</code>这个bean的时候，我这个bean才会生效</p><p>假设bean的定义如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;redisTemplate&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisOperBean</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token class-name">RedisOperBean</span><span class="token punctuation">(</span><span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样的好处就是我提供的这个第三方包，如果被用户A间接依赖（但是A本身不需要操作redis），也不会因为创建<code>RedisOperBean</code>而抛异常</p><blockquote><p>产生异常的原因是因为找不到RestTemplate的bean，因此无法实例化RedisOperBean，从而抛出异常</p></blockquote><h4 id="a-注解定义" tabindex="-1"><a class="header-anchor" href="#a-注解定义" aria-hidden="true">#</a> a. 注解定义</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span><span class="token class-name">OnBeanCondition</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">ConditionalOnBean</span> <span class="token punctuation">{</span>
  <span class="token comment">// bean类型</span>
	<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token comment">// bean类型</span>
	<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token comment">// 要求bean上拥有指定的注解</span>
	<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">annotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token comment">// bean names</span>
	<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token class-name">SearchStrategy</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">SearchStrategy</span><span class="token punctuation">.</span><span class="token constant">ALL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="b-测试用例" tabindex="-1"><a class="header-anchor" href="#b-测试用例" aria-hidden="true">#</a> b. 测试用例</h4><p>构建一个简单的测试用例，先定义一个基础的bean</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DependedBean</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>再定义一个依赖只有上面的bean存在时，才会加载的bean</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoadIfBeanExist</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">LoadIfBeanExist</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;load if bean exists: &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来就是bean的定义了</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">DependedBean</span> <span class="token function">dependedBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DependedBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 只有当DependedBean 存在时，才会创建bean: \`LoadIfBeanExist\`
 *
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;dependedBean&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">LoadIfBeanExist</span> <span class="token function">loadIfBeanExist</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LoadIfBeanExist</span><span class="token punctuation">(</span><span class="token string">&quot;dependedBean&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据上面的测试用例，<code>LoadIfBeanExist</code>是会被正常加载的; 具体结果看后面的实例演示</p><h3 id="_2-conditionalonmissingbean" tabindex="-1"><a class="header-anchor" href="#_2-conditionalonmissingbean" aria-hidden="true">#</a> 2. <code>ConditionalOnMissingBean</code></h3><p>和前面一个作用正好相反的，上面是要求存在bean，而这个是要求不存在</p><h4 id="a-接口定义" tabindex="-1"><a class="header-anchor" href="#a-接口定义" aria-hidden="true">#</a> a. 接口定义</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">ConditionalOnMissingBean</span> <span class="token punctuation">{</span>
	<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token doc-comment comment">/**
	 * The class type of beans that should be ignored when identifying matching beans.
	 */</span>
	<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">ignored</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token doc-comment comment">/**
	 * The class type names of beans that should be ignored when identifying matching
	 * beans.
	 */</span>
	<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">ignoredType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">annotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token class-name">SearchStrategy</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">SearchStrategy</span><span class="token punctuation">.</span><span class="token constant">ALL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="b-测试用例-1" tabindex="-1"><a class="header-anchor" href="#b-测试用例-1" aria-hidden="true">#</a> b. 测试用例</h4><p>同样定义一个bean不存在时，才创建的bean</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoadIfBeanNotExists</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">LoadIfBeanNotExists</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;load if bean not exists: &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的bean配置如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 只有当没有notExistsBean时，才会创建bean: \`LoadIfBeanNotExists\`
 *
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;notExistsBean&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">LoadIfBeanNotExists</span> <span class="token function">loadIfBeanNotExists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LoadIfBeanNotExists</span><span class="token punctuation">(</span><span class="token string">&quot;notExistsBean&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为没有notExistsBean，所以上面这个bean也应该被正常注册</p><h3 id="_3-实例演示" tabindex="-1"><a class="header-anchor" href="#_3-实例演示" aria-hidden="true">#</a> 3. 实例演示</h3><p>因为bean的是否存在和class的是否存在有较大的相似性，因此实例演示放在下一小节，一起测试</p><h2 id="ii-class的存在与否作为条件" tabindex="-1"><a class="header-anchor" href="#ii-class的存在与否作为条件" aria-hidden="true">#</a> II. Class的存在与否作为条件</h2><p>从使用来看，和前面基本上没有太大的区别，无非就是将bean换成了class；这样就可以避免因为<code>Class Not Found</code>导致的编译异常了</p><h3 id="_1-conditionalonclass" tabindex="-1"><a class="header-anchor" href="#_1-conditionalonclass" aria-hidden="true">#</a> 1. <code>@ConditionalOnClass</code></h3><p>要求class存在</p><h4 id="a-注解定义-1" tabindex="-1"><a class="header-anchor" href="#a-注解定义-1" aria-hidden="true">#</a> a. 注解定义</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">ConditionalOnClass</span> <span class="token punctuation">{</span>
	<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

	<span class="token doc-comment comment">/**
	 * The classes names that must be present.
	 * <span class="token keyword">@return</span> the class names that must be present.
	 */</span>
	<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="b-测试用例-2" tabindex="-1"><a class="header-anchor" href="#b-测试用例-2" aria-hidden="true">#</a> b. 测试用例</h4><p>先定义一个class</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DependedClz</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后依赖class存在的bean</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoadIfClzExists</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">LoadIfClzExists</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;load if exists clz: &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来就是Bean的配置</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 当引用了 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">DependedClz</span></span><span class="token punctuation">}</span> 类之后，才会创建bean： \`LoadIfClzExists\`
 *
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token class-name">DependedClz</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">LoadIfClzExists</span> <span class="token function">loadIfClzExists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LoadIfClzExists</span><span class="token punctuation">(</span><span class="token string">&quot;dependedClz&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为类存在，所以测试时，这个bean应该被正常注册</p><h3 id="_2-conditionalonmissingclass" tabindex="-1"><a class="header-anchor" href="#_2-conditionalonmissingclass" aria-hidden="true">#</a> 2. <code>@ConditionalOnMissingClass</code></h3><p>class不存在时，才会加载bean</p><h4 id="a-注解定义-2" tabindex="-1"><a class="header-anchor" href="#a-注解定义-2" aria-hidden="true">#</a> a. 注解定义</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">ConditionalOnMissingClass</span> <span class="token punctuation">{</span>
	<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="b-测试用例-3" tabindex="-1"><a class="header-anchor" href="#b-测试用例-3" aria-hidden="true">#</a> b. 测试用例</h4><p>定义一个class缺少时才会创建的bean</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoadIfClzNotExists</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">LoadIfClzNotExists</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;load if not exists clz: &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>bean的配置如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 当系统中没有 com.git.hui.boot.conditionbean.example.depends.clz.DependedClz类时，才会创建这个bean
 *
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token annotation punctuation">@ConditionalOnMissingClass</span><span class="token punctuation">(</span><span class="token string">&quot;com.git.hui.boot.conditionbean.example.depends.clz.DependedClz&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">LoadIfClzNotExists</span> <span class="token function">loadIfClzNotExists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LoadIfClzNotExists</span><span class="token punctuation">(</span><span class="token string">&quot;com.git.hui.boot.conditionbean.example.depends.clz.DependedClz&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为上面这个类存在，所以这个bean不应该被正常注册</p><h3 id="_3-实例演示-1" tabindex="-1"><a class="header-anchor" href="#_3-实例演示-1" aria-hidden="true">#</a> 3. 实例演示</h3><p>起一个rest服务，测试下上面的四个bean是否正常</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;depends&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DependRest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">LoadIfBeanExist</span> loadIfBeanExist<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">LoadIfBeanNotExists</span> loadIfBeanNotExists<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">LoadIfClzExists</span> loadIfClzExists<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">LoadIfClzNotExists</span> loadIfClzNotExists<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;show&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 存在</span>
        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;loadIfBeanExist&quot;</span><span class="token punctuation">,</span> loadIfBeanExist <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token string">&quot;null ==&gt; false!&quot;</span> <span class="token operator">:</span> loadIfBeanExist<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 存在</span>
        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;loadIfBeanNotExists&quot;</span><span class="token punctuation">,</span>
                loadIfBeanNotExists <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token string">&quot;null ==&gt; false!&quot;</span> <span class="token operator">:</span> loadIfBeanNotExists<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 存在</span>
        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;loadIfClzExists&quot;</span><span class="token punctuation">,</span> loadIfClzExists <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token string">&quot;null ==&gt; false!&quot;</span> <span class="token operator">:</span> loadIfClzExists<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 不存在</span>
        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;loadIfClzNotExists&quot;</span><span class="token punctuation">,</span> loadIfClzNotExists <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token string">&quot;null ==&gt; true!&quot;</span> <span class="token operator">:</span> loadIfClzNotExists<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据前面的分析，返回的结果应该是三个存在，一个不存在；下图执行和我们预期一致</p><figure><img src="`+u+'" alt="条件依赖注册演示" tabindex="0" loading="lazy"><figcaption>条件依赖注册演示</figcaption></figure><h2 id="iii-其他" tabindex="-1"><a class="header-anchor" href="#iii-其他" aria-hidden="true">#</a> III. 其他</h2><h3 id="_0-相关" tabindex="-1"><a class="header-anchor" href="#_0-相关" aria-hidden="true">#</a> 0. 相关</h3><h4 id="a-更多博文" tabindex="-1"><a class="header-anchor" href="#a-更多博文" aria-hidden="true">#</a> a. 更多博文</h4><p><strong>基础篇</strong></p>',63),v={href:"http://spring.hhui.top/spring-blog/2018/10/09/181009-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/",target:"_blank",rel:"noopener noreferrer"},m={href:"http://spring.hhui.top/spring-blog/2018/10/12/181012-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD/",target:"_blank",rel:"noopener noreferrer"},b={href:"http://spring.hhui.top/spring-blog/2018/10/13/181013-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C/",target:"_blank",rel:"noopener noreferrer"},g={href:"http://spring.hhui.top/spring-blog/2018/10/18/181018-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-Condition%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/",target:"_blank",rel:"noopener noreferrer"},h={href:"http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B-ConditionalOnBean%E4%B8%8E@ConditionalOnClass/",target:"_blank",rel:"noopener noreferrer"},f={href:"http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-ConditionalOnProperty/",target:"_blank",rel:"noopener noreferrer"},B={href:"http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-ConditionalOnExpression/",target:"_blank",rel:"noopener noreferrer"},E=n("p",null,[n("strong",null,"应用篇")],-1),y={href:"http://spring.hhui.top/spring-blog/2018/10/17/181017-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87Bean%E4%B9%8B%E6%B3%A8%E9%94%80%E4%B8%8E%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1mock/",target:"_blank",rel:"noopener noreferrer"},w=n("h4",{id:"b-项目源码",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#b-项目源码","aria-hidden":"true"},"#"),s(" b. 项目源码")],-1),x={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"},C={href:"https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/007-conditionbean",target:"_blank",rel:"noopener noreferrer"};function _(A,I){const a=l("ExternalLinkIcon");return o(),i("div",null,[r,c(" more "),k,n("ul",null,[n("li",null,[n("a",v,[s("181009-SpringBoot基础篇Bean之基本定义与使用"),e(a)])]),n("li",null,[n("a",m,[s("181012-SpringBoot基础篇Bean之自动加载"),e(a)])]),n("li",null,[n("a",b,[s("181013-SpringBoot基础篇Bean之动态注册"),e(a)])]),n("li",null,[n("a",g,[s("181018-SpringBoot基础篇Bean之条件注入@Condition使用姿势"),e(a)])]),n("li",null,[n("a",h,[s("181019-SpringBoot基础篇Bean之@ConditionalOnBean与@ConditionalOnClass"),e(a)])]),n("li",null,[n("a",f,[s("181019-SpringBoot基础篇Bean之条件注入@ConditionalOnProperty"),e(a)])]),n("li",null,[n("a",B,[s("181019-SpringBoot基础篇Bean之条件注入@ConditionalOnExpression"),e(a)])])]),E,n("ul",null,[n("li",null,[n("a",y,[s("181017-SpringBoot应用篇Bean之注销与动态注册实现服务mock"),e(a)])])]),w,n("ul",null,[n("li",null,[s("工程："),n("a",x,[s("spring-boot-demo"),e(a)])]),n("li",null,[s("module: "),n("a",C,[s("007-conditionbean"),e(a)])])])])}const j=p(d,[["render",_],["__file","06.181019-SpringBoot基础篇Bean之-ConditionalOnBean与@ConditionalOnClass.html.vue"]]);export{j as default};
