import{_ as t,V as p,W as o,Y as n,Z as s,$ as e,X as c,a1 as l,F as i}from"./framework-094145d2.js";const u="/tutorial/imgs/201226/00.jpg",r="/tutorial/imgs/201226/01.jpg",d={},k=n("p",null,[s("在之前有介绍过借助注解"),n("code",null,"@PropertySource"),s("来引入自定义的配置文件，在当时遇到抛出了一个问题，通过这个注解可以正确获取到"),n("code",null,".properties"),s("文件的配置信息，但是"),n("code",null,"yaml"),s("文件却读取不到，最近又碰到这个问题，正好把之前挖的坑填上；本文将主要定位一下，为啥yml文件读取不了，又可以如何处理")],-1),v={href:"https://spring.hhui.top/spring-blog/2018/09/21/180921-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%8C%87%E5%AE%9A%E4%B8%8E%E9%85%8D%E7%BD%AE%E5%86%85%E5%BC%95%E7%94%A8/",target:"_blank",rel:"noopener noreferrer"},m=l(`<h2 id="i-项目环境" tabindex="-1"><a class="header-anchor" href="#i-项目环境" aria-hidden="true">#</a> I. 项目环境</h2><h3 id="_1-基本配置" tabindex="-1"><a class="header-anchor" href="#_1-基本配置" aria-hidden="true">#</a> 1. 基本配置</h3><p>本文后续的源码定位以及实例演示都是基于<code>SpringBoot 2.2.1.RELEASE</code>进行，如需复现本文中的case，请确保环境一致</p><ul><li>IDEA</li><li>MAVEN</li><li>SpringBoot 2.2.1.RELEASE</li><li>JDK1.8</li></ul><h3 id="_2-实例项目" tabindex="-1"><a class="header-anchor" href="#_2-实例项目" aria-hidden="true">#</a> 2. 实例项目</h3><p>创建一个SpringBoot项目，用于后续的演示，首先创建一个配置文件<code>biz.properties</code></p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">biz.token</span><span class="token punctuation">=</span><span class="token value attr-value">mytoken</span>
<span class="token key attr-name">biz.appKey</span><span class="token punctuation">=</span><span class="token value attr-value">asdf</span>
<span class="token key attr-name">biz.appVersion</span><span class="token punctuation">=</span><span class="token value attr-value">1</span>
<span class="token key attr-name">biz.source</span><span class="token punctuation">=</span><span class="token value attr-value">xxx.yyy</span>

<span class="token key attr-name">biz.uuid</span><span class="token punctuation">=</span><span class="token value attr-value">\${biz.token}#\${biz.appKey}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来定义对应的配置类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;classpath:biz.properties&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;biz&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OtherProperBean</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> token<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> appKey<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> appVersion<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> source<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> uuid<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后补上SpringBoot项目不可获取的启动类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Created by @author yihui in 14:08 18/9/19.
 */</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-propertysource原理分析" tabindex="-1"><a class="header-anchor" href="#ii-propertysource原理分析" aria-hidden="true">#</a> II. PropertySource原理分析</h2><p>想要定位为啥<code>@PropertySource</code>注解只会获取到<code>properties</code>文件的配置，而不能获取<code>yaml</code>文件配置信息，最直接的办法当然是直接撸源码（实际上最简单的办法直接借助搜索引擎，看一下有没有哪位大佬有过相关分享，如果不是为了写本文，我可是完全没想开撸，毕竟从提出这个问题到现在回复，也过了两年多了😭...）</p><h3 id="_1-源码定位" tabindex="-1"><a class="header-anchor" href="#_1-源码定位" aria-hidden="true">#</a> 1. 源码定位</h3><p>那么这个源码可以怎么定位分析呢，先直接进入这个注解瞅一下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">PropertySource</span> <span class="token punctuation">{</span>
  <span class="token comment">// ... 省略无关的属性</span>

	<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">PropertySourceFactory</span><span class="token punctuation">&gt;</span></span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">PropertySourceFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意上面的特意留出来的<code>PropertySourceFactory</code>, 从命名上来看，大致就能感觉这个工厂类与属性有关了，主要就是为了创建<code>PropertySource</code>对象</p><p>它就比较有意思了，如果没有猜错的话，配置文件加载到Spring容器之后，多半就会与<code>PropertySource</code>关联起来了（所以说好的命名可以省很多注释说明）</p><p>接下来看一下这个工厂类的默认实现<code>DefaultPropertySourceFactory</code>，源码很简单</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultPropertySourceFactory</span> <span class="token keyword">implements</span> <span class="token class-name">PropertySourceFactory</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token class-name">PropertySource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">createPropertySource</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">EncodedResource</span> resource<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token punctuation">(</span>name <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">ResourcePropertySource</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> resource<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">ResourcePropertySource</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里我们打个断点，确认一下会发生什么神器的事情</p><figure><img src="`+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从上面的截图可以看到，这个<code>EncodedResource</code>包含了我们指定的配置文件，直接单步进去，可以看到执行的时候下面这个</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// org.springframework.core.io.support.ResourcePropertySource#ResourcePropertySource(org.springframework.core.io.support.EncodedResource)</span>
<span class="token keyword">public</span> <span class="token class-name">ResourcePropertySource</span><span class="token punctuation">(</span><span class="token class-name">EncodedResource</span> resource<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
		<span class="token keyword">super</span><span class="token punctuation">(</span><span class="token function">getNameForResource</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">PropertiesLoaderUtils</span><span class="token punctuation">.</span><span class="token function">loadProperties</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>resourceName <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，核心代码不是<code>super()</code>这个构造方法，而是传参的<code>PropertiesLoaderUtils.loadProperties(resource)</code></p><p>上面这一行调用，就是实现具体的从配置文件中获取配置信息</p><p>下面是具体的实现（摘抄有用的部分逻辑）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// org.springframework.core.io.support.PropertiesLoaderUtils</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Properties</span> <span class="token function">loadProperties</span><span class="token punctuation">(</span><span class="token class-name">EncodedResource</span> resource<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
	<span class="token class-name">Properties</span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">fillProperties</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> props<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fillProperties</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> props<span class="token punctuation">,</span> <span class="token class-name">EncodedResource</span> resource<span class="token punctuation">)</span>
		<span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
  <span class="token comment">// 属性填充，注意DefaultPropertiesPersister</span>
	<span class="token function">fillProperties</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> resource<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DefaultPropertiesPersister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fillProperties</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> props<span class="token punctuation">,</span> <span class="token class-name">EncodedResource</span> resource<span class="token punctuation">,</span> <span class="token class-name">PropertiesPersister</span> persister<span class="token punctuation">)</span>
		<span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token keyword">try</span> <span class="token punctuation">{</span>
		<span class="token class-name">String</span> filename <span class="token operator">=</span> resource<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>filename <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> filename<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token constant">XML_FILE_EXTENSION</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			stream <span class="token operator">=</span> resource<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">// 这个是关键</span>
			persister<span class="token punctuation">.</span><span class="token function">loadFromXml</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">requiresReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			reader <span class="token operator">=</span> resource<span class="token punctuation">.</span><span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">// 关键调用</span>
			persister<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> reader<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span> <span class="token punctuation">{</span>
			stream <span class="token operator">=</span> resource<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">// 关键调用</span>
			persister<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> stream<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置信息的读取，最终依靠的就是<code>org.springframework.util.DefaultPropertiesPersister#load()</code>，到这里我们基本上就找到了从配置文件中读取配置的“幕后黑手”，直接看一下它的实现逻辑就能知道为啥不支持yaml了</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultPropertiesPersister</span> <span class="token keyword">implements</span> <span class="token class-name">PropertiesPersister</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> props<span class="token punctuation">,</span> <span class="token class-name">InputStream</span> is<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
		props<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> props<span class="token punctuation">,</span> <span class="token class-name">Reader</span> reader<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
		props<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接进入看到源码，非常简单直观的实现方式了，直接使用jdk的<code>java.util.Properties#load(java.io.InputStream)</code>来读取配置文件，所以真相已经大白了（原来都是jdk的锅😂）</p><h3 id="_2-yaml文件支持" tabindex="-1"><a class="header-anchor" href="#_2-yaml文件支持" aria-hidden="true">#</a> 2. yaml文件支持</h3><p>经过上面的一番操作，我们知道<code>@ConfigurationProperties</code>加载配置文件，主要是借助jdk的<code>Properties#load</code>方法来读取配置文件到容器内，那么若我们希望加载yaml配置文件，可以怎么搞呢？</p><p>因为SpringBoot是支持yaml配置文件的读取的，所以我们完全可以扩展一下，借助SpringBoot的工具类来实现配置文件加载，所以可以实现自定义的<code>PropertySourceFactory</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">YamlSourceFactory</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultPropertySourceFactory</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">PropertySource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">createPropertySource</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">EncodedResource</span> resource<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>resource <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">createPropertySource</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 这里使用Yaml配置加载类来读取yml文件信息</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PropertySource</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> sources <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">YamlPropertySourceLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> resource<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> sources<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后再我们希望使用的地方，利用自定义的工厂类替换默认的即可</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;classpath:biz2.yml&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> factory <span class="token operator">=</span> <span class="token class-name">YamlSourceFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;biz2.yml&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">YmlProperties</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">Integer</span> type<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> ary<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的配置文件如下</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">biz2</span><span class="token punctuation">:</span>
  <span class="token key atrule">yml</span><span class="token punctuation">:</span>
    <span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token number">1</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> biz.yml.name
    <span class="token key atrule">ary</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token key atrule">a</span><span class="token punctuation">:</span> hello
      <span class="token punctuation">-</span> <span class="token key atrule">b</span><span class="token punctuation">:</span> world
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后实例验证一下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">Application</span><span class="token punctuation">(</span><span class="token class-name">YmlProperties</span> ymlProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ymlProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-小结" tabindex="-1"><a class="header-anchor" href="#_3-小结" aria-hidden="true">#</a> 3. 小结</h3><p>当我们希望加载自定义的配置文件时，<code>@PropertySource</code>注解是一个非常好的选择（当然也可以借助多环境配置方案，指定<code>spring.profiles.active</code>的值，实现加载前缀为<code>application-</code>的配置文件，有兴趣的小伙伴可以查看我之前的博文）</p><p>请注意<code>@PropertySource</code>引入的配置文件不支持<code>yaml</code>文件，如需支持，可以参考本文中的实现方式，自定义一个yaml文件的<code>PropertySourceFactory</code></p><p>最后提一句，遇到问题千万不要放过，尽量迅速解决，不要留待以后，不然拖延症发作的话，这个时间可能就一直悬着了...</p><h2 id="iii-其他" tabindex="-1"><a class="header-anchor" href="#iii-其他" aria-hidden="true">#</a> III. 其他</h2><h3 id="_0-项目" tabindex="-1"><a class="header-anchor" href="#_0-项目" aria-hidden="true">#</a> 0. 项目</h3><p><strong>项目源码</strong></p>',49),b={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/000-properties",target:"_blank",rel:"noopener noreferrer"},y=n("p",null,[n("strong",null,"系列博文")],-1),E={href:"https://spring.hhui.top/spring-blog/2020/05/07/200507-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E5%8A%A0%E8%BD%BD%E5%99%A8/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://spring.hhui.top/spring-blog/2018/09/25/180925-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://spring.hhui.top/spring-blog/2018/09/22/180922-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E9%85%8D%E7%BD%AE%E5%88%B7%E6%96%B0/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://spring.hhui.top/spring-blog/2018/09/21/180921-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%8C%87%E5%AE%9A%E4%B8%8E%E9%85%8D%E7%BD%AE%E5%86%85%E5%BC%95%E7%94%A8/",target:"_blank",rel:"noopener noreferrer"},A={href:"https://spring.hhui.top/spring-blog/2018/09/20/180920-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/",target:"_blank",rel:"noopener noreferrer"},B={href:"https://spring.hhui.top/spring-blog/2018/09/19/180919-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E5%A6%82%E4%BD%95%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/",target:"_blank",rel:"noopener noreferrer"};function S(_,P){const a=i("ExternalLinkIcon");return p(),o("div",null,[k,n("p",null,[s("如对之前博文有兴趣的小伙伴，可以查看: "),n("a",v,[s("180921-SpringBoot基础篇配置信息之自定义配置指定与配置内引用"),e(a)])]),c(" more "),m,n("ul",null,[n("li",null,[s("工程: "),n("a",b,[s("https://github.com/liuyueyi/spring-boot-demo"),e(a)])]),n("li",null,[s("源码: "),n("a",g,[s("https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/000-properties"),e(a)])])]),y,n("ul",null,[n("li",null,[n("a",E,[s("【基础系列】实现一个自定义配置加载器（应用篇）"),e(a)])]),n("li",null,[n("a",h,[s("【基础系列】SpringBoot配置信息之默认配置"),e(a)])]),n("li",null,[n("a",f,[s("【基础系列】SpringBoot配置信息之配置刷新"),e(a)])]),n("li",null,[n("a",w,[s("【基础系列】SpringBoot基础篇配置信息之自定义配置指定与配置内引用"),e(a)])]),n("li",null,[n("a",A,[s("【基础系列】SpringBoot基础篇配置信息之多环境配置信息"),e(a)])]),n("li",null,[n("a",B,[s("【基础系列】SpringBoot基础篇配置信息之如何读取配置信息"),e(a)])])])])}const x=t(d,[["render",S],["__file","07.201226-SpringBoot系列PropertySource加载Yaml配置文件实例演示.html.vue"]]);export{x as default};
