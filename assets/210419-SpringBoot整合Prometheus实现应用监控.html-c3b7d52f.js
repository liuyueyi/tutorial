import{_ as p,V as o,W as i,Y as n,Z as a,$ as t,X as c,a1 as e,F as l}from"./framework-094145d2.js";const u="/tutorial/imgs/210419/00.png",r="/tutorial/imgs/210419/01.png",d="/tutorial/imgs/210419/02.png",k="/tutorial/imgs/210419/03.png",m="/tutorial/imgs/210419/04.png",g="/tutorial/imgs/210419/05.png",h="/tutorial/imgs/210419/06.png",v="/tutorial/imgs/210419/07.png",b="/tutorial/imgs/210419/08.png",_="/tutorial/imgs/210419/09.png",f="/tutorial/imgs/210419/10.png",y={},x=n("h3",{id:"_1-prometheus-安装",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-prometheus-安装","aria-hidden":"true"},"#"),a(" 1. prometheus 安装")],-1),w={href:"https://www.prometheus.wang/quickstart/install-prometheus-server.html",target:"_blank",rel:"noopener noreferrer"},q=n("h4",{id:"_1-1-什么是prometheus",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-1-什么是prometheus","aria-hidden":"true"},"#"),a(" 1.1 什么是Prometheus")],-1),S=n("blockquote",null,[n("p",null,"普罗米修斯：Prometheus是一个开放性的监控解决方案，用户可以非常方便的安装和使用Prometheus并且能够非常方便的对其进行扩展")],-1),I=n("p",null,"下面将实现一个SpringBoot应用接入Prometheus的全过程",-1),B=n("h4",{id:"_1-2-安装",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-2-安装","aria-hidden":"true"},"#"),a(" 1.2 安装")],-1),z=n("p",null,"Linux 安装",-1),E={href:"https://prometheus.io/download/",target:"_blank",rel:"noopener noreferrer"},P=e(`<p>下载本地安装启动</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">wget</span> https://github.com/prometheus/prometheus/releases/download/v2.26.0/prometheus-2.26.0.linux-amd64.tar.gz

<span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> prometheus-2.26.0.linux-amd64.tar.gz
<span class="token builtin class-name">cd</span> prometheus-2.26.0.linux-amd64

<span class="token comment"># 启动命令</span>
./prometheus
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),A={href:"http://127.0.0.1:9090/graph",target:"_blank",rel:"noopener noreferrer"},C=e(`<h3 id="_2-springboot应用接入" tabindex="-1"><a class="header-anchor" href="#_2-springboot应用接入" aria-hidden="true">#</a> 2. SpringBoot应用接入</h3><p>我们演示的SpringBoot为2.0+，因此直接选择<code>io.micrometer</code> 的依赖包来实现；更低版本的不能使用这种姿势，可以直接使用官方提供的client来实现；这里不进行扩展</p><h4 id="_2-1-依赖配置" tabindex="-1"><a class="header-anchor" href="#_2-1-依赖配置" aria-hidden="true">#</a> 2.1 依赖配置</h4><p>借助SpringBoot的actuator来提供扩展端点（所以本文采用的是Prometheus的拉工作模式）</p><p>SpringBoot版本为 <code>2.2.1.RELEASE</code></p><p>核心依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.micrometer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>micrometer-registry-prometheus<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>yaml配置文件，需要指定Prometheus相关的参数，一个demo如下</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> prometheus<span class="token punctuation">-</span>example
<span class="token key atrule">management</span><span class="token punctuation">:</span>
  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>
    <span class="token key atrule">web</span><span class="token punctuation">:</span>
      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>
        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">&quot;*&quot;</span>
  <span class="token key atrule">metrics</span><span class="token punctuation">:</span>
    <span class="token key atrule">tags</span><span class="token punctuation">:</span>
      <span class="token key atrule">application</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong></p><ul><li><code>management.endpoints.web.exposure.include</code> 这里指定所有的web接口都会上报</li><li><code>metrics.tags.application</code> 这个应用所有上报的metrics 都会带上<code>application</code>这个标签</li></ul><p>上面配置完毕之后，会提供一个 <code>/actuator/prometheus</code>的端点，供prometheus来拉取Metrics信息</p><h4 id="_2-2-应用启动" tabindex="-1"><a class="header-anchor" href="#_2-2-应用启动" aria-hidden="true">#</a> 2.2 应用启动</h4><p>对于SpringBoot而言，此时就不需要额外做什么，就可以实现应用的基本信息上报了</p><p>一个简单的demo如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
    <span class="token comment">// 一个用于演示的http接口</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> sleep <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>sleep<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token string">&quot;hello sleep: &quot;</span> <span class="token operator">+</span> sleep <span class="token operator">+</span> <span class="token string">&quot; for &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 注意，这个是注册的核心代码块</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token class-name">MeterRegistryCustomizer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MeterRegistry</span><span class="token punctuation">&gt;</span></span> <span class="token function">configurer</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${spring.application.name}&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> applicationName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>registry<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> registry<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">commonTags</span><span class="token punctuation">(</span><span class="token string">&quot;application&quot;</span><span class="token punctuation">,</span> applicationName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到此，springboot应用的监控就算是完成了；接下来配置一下prometheus的服务端</p><h3 id="_3-prometheus-配置与实测" tabindex="-1"><a class="header-anchor" href="#_3-prometheus-配置与实测" aria-hidden="true">#</a> 3. prometheus 配置与实测</h3><p>在前面下载的包下面，有一个配置文件 <code>prometheus.yml</code>，新增一个Job</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code>  <span class="token punctuation">-</span> <span class="token key atrule">job_name</span><span class="token punctuation">:</span> <span class="token string">&#39;prometheus-example&#39;</span>
  	<span class="token comment"># 抓取频率</span>
    <span class="token key atrule">scrape_interval</span><span class="token punctuation">:</span> 5s
    <span class="token comment"># 抓取的端点</span>
    <span class="token key atrule">metrics_path</span><span class="token punctuation">:</span> <span class="token string">&#39;/actuator/prometheus&#39;</span>
    <span class="token key atrule">static_configs</span><span class="token punctuation">:</span>
    	<span class="token comment"># 目标机器，数组，也就是说支持集群拉取</span>
      <span class="token punctuation">-</span> <span class="token key atrule">targets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;127.0.0.1:8080&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改配置之后，需要重启一下，当服务启动之后，可以在控制台上我们的应用信息</p><figure><img src="`+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>接下来访问Graph，选择metric: <code>http_server_requests_seconds_count</code> 可以看到一条抓起metric的记录</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>前面我们定义了一个Controller，接下来简单访问几次，然后再看一下，会发现多一条记录</p><figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这些数据由框架层直接集成，实现REST接口的相关信息上报，借助这个metric，我们可以实现qps的统计</p><h4 id="_3-1-qps统计" tabindex="-1"><a class="header-anchor" href="#_3-1-qps统计" aria-hidden="true">#</a> 3.1 qps统计</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sum<span class="token punctuation">(</span>rate<span class="token punctuation">(</span>http_server_requests_seconds_count<span class="token punctuation">{</span>application<span class="token operator">=</span><span class="token string">&quot;prometheus-example&quot;</span><span class="token punctuation">}</span><span class="token punctuation">[</span>10s<span class="token punctuation">]</span><span class="token punctuation">))</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>rate: 用于统计增长趋势，要求上报的Metric为Counter类型（只增不减）</li><li>irate: 与rate相似，区别在于rate统计的是一段时间内的平均增长速率，无法反应这个时间窗口内的突发情况（即瞬时高峰），irate通过区间向量中最后两个样本数据来计算增长速率，但是当选用的区间范围较大时，可能造成不小的偏差</li><li>sum: 求和，适用于统计场景</li></ul>',31),N={href:"https://www.prometheus.wang/promql/prometheus-promql-functions.html",target:"_blank",rel:"noopener noreferrer"},R=e(`<h4 id="_3-2-耗时统计" tabindex="-1"><a class="header-anchor" href="#_3-2-耗时统计" aria-hidden="true">#</a> 3.2 耗时统计</h4><p>除了qps，另外一个经常关注的指标就是rt了，如上面接口的平均rt，通过两个Metric的组合来实现</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sum<span class="token punctuation">(</span>rate<span class="token punctuation">(</span>http_server_requests_seconds_sum<span class="token punctuation">{</span>application<span class="token operator">=</span><span class="token string">&quot;prometheus-example&quot;</span><span class="token punctuation">}</span><span class="token punctuation">[</span>10s<span class="token punctuation">]</span><span class="token punctuation">))</span> / sum<span class="token punctuation">(</span>rate<span class="token punctuation">(</span>http_server_requests_seconds_count<span class="token punctuation">{</span>application<span class="token operator">=</span><span class="token string">&quot;prometheus-example&quot;</span><span class="token punctuation">}</span><span class="token punctuation">[</span>10s<span class="token punctuation">]</span><span class="token punctuation">))</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>将sum聚合去掉之后，则可以看到各接口的访问情况</p><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_4-grafana-大盘配置" tabindex="-1"><a class="header-anchor" href="#_4-grafana-大盘配置" aria-hidden="true">#</a> 4. Grafana 大盘配置</h3><p>面板监控，还是Grafana的比较强大，特别是grafana本身提供了很多模板可以直接导入</p>',8),V={href:"https://blog.hhui.top/hexblog/2021/03/18/210318-linux-grafana%E5%A4%A7%E7%9B%98%E6%8E%A5%E5%85%A5mysql/",target:"_blank",rel:"noopener noreferrer"},M=e('<h4 id="_4-1-大盘配置" tabindex="-1"><a class="header-anchor" href="#_4-1-大盘配置" aria-hidden="true">#</a> 4.1 大盘配置</h4><p>grafana启动之后，配置数据源Promethues</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>接下来配置SpringBoot的应用配置面板，可以直接使用现成的模板，比如 12856</p><figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>导入完毕之后，大盘展示如下</p><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>可以看一下请求耗时的统计promql</p><figure><img src="'+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_4-2-大盘模板哪里找" tabindex="-1"><a class="header-anchor" href="#_4-2-大盘模板哪里找" aria-hidden="true">#</a> 4.2 大盘模板哪里找</h4><p>如何找直接可用的大盘呢？</p>',11),L=n("li",null,"官网的大盘上查找即可",-1),T={href:"https://grafana.com/grafana/dashboards?dataSource=prometheus&search=spring",target:"_blank",rel:"noopener noreferrer"},j=n("li",null,[a("选择一个，点进去之后，右边的"),n("code",null,"Copy ID toClipboard"),a(" 对应的数字就是我们需要的")],-1),G=e('<figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_5-小结" tabindex="-1"><a class="header-anchor" href="#_5-小结" aria-hidden="true">#</a> 5. 小结</h3><p>上面整个流程走下来会发现SpringBoot项目接入Prometheus成本很低，基本上没有太多的编码工作，就可以配置给功能集全的监控大盘，简直不要太嗨</p><p>高度封装的便捷性再这里体现得非常突出了，但是搞完之后，再回想一下，我get到了什么？</p><p>好像什么都没get到，如果我的服务只提供grpc/dubbo接口，现在假设让我们接入监控，好像还是抓瞎，这该怎么玩</p><h2 id="ii-其他" tabindex="-1"><a class="header-anchor" href="#ii-其他" aria-hidden="true">#</a> II. 其他</h2><h3 id="_0-项目" tabindex="-1"><a class="header-anchor" href="#_0-项目" aria-hidden="true">#</a> 0. 项目</h3>',7),$={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"},D={href:"https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/420-prometheus-basic",target:"_blank",rel:"noopener noreferrer"};function F(J,Q){const s=l("ExternalLinkIcon");return o(),i("div",null,[x,n("p",null,[a("教程文档: "),n("a",w,[a("https://www.prometheus.wang/quickstart/install-prometheus-server.html"),t(s)])]),q,S,c(" more "),I,B,z,n("ul",null,[n("li",null,[a("官网指定下载包: "),n("a",E,[a("https://prometheus.io/download/"),t(s)])])]),P,n("p",null,[a("启动完毕之后，本地访问 "),n("a",A,[a("http://127.0.0.1:9090/graph"),t(s)]),a(" 可以看到默认提供的界面")]),C,n("p",null,[a("更多内置函数，可以参考: "),n("a",N,[a("PromQL内置函数"),t(s)])]),R,n("blockquote",null,[n("p",null,[a("安装可以参考: "),n("a",V,[a("210318-linux grafana大盘接入mysql"),t(s)])])]),M,n("ul",null,[L,n("li",null,[a("如 "),n("a",T,[a("https://grafana.com/grafana/dashboards?dataSource=prometheus&search=spring"),t(s)])]),j]),G,n("ul",null,[n("li",null,[a("工程："),n("a",$,[a("https://github.com/liuyueyi/spring-boot-demo"),t(s)])]),n("li",null,[a("项目源码: "),n("a",D,[a("https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/420-prometheus-basic"),t(s)])])])])}const X=p(y,[["render",F],["__file","210419-SpringBoot整合Prometheus实现应用监控.html.vue"]]);export{X as default};
