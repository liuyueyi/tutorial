import{_ as p,V as e,W as o,X as c,Y as n,Z as s,$ as t,a1 as l,F as u}from"./framework-094145d2.js";const i={},k=n("p",null,[s("在Spring项目中，通常会借助"),n("code",null,"RestTemplate"),s("来实现网络请求，RestTemplate封装得很完善了，基本上可以非常简单的完成各种HTTP请求，本文主要介绍一下基本操作，最常见的GET/POST请求的使用姿势")],-1),r=l(`<h2 id="i-项目搭建" tabindex="-1"><a class="header-anchor" href="#i-项目搭建" aria-hidden="true">#</a> I. 项目搭建</h2><h3 id="_1-配置" tabindex="-1"><a class="header-anchor" href="#_1-配置" aria-hidden="true">#</a> 1. 配置</h3><p>借助SpringBoot搭建一个SpringWEB项目，提供一些用于测试的REST服务</p><ul><li>SpringBoot版本: <code>2.2.1.RELEASE</code></li><li>核心依赖: <code>spring-boot-stater-web</code></li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了后续输出的日志更直观，这里设置了一下日志输出格式，在配置文件<code>application.yml</code>中，添加</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">logging</span><span class="token punctuation">:</span>
  <span class="token key atrule">pattern</span><span class="token punctuation">:</span>
    <span class="token key atrule">console</span><span class="token punctuation">:</span> (%msg%n%n)<span class="token punctuation">{</span>blue<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-rest服务" tabindex="-1"><a class="header-anchor" href="#_2-rest服务" aria-hidden="true">#</a> 2. Rest服务</h3><p>添加三个接口，分别提供GET请求，POST表单，POST json对象，然后返回请求头、请求参数、cookie，具体实现逻辑相对简单，也不属于本篇重点，因此不赘述说明</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoRest</span> <span class="token punctuation">{</span>


    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> headerNames <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeaderNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> name<span class="token punctuation">;</span>

        <span class="token class-name">JSONObject</span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>headerNames<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            name <span class="token operator">=</span> headerNames<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            headers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> headers<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getParams</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Cookie</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cookies <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> cookies<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">JSONObject</span> ck <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Cookie</span> cookie <span class="token operator">:</span> cookies<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ck<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> ck<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">buildResult</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">buildResult</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">buildResult</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> params <span class="token operator">=</span> <span class="token function">getParams</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> headers <span class="token operator">=</span> <span class="token function">getHeaders</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> cookies <span class="token operator">=</span> <span class="token function">getCookies</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            params <span class="token operator">+=</span> <span class="token string">&quot; | &quot;</span> <span class="token operator">+</span> obj<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token string">&quot;params: &quot;</span> <span class="token operator">+</span> params <span class="token operator">+</span> <span class="token string">&quot;\\nheaders: &quot;</span> <span class="token operator">+</span> headers <span class="token operator">+</span> <span class="token string">&quot;\\ncookies: &quot;</span> <span class="token operator">+</span> cookies<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;get&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">buildResult</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;post&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">buildResult</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Data</span>
    <span class="token annotation punctuation">@NoArgsConstructor</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ReqBody</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">4536744669004135021L</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;body&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">postBody</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">ReqBody</span> body<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span>
                <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">)</span> <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">buildResult</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-resttemplate示例" tabindex="-1"><a class="header-anchor" href="#ii-resttemplate示例" aria-hidden="true">#</a> II. RestTemplate示例</h2><h3 id="_1-get请求" tabindex="-1"><a class="header-anchor" href="#_1-get请求" aria-hidden="true">#</a> 1. Get请求</h3><p>使用RestTemplate发起GET请求，通常有两种常见的方式</p><ul><li>getForEntity: 返回的正文对象包装在<code>HttpEntity</code>实体中，适用于获取除了返回的正文之外，对返回头、状态码有需求的场景</li><li>getForObject: 返回正文，适用于只对正文感兴趣的场景</li></ul><p>上面这两种方法除了返回结果不同之外，其他的使用姿势基本一样，有三种</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Nullable</span>
<span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> responseType<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> uriVariables<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RestClientException</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Nullable</span>
<span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> responseType<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> uriVariables<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RestClientException</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Nullable</span>
<span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token class-name">URI</span> url<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> responseType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RestClientException</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面三个重载方法，区别仅在于GET参数如何处理，下面给出一个实例进行说明</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 基本的get请求
 */</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">basicGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">RestTemplate</span> restTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span>
            restTemplate<span class="token punctuation">.</span><span class="token function">getForEntity</span><span class="token punctuation">(</span><span class="token string">&quot;http://127.0.0.1:8080/get?name=一灰灰Blog&amp;age=20&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span>get
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Simple getForEntity res: {}&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 直接在url中拼参数，调用的是前面对应的方法1; 当然这里也可以将url转成URI格式，这样调用的是方法3</span>
    <span class="token class-name">String</span> response <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">&quot;http://127.0.0.1:8080/get?name=一灰灰Blog&amp;age=20&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Simple getForObject res: {}&quot;</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 通过可变参数，填充url参数中的{?}, 注意顺序是对应的</span>
    response <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">&quot;http://127.0.0.1:8080/get?name={?}&amp;age={?}&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;一灰灰Blog&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Simple getForObject by uri params: {}&quot;</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 参数放在map中，通过map的key与url中的{}进行匹配，实现参数替换</span>
    response <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">&quot;http://127.0.0.1:8080/get?name={name}&amp;age={age}&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token punctuation">{</span>
                    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;一灰灰Blog&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Simple getForObject by uri map params: {}&quot;</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>Simple getForEntity res: <span class="token operator">&lt;</span><span class="token number">200</span>,params: <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span>:<span class="token punctuation">[</span><span class="token string">&quot;一灰灰Blog&quot;</span><span class="token punctuation">]</span>,<span class="token string">&quot;age&quot;</span>:<span class="token punctuation">[</span><span class="token string">&quot;20&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
headers: <span class="token punctuation">{</span><span class="token string">&quot;host&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;127.0.0.1:8080&quot;</span>,<span class="token string">&quot;connection&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;keep-alive&quot;</span>,<span class="token string">&quot;accept&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;text/plain, application/json, application/*+json, */*&quot;</span>,<span class="token string">&quot;user-agent&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;Java/1.8.0_171&quot;</span><span class="token punctuation">}</span>
cookies: ,<span class="token punctuation">[</span>Content-Type:<span class="token string">&quot;text/plain;charset=UTF-8&quot;</span>, Content-Length:<span class="token string">&quot;213&quot;</span>, Date:<span class="token string">&quot;Wed, 17 Jun 2020 01:14:16 GMT&quot;</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>

<span class="token punctuation">(</span>Simple getForObject res: params: <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span>:<span class="token punctuation">[</span><span class="token string">&quot;一灰灰Blog&quot;</span><span class="token punctuation">]</span>,<span class="token string">&quot;age&quot;</span>:<span class="token punctuation">[</span><span class="token string">&quot;20&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
headers: <span class="token punctuation">{</span><span class="token string">&quot;host&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;127.0.0.1:8080&quot;</span>,<span class="token string">&quot;connection&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;keep-alive&quot;</span>,<span class="token string">&quot;accept&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;text/plain, application/json, application/*+json, */*&quot;</span>,<span class="token string">&quot;user-agent&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;Java/1.8.0_171&quot;</span><span class="token punctuation">}</span>
cookies: 

<span class="token punctuation">(</span>Simple getForObject by uri params: params: <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span>:<span class="token punctuation">[</span><span class="token string">&quot;一灰灰Blog&quot;</span><span class="token punctuation">]</span>,<span class="token string">&quot;age&quot;</span>:<span class="token punctuation">[</span><span class="token string">&quot;20&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
headers: <span class="token punctuation">{</span><span class="token string">&quot;host&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;127.0.0.1:8080&quot;</span>,<span class="token string">&quot;connection&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;keep-alive&quot;</span>,<span class="token string">&quot;accept&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;text/plain, application/json, application/*+json, */*&quot;</span>,<span class="token string">&quot;user-agent&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;Java/1.8.0_171&quot;</span><span class="token punctuation">}</span>
cookies: 

<span class="token punctuation">(</span>Simple getForObject by uri map params: params: <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span>:<span class="token punctuation">[</span><span class="token string">&quot;一灰灰Blog&quot;</span><span class="token punctuation">]</span>,<span class="token string">&quot;age&quot;</span>:<span class="token punctuation">[</span><span class="token string">&quot;20&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
headers: <span class="token punctuation">{</span><span class="token string">&quot;host&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;127.0.0.1:8080&quot;</span>,<span class="token string">&quot;connection&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;keep-alive&quot;</span>,<span class="token string">&quot;accept&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;text/plain, application/json, application/*+json, */*&quot;</span>,<span class="token string">&quot;user-agent&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;Java/1.8.0_171&quot;</span><span class="token punctuation">}</span>
cookies: 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-post表单" tabindex="-1"><a class="header-anchor" href="#_2-post表单" aria-hidden="true">#</a> 2. POST表单</h3><p>POST表单属于非常基础的请求方式了，根据返回结果，RestTemplate同样提供了两种姿势</p><ul><li>postForEntity: 返回的正文封装在HttpEntity</li><li>postForObject: 直接返回正文对象</li></ul><p>它的使用姿势一样有三种</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Nullable</span>
<span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">postForObject</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> request<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> responseType<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> uriVariables<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Nullable</span>
<span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">postForObject</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> request<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> responseType<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> uriVariables<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Nullable</span>
<span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">postForObject</span><span class="token punctuation">(</span><span class="token class-name">URI</span> url<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> request<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> responseType<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意上面三个方法的前两个，后面的<code>uriVariables</code>是url参数，不是POST表单参数哦，它们之间是有区别的（虽然我们一般post提交表单时，不怎么会在url中添加参数）</p><p>下面还是根据实际的用例来查看</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * post基本请求
 */</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">basicPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">RestTemplate</span> restTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> restTemplate
            <span class="token punctuation">.</span><span class="token function">postForEntity</span><span class="token punctuation">(</span><span class="token string">&quot;http://127.0.0.1:8080/post?name=一灰灰Blog&amp;age=20&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Simple postForEntity res: {}&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 提交的表单参数</span>
    <span class="token class-name">MultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    params<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;一灰灰Blog&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    params<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> response <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">postForObject</span><span class="token punctuation">(</span><span class="token string">&quot;http://127.0.0.1:8080/post&quot;</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Simple postForObject res: {}&quot;</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 这个url参数是放在url上面的哦</span>
    response <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">postForObject</span><span class="token punctuation">(</span><span class="token string">&quot;http://127.0.0.1:8080/post?urlName={?}&quot;</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;url参数&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Simple postForObject with urlParams res: {}&quot;</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>

    response <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">postForObject</span><span class="token punctuation">(</span><span class="token string">&quot;http://127.0.0.1:8080/post?urlName={urlName}&quot;</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
            <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>
                <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;urlName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;url参数&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Simple postForObject with map urlParams res: {}&quot;</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试输出如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>Simple postForEntity res: <span class="token operator">&lt;</span><span class="token number">200</span>,params: <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span>:<span class="token punctuation">[</span><span class="token string">&quot;一灰灰Blog&quot;</span><span class="token punctuation">]</span>,<span class="token string">&quot;age&quot;</span>:<span class="token punctuation">[</span><span class="token string">&quot;20&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
headers: <span class="token punctuation">{</span><span class="token string">&quot;content-length&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;0&quot;</span>,<span class="token string">&quot;host&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;127.0.0.1:8080&quot;</span>,<span class="token string">&quot;content-type&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;application/x-www-form-urlencoded;charset=UTF-8&quot;</span>,<span class="token string">&quot;connection&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;keep-alive&quot;</span>,<span class="token string">&quot;accept&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;text/plain, application/json, application/*+json, */*&quot;</span>,<span class="token string">&quot;user-agent&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;Java/1.8.0_171&quot;</span><span class="token punctuation">}</span>
cookies: ,<span class="token punctuation">[</span>Content-Type:<span class="token string">&quot;text/plain;charset=UTF-8&quot;</span>, Content-Length:<span class="token string">&quot;299&quot;</span>, Date:<span class="token string">&quot;Wed, 17 Jun 2020 01:14:16 GMT&quot;</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>

<span class="token punctuation">(</span>Simple postForObject res: params: <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span>:<span class="token punctuation">[</span><span class="token string">&quot;一灰灰Blog&quot;</span><span class="token punctuation">]</span>,<span class="token string">&quot;age&quot;</span>:<span class="token punctuation">[</span><span class="token string">&quot;20&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
headers: <span class="token punctuation">{</span><span class="token string">&quot;content-length&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;338&quot;</span>,<span class="token string">&quot;host&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;127.0.0.1:8080&quot;</span>,<span class="token string">&quot;content-type&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;multipart/form-data;charset=UTF-8;boundary=URAN0wQz_s1vauFbDLFRZ40bb3NtRRwgLuII-wCk&quot;</span>,<span class="token string">&quot;connection&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;keep-alive&quot;</span>,<span class="token string">&quot;accept&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;text/plain, application/json, application/*+json, */*&quot;</span>,<span class="token string">&quot;user-agent&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;Java/1.8.0_171&quot;</span><span class="token punctuation">}</span>
cookies: 

<span class="token punctuation">(</span>Simple postForObject with urlParams res: params: <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span>:<span class="token punctuation">[</span><span class="token string">&quot;一灰灰Blog&quot;</span><span class="token punctuation">]</span>,<span class="token string">&quot;age&quot;</span>:<span class="token punctuation">[</span><span class="token string">&quot;20&quot;</span><span class="token punctuation">]</span>,<span class="token string">&quot;urlName&quot;</span>:<span class="token punctuation">[</span><span class="token string">&quot;url参数&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
headers: <span class="token punctuation">{</span><span class="token string">&quot;content-length&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;314&quot;</span>,<span class="token string">&quot;host&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;127.0.0.1:8080&quot;</span>,<span class="token string">&quot;content-type&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;multipart/form-data;charset=UTF-8;boundary=2h15swz9SJPfjCxv2cNOwDn_TR2nK4gF&quot;</span>,<span class="token string">&quot;connection&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;keep-alive&quot;</span>,<span class="token string">&quot;accept&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;text/plain, application/json, application/*+json, */*&quot;</span>,<span class="token string">&quot;user-agent&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;Java/1.8.0_171&quot;</span><span class="token punctuation">}</span>
cookies: 

<span class="token punctuation">(</span>Simple postForObject with map urlParams res: params: <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span>:<span class="token punctuation">[</span><span class="token string">&quot;一灰灰Blog&quot;</span><span class="token punctuation">]</span>,<span class="token string">&quot;age&quot;</span>:<span class="token punctuation">[</span><span class="token string">&quot;20&quot;</span><span class="token punctuation">]</span>,<span class="token string">&quot;urlName&quot;</span>:<span class="token punctuation">[</span><span class="token string">&quot;url参数&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
headers: <span class="token punctuation">{</span><span class="token string">&quot;content-length&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;329&quot;</span>,<span class="token string">&quot;host&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;127.0.0.1:8080&quot;</span>,<span class="token string">&quot;content-type&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;multipart/form-data;charset=UTF-8;boundary=QOhroKp7BE4cNF5Oi3CJLdq_ixzk0t5ZZw9ch&quot;</span>,<span class="token string">&quot;connection&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;keep-alive&quot;</span>,<span class="token string">&quot;accept&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;text/plain, application/json, application/*+json, */*&quot;</span>,<span class="token string">&quot;user-agent&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;Java/1.8.0_171&quot;</span><span class="token punctuation">}</span>
cookies: 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-post-body" tabindex="-1"><a class="header-anchor" href="#_3-post-body" aria-hidden="true">#</a> 3. post body</h3><p>post一个json串，也属于比较常见的一种case了，对于RestTemplate而言，要支持这种方式，需要额外处理一下请求头，设置<code>Content-Type</code>为<code>application/json</code></p><p>使用姿势和上面相差不大，只是需要注意一下请求参数的构建</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * json表单
 */</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jsonPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">RestTemplate</span> restTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 设置请求头</span>
    <span class="token class-name">HttpHeaders</span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    headers<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 提交的json串</span>
    <span class="token class-name">JSONObject</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;一灰灰Blog&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    params<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 构建请求参数</span>
    <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>params<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> response <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">postForObject</span><span class="token punctuation">(</span><span class="token string">&quot;http://127.0.0.1:8080/body&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;json post res: {}&quot;</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>json post res: params: <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">|</span> DemoRest.ReqBody<span class="token punctuation">(</span>name<span class="token operator">=</span>???Blog, <span class="token assign-left variable">age</span><span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span>
headers: <span class="token punctuation">{</span><span class="token string">&quot;content-length&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;27&quot;</span>,<span class="token string">&quot;host&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;127.0.0.1:8080&quot;</span>,<span class="token string">&quot;content-type&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;application/json&quot;</span>,<span class="token string">&quot;connection&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;keep-alive&quot;</span>,<span class="token string">&quot;accept&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;text/plain, application/json, application/*+json, */*&quot;</span>,<span class="token string">&quot;user-agent&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;Java/1.8.0_171&quot;</span><span class="token punctuation">}</span>
cookies: 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>请注意，提交的json串中文乱码了</strong></p><h3 id="_4-小结" tabindex="-1"><a class="header-anchor" href="#_4-小结" aria-hidden="true">#</a> 4. 小结</h3><p>上面主要介绍的是RestTemplate的常规用法，基础的GET/POST请求姿势，如果业务简单，不需要考虑各种复杂的异常情况，也是没有太多的问题了；那么如果需要考虑，又有哪些需要注意的呢？</p><ul><li>上面的中文乱码问题如何解决？</li><li>自定义的请求头如何塞入（如果是爬虫，上面的User-Agent太容易被屏蔽了）</li><li>cookie设置</li><li>REST支持Basic Auth的验证方式如何发起请求</li><li>超时设置</li><li>自定义连接池替换</li><li>REST返回非200状态码的情况，能否不抛异常，自定义处理？</li><li>ssl校验</li><li>...</li></ul><p>如果你对上面的这些点感兴趣，不妨关注一波，相关的文章快正热火朝天的进行中...</p><h2 id="ii-其他" tabindex="-1"><a class="header-anchor" href="#ii-其他" aria-hidden="true">#</a> II. 其他</h2><h3 id="_0-项目" tabindex="-1"><a class="header-anchor" href="#_0-项目" aria-hidden="true">#</a> 0. 项目</h3>`,43),d={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/221-web-resttemplate",target:"_blank",rel:"noopener noreferrer"};function v(g,b){const a=u("ExternalLinkIcon");return e(),o("div",null,[k,c(" more "),r,n("ul",null,[n("li",null,[s("工程："),n("a",d,[s("https://github.com/liuyueyi/spring-boot-demo"),t(a)])]),n("li",null,[s("项目: "),n("a",m,[s("https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/221-web-resttemplate"),t(a)])])])])}const h=p(i,[["render",v],["__file","200617-SpringBoot系列RestTemplate基础用法小结.html.vue"]]);export{h as default};
