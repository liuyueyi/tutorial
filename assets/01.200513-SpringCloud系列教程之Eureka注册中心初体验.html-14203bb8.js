import{_ as t,V as p,W as o,X as i,Y as n,Z as s,$ as e,a1 as c,F as l}from"./framework-094145d2.js";const u="/tutorial/imgs/200513/00.jpg",r="/tutorial/imgs/200513/01.jpg",d="/tutorial/imgs/200513/02.jpg",k={},v=n("p",null,"在SpringCloud微服务体系中，有几个比较重要的组件，如注册中心，配置中心，网关，安全、负载均衡、监控等等，接下来我们将来看一下这些常用的组件有什么用，在微服务架构下的该怎么用。",-1),m=n("p",null,"本文为为第一篇，注册中心Eureka的使用说明",-1),g=c('<h2 id="i-基本介绍" tabindex="-1"><a class="header-anchor" href="#i-基本介绍" aria-hidden="true">#</a> I. 基本介绍</h2><h3 id="_1-注册中心" tabindex="-1"><a class="header-anchor" href="#_1-注册中心" aria-hidden="true">#</a> 1. 注册中心</h3><p>注册中心，主要的核心点是服务的注册与发现。</p><p>简单来讲，就是我们的所有服务都会在注册中心上标识自己，注册中心统一管理所有的服务名与具体的应用之间的映射关系，这样微服务之间的访问，就可以直接通过服务名来相互通信，相比较于直接通过ip端口的访问，这样的好处是当某个服务下线、新增或者换了机器，对调用者而言，只要维持一份注册中心的最新映射表即可，不需要其他任何改动逻辑。</p><p>我们通常可用的注册中心有 <code>Eureka</code>, <code>Consul</code>, <code>Zookeeper</code>, <code>nacos</code>等，在我们后续的教程中会逐一进行介绍</p><blockquote><p>Eureka2.x 闭源，1.x虽然可用，但新项目的话不建议再使用它，比如<code>Consul</code>, <code>nacos</code> 都是不错的选择</p><p>如果出于学习的目的，或者由于历史原因（比如我），学习了解一下Eureka知识点也没什么坏处</p></blockquote><h3 id="_2-eureka" tabindex="-1"><a class="header-anchor" href="#_2-eureka" aria-hidden="true">#</a> 2. Eureka</h3><p>Eureka是Netflix开源的服务发现组件，本身是一个基于REST的服务，通常包含Server和Client端</p><p><strong>原理如下图</strong></p><figure><img src="'+u+`" alt="来源于网络" tabindex="0" loading="lazy"><figcaption>来源于网络</figcaption></figure><ul><li>server: 提供服务注册，并在服务注册表中存储所有可用服务节点的信息</li><li>client: 简化与Server之间的交互，比如封装了发送心跳，获取注册信息表等基本操作</li></ul><h2 id="ii-实例演示" tabindex="-1"><a class="header-anchor" href="#ii-实例演示" aria-hidden="true">#</a> II. 实例演示</h2><h3 id="_1-版本说明" tabindex="-1"><a class="header-anchor" href="#_1-版本说明" aria-hidden="true">#</a> 1. 版本说明</h3><p>后续的演示项目中，我们的环境与版本信息如下</p><ul><li>开发环境: IDEA + maven</li><li>SpringBoot: <code>2.2.1.RELEASE</code></li><li>SpringCloud: <code>Hoxton.M2</code></li></ul><h3 id="_2-eureka-server端" tabindex="-1"><a class="header-anchor" href="#_2-eureka-server端" aria-hidden="true">#</a> 2. Eureka Server端</h3><p>Eureka区分了Server和Client两端，即我们有一个独立的注册中心服务，其他的微服务则作为Client端</p><p>Server端核心依赖如下</p><div class="language-pom line-numbers-mode" data-ext="pom"><pre class="language-pom"><code>&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;
&lt;/dependency&gt;


&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;
            &lt;version&gt;\${spring-cloud.version}&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在配置文件中，添加一些基本信息</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span> <span class="token comment">#服务注册中心端口号</span>
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">instance</span><span class="token punctuation">:</span>
    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> 127.0.0.1 <span class="token comment">#服务注册中心IP地址</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">registerWithEureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment">#是否向服务注册中心注册自己</span>
    <span class="token key atrule">fetchRegistry</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment">#是否检索服务</span>
    <span class="token key atrule">serviceUrl</span><span class="token punctuation">:</span> <span class="token comment">#服务注册中心的配置内容，指定服务注册中心的位置</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//$<span class="token punctuation">{</span>eureka.instance.hostname<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>server.port<span class="token punctuation">}</span>/eureka/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，上面的<code>registerWithEureka</code>这个配置，设置为false，不像自己注册服务（后续会介绍多个Eureka实例时，可以如何配置）</p><p>然后再启动类上，添加注解<code>@EnableEurekaServer</code>来申明Eureka服务</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableEurekaServer</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到此，一个Eureka服务端已经完成，此时我们可以直接访问<code>http://localhost:8081</code>，会看到一个自带的控制台，会提供一些基本信息</p><h3 id="_3-eureka-客户端" tabindex="-1"><a class="header-anchor" href="#_3-eureka-客户端" aria-hidden="true">#</a> 3. Eureka 客户端</h3><p>我们这里设计两个客户端，一个提供服务，另外一个调用，演示一下Eureka的基本功能</p><h4 id="a-客户端-eureka-service-provider" tabindex="-1"><a class="header-anchor" href="#a-客户端-eureka-service-provider" aria-hidden="true">#</a> a. 客户端 eureka-service-provider</h4><p>客户端需要在pom文件中，添加下面的关键依赖</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">&gt;</span></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">&gt;</span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">&gt;</span></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>netflix<span class="token operator">-</span>eureka<span class="token operator">-</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来需要在配置文件中，指定注册中心的地址，以及服务名（请注意，这个服务名是重要线索，后面会用到！！！）</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8082</span> <span class="token comment">#服务端口号</span>
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">serviceUrl</span><span class="token punctuation">:</span> <span class="token comment">#注册中心的注册地址</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>8081/eureka/
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> eureka<span class="token punctuation">-</span>service<span class="token punctuation">-</span>provider <span class="token comment">#服务名称--调用的时候根据名称来调用该服务的方法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样的需要在启动类上，通过<code>@EnableEurekaClient</code>来标注客户端</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableEurekaClient</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在这个项目中，写一个基本REST接口，供后面的服务进行调用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;userService&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;/getUserById&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">UserDTO</span> <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token keyword">long</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">UserDTO</span> userDTO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDTO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userDTO<span class="token punctuation">.</span><span class="token function">setUserId</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        userDTO<span class="token punctuation">.</span><span class="token function">setNickname</span><span class="token punctuation">(</span><span class="token string">&quot;一灰灰blog&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userDTO<span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">&quot;yihuihuiblog&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userDTO<span class="token punctuation">.</span><span class="token function">setPhone</span><span class="token punctuation">(</span><span class="token number">88888888L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> userDTO<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再看一下上面的实现，你会发现和平时写的Controller没有任何的区别</p><p>到这里第一个Eureka客户端已经完成，并提供了一个REST接口，接下来我们开始写第二个Eureka客户端，用来访问上面的REST服务</p><h4 id="b-客户端-eureka-service-consumer" tabindex="-1"><a class="header-anchor" href="#b-客户端-eureka-service-consumer" aria-hidden="true">#</a> b. 客户端 eureka-service-consumer</h4><p>基本的流程和上面没有任何区别，只是将配置文件稍微改一下</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8083</span>  <span class="token comment">#服务端口号</span>
<span class="token key atrule">eureka</span><span class="token punctuation">:</span>
  <span class="token key atrule">client</span><span class="token punctuation">:</span>
    <span class="token key atrule">serviceUrl</span><span class="token punctuation">:</span> <span class="token comment">#注册中心的注册地址</span>
      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>8081/eureka/
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">application</span><span class="token punctuation">:</span>
    <span class="token key atrule">name</span><span class="token punctuation">:</span> eureka<span class="token punctuation">-</span>service<span class="token punctuation">-</span>consumer <span class="token comment">#服务名称--调用的时候根据名称来调用该服务的方法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么在这个服务中，如何访问 <code>eureka-service-provider</code> 提供的服务呢？</p><ul><li>通过<code>RestTemplate</code>来实现</li></ul><p>请注意，这个RestTemplate和我们普通的<code>new RestTemplate()</code>创建的不一样哦，我们是通过如下方式获取实例</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token annotation punctuation">@LoadBalanced</span>
<span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">rest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重点关注方法上的<code>@LoadBalanced</code>注解，这个会在后续的Ribbon的章节中深入介绍，在这里只需要知道通过它生成的<code>RestTemplate</code>，在发起访问时，会借助Eureka的注册信息表，将服务名翻译为对应的<code>ip+端口号</code></p><p>接下来就是我们的访问环节，写法如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">RestTemplate</span> restTemplate<span class="token punctuation">;</span>

<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;uid&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">UserDTO</span> dto <span class="token operator">=</span> restTemplate
            <span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">&quot;http://eureka-service-provider/userService/getUserById?userId=&quot;</span> <span class="token operator">+</span> userId<span class="token punctuation">,</span> <span class="token class-name">UserDTO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> userId <span class="token operator">+</span> <span class="token string">&quot;&#39;s info: &quot;</span> <span class="token operator">+</span> dto<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请着重看一下访问的url: <code>&quot;http://eureka-service-provider/userService/getUserById?userId=&quot; + userId</code>,这里没有域名，没有ip，是直接通过服务名进行访问的</p><h3 id="_4-测试与小结" tabindex="-1"><a class="header-anchor" href="#_4-测试与小结" aria-hidden="true">#</a> 4. 测试与小结</h3><p>我们依次将上面的Server和两个Client启动，然后访问<code>http://localhost:8081</code>，查看Eureka控制台，可以看到如下界面，两个客户端都已经注册好了</p><figure><img src="`+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后再测试一下通过consumer访问provider的服务</p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>到此Eureka的核心功能已经演示完毕，当然如果仅仅只是这样，这个学习成本好像很低了，作为一个有思考的小青年，看了上面的流程自然会有几个疑问</p><ul><li>安全问题 <ul><li>注册中心控制台直接访问，这要是暴露出去了...</li><li>一个Eureka实例，单点故障怎么解</li></ul></li><li>服务注册多久生效？服务下线多久会从注册信息表中摘除？服务存活判断是怎样的？</li><li>通过<code>RestTemplate</code>方式使用，很不优雅啊，有没有类似rmi的通过类调用的方式呢？</li></ul><h2 id="ii-其他" tabindex="-1"><a class="header-anchor" href="#ii-其他" aria-hidden="true">#</a> II. 其他</h2><h3 id="_0-项目" tabindex="-1"><a class="header-anchor" href="#_0-项目" aria-hidden="true">#</a> 0. 项目</h3>',58),b={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-cloud/eurka-server",target:"_blank",rel:"noopener noreferrer"},y={href:"https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-cloud/eurka-service-consumer",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-cloud/eurka-service-provider",target:"_blank",rel:"noopener noreferrer"};function _(E,x){const a=l("ExternalLinkIcon");return p(),o("div",null,[v,m,i(" more "),g,n("ul",null,[n("li",null,[s("工程："),n("a",b,[s("https://github.com/liuyueyi/spring-boot-demo"),e(a)])]),n("li",null,[s("源码： "),n("ul",null,[n("li",null,[n("a",h,[s("https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-cloud/eurka-server"),e(a)])]),n("li",null,[n("a",y,[s("https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-cloud/eurka-service-consumer"),e(a)])]),n("li",null,[n("a",f,[s("https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-cloud/eurka-service-provider"),e(a)])])])])])])}const w=t(k,[["render",_],["__file","01.200513-SpringCloud系列教程之Eureka注册中心初体验.html.vue"]]);export{w as default};
