import{_ as o,V as c,W as e,Y as n,Z as s,$ as t,a1 as p,F as l}from"./framework-094145d2.js";const i="/tutorial/imgs/column/ai/4-1.webp",u="/tutorial/imgs/column/ai/4-2.webp",r="/tutorial/imgs/column/ai/4-3.webp",k="/tutorial/imgs/column/ai/4-4-0.jpg",d="/tutorial/imgs/column/ai/4-4-b-0.jpg",m="/tutorial/imgs/column/ai/4-4-t-0.jpg",g="/tutorial/imgs/column/ai/4-4-s-0.jpg",v="/tutorial/imgs/column/ai/4-4-1.jpg",b="/tutorial/imgs/column/ai/4-4-b-1.jpg",_="/tutorial/imgs/column/ai/4-4-t-1.jpg",h="/tutorial/imgs/column/ai/4-4-s-1.jpg",y="/tutorial/imgs/column/ai/4-4-2.jpg",w="/tutorial/imgs/column/ai/4-4-b-2.jpg",f="/tutorial/imgs/column/ai/4-4-t-2.jpg",x="/tutorial/imgs/column/ai/4-4-s-2.jpg",j="/tutorial/imgs/column/ai/4-4-3.jpg",z="/tutorial/imgs/column/ai/4-4-b-3.jpg",I="/tutorial/imgs/column/ai/4-4-t-3.jpg",Y="/tutorial/imgs/column/ai/4-4-s-3.jpg",E={},N=n("p",null,"最近准备实现一个根据图片生成简笔画的应用，研究了下现在的ai能力，在使用百度的图片提取线稿的时候发现AI处理能力是真的强，比如下面是几个提取case",-1),V=n("figure",null,[n("img",{src:i,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),D=n("p",null,"从整体的实现效果来看，还是非常不错的，对于现实人物、3d图、2d卡通、建筑的线稿提取结果可以说几近完美了。唯一的小问题就是处理时间长了一点，也不免费...",-1),M=n("p",null,"那么有没有其他开源的工具可以直接使用呢，发现了两个有意思的开源项目，一个是基于机器学习训练结果的，另一个则是直接使用算法(代码行<50行)进行提取转换",-1),A=n("h3",{id:"基于训练模型-rocca-informative-drawings-line-art-onnx",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#基于训练模型-rocca-informative-drawings-line-art-onnx","aria-hidden":"true"},"#"),s(" 基于训练模型 rocca/informative-drawings-line-art-onnx")],-1),B={href:"https://huggingface.co/rocca/informative-drawings-line-art-onnx",target:"_blank",rel:"noopener noreferrer"},L={href:"https://github.com/josephrocca/image-to-line-art-js",target:"_blank",rel:"noopener noreferrer"},C=n("p",null,"使用约17兆的模型即可实现线图提取功能，下面是官方的demo表现情况",-1),F=n("figure",null,[n("img",{src:u,alt:"",tabindex:"0",loading:"lazy"}),n("figcaption")],-1),O=n("p",null,"从上面的处理结果也可以看出，对于卡通图像的转换效果还是可以的；但是对于显示人物、建筑之类的效果就一一般般了",-1),W=n("h3",{id:"算法提取",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#算法提取","aria-hidden":"true"},"#"),s(" 算法提取")],-1),H={href:"https://github.com/FlandreDaisuki/Outline-Extractor",target:"_blank",rel:"noopener noreferrer"},R=p(`<p>核心算法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token keyword">function</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    loadingMsg<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">&#39;hide&#39;</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> ch <span class="token operator">=</span> canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>naturalHeight<span class="token punctuation">;</span>
    <span class="token keyword">const</span> cw <span class="token operator">=</span> canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>naturalWidth<span class="token punctuation">;</span>
    ctx <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">&#39;2d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ctx<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> imdata <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getImageData</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> cw<span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> c <span class="token operator">=</span> imdata<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
    <span class="token keyword">const</span> imgray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> c<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token constant">Y</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0.3</span> <span class="token operator">*</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">0.59</span> <span class="token operator">*</span> c<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">0.11</span> <span class="token operator">*</span> c<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        imgray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token constant">Y</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> mina <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> h <span class="token operator">&lt;</span> ch<span class="token punctuation">;</span> h<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> w <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> w <span class="token operator">&lt;</span> cw<span class="token punctuation">;</span> w<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> u <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> h <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">const</span> d <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ch <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> h <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">const</span> l <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> w <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">const</span> r <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>cw <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> w <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            mina<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">255</span> <span class="token operator">-</span> <span class="token function">max</span><span class="token punctuation">(</span>
                imgray<span class="token punctuation">[</span>u <span class="token operator">*</span> cw <span class="token operator">+</span> l<span class="token punctuation">]</span><span class="token punctuation">,</span> imgray<span class="token punctuation">[</span>u <span class="token operator">*</span> cw <span class="token operator">+</span> w<span class="token punctuation">]</span><span class="token punctuation">,</span> imgray<span class="token punctuation">[</span>u <span class="token operator">*</span> cw <span class="token operator">+</span> r<span class="token punctuation">]</span><span class="token punctuation">,</span>
                imgray<span class="token punctuation">[</span>h <span class="token operator">*</span> cw <span class="token operator">+</span> l<span class="token punctuation">]</span><span class="token punctuation">,</span> imgray<span class="token punctuation">[</span>h <span class="token operator">*</span> cw <span class="token operator">+</span> w<span class="token punctuation">]</span><span class="token punctuation">,</span> imgray<span class="token punctuation">[</span>h <span class="token operator">*</span> cw <span class="token operator">+</span> r<span class="token punctuation">]</span><span class="token punctuation">,</span>
                imgray<span class="token punctuation">[</span>d <span class="token operator">*</span> cw <span class="token operator">+</span> l<span class="token punctuation">]</span><span class="token punctuation">,</span> imgray<span class="token punctuation">[</span>d <span class="token operator">*</span> cw <span class="token operator">+</span> w<span class="token punctuation">]</span><span class="token punctuation">,</span> imgray<span class="token punctuation">[</span>d <span class="token operator">*</span> cw <span class="token operator">+</span> r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> imgray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> <span class="token constant">Y</span> <span class="token operator">=</span> imgray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> <span class="token constant">M</span> <span class="token operator">=</span> mina<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token constant">Y</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token constant">Y</span> <span class="token operator">*</span> <span class="token constant">M</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">255</span> <span class="token operator">-</span> <span class="token constant">M</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> c<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">[</span>i <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    ctx<span class="token punctuation">.</span><span class="token function">putImageData</span><span class="token punctuation">(</span>imdata<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pImg<span class="token punctuation">.</span>src <span class="token operator">=</span> canvas<span class="token punctuation">.</span><span class="token function">toDataURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),S={href:"https://ai.hhui.top/app/imgline.html",target:"_blank",rel:"noopener noreferrer"},T=p('<p>整体表现效果如下:</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从实际的效果来看，和上面的训练模型的处理结果半斤八两，不过好处也很明显，处理效率明显更高，且无外部依赖</p><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h3><p>下面是具体的对照结果，对于卡通图片，如果希望提取线稿，会发现即便不使用大模型、机器学习的能力，借助最基础的算法处理，不超过50行的代码也可以实现相对理想的效果</p><table><thead><tr><th>原图</th><th>百度提取线图</th><th>训练模型处理</th><th>算法提取</th></tr></thead><tbody><tr><td><img src="'+k+'" alt="" loading="lazy"></td><td><img src="'+d+'" alt="" loading="lazy"></td><td><img src="'+m+'" alt="" loading="lazy"></td><td><img src="'+g+'" alt="" loading="lazy"></td></tr><tr><td><img src="'+v+'" alt="" loading="lazy"></td><td><img src="'+b+'" alt="" loading="lazy"></td><td><img src="'+_+'" alt="" loading="lazy"></td><td><img src="'+h+'" alt="" loading="lazy"></td></tr><tr><td><img src="'+y+'" alt="" loading="lazy"></td><td><img src="'+w+'" alt="" loading="lazy"></td><td><img src="'+f+'" alt="" loading="lazy"></td><td><img src="'+x+'" alt="" loading="lazy"></td></tr><tr><td><img src="'+j+'" alt="" loading="lazy"></td><td><img src="'+z+'" alt="" loading="lazy"></td><td><img src="'+I+'" alt="" loading="lazy"></td><td><img src="'+Y+'" alt="" loading="lazy"></td></tr></tbody></table>',6);function U(Z,$){const a=l("ExternalLinkIcon");return c(),e("div",null,[N,V,D,M,A,n("p",null,[s("模型地址-> "),n("a",B,[s("https://huggingface.co/rocca/informative-drawings-line-art-onnx"),t(a)])]),n("p",null,[s("项目源码："),n("a",L,[s("https://github.com/josephrocca/image-to-line-art-js"),t(a)])]),C,F,O,W,n("p",null,[s("项目源码："),n("a",H,[s("Outline-Extractor"),t(a)])]),R,n("p",null,[s("在线体验地址: "),n("a",S,[s("https://ai.hhui.top/app/imgline.html"),t(a)])]),T])}const G=o(E,[["render",U],["__file","04.不借助AI也可以实现图片转线稿.html.vue"]]);export{G as default};
