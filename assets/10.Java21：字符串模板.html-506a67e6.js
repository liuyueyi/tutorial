import{_ as n,V as s,W as a,a1 as p}from"./framework-094145d2.js";const t={},e=p(`<p>嘿，各位Java开发者们！是不是每天都在和那些繁琐的代码打交道，感觉有点疲惫了？别担心，JDK 21带着它的新特性来拯救我们啦！今天，咱们就来聊聊其中最让人眼前一亮的字符串模板（<code>String Templates</code>）。这玩意儿可真是给Java字符串操作这块“老古董”注入了一股新鲜血液，让咱们处理字符串的时候能轻松不少。别着急，接下来我带你一起走进JDK 21字符串模板的奇妙世界，保证让你眼前一亮！</p><h2 id="传统字符串拼接的-囧境" tabindex="-1"><a class="header-anchor" href="#传统字符串拼接的-囧境" aria-hidden="true">#</a> 传统字符串拼接的“囧境”</h2><p>在深入了解字符串模板之前，咱们先来回顾一下传统字符串拼接方式的那些“囧事”，相信你在日常开发中肯定没少遇到。</p><h3 id="一-繁琐的加号拼接" tabindex="-1"><a class="header-anchor" href="#一-繁琐的加号拼接" aria-hidden="true">#</a> （一）繁琐的加号拼接</h3><p>在Java里，用<code>+</code>号拼接字符串是最基础的方式。可一旦拼接的变量多了，代码就像“面条”一样，又长又乱，读起来费劲得很。比如，我们要拼接用户的个人信息：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> city <span class="token operator">=</span> <span class="token string">&quot;北京&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> info <span class="token operator">=</span> <span class="token string">&quot;姓名：&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;，年龄：&quot;</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">&quot;，城市：&quot;</span> <span class="token operator">+</span> city<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码虽然能实现功能，但你看看，这代码量，这可读性，简直让人头疼！而且，每用一次+号拼接，就会创建一个新的<code>String</code>对象，性能开销大得很，简直是在“拖累”程序。</p><h3 id="二-stringbuilder的无奈" tabindex="-1"><a class="header-anchor" href="#二-stringbuilder的无奈" aria-hidden="true">#</a> （二）StringBuilder的无奈</h3><p>为了解决<code>+</code>号拼接的性能问题，我们通常会用<code>StringBuilder</code>。它通过可变的字符序列来避免频繁创建新的字符串对象，从而提高性能。不过，<code>StringBuilder</code>的代码结构也比较复杂。还是上面的例子，用<code>StringBuilder</code>来实现：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> city <span class="token operator">=</span> <span class="token string">&quot;北京&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;姓名：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;，年龄：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;，城市：&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>city<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> info <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看看，使用<code>StringBuilder</code>时，得先创建对象，再调用多次<code>append</code>方法，最后还得调用<code>toString</code>方法转换为<code>String</code>类型。对于简单的字符串拼接场景，这操作是不是太“繁琐”了？简直就是“小题大做”。</p><h3 id="三-格式化方法的痛点" tabindex="-1"><a class="header-anchor" href="#三-格式化方法的痛点" aria-hidden="true">#</a> （三）格式化方法的痛点</h3><p>除了上述两种方式，我们还会用<code>String.format</code>和<code>MessageFormat</code>来进行字符串格式化拼接。但它们也有问题，比如将格式字符串与参数分离，这导致代码理解和维护起来超级困难。以<code>String.format</code>为例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> city <span class="token operator">=</span> <span class="token string">&quot;北京&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> info <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;姓名：%s，年龄：%d，城市：%s&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> city<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然代码看起来简洁一些，但格式字符串里的占位符和后面的参数对应关系不够直观。当参数多或者格式字符串复杂时，很容易出错，也不利于代码维护。这就好比是“盲人摸象”，一不小心就容易“摸错地方”。</p><h2 id="jdk-21字符串模板闪亮登场" tabindex="-1"><a class="header-anchor" href="#jdk-21字符串模板闪亮登场" aria-hidden="true">#</a> JDK 21字符串模板闪亮登场</h2><p>好啦，传统方式的问题咱们都清楚了，那JDK 21中的字符串模板到底能给我们带来哪些惊喜呢？别急，这就来揭开它的神秘面纱。</p><h3 id="一-特性简介" tabindex="-1"><a class="header-anchor" href="#一-特性简介" aria-hidden="true">#</a> （一）特性简介</h3><p>字符串模板是JDK 21引入的一个预览特性，它允许我们在字符串中直接嵌入变量和表达式，从而简化字符串的拼接过程，提高代码的可读性和可维护性。这有点类似于<code>Python中</code>的<code>f-string</code>和<code>JavaScript</code>中的模板字符串，熟悉这两种语言的小伙伴肯定能轻松上手。</p><h3 id="二-基本语法展示" tabindex="-1"><a class="header-anchor" href="#二-基本语法展示" aria-hidden="true">#</a> （二）基本语法展示</h3><p>在JDK 21中，字符串模板用STR处理器和反引号“\`”来定义。基本语法如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span>\`<span class="token class-name">Hello</span><span class="token punctuation">,</span> \\<span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token operator">!</span>\`<span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的代码中，<code>STR</code>是模板处理器，<code>\\{name}</code>是嵌入的表达式，<code>name</code>的值会在运行时被替换到字符串中。运行这段代码，输出结果就是<code>Hello, 张三!</code>。是不是感觉比传统的字符串拼接方式简洁多了？简直就是“清爽版”的代码。</p><h3 id="三-多行字符串的优雅处理" tabindex="-1"><a class="header-anchor" href="#三-多行字符串的优雅处理" aria-hidden="true">#</a> （三）多行字符串的优雅处理</h3><p>在处理多行字符串时，字符串模板的优势就更明显了。比如，我们要拼接一个<code>HTML</code>字符串：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> title <span class="token operator">=</span> <span class="token string">&quot;欢迎来到我的网站&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token string">&quot;这是一个充满技术干货的网站&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> html <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span>\`
<span class="token generics"><span class="token punctuation">&lt;</span>html<span class="token punctuation">&gt;</span></span>
    <span class="token generics"><span class="token punctuation">&lt;</span>head<span class="token punctuation">&gt;</span></span>
        <span class="token generics"><span class="token punctuation">&lt;</span>title<span class="token punctuation">&gt;</span></span>\\<span class="token punctuation">{</span>title<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">&gt;</span>
    <span class="token generics"><span class="token punctuation">&lt;</span>body<span class="token punctuation">&gt;</span></span>
        <span class="token generics"><span class="token punctuation">&lt;</span>p<span class="token punctuation">&gt;</span></span>\\<span class="token punctuation">{</span>content<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">&gt;</span>
\`<span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用字符串模板，我们可以像写普通的<code>HTML</code>代码一样来拼接字符串，再也不用担心繁琐的<code>+</code>号和转义字符了。这就好比是从“手写时代”直接跨越到了“打印时代”，清晰又方便。</p><p>同样，在拼接<code>JSON</code>字符串时，字符串模板也能让代码更加简洁明了：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;李四&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> json <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span>\`
<span class="token punctuation">{</span>
    <span class="token string">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\\{name}&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;age&quot;</span><span class="token operator">:</span> \\<span class="token punctuation">{</span>age<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
\`<span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出的<code>json</code>字符串就是：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">30</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="四-表达式嵌入的强大功能" tabindex="-1"><a class="header-anchor" href="#四-表达式嵌入的强大功能" aria-hidden="true">#</a> （四）表达式嵌入的强大功能</h3><p>字符串模板不仅支持嵌入变量，还支持嵌入各种表达式，比如算术运算、方法调用等。这可真是太厉害了！比如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span>\`两数之和为：\\<span class="token punctuation">{</span>num1 <span class="token operator">+</span> num2<span class="token punctuation">}</span>\`<span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果就是两数之和为：<code>30</code>。再比如，我们有一个获取当前时间的方法<code>getCurrentTime()</code>，可以这样在字符串模板中调用：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringTemplateDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span>LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> timeInfo <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span>\`当前时间是：\\<span class="token punctuation">{</span><span class="token function">getCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\`<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>timeInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果类似于当前时间是：<code>2024-10-22T15:30:00.123</code>，具体时间根据实际运行情况而定。</p><p>通过这种方式，我们可以轻松地将方法的返回值嵌入到字符串中，让代码更加简洁高效。这就好比是给代码“插上了翅膀”，让它能更灵活地“飞翔”。</p><h2 id="深入探索字符串模板的用法" tabindex="-1"><a class="header-anchor" href="#深入探索字符串模板的用法" aria-hidden="true">#</a> 深入探索字符串模板的用法</h2><h3 id="一-自定义处理器的实现" tabindex="-1"><a class="header-anchor" href="#一-自定义处理器的实现" aria-hidden="true">#</a> （一）自定义处理器的实现</h3><p>除了<code>JDK 21</code>自带的<code>STR</code>、<code>FMT</code>等模板处理器，我们还可以通过实现<code>StringTemplate.Processor</code>接口来自定义模板处理器，以满足特定的业务需求。比如，我们想实现一个自定义处理器，把字符串里的所有字母都变成大写。实现步骤如下：</p><ol><li>实现<code>StringTemplate.Processor</code>接口，并重写<code>process</code>方法。</li><li>在<code>process</code>方法中，获取模板中的片段和值，进行自定义处理。</li><li>返回处理后的结果。</li></ol><p>示例代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">StringTemplate</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UpperCaseProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">StringTemplate<span class="token punctuation">.</span>Processor</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fragments<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">StringBuilder</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fragments<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>fragments<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> values<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Object</span> value <span class="token operator">=</span> values<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    result<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用自定义处理器的示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomProcessorDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;java&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> processed <span class="token operator">=</span> <span class="token class-name">StringTemplate<span class="token punctuation">.</span>Processor</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UpperCaseProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token constant">STR</span><span class="token punctuation">.</span>\`学习 \\<span class="token punctuation">{</span>name<span class="token punctuation">}</span> 很有趣\`<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>processed<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行上述代码，输出结果就是学习 <code>JAVA 很有趣</code>。</p><p>通过自定义处理器，我们可以根据具体的业务需求对字符串模板进行灵活处理，大大提高了字符串处理的灵活性和扩展性。</p><p>这就好比是给代码“量身定制”了一套“外衣”，让它能更好地适应各种场景。</p><h3 id="二-与其他java特性的融合" tabindex="-1"><a class="header-anchor" href="#二-与其他java特性的融合" aria-hidden="true">#</a> （二）与其他Java特性的融合</h3><p>字符串模板还可以和<code>Java</code>的其他特性，比如<code>lambda</code>表达式、流操作等，结合使用，发挥出更强大的功能。</p><p><strong>1.与lambda表达式结合</strong></p><p>我们可以在字符串模板的表达式中使用<code>lambda</code>表达式，实现一些复杂的逻辑处理。比如，我们有一个列表，需要把列表里的元素拼接成一个字符串，而且每个元素之间用逗号隔开，同时对每个元素进行一些处理（比如首字母大写）：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Locale</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LambdaWithStringTemplate</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fruits <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cherry&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span>\`水果列表：\\<span class="token punctuation">{</span>fruits<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>fruit <span class="token operator">-&gt;</span> fruit<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> fruit<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span>Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">&quot;, &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\`<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们使用了流操作对列表里的每个元素进行首字母大写处理，然后用<code>Collectors.joining</code>方法把处理后的元素拼接成一个字符串，最后把结果嵌入到字符串模板中。运行结果就是水果列表：<code>Apple, Banana, Cherry</code>。通过这种方式，我们可以把<code>字符串模板</code>和<code>lambda表达式</code>、<code>流操作</code>结合起来，实现复杂的数据处理和字符串生成。这就好比是把不同的“食材”放在一起“烹饪”，做出了一道“美味大餐”。</p><p><strong>2.与流操作结合</strong></p><p>字符串模板和流操作的结合还体现在对字符串的分割和处理上。比如，我们有一个多行字符串，想把它按行分割，然后对每一行进行一些操作（比如去除行首空格），最后再拼接成一个新的字符串：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamWithStringTemplate</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> multiline <span class="token operator">=</span> <span class="token string">&quot;  line1\\n line2\\n  line3&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span>\`处理后的字符串：\\<span class="token punctuation">{</span>multiline<span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">stripLeading</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span>Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\`<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，我们使用<code>lines</code>方法把多行字符串转换为流，然后用<code>map</code>方法对每一行进行去除行首空格的操作，最后用<code>Collectors.joining</code>方法把处理后的行重新拼接成一个字符串，并嵌入到字符串模板中。</p><p>运行结果就是处理后的字符串：<code>line1\\nline2\\nline3</code>。</p><p>通过把字符串模板和流操作结合，我们可以更加高效地处理字符串数据，提高代码的可读性和可维护性。这就好比是给字符串做了一次“美容”，让它变得更加“整洁”。</p><h2 id="使用字符串模板的注意事项" tabindex="-1"><a class="header-anchor" href="#使用字符串模板的注意事项" aria-hidden="true">#</a> 使用字符串模板的注意事项</h2><h3 id="一-预览特性的局限性" tabindex="-1"><a class="header-anchor" href="#一-预览特性的局限性" aria-hidden="true">#</a> （一）预览特性的局限性</h3><p>需要注意的是，字符串模板在JDK 21中还是一个预览特性。</p><p>这意味着它可能会在未来的 Java 版本中发生变化，甚至有可能被移除。</p><p>在生产环境中使用时，一定要谨慎考虑兼容性问题。</p><p>如果你的项目需要长期稳定运行，并且对 JDK 版本的升级比较敏感，那么在使用字符串模板之前，要充分评估其潜在风险。</p><p>比如，某些依赖库可能不支持 JDK 21 的预览特性，这可能会导致项目在编译或运行时出现问题。</p><p>在编译和运行包含字符串模板的代码时，需要添加<code>--enable-preview</code>参数来启用预览特性。</p><p>例如，使用命令行编译时，要这样写：<code>javac --enable-preview --source 21 YourClass.java</code>；运行时则使用<code>java --enable-preview YourClass</code>。</p><h3 id="二-性能与资源考量" tabindex="-1"><a class="header-anchor" href="#二-性能与资源考量" aria-hidden="true">#</a> （二）性能与资源考量</h3><p>虽然字符串模板让代码看起来清爽多了，但在某些情况下，咱们也得注意它的“小脾气”。比如，在循环里频繁创建模板字符串，那可就有点“得不偿失”了。为啥呢？每次创建模板字符串，都要进行解析和求值操作，这可是要消耗<code>CPU</code>和内存资源的。要是循环次数太多，那性能可就“一落千丈”了。</p><p>举个例子，想象一下你在厨房里，每次做饭都要重新洗菜、切菜，那效率得多低啊！所以，如果在循环中用到字符串模板，建议把不变的部分提前准备好，放在循环外面。比如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> prefix <span class="token operator">=</span> <span class="token string">&quot;序号：&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span>\`\\<span class="token punctuation">{</span>prefix<span class="token punctuation">}</span>\\<span class="token punctuation">{</span>i<span class="token punctuation">}</span>\`<span class="token punctuation">;</span>
    <span class="token comment">// 处理message</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>prefix</code>是不变的部分，放在循环外面，这样就避免了每次循环都重复解析和求值<code>prefix</code>，效率一下子就上来了。</p><p>另外，如果处理的字符串特别大，或者模板里嵌入的表达式特别复杂，那内存可就“吃不消”了。想象一下，你在一个小房间里堆满了杂物，很快就没地方站了。所以，处理大数据量的字符串时，一定要合理设计表达式，避免不必要的内存开销。</p><h3 id="三-错误处理策略" tabindex="-1"><a class="header-anchor" href="#三-错误处理策略" aria-hidden="true">#</a> （三）错误处理策略</h3><p>用字符串模板的时候，难免会遇到一些“小插曲”，比如表达式求值失败。这就像是你在做一道复杂的菜，突然发现某个调料用完了，那可就麻烦了。比如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ErrorHandlingDemo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token constant">STR</span><span class="token punctuation">.</span>\`结果：\\<span class="token punctuation">{</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\`<span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;表达式求值失败：&quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个例子中，<code>divide(10, 0)</code>会抛出<code>ArithmeticException</code>异常，因为除数不能为0。不过别担心，我们用<code>try-catch</code>块把它“抓住”，然后进行相应的错误处理，这样程序就不会因为异常而“崩溃”了。</p><p>要是模板字符串的语法不对，比如反引号不匹配、表达式格式错误，编译器会像“警察叔叔”一样，及时提醒你。所以在写代码的时候，一定要仔细检查模板字符串的语法，确保它“规规矩矩”的。比如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 语法错误：反引号不匹配</span>
<span class="token comment">// String message = STR.\`Hello, \\{name\`;</span>

<span class="token comment">// 表达式格式错误：缺少右括号</span>
<span class="token comment">// String result = STR.\`两数之和为：\\{num1 + num2\`;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些错误在编译的时候就会被发现，所以一定要根据编译器的提示及时修改代码，不然程序可就“跑不起来”了。</p><p>通过这些注意事项，咱们就能更好地驾驭字符串模板这个“新伙伴”，让它在项目中发挥最大的作用，同时避免一些常见的“坑”。</p>`,84),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","10.Java21：字符串模板.html.vue"]]);export{r as default};
