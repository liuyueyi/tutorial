import{_ as t,V as p,W as o,Y as n,Z as s,$ as e,X as c,a1 as i,F as l}from"./framework-094145d2.js";const u="/tutorial/imgs/191018/00.jpg",r="/tutorial/imgs/191018/01.jpg",d="/tutorial/imgs/191018/02.jpg",k="/tutorial/imgs/191018/03.jpg",b="/tutorial/imgs/191018/04.jpg",m="/tutorial/imgs/191018/05.jpg",v={},f=n("p",null,[s("前面一篇博文介绍了在SpringBoot中使用Filter的两种使用方式，这里介绍另外一种直接将Filter当做Spring的Bean来使用的方式，并且在这种使用方式下，Filter的优先级可以直接通过"),n("code",null,"@Order"),s("注解来指定；最后将从源码的角度分析一下两种不同的使用方式下，为什么"),n("code",null,"@Order"),s("注解一个生效，一个不生效")],-1),g={href:"https://mp.weixin.qq.com/s/f01KWO3d2zhoN0Qa9-Qb6w",target:"_blank",rel:"noopener noreferrer"},h=i(`<h2 id="i-filter" tabindex="-1"><a class="header-anchor" href="#i-filter" aria-hidden="true">#</a> I. Filter</h2><p>本篇博文的工程执行的环境依然是<code>SpringBoot2+</code>, 项目源码可以在文章最后面get</p><h3 id="_1-使用姿势" tabindex="-1"><a class="header-anchor" href="#_1-使用姿势" aria-hidden="true">#</a> 1. 使用姿势</h3><p>前面一篇博文，介绍了两种使用姿势，下面简单介绍一下</p><p><strong>WebFilter注解</strong></p><p>在Filter类上添加注解<code>@WebFilter</code>；然后再项目中，显示声明<code>@ServletComponentScan</code>，开启Servlet的组件扫描</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebFilter</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelfFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@ServletComponentScan</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SelfAutoConf</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>FilterRegistrationBean</strong></p><p>另外一种方式则是直接创建一个Filter的注册Bean，内部持有Filter的实例；在SpringBoot中，初始化的是Filter的包装Bean就是这个</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">FilterRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderFilter</span><span class="token punctuation">&gt;</span></span> <span class="token function">orderFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">FilterRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderFilter</span><span class="token punctuation">&gt;</span></span> filter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    filter<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;orderFilter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    filter<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SelfFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    filter<span class="token punctuation">.</span><span class="token function">setOrder</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> filter<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本篇将介绍另外一种方式，直接将Filter当做普通的Bean对象来使用，也就是说，我们直接在Filter类上添加注解<code>@Component</code>即可，然后Spring会将实现Filter接口的Bean当做过滤器来注册</p><p>而且这种使用姿势下，Filter的优先级可以通过<code>@Order</code>注解来指定;</p><p>设计一个case，定义两个Filter(<code>ReqFilter</code>和<code>OrderFilter</code>), 当不指定优先级时，根据名字来，OrderFilter优先级会更高；我们主动设置下，希望<code>ReqFilter</code>优先级更高</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReqFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;req filter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Order</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;order filter!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-优先级测试" tabindex="-1"><a class="header-anchor" href="#_2-优先级测试" aria-hidden="true">#</a> 2. 优先级测试</h3><p>上面两个Filter直接当做了Bean来写入，我们写一个简单的rest服务来测试一下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexRest</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;index&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;hello &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请求之后输出结果如下， ReqFilter优先执行了</p><figure><img src="`+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="ii-源码分析" tabindex="-1"><a class="header-anchor" href="#ii-源码分析" aria-hidden="true">#</a> II. 源码分析</h2><p>当我们直接将Filter当做Spring Bean来使用时，<code>@Order</code>注解来指定Filter的优先级没有问题；但是前面一篇博文中演示的<code>@WebFilter</code>注解的方式，则并不会生效</p><ul><li>这两种方式的区别是什么？</li><li><code>@Order</code>注解到底有什么用，该怎么用</li></ul><h3 id="_1-bean方式" tabindex="-1"><a class="header-anchor" href="#_1-bean方式" aria-hidden="true">#</a> 1. Bean方式</h3><p>首先我们分析一下将Filter当做Spring bean的使用方式，我们的目标放在Filter的注册逻辑上</p><p>第一步将目标放在: <code>org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext#selfInitialize</code></p><p>下面的逻辑中包括了ServeltContext的初始化，而我们的Filter则可以看成是属于Servlet的Bean</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">selfInitialize</span><span class="token punctuation">(</span><span class="token class-name">ServletContext</span> servletContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
	<span class="token function">prepareWebApplicationContext</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">ExistingWebApplicationScopes</span> existingScopes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExistingWebApplicationScopes</span><span class="token punctuation">(</span>
			beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">WebApplicationContextUtils</span><span class="token punctuation">.</span><span class="token function">registerWebApplicationScopes</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span>
			<span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	existingScopes<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">WebApplicationContextUtils</span><span class="token punctuation">.</span><span class="token function">registerEnvironmentBeans</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span>
			<span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ServletContextInitializer</span> beans <span class="token operator">:</span> <span class="token function">getServletContextInitializerBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		beans<span class="token punctuation">.</span><span class="token function">onStartup</span><span class="token punctuation">(</span>servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意上面代码中的for循环，在执行<code>getServletContextInitializerBeans()</code>的时候，Filter就已经注册完毕，所以我们需要再深入进去</p><p>将目标集中在<code>org.springframework.boot.web.servlet.ServletContextInitializerBeans#ServletContextInitializerBeans</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ServletContextInitializerBeans</span><span class="token punctuation">(</span><span class="token class-name">ListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>initializers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">addServletContextInitializerBeans</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">addAdaptableBeans</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServletContextInitializer</span><span class="token punctuation">&gt;</span></span> sortedInitializers <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>initializers<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> value<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
					<span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token class-name">AnnotationAwareOrderComparator</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>sortedList <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableList</span><span class="token punctuation">(</span>sortedInitializers<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面有两行代码比较突出，下面单独捞出来了，需要我们重点关注</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token function">addServletContextInitializerBeans</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">addAdaptableBeans</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>通过断点进来，发现第一个方法只是注册了<code>dispatcherServletRegistration</code>；接下来重点看第二个</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addAdaptableBeans</span><span class="token punctuation">(</span><span class="token class-name">ListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token class-name">MultipartConfigElement</span> multipartConfig <span class="token operator">=</span> <span class="token function">getMultipartConfig</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">addAsRegistrationBean</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> <span class="token class-name">Servlet</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
			<span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBeanAdapter</span><span class="token punctuation">(</span>multipartConfig<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">addAsRegistrationBean</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> <span class="token class-name">Filter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
			<span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBeanAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> listenerType <span class="token operator">:</span> <span class="token class-name">ServletListenerRegistrationBean</span>
			<span class="token punctuation">.</span><span class="token function">getSupportedTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token function">addAsRegistrationBean</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">,</span> <span class="token class-name">EventListener</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
				<span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EventListener</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> listenerType<span class="token punctuation">,</span>
				<span class="token keyword">new</span> <span class="token class-name">ServletListenerRegistrationBeanAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面调用的方法命名就可以看出，我们的Filter注册就在<code>addAsRegistrationBean(beanFactory, Filter.class, new FilterRegistrationBeanAdapter());</code></p><figure><img src="`+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上面的截图就比较核心了，在创建<code>FilterRegistrationBean</code>的时候，根据Filter的顺序来指定最终的优先级</p><p>然后再回到构造方法中，根据order进行排序, 最终确定Filter的优先级</p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-webfilter方式" tabindex="-1"><a class="header-anchor" href="#_2-webfilter方式" aria-hidden="true">#</a> 2. WebFilter方式</h3><p>接下来我们看一下WebFilter方式为什么不生效，在根据我的项目源码进行测试的时候，请将需要修改一下自定义的Filter，将类上的<code>@WebFilter</code>注解打开，<code>@Component</code>注解删除，并且打开Application类上的<code>ServletComponentScan</code></p><p>我们这里debug的路径和上面的差别不大，重点关注下面<code>ServletContextInitializerBeans</code>的构造方法上面</p><p>当我们深入<code>addServletContextInitializerBeans(beanFactory);</code>这一行进去debug的时候，会发现我们自定义的Filter是在这里面完成初始化的；而前面的使用方式，则是在<code>addAdapterBeans()</code>方法中初始化的，如下图</p><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在<code>getOrderedBeansOfType(beanFactory, ServletContextInitializer.class)</code>的调用中就返回了我们自定义的Bean，也就是说我们自定义的Filter被认为是<code>ServletContextInitializer</code>的类型了</p><p>然后我们换个目标，看一下ReqFilter在注册的时候是怎样的</p><p>关键代码: <code>org.springframework.beans.factory.support.DefaultListableBeanFactory#registerBeanDefinition</code></p><p>（因为bean很多，所以我们可以加上条件断点）</p><figure><img src="'+b+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>通过断点调试，可以知道我们的自定义Filter是通过<code>WebFilterHandler</code>类扫描注册的, 对这一块管兴趣的可以深入看一下<code>org.springframework.boot.web.servlet.ServletComponentRegisteringPostProcessor#scanPackage</code></p></blockquote><p>上面只是声明了Bean的注册信息，但是还没有具体的实例化，接下来我们回到前面的进程，看一下Filter的实例过程</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">getOrderedBeansOfType</span><span class="token punctuation">(</span>
			<span class="token class-name">ListableBeanFactory</span> beanFactory<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> excludes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> comparator <span class="token operator">=</span> <span class="token punctuation">(</span>o1<span class="token punctuation">,</span>
				o2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">AnnotationAwareOrderComparator</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>o1<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
						o2<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> name <span class="token operator">:</span> names<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>excludes<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">ScopedProxyUtils</span><span class="token punctuation">.</span><span class="token function">isScopedTarget</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token class-name">T</span> bean <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>excludes<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
					map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> beans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		beans<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		beans<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>comparator<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> beans<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意我们的Filter实例在<code>T bean = beanFactory.getBean(name, type);</code></p><p>通过这种方式获取的Filter实例，并不会将ReqFilter类上的Order注解的值，来更新<code>FilterRegistrationBean</code>的order属性，所以这个注解不会生效</p><p>最后我们再看一下，通过WebFilter的方式，容器类不会存在<code>ReqFilter.class</code>类型的Bean, 这个与前面的方式不同</p><figure><img src="`+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="iii-小结" tabindex="-1"><a class="header-anchor" href="#iii-小结" aria-hidden="true">#</a> III. 小结</h2><p>本文主要介绍了另外一种Filter的使用姿势，将Filter当做普通的Spring Bean对象进行注册，这种场景下，可以直接使用<code>@Order</code>注解来指定Filter的优先级</p><p>但是，这种方式下，我们的Filter的很多基本属性不太好设置，一个方案是参考SpringBoot提供的一些Fitler的写法，在Filter内部来实现相关逻辑</p><h3 id="_0-项目" tabindex="-1"><a class="header-anchor" href="#_0-项目" aria-hidden="true">#</a> 0. 项目</h3><h4 id="web系列博文" tabindex="-1"><a class="header-anchor" href="#web系列博文" aria-hidden="true">#</a> web系列博文</h4>',61),_={href:"https://mp.weixin.qq.com/s/f01KWO3d2zhoN0Qa9-Qb6w",target:"_blank",rel:"noopener noreferrer"},w={href:"https://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247484348&idx=1&sn=e9b36572c721418b097396b50319d140&chksm=fce71810cb9091063e810327e44f7ed07256188aecd352fa43f37e63e63dc64292b1a48b00cf&token=823367253&lang=zh_CN#rd",target:"_blank",rel:"noopener noreferrer"},y={href:"https://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247484344&idx=1&sn=d4b1422a709d9540583e33443aab6fff&chksm=fce71814cb9091025a960312c878ff9fc4f44fd0035aa597f55f37c90dcbac25a3e96ee2c528&token=118864495&lang=zh_CN#rd",target:"_blank",rel:"noopener noreferrer"},F={href:"https://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247484336&idx=1&sn=d70f15e77bbd219af8015f9037a167fb&chksm=fce7181ccb90910aee427a3f3ed7660e8303c7460859c82622a651ce1cc3d7a97f62f80ed4e0&token=2447275&lang=zh_CN#rd",target:"_blank",rel:"noopener noreferrer"},x={href:"https://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247484322&idx=1&sn=b18090f35b59097f78858b6609506b74&chksm=fce7180ecb909118d939f3ddf741a11c0977b1213d7afa12c970590590d40441c3a085c43c52&token=2447275&lang=zh_CN#rd",target:"_blank",rel:"noopener noreferrer"},z={href:"http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247484310&idx=1&sn=f6259cf1b79db095ff2e9534993d27cf&chksm=fce7183acb90912cd150f086e90ecab3eceb3464e9352853e2e722288d412dbb3eb20c6e6ae7&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},S={href:"https://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247484309&idx=1&sn=33d782f7529268eef6607a1ab8d41018&chksm=fce71839cb90912f6020aa9463bc0136cb57969ebe27eba865d97e212c28211435791aa874ea&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},B={href:"https://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247484291&idx=1&sn=3f7e8c92ca4d7270cc5c40cafea39683&chksm=fce7182fcb90913922654a4f2f04e7029b8944d71c31741334a3235aecbe1e60babcb0c0be74&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},M={href:"https://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247484287&idx=1&sn=44461f564d6b04cbf1a5902dcb4f23c6&chksm=fce718d3cb9091c5d730e63ae954c0831d53f3dd5af5d19d9c78b6009102838efaf56f7838ff&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},q={href:"https://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247484282&idx=1&sn=a8d236d935ae24cfbe6977e24a479caa&chksm=fce718d6cb9091c0dd8a6b113236f9ae9388fb026c9403c97bdf7505f773bd7330a43e3b269c&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},C={href:"https://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247484268&idx=3&sn=9e8a6121dce291c65bd2b3d4fab24178&chksm=fce718c0cb9091d6674fb809d68ca3dc3b1695162368481abf8dc094000412116d2f9971c54b&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},T={href:"http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247484268&idx=2&sn=f800c001061eabe74e2cad915af1921a&chksm=fce718c0cb9091d682b600673a0584955783f0d339248e34323efbea9b698560c432018717ef&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},A={href:"http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247484268&idx=1&sn=acd691729488d81a94c938151d5737ce&chksm=fce718c0cb9091d63ef5f12893bb835c256a18318e791a0d193d00ef767ecfd019491d02e83d&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},N={href:"https://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247484217&idx=1&sn=9fdf45d2261cdcf2ccaccaebfb5ef598&chksm=fce71895cb90918361f1afd55a2b5fc9d65508913c1d793710afa79cae38bd9d57e32ad2c187&token=2447275&lang=zh_CN#rd",target:"_blank",rel:"noopener noreferrer"},j={href:"https://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247484197&idx=1&sn=0184953527f58058ee8c2bbcfc2689ec&chksm=fce71889cb90919f9be003bf2487343f7952d6b33ab5ee5fb7251ae37a631d4c32e6d8a57528&token=2447275&lang=zh_CN#rd",target:"_blank",rel:"noopener noreferrer"},R={href:"https://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247484193&idx=1&sn=d8a284fe0a2b8e1fefe07d892558f563&chksm=fce7188dcb90919b1f8a2408bf955e37e88b043e2dbd59b5290ac1501e3d2d303512bac6af2c&token=2447275&lang=zh_CN#rd",target:"_blank",rel:"noopener noreferrer"},O={href:"https://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247484186&idx=1&sn=18db571b670815965ae9185830c4e88f&chksm=fce718b6cb9091a054e0ac4be051341d8ce38ff8e40c5911302e3d6981206c14b80770590044&token=2447275&lang=zh_CN#rd",target:"_blank",rel:"noopener noreferrer"},I={href:"https://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247484139&idx=1&sn=b4a5f3ca6215641c6bcf5123f2bfb501&chksm=fce71947cb9090511042ae97a12cc975d2b199521e17980e685cccb5e0be91a8e932cef4eb76&token=2447275&lang=zh_CN#rd",target:"_blank",rel:"noopener noreferrer"},E=n("h4",{id:"项目源码",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#项目源码","aria-hidden":"true"},"#"),s(" 项目源码")],-1),Q={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"},W={href:"https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/201-web",target:"_blank",rel:"noopener noreferrer"};function L(U,V){const a=l("ExternalLinkIcon");return p(),o("div",null,[f,n("blockquote",null,[n("p",null,[s("本篇博文强烈推荐与上一篇关联阅读，可以get到更多的知识点: "),n("a",g,[s("191016-SpringBoot系列教程web篇之过滤器Filter使用指南"),e(a)])])]),c(" more "),h,n("ul",null,[n("li",null,[n("a",_,[s("191016-SpringBoot系列教程web篇之过滤器Filter使用指南"),e(a)])]),n("li",null,[n("a",w,[s("191012-SpringBoot系列教程web篇之自定义异常处理HandlerExceptionResolver"),e(a)])]),n("li",null,[n("a",y,[s("191010-SpringBoot系列教程web篇之全局异常处理"),e(a)])]),n("li",null,[n("a",F,[s("190930-SpringBoot系列教程web篇之404、500异常页面配置"),e(a)])]),n("li",null,[n("a",x,[s("190929-SpringBoot系列教程web篇之重定向"),e(a)])]),n("li",null,[n("a",z,[s("190913-SpringBoot系列教程web篇之返回文本、网页、图片的操作姿势"),e(a)])]),n("li",null,[n("a",S,[s("190905-SpringBoot系列教程web篇之中文乱码问题解决"),e(a)])]),n("li",null,[n("a",B,[s("190831-SpringBoot系列教程web篇之如何自定义参数解析器"),e(a)])]),n("li",null,[n("a",M,[s("190828-SpringBoot系列教程web篇之Post请求参数解析姿势汇总"),e(a)])]),n("li",null,[n("a",q,[s("190824-SpringBoot系列教程web篇之Get请求参数解析姿势汇总"),e(a)])]),n("li",null,[n("a",C,[s("190822-SpringBoot系列教程web篇之Beetl环境搭建"),e(a)])]),n("li",null,[n("a",T,[s("190820-SpringBoot系列教程web篇之Thymeleaf环境搭建"),e(a)])]),n("li",null,[n("a",A,[s("190816-SpringBoot系列教程web篇之Freemaker环境搭建"),e(a)])]),n("li",null,[n("a",N,[s("190421-SpringBoot高级篇WEB之websocket的使用说明"),e(a)])]),n("li",null,[n("a",j,[s("190327-Spring-RestTemplate之urlencode参数解析异常全程分析"),e(a)])]),n("li",null,[n("a",R,[s("190317-Spring MVC之基于java config无xml配置的web应用构建"),e(a)])]),n("li",null,[n("a",O,[s("190316-Spring MVC之基于xml配置的web应用构建"),e(a)])]),n("li",null,[n("a",I,[s("190213-SpringBoot文件上传异常之提示The temporary upload location xxx is not valid"),e(a)])])]),E,n("ul",null,[n("li",null,[s("工程："),n("a",Q,[s("https://github.com/liuyueyi/spring-boot-demo"),e(a)])]),n("li",null,[s("项目："),n("a",W,[s("https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/201-web"),e(a)])])])])}const H=t(v,[["render",L],["__file","191018-SpringBoot系列教程web篇之过滤器Filter使用指南扩展篇.html.vue"]]);export{H as default};
