import{_ as p,V as o,W as c,X as i,Y as n,Z as s,$ as t,a1 as e,F as l}from"./framework-094145d2.js";const u="/tutorial/imgs/190623/00.jpg",r="/tutorial/imgs/190623/01.jpg",d="/tutorial/imgs/190623/02.jpg",k="/tutorial/imgs/190623/03.jpg",m="/tutorial/imgs/190623/04.jpg",v="/tutorial/imgs/190623/05.jpg",b="/tutorial/imgs/190623/06.jpg",g="/tutorial/imgs/190623/07.jpg",y={},h=n("p",null,"上面两篇博文拉开了jpa使用姿势的面纱一角，接下来我们继续往下扯，数据插入db之后，并不是说就一层不变了，就好比我在银行开了户，当然是准备往里面存钱了，有存就有取（特别是当下银行利率这么低还不如买比特币屯着，截止19年6月22日，btc已经突破1.1w$，可惜没钱买😭）这就是我们今天的主题，数据更新--update的使用姿势",-1),E=e('<p>通过本篇博文，您至少可以选到</p><ul><li><code>save()</code> 直接根据id来修改记录</li><li>利用<code>jpl</code> 实现查询修改的使用姿势</li><li>初识事物的神秘面纱</li></ul><h2 id="i-环境准备" tabindex="-1"><a class="header-anchor" href="#i-环境准备" aria-hidden="true">#</a> I. 环境准备</h2><p>在开始之前，当然得先准备好基础环境，如安装测试使用mysql，创建SpringBoot项目工程，设置好配置信息等，关于搭建项目的详情可以参考前一篇文章</p>',4),f={href:"http://spring.hhui.top/spring-blog/2019/06/12/190612-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/",target:"_blank",rel:"noopener noreferrer"},B={href:"http://spring.hhui.top/spring-blog/2019/06/14/190614-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA%E4%B9%8B%E6%96%B0%E5%A2%9E%E8%AE%B0%E5%BD%95%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/",target:"_blank",rel:"noopener noreferrer"},_=e('<p>下面简单的看一下演示添加记录的过程中，需要的配置</p><h3 id="_1-表准备" tabindex="-1"><a class="header-anchor" href="#_1-表准备" aria-hidden="true">#</a> 1. 表准备</h3><p>沿用前一篇的表，结构如下</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>money<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>\n  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;用户名&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>money<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;0&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;钱&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>is_deleted<span class="token punctuation">`</span></span> <span class="token keyword">tinyint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>create_at<span class="token punctuation">`</span></span> <span class="token keyword">timestamp</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;创建时间&#39;</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>update_at<span class="token punctuation">`</span></span> <span class="token keyword">timestamp</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;更新时间&#39;</span><span class="token punctuation">,</span>\n  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-项目配置" tabindex="-1"><a class="header-anchor" href="#_2-项目配置" aria-hidden="true">#</a> 2. 项目配置</h3><p>配置信息，与之前有一点点区别，我们新增了更详细的日志打印；本篇主要目标集中在添加记录的使用姿势，对于配置说明，后面单独进行说明</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment">## DataSource</span>\n<span class="token key attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://127.0.0.1:3306/story?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false</span>\n<span class="token key attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.jdbc.Driver</span>\n<span class="token key attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>\n<span class="token key attr-name">spring.datasource.password</span><span class="token punctuation">=</span>\n<span class="token comment">## jpa相关配置</span>\n<span class="token key attr-name">spring.jpa.database</span><span class="token punctuation">=</span><span class="token value attr-value">MYSQL</span>\n<span class="token key attr-name">spring.jpa.hibernate.ddl-auto</span><span class="token punctuation">=</span><span class="token value attr-value">none</span>\n<span class="token key attr-name">spring.jpa.show-sql</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>\n<span class="token key attr-name">spring.jackson.serialization.indent_output</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>\n<span class="token key attr-name">spring.jpa.hibernate.naming.physical-strategy</span><span class="token punctuation">=</span><span class="token value attr-value">org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-数据准备" tabindex="-1"><a class="header-anchor" href="#_3-数据准备" aria-hidden="true">#</a> 3. 数据准备</h3><p>数据修改嘛，所以我们先向表里面插入两条数据，用于后面的操作</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>money<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>money<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>is_deleted<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>create_at<span class="token punctuation">`</span></span><span class="token punctuation">,</span> <span class="token identifier"><span class="token punctuation">`</span>update_at<span class="token punctuation">`</span></span><span class="token punctuation">)</span>\n<span class="token keyword">VALUES</span>\n	<span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">&#39;jpa 修改-&gt;一灰灰&#39;</span><span class="token punctuation">,</span> <span class="token number">1212</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-06-22 21:41:13&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-06-22 21:41:13&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n	<span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">&#39;jpa 修改-&gt;一灰灰&#39;</span><span class="token punctuation">,</span> <span class="token number">6666</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-06-22 21:41:13&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2019-06-22 21:41:13&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="'+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="ii-update使用教程" tabindex="-1"><a class="header-anchor" href="#ii-update使用教程" aria-hidden="true">#</a> II. Update使用教程</h2><p>下面开始进入正题，为方便初看的同学（没空或者没兴趣瞅前面几个博文的同学）会有部分内容和前面的博文相同，看过的请无视</p><h3 id="_1-表关联pojo" tabindex="-1"><a class="header-anchor" href="#_1-表关联pojo" aria-hidden="true">#</a> 1. 表关联POJO</h3><p>前面插入篇已经介绍了POJO的逐步创建过程，已经对应的注解含义，下面直接贴出成果</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@DynamicInsert</span>
<span class="token annotation punctuation">@Entity</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;money&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MoneyPO</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Id</span>
    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">IDENTITY</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span>

    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;money&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> money<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;is_deleted&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Byte</span> isDeleted<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;create_at&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@CreatedDate</span>
    <span class="token keyword">private</span> <span class="token class-name">Timestamp</span> createAt<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;update_at&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@CreatedDate</span>
    <span class="token keyword">private</span> <span class="token class-name">Timestamp</span> updateAt<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面类中的几个注解，说明如下</p><ul><li><code>@Data</code> 属于lombok注解，与jpa无关，自动生成<code>getter/setter/equals/hashcode/tostring</code>等方法</li><li><code>@Entity</code>, <code>@Table</code> jpa注解，表示这个类与db的表关联，具体匹配的是表 <code>money</code></li><li><code>@Id</code> <code>@GeneratedValue</code> 作用与自增主键</li><li><code>@Column</code>表明这个属性与表中的某列对应</li><li><code>@CreateDate</code>根据当前时间来生成默认的时间戳</li></ul><h3 id="_2-repository-api声明" tabindex="-1"><a class="header-anchor" href="#_2-repository-api声明" aria-hidden="true">#</a> 2. Repository API声明</h3><p>接下来我们新建一个api继承自<code>CurdRepository</code>，然后通过这个api来与数据库打交道</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MoneyUpdateRepository</span> <span class="token keyword">extends</span> <span class="token class-name">CrudRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MoneyPO</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-使用姿势" tabindex="-1"><a class="header-anchor" href="#_3-使用姿势" aria-hidden="true">#</a> 3. 使用姿势</h3><h4 id="a-save" tabindex="-1"><a class="header-anchor" href="#a-save" aria-hidden="true">#</a> a. save</h4><p>在前面一篇插入博文中，我们知道当POJO的id存在时，调用save方法可能有两种情况</p><ul><li>若db中这个id对应的字段不存在，则插入</li><li>若db中这个id对应的字段存在，则更新</li></ul><p>我们来试一下更新的效果，下面的代码演示了两块，一个是当po中的所有成员值有效，更新其中的一个时，会怎样；另外一个演示的是部分更新时会怎样（name为空，表示我不希望更新name）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">simpleUpdateById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">MoneyPO</span> record <span class="token operator">=</span> moneyUpdateRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 直接修改这个record的内容</span>
    record<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span><span class="token number">3333L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    moneyUpdateRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span>

    record <span class="token operator">=</span> moneyUpdateRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;after updateMoney record: &quot;</span> <span class="token operator">+</span> record<span class="token punctuation">)</span><span class="token punctuation">;</span>


    record<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    record<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span><span class="token number">6666L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    moneyUpdateRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    record <span class="token operator">=</span> moneyUpdateRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;after updateMoney record: &quot;</span> <span class="token operator">+</span> record<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果发现，前面执行成功，后面执行失败</p><figure><img src="`+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上面为第一个执行结果，从拼接的sql可以知道，是全量的修改；输出结果也如我们预期</p><p>后面将name设置为空之后，再次更新，发现抛出异常，如下，这个是因为我们的db限制，字段不允许有null的存在</p><figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从拼接的sql上看，我们知道是因为每个成员都作为了<code>update sql</code>家族的一员，在insert这一篇中我们也遇到了类似的问题，当时是在POJO上添加注解<code>@DynamicInsert</code>，根据实际需要选择插入，那么在更新这里是不是也有类似的注解呢</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@DynamicUpdate</span>
<span class="token annotation punctuation">@DynamicInsert</span>
<span class="token annotation punctuation">@Entity</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;money&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MoneyPO</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在pojo上添加注解<code>@DynamicUpdate</code>之后，再次进行尝试，结果如下</p><figure><img src="`+k+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>居然还是失败了，从输出的sql来看，居然把<code>name</code>和<code>money</code>都当成了sql的一部分，难道是因为我们调用了setter方法的原因么。待着猜测，再来一次</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">MoneyPO</span> toUpdate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MoneyPO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
toUpdate<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
toUpdate<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span><span class="token number">6666L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
moneyUpdateRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>toUpdate<span class="token punctuation">)</span><span class="token punctuation">;</span>
record <span class="token operator">=</span> moneyUpdateRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;after updateMoney record: &quot;</span> <span class="token operator">+</span> record<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下，看来我们上面的猜测并不对，拼接sql应该是根据哪个字段发生了变化，就把哪个做为sql的一部分来做的</p><figure><img src="`+m+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上面这个使用姿势看完之后，会有一个明显的感觉，这个更新的支持，必须先获取目标对象再进行修改，很难满足我们的日常业务场景；</p><h4 id="b-查询更新" tabindex="-1"><a class="header-anchor" href="#b-查询更新" aria-hidden="true">#</a> b. 查询更新</h4><p>根据某个条件来更新对应的数据，这个就比较常见了，在jpa中，没有找到根据方法名来支撑这种场景的方式，但是发现了另外一个有意思的东西--<code>jql</code></p><p>直接在方法方面，添加注解，注解内部写sql</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 根据金钱来修改状态
 *
 * <span class="token keyword">@param</span> <span class="token parameter">money</span>
 * <span class="token keyword">@param</span> <span class="token parameter">state</span>
 */</span>
<span class="token annotation punctuation">@Modifying</span>
<span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">&quot;update MoneyPO m set m.isDeleted=?2 where  m.money=?1&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">updateStateByMoney</span><span class="token punctuation">(</span><span class="token class-name">Long</span> money<span class="token punctuation">,</span> <span class="token class-name">Byte</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 表达式计算
 *
 * <span class="token keyword">@param</span> <span class="token parameter">id</span>
 * <span class="token keyword">@param</span> <span class="token parameter">money</span>
 */</span>
<span class="token annotation punctuation">@Modifying</span>
<span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">&quot;update MoneyPO m set m.money=m.money + ?2 where m.id=?1&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">addMoneyById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">,</span> <span class="token class-name">Long</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面就是一个查询更新的case，注意两个注解</p><ul><li><code>@Modifying</code> 这个必须有，告诉框架我们执行的是更新/删除操作</li><li><code>@Query</code> 内部是正常的sql语句，但是需要注意的是表名，不是实际的表，而是我们前面定义的POJO</li></ul><p>然后来测试一下使用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateByQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 通过查询修改</span>
    moneyUpdateRepository<span class="token punctuation">.</span><span class="token function">updateStateByMoney</span><span class="token punctuation">(</span><span class="token number">6666L</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">MoneyPO</span> record <span class="token operator">=</span> moneyUpdateRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;after update record: &quot;</span> <span class="token operator">+</span> record<span class="token punctuation">)</span><span class="token punctuation">;</span>


    moneyUpdateRepository<span class="token punctuation">.</span><span class="token function">addMoneyById</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">3333L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    record <span class="token operator">=</span> moneyUpdateRepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;after addMoney record: &quot;</span> <span class="token operator">+</span> record<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行上面的代码，悲催的发现居然报错了 <code>Caused by: javax.persistence.TransactionRequiredException: Executing an update/delete query</code></p><figure><img src="`+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从堆栈的描述上来看，更新/删除必须要开启事务，那么事务是什么东西呢？下面推荐几篇博文</p>',52),A={href:"https://blog.hhui.top/hexblog/2018/03/23/mysql%E4%B9%8B%E9%94%81%E4%B8%8E%E4%BA%8B%E5%8A%A1%E8%AF%A6%E8%A7%A3/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://blog.hhui.top/hexblog/2018/05/12/Spring%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BA%8B%E5%8A%A1%E7%9A%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/",target:"_blank",rel:"noopener noreferrer"},q={href:"https://blog.hhui.top/hexblog/2018/05/13/Spring%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E4%B8%8E%E4%BC%A0%E6%92%AD%E5%B1%9E%E6%80%A7/",target:"_blank",rel:"noopener noreferrer"},j=e(`<p>关于jpa中更多事务相关的，后面再引入，我们先回到本文主题，如何解决问题: 在调用上面的方法上面添加事务注解即可</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Transactional</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">simpleUpdateById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">updateByQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次执行之后，结果如下</p><figure><img src="`+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>看上面的结果，发现money+3333之后的输出结果居然还是6666；但是我们再看db的结果，已经是9999了，为什么会这样呢？</p><figure><img src="'+g+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上面这个问题比较有意思了，初步猜测与事物已经jpa的内部缓存机制有关系，至于具体是不是这样，有必要专门开坑来验证一二</p><h3 id="_4-小结" tabindex="-1"><a class="header-anchor" href="#_4-小结" aria-hidden="true">#</a> 4. 小结</h3><p>利用JPA实现表数据的更新，上面主要介绍了两种方式， save + jql</p><p><strong>save</strong></p><p>通过save更新时，需要指定id来实现单条记录的修改</p><p><strong>jql</strong></p><p>语法与sql差不多，配合两个注解 <code>@Modifying</code>, <code>@Query</code>来使用，下面是一个实例，两点需要注意</p><ul><li>表名是我们定义的与db中表关联的POJO</li><li>参数传递格式为<code>?index</code>， index为参数位置</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Modifying</span>
<span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">&quot;update MoneyPO m set m.isDeleted=?2 where  m.money=?1&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">updateStateByMoney</span><span class="token punctuation">(</span><span class="token class-name">Long</span> money<span class="token punctuation">,</span> <span class="token class-name">Byte</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数据修改和删除，需要显示声明事务，否则会报错，一个是在调用的方法上添加注解 <code>@Transactional</code>，或者直接在repository api的接口上添加注解 <code>@Transactional</code></p><h2 id="ii-其他" tabindex="-1"><a class="header-anchor" href="#ii-其他" aria-hidden="true">#</a> II. 其他</h2><h3 id="_0-源码与相关博文" tabindex="-1"><a class="header-anchor" href="#_0-源码与相关博文" aria-hidden="true">#</a> 0. 源码与相关博文</h3><p><strong>源码</strong></p>`,19),x={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"},T={href:"https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/102-jpa",target:"_blank",rel:"noopener noreferrer"},M=n("p",null,[n("strong",null,"相关博文")],-1),U={href:"https://blog.hhui.top/hexblog/2018/03/23/mysql%E4%B9%8B%E9%94%81%E4%B8%8E%E4%BA%8B%E5%8A%A1%E8%AF%A6%E8%A7%A3/",target:"_blank",rel:"noopener noreferrer"},S={href:"https://blog.hhui.top/hexblog/2018/05/12/Spring%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BA%8B%E5%8A%A1%E7%9A%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/",target:"_blank",rel:"noopener noreferrer"},I={href:"https://blog.hhui.top/hexblog/2018/05/13/Spring%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E4%B8%8E%E4%BC%A0%E6%92%AD%E5%B1%9E%E6%80%A7/",target:"_blank",rel:"noopener noreferrer"},D={href:"http://spring.hhui.top/spring-blog/2019/06/12/190612-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/",target:"_blank",rel:"noopener noreferrer"},N={href:"http://spring.hhui.top/spring-blog/2019/06/14/190614-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA%E4%B9%8B%E6%96%B0%E5%A2%9E%E8%AE%B0%E5%BD%95%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/",target:"_blank",rel:"noopener noreferrer"};function O(P,L){const a=l("ExternalLinkIcon");return o(),c("div",null,[h,i(" more "),E,n("ul",null,[n("li",null,[n("a",f,[s("190612-SpringBoot系列教程JPA之基础环境搭建"),t(a)])]),n("li",null,[n("a",B,[s("190614-SpringBoot系列教程JPA之新增记录使用姿势"),t(a)])])]),_,n("ul",null,[n("li",null,[n("a",A,[s("mysql之锁与事务详解"),t(a)])]),n("li",null,[n("a",w,[s("Spring学习之事务的使用姿势"),t(a)])]),n("li",null,[n("a",q,[s("Spring学习之事务管理与传播属性"),t(a)])])]),j,n("ul",null,[n("li",null,[s("工程："),n("a",x,[s("https://github.com/liuyueyi/spring-boot-demo"),t(a)])]),n("li",null,[s("module: "),n("a",T,[s("https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/102-jpa"),t(a)])])]),M,n("ul",null,[n("li",null,[n("a",U,[s("mysql之锁与事务详解"),t(a)])]),n("li",null,[n("a",S,[s("Spring学习之事务的使用姿势"),t(a)])]),n("li",null,[n("a",I,[s("Spring学习之事务管理与传播属性"),t(a)])]),n("li",null,[n("a",D,[s("190612-SpringBoot系列教程JPA之基础环境搭建"),t(a)])]),n("li",null,[n("a",N,[s("190614-SpringBoot系列教程JPA之新增记录使用姿势"),t(a)])])])])}const C=p(y,[["render",O],["__file","03.190623-SpringBoot系列教程JPA之update使用姿势.html.vue"]]);export{C as default};
