import{_ as o,V as l,W as c,Y as a,Z as n,$ as s,a0 as r,a1 as e,F as p}from"./framework-094145d2.js";const u="/tutorial/imgs/column/springai/07-1.webp",d="/tutorial/imgs/column/springai/07-2.webp",k="/tutorial/imgs/column/springai/07-3.webp",m="/tutorial/imgs/column/springai/07-4.webp",v="/tutorial/imgs/column/springai/07-5.webp",g="/tutorial/imgs/column/springai/07-6.webp",b="/tutorial/imgs/column/springai/07-7.webp",h="/tutorial/imgs/column/springai/07-8.webp",f={},C=e('<h1 id="_07-实现一个查询不同时区当前时间的mcp-server" tabindex="-1"><a class="header-anchor" href="#_07-实现一个查询不同时区当前时间的mcp-server" aria-hidden="true">#</a> 07.实现一个查询不同时区当前时间的MCP Server</h1><p>MCP可以说是25年最火的协议来了，MCP（Model Context Protocol，模型上下文协议）是由 Anthropic 公司于 2024 年底开源的标准化通信协议，旨在解决大模型与外部工具、数据源之间的碎片化集成问题，被誉为 “AI 领域的 USB-C 接口”。</p><p>其核心作用是通过统一的协议规范，让大模型（如 Claude、GPT-4、LLaMA 等）能够安全、高效地连接任意工具和数据，而无需为每个系统单独开发适配代码</p><h2 id="一、mcp简介" tabindex="-1"><a class="header-anchor" href="#一、mcp简介" aria-hidden="true">#</a> 一、MCP简介</h2><p>在正式创建一个MCP Server之前，我们先了解一下mcp的相关概念</p><h3 id="_1-1-mcp是什么" tabindex="-1"><a class="header-anchor" href="#_1-1-mcp是什么" aria-hidden="true">#</a> 1.1 MCP是什么</h3><blockquote><p>MCP （Model Context Protocol，模型上下文协议），它提供了一个通用的开放标准，用于将 AI 系统与数据源连接起来，用单一协议取代碎片化的集成。结果是一种更简单、更可靠的方法，使 AI 系统能够访问所需的数据。这是一种将 AI 助手连接到数据所在的系统（包括内容存储库、业务工具和开发环境）的新标准。其目的是帮助前沿模型产生更好、更相关的响应。</p></blockquote><p>简单来讲，mcp就是定义了标准，对于所有希望给大模型提供能力的小伙伴来说，只要按照这个标准完成能力封装，那么大模型就可以直接加载这些能力从而实现某些特定的功能。</p><p>举一个例子，usb大家应该都不陌生，如果你只买一个台式机主机，这个时候你会发现我除了按它的开关按钮之外，好像什么也干不了。然后我买了键盘、鼠标、显示器、摄像头等外设，然后通过usb接口插上之后就可以操作电脑了，电脑是怎么识别这些外接设备（键盘、鼠标、摄像头等）的呢？ 这就是usb协议的作用了，外接设备和电脑，都遵循usb协议，然后大家就可以在同一个频道进行交流了；同样的MCP就是为了干这件事情，让大模型和给大模型提供增强能力的服务能同频进行交流</p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1-2-mcp总体架构" tabindex="-1"><a class="header-anchor" href="#_1-2-mcp总体架构" aria-hidden="true">#</a> 1.2 MCP总体架构</h3><p>MCP遵循客户端-服务端（CS）的架构，一个主机可以连接多个MCP服务端</p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从上面的描述和整体架构图，可以看到在MCP的架构中，有三个重要的角色</p><ul><li>MCP Hosts(MCP主机)： 通过mcp协议获取数据的程序（比如 Claude Desktop, IDE 或者 ai工具）</li><li>MCP Clients(MCP客户端): mcp协议客户端，作为调用者，通常与mcp服务端是成对出现，用于连接mcp server，实现双方通信</li><li>MCP Servers(MCP服务端): mcp协议服务端，作为提供者，实现MCP协议提供特定的功能</li></ul><p>除了上面三个角色之外，在架构图中，还有两个</p><ul><li>Local Data Sources: MCPServer所在的计算机上本地的资源信息，如文件、数据库、应用服务等，即MCP通过操作(读取、访问、写入等)这些本地资源来提供特定能力</li><li>Remote Service: MCPServer通过调用远程的服务来提供能力</li></ul><h3 id="_1-3-mcp工作原理" tabindex="-1"><a class="header-anchor" href="#_1-3-mcp工作原理" aria-hidden="true">#</a> 1.3 MCP工作原理</h3><p>mcp只是一个协议，和http协议一样，本身不直接提供能力或者服务，我们能实际感知到的服务表现只是协议上层的应用封装</p><p>比如http协议，常见的工作流程是我们打开浏览器，点开网页，通过http协议访问到对应的后台服务器，然后对方将网页信息传输到我们的浏览器上展示为可视化的网页内容，从而实现信息的曝光</p><p>那么mcp协议是怎么工作的呢？</p><ol><li>用户通过客户端发起提问</li><li>客户端将问题传递给 LLM</li><li>LLM 分析并选择合适的工具</li><li>通过 MCP 协议向服务端发送工具执行指令</li><li>工具执行后结果返回给 LLM</li><li>LLM 生成最终回复</li><li>回复通过客户端展示给用户</li></ol><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1-4-springai-mcp-实现" tabindex="-1"><a class="header-anchor" href="#_1-4-springai-mcp-实现" aria-hidden="true">#</a> 1.4 SpringAI MCP 实现</h3><p>SpringAI提供了MCP的Client/Server的集成，对于上层业务而言，要想实现一个MCP Server/Client比较简单</p><p><strong>MCP客户端</strong></p><p>MCP 客户端是 Model Context Protocol（MCP）架构的核心组件，负责建立并管理与 MCP 服务器的连接。它实现协议的客户端逻辑，主要处理以下功能：</p><ul><li>协议版本协商以确保与服务器的兼容性</li><li>功能协商以确定可用特性</li><li>消息传输及 JSON-RPC 通信</li><li>工具发现与执行</li><li>资源访问与管理</li><li>提示词系统交互</li><li>可选功能 <ul><li>根目录管理</li><li>采样支持</li></ul></li><li>同步与异步操作</li><li>传输协议选项： <ul><li>基于 Stdio 的进程间通信传输协议</li><li>基于 Java HttpClient 的 SSE 客户端传输协议</li><li>WebFlux SSE 客户端传输协议（用于响应式 HTTP 流式通信）</li></ul></li></ul><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>MCP服务端</strong></p><p>MCP 服务器是 Model Context Protocol（MCP）架构的基础组件，用于向客户端提供工具、资源和功能。它实现协议的服务端逻辑，主要职责包括：</p><ul><li>服务端协议操作的实现 <ul><li>工具暴露与发现</li><li>基于 URI 的资源管理及访问</li><li>提示（Prompt）模板的提供与处理</li><li>与客户端的功能协商</li><li>结构化日志记录与通知</li></ul></li><li>并发客户端连接管理</li><li>同步与异步 API 支持</li><li>传输协议实现： <ul><li>基于 Stdio 的进程间通信传输协议</li><li>基于 Servlet 的 SSE 服务器传输协议</li><li>WebFlux SSE 服务器传输协议（用于响应式 HTTP 流式通信）</li><li>WebMVC SSE 服务器传输协议（用于基于 Servlet 的 HTTP 流式通信）</li></ul></li></ul><figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="二、创建一个mcp-server" tabindex="-1"><a class="header-anchor" href="#二、创建一个mcp-server" aria-hidden="true">#</a> 二、创建一个MCP Server</h2><p>接下来我们进入正文，如何创建一个MCP Server，并且让我们的大模型能够访问这个MCP Server</p><h3 id="_1-项目创建" tabindex="-1"><a class="header-anchor" href="#_1-项目创建" aria-hidden="true">#</a> 1. 项目创建</h3>',36),_=e(`<h3 id="_1-依赖配置" tabindex="-1"><a class="header-anchor" href="#_1-依赖配置" aria-hidden="true">#</a> 1. 依赖配置</h3><p>在pom配置文件中需要添加核心的依赖，这里是 <code>spring-ai-starter-mcp-server-webmvc</code></p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.ai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-ai-starter-mcp-server-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在<code>application.yml</code>配置文件中，设置MVC Server的相关参数 (下面基本都是默认配置)</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">ai</span><span class="token punctuation">:</span>
    <span class="token key atrule">mcp</span><span class="token punctuation">:</span>
      <span class="token key atrule">server</span><span class="token punctuation">:</span>
        <span class="token key atrule">name</span><span class="token punctuation">:</span> date<span class="token punctuation">-</span>server
        <span class="token key atrule">version</span><span class="token punctuation">:</span> 1.0.0
        <span class="token key atrule">type</span><span class="token punctuation">:</span> SYNC
        <span class="token key atrule">instructions</span><span class="token punctuation">:</span> <span class="token string">&quot;提供获取不同时区的当前时间，并按照北京时间进行展示&quot;</span>
        <span class="token key atrule">sse-message-endpoint</span><span class="token punctuation">:</span> /mcp/messages
        <span class="token key atrule">sse-endpoint</span><span class="token punctuation">:</span> /sse
        <span class="token key atrule">capabilities</span><span class="token punctuation">:</span>
          <span class="token key atrule">tool</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否支持工具</span>
          <span class="token key atrule">resource</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否支持资源</span>
          <span class="token key atrule">prompt</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否支持提示词</span>
          <span class="token key atrule">completion</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否支持补全</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重点参数说明：</p><ul><li>sse-endpoint: 用于 <code>Web</code> 传输的自定义 <code>SSE</code> 端点路径，MCP Client主要连接的就是这个端点</li><li>sse-message-endpoint: 客户端用于发送消息的端点路径,如后续大模型调用工具时，走的就是这个端点</li><li>type: 服务器类型（同步/异步）</li></ul><h3 id="_2-创建一个mcp-server" tabindex="-1"><a class="header-anchor" href="#_2-创建一个mcp-server" aria-hidden="true">#</a> 2. 创建一个MCP Server</h3><p>对于SpringAI而言，创建MCP Server和Function calling有点相似，也是通过 <code>@Tool</code> 注解将方法声明为工具，区别是一个作为mcp的工具，一个是作为function calling的回调方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateService</span> <span class="token punctuation">{</span>
  <span class="token annotation punctuation">@Tool</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">&quot;传入时区，返回对应时区的当前时间给用户&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getTimeByZoneId</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ToolParam</span><span class="token punctuation">(</span>description <span class="token operator">=</span> <span class="token string">&quot;需要查询时间的时区&quot;</span><span class="token punctuation">)</span> <span class="token class-name">ZoneId</span> area<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 根据系统当前时间，获取指定时区的时间</span>
    <span class="token class-name">ZonedDateTime</span> time <span class="token operator">=</span> <span class="token class-name">ZonedDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 格式化时间</span>
    <span class="token class-name">DateTimeFormatter</span> formatter <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> ans <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>formatter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;传入的时区是：&quot;</span> <span class="token operator">+</span> area <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后将这个工具注册为MCP工具暴露给大模型</p><p>SpringAI的自动配置将检测并注册来自以下组件的所有工具回调</p><ul><li>独立的 ToolCallback Bean</li><li>ToolCallback Bean 列表</li><li>ToolCallbackProvider Bean</li></ul><p>工具按名称去重，每个工具名称仅保留首次出现的实例，如下创建一个<code>ToolCallbackProvider</code>的 <code>@Bean</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ToolConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ToolCallbackProvider</span> <span class="token function">dateProvider</span><span class="token punctuation">(</span><span class="token class-name">DateService</span> dateService<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">MethodToolCallbackProvider</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toolObjects</span><span class="token punctuation">(</span>dateService<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-启动项目" tabindex="-1"><a class="header-anchor" href="#_3-启动项目" aria-hidden="true">#</a> 3. 启动项目</h3>`,16),P={href:"http://localhost:8080/sse",target:"_blank",rel:"noopener noreferrer"},M=e('<figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_4-trae配置mcp" tabindex="-1"><a class="header-anchor" href="#_4-trae配置mcp" aria-hidden="true">#</a> 4. Trae配置MCP</h3><p>接下来我们使用Trae来连接上面实现的mcp server，并使用mcp server提供的工具</p><p>以 TraeCN 2.0 为例，下面介绍下具体的配置过程</p><figure><img src="'+b+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>需要贴在trae中的mcp server的json配置如下</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;mcpServers&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;时间MCP&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;sse&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;url&quot;</span><span class="token operator">:</span> <span class="token string">&quot;http://localhost:8080/sse&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后再来访问看看实际的效果</p><figure><img src="`+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>大模型准确的调用了我们刚才创建的MCPServer，分别返回了伦敦和巴黎的时间</p><h3 id="_5-小结" tabindex="-1"><a class="header-anchor" href="#_5-小结" aria-hidden="true">#</a> 5. 小结</h3><p>到这里我们已经实现了一个功能齐备的MCPServer，整体的代码实现非常简单，在需要作为MCP工具的，在方法上添加<code>@Tool</code>注解，然后借助创建<code>ToolCallbackProvider</code>将这些工具注册出来即可</p><p>本文介绍的是MCP通过http sse实现的，创建MCP Server的实现方式有很多种，这里只是介绍最简单的一种web同步请求，且没有权限管控</p><p>在创建一个生成可用的mcp server，目前还缺一个非常关键的认证机制，这个会在接下来的文章进行说明</p>',14),S={href:"https://github.com/liuyueyi/spring-ai-demo/tree/master/S07-mcp-server",target:"_blank",rel:"noopener noreferrer"};function y(x,q){const i=p("RouterLink"),t=p("ExternalLinkIcon");return l(),c("div",null,[C,a("p",null,[n("项目创建方式与之前并无差别，创建一个SpringBoot项目，并引入SpringAI的依赖，有需要的小伙伴参考 "),s(i,{to:"/spring/springai/%E5%9F%BA%E7%A1%80%E7%AF%87/01.%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AASpringAI-Demo%E5%B7%A5%E7%A8%8B.html"},{default:r(()=>[n("创建一个SpringAI-Demo工程")]),_:1})]),_,a("p",null,[n("启动项目，访问"),a("a",P,[n("http://localhost:8080/sse"),s(t)]),n(", 可以看到MCP Server已经启动了")]),M,a("p",null,[n("文中所有涉及到的代码，可以到项目中获取 "),a("a",S,[n("https://github.com/liuyueyi/spring-ai-demo"),s(t)])])])}const I=o(f,[["render",y],["__file","07.实现一个简单的McpServer.html.vue"]]);export{I as default};
