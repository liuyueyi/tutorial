import{_ as n,V as r,W as t,Y as a,Z as e,$ as i,a1 as p,F as o}from"./framework-094145d2.js";const l={},d={href:"https://liuyueyi.github.io/hexblog/2018/01/03/jvm%E8%B0%83%E4%BC%98%E7%9A%84%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%BB%8D/",target:"_blank",rel:"noopener noreferrer"},c=p(`<p>小结一下用的几个调优参数，特别是自带的<code>jvisualvm</code>,比较好用，但是功能丰富完整方面比jprofile要欠缺一点，后面有时间补上jprofile的使用过程</p><h2 id="i-调优工具" tabindex="-1"><a class="header-anchor" href="#i-调优工具" aria-hidden="true">#</a> I. 调优工具</h2><h3 id="_0-性能查看" tabindex="-1"><a class="header-anchor" href="#_0-性能查看" aria-hidden="true">#</a> 0. 性能查看</h3><p>对于需要查看应用占系统的CPU，内存等资源，可以使用top命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">top</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>因为too现实的进程号相关，可以按 <code>c</code> 现实详细的进程信息</p><h3 id="_1-查看内存占用情况" tabindex="-1"><a class="header-anchor" href="#_1-查看内存占用情况" aria-hidden="true">#</a> 1.查看内存占用情况</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>jmap <span class="token parameter variable">-histo</span> <span class="token number">24175</span> <span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> test.log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-gc情况查看" tabindex="-1"><a class="header-anchor" href="#_2-gc情况查看" aria-hidden="true">#</a> 2. gc情况查看</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>jstat <span class="token parameter variable">-gcutil</span> <span class="token number">9727</span> <span class="token number">1000</span> <span class="token number">20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-生成dump文件" tabindex="-1"><a class="header-anchor" href="#_3-生成dump文件" aria-hidden="true">#</a> 3. 生成dump文件</h3><p>首先查询对应的进程号，然后根据jmap来生成dump文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>jps <span class="token parameter variable">-l</span>
jmap <span class="token parameter variable">-dump:format</span><span class="token operator">=</span>b,file<span class="token operator">=</span>tmp.hprof <span class="token number">23517</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-远程jvisualvm" tabindex="-1"><a class="header-anchor" href="#_4-远程jvisualvm" aria-hidden="true">#</a> 4. 远程jvisualvm</h3><p>对应jar包启动命令，添加下面的参数</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">nohup</span> <span class="token function">java</span> <span class="token parameter variable">-Djava.rmi.server.hostname</span><span class="token operator">=</span><span class="token number">127.0</span>.0.1 <span class="token parameter variable">-Dcom.sun.management.jmxremote</span> <span class="token parameter variable">-Dcom.sun.management.jmxremote.port</span><span class="token operator">=</span><span class="token number">1099</span> <span class="token parameter variable">-Dcom.sun.management.jmxremote.authenticate</span><span class="token operator">=</span>false <span class="token parameter variable">-Dcom.sun.management.jmxremote.ssl</span><span class="token operator">=</span>false <span class="token parameter variable">-jar</span> test.jar <span class="token string">&quot;<span class="token variable">$@</span>&quot;</span> <span class="token operator">&gt;</span> /dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后再控制台输入</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>jvisualvm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后再弹出的页面添加远程连接即可</p><h3 id="_4-jprofile" tabindex="-1"><a class="header-anchor" href="#_4-jprofile" aria-hidden="true">#</a> 4. jprofile</h3><p>jar启动时，添加参数</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>-agentpath:/home/finbtc/soft/jprofiler10.1.2/bin/linux-x64/libjprofilerti.so<span class="token operator">=</span>port<span class="token operator">=</span><span class="token number">8849</span>,no-wait
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>相关使用说明，待完善</p>`,23);function m(u,h){const s=o("ExternalLinkIcon");return r(),t("div",null,[a("p",null,[e("相关博文: "),a("a",d,[e("jvm调优的工具介绍"),i(s)])]),c])}const b=n(l,[["render",m],["__file","180704-JDK常用监控参数.html.vue"]]);export{b as default};
