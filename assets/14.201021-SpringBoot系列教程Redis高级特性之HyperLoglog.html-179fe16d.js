import{_ as o,V as p,W as i,X as l,Y as n,Z as s,$ as e,a1 as t,F as r}from"./framework-094145d2.js";const c="/tutorial/imgs/201021/00.jpg",d="/tutorial/imgs/201021/01.jpg",u={},g=n("p",null,"hyperloglog算法，利用非常少的空间，实现比较大的数据量级统计；比如我们前面在介绍bitmap的过程中，说到了日活的统计，当数据量达到百万时，最佳的存储方式是hyperloglog，本文将介绍一下hyperloglog的基本原理，以及redis中的使用姿势",-1),E=t(`<h2 id="i-基本使用" tabindex="-1"><a class="header-anchor" href="#i-基本使用" aria-hidden="true">#</a> I. 基本使用</h2><h3 id="_1-配置" tabindex="-1"><a class="header-anchor" href="#_1-配置" aria-hidden="true">#</a> 1. 配置</h3><p>我们使用SpringBoot <code>2.2.1.RELEASE</code>来搭建项目环境，直接在<code>pom.xml</code>中添加redis依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们的redis是默认配置，则可以不额外添加任何配置；也可以直接在<code>application.yml</code>配置中，如下</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">host</span><span class="token punctuation">:</span> 127.0.0.1
    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">6379</span>
    <span class="token key atrule">password</span><span class="token punctuation">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-使用姿势" tabindex="-1"><a class="header-anchor" href="#_2-使用姿势" aria-hidden="true">#</a> 2. 使用姿势</h3><blockquote><p>我们下来看使用姿势，原理放在后面说明</p></blockquote><p>redis中，<code>hyperlolog</code>使用非常简单，一般就两个操作命令，添加<code>pfadd</code> + 计数<code>pfcount</code>；另外还有一个不常用的<code>merge</code></p><h4 id="a-add" tabindex="-1"><a class="header-anchor" href="#a-add" aria-hidden="true">#</a> a. add</h4><p>添加一条记录</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// pfadd key obj</span>
    <span class="token keyword">return</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHyperLogLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> obj<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="b-pfcount" tabindex="-1"><a class="header-anchor" href="#b-pfcount" aria-hidden="true">#</a> b. pfcount</h4><p>非精准的计数统计</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// pfcount 非精准统计 key的计数</span>
    <span class="token keyword">return</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHyperLogLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="a-merge" tabindex="-1"><a class="header-anchor" href="#a-merge" aria-hidden="true">#</a> a. merge</h4><p>将多个hyperloglog合并成一个新的hyperloglog；感觉用的场景并不会特别多</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token class-name">String</span> out<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// pfmerge out key1 key2  ---&gt; 将key1 key2 合并成一个新的hyperloglog out</span>
    <span class="token keyword">return</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForHyperLogLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">union</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-原理说明" tabindex="-1"><a class="header-anchor" href="#_3-原理说明" aria-hidden="true">#</a> 3. 原理说明</h3><p>关于HyperLogLog的原理我这里也不进行详细赘述，说实话那一套算法以及调和平均公式我自己也没太整明白；下面大致说一下我个人的朴素理解</p><p>Redis中的HyperLogLog一共分了<code>2^14=16384</code>个桶，每个桶占6个bit</p><p>一个数据，塞入HyperLogLog之前，先hash一下，得到一个64位的二进制数据</p><ul><li>取低14位，用来定位桶的index</li><li>高50位，从低到高数，找到第一个为1出现的位置n <ul><li>若桶中值 &gt; n，则丢掉</li><li>反之，则设置桶中的值为n</li></ul></li></ul><p>那么怎么进行计数统计呢？</p><ul><li>拿所有桶中的值，代入下面的公式进行计算</li></ul><figure><img src="`+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上面这个公式怎么得出的?</p>',27),h={href:"https://www.jianshu.com/p/55defda6dcd2",target:"_blank",rel:"noopener noreferrer"},B=n("h3",{id:"_4-应用场景",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-应用场景","aria-hidden":"true"},"#"),s(" 4. 应用场景")],-1),k=n("p",null,[n("code",null,"hyperloglog"),s("通常是用来非精确的计数统计，前面介绍了日活统计的case，当时使用的是bitmap来作为数据统计，然而当userId分散不均匀，小的特别小，大的特别大的时候，并不适用")],-1),A=n("code",null,"hyperloglog",-1),m=n("code",null,"2^14",-1),_={href:"https://mp.weixin.qq.com/s/AvPoG8ZZM8v9lKLyuSYnHQ",target:"_blank",rel:"noopener noreferrer"},b=t('<figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>使用HyperLogLog进行日活统计的设计思路比较简单</p><ul><li>每日生成一个key</li><li>某个用户访问之后，执行 <code>pfadd key userId</code></li><li>统计总数: <code>pfcount key</code></li></ul><h2 id="ii-其他" tabindex="-1"><a class="header-anchor" href="#ii-其他" aria-hidden="true">#</a> II. 其他</h2><h3 id="_0-项目" tabindex="-1"><a class="header-anchor" href="#_0-项目" aria-hidden="true">#</a> 0. 项目</h3><p><strong>系列博文</strong></p>',6),f={href:"https://spring.hhui.top/spring-blog/2020/10/17/201017-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRedis%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B9%8B%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://spring.hhui.top/spring-blog/2020/10/14/201014-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRedis%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B9%8BBitmap%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E5%8F%8A%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%E4%BB%8B%E7%BB%8D/",target:"_blank",rel:"noopener noreferrer"},y={href:"https://spring.hhui.top/spring-blog/2020/04/11/200411-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRedis%E4%B9%8B%E7%AE%A1%E9%81%93Pipelined%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/",target:"_blank",rel:"noopener noreferrer"},F={href:"https://spring.hhui.top/spring-blog/2019/09/27/190927-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BRedis%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/",target:"_blank",rel:"noopener noreferrer"},D={href:"https://spring.hhui.top/spring-blog/2019/05/13/190513-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8B%E5%80%9F%E5%8A%A9Redis%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%AB%99%E7%82%B9%E7%BB%9F%E8%AE%A1%E6%9C%8D%E5%8A%A1/",target:"_blank",rel:"noopener noreferrer"},R={href:"https://spring.hhui.top/spring-blog/2018/12/25/181225-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8B%E5%80%9F%E5%8A%A9Redis%E5%AE%9E%E7%8E%B0%E6%8E%92%E8%A1%8C%E6%A6%9C%E5%8A%9F%E8%83%BD/",target:"_blank",rel:"noopener noreferrer"},S={href:"https://spring.hhui.top/spring-blog/2018/12/12/181212-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BZSet%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/",target:"_blank",rel:"noopener noreferrer"},x={href:"https://spring.hhui.top/spring-blog/2018/12/11/181211-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BSet%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/",target:"_blank",rel:"noopener noreferrer"},L={href:"https://spring.hhui.top/spring-blog/2018/12/02/181202-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BHash%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://spring.hhui.top/spring-blog/2018/11/09/181109-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BList%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/",target:"_blank",rel:"noopener noreferrer"},j={href:"https://spring.hhui.top/spring-blog/2018/11/08/181108-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BString%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E8%AF%BB%E5%86%99/",target:"_blank",rel:"noopener noreferrer"},H={href:"https://spring.hhui.top/spring-blog/2018/11/01/181101-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BJedis%E9%85%8D%E7%BD%AE/",target:"_blank",rel:"noopener noreferrer"},I={href:"https://spring.hhui.top/spring-blog/2018/10/29/181029-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8B%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/",target:"_blank",rel:"noopener noreferrer"},C=n("p",null,[n("strong",null,"工程源码")],-1),V={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"},N={href:"https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/122-redis-template",target:"_blank",rel:"noopener noreferrer"};function Z(q,T){const a=r("ExternalLinkIcon");return p(),i("div",null,[g,l(" more "),E,n("p",null,[s("之前看到一篇文章，感觉不错，有兴趣了解原理的，可以移步: "),n("a",h,[s("https://www.jianshu.com/p/55defda6dcd2"),e(a)])]),B,k,n("p",null,[s("在数据量级很大的情况下，"),A,s("的优势非常大，它所占用的存储空间是固定的"),m,s(" 下图引用博文"),n("a",_,[s("《用户日活月活怎么统计》"),e(a)])]),b,n("ul",null,[n("li",null,[n("a",f,[s("【DB系列】Redis高级特性之发布订阅"),e(a)])]),n("li",null,[n("a",v,[s("【DB系列】Redis高级特性之Bitmap使用姿势及应用场景介绍"),e(a)])]),n("li",null,[n("a",y,[s("【DB系列】Redis之管道Pipelined使用姿势"),e(a)])]),n("li",null,[n("a",F,[s("【DB系列】Redis集群环境配置"),e(a)])]),n("li",null,[n("a",D,[s("【DB系列】借助Redis搭建一个简单站点统计服务（应用篇）"),e(a)])]),n("li",null,[n("a",R,[s("【DB系列】借助Redis实现排行榜功能（应用篇）"),e(a)])]),n("li",null,[n("a",S,[s("【DB系列】Redis之ZSet数据结构使用姿势"),e(a)])]),n("li",null,[n("a",x,[s("【DB系列】Redis之Set数据结构使用姿势"),e(a)])]),n("li",null,[n("a",L,[s("【DB系列】Redis之Hash数据结构使用姿势"),e(a)])]),n("li",null,[n("a",w,[s("【DB系列】Redis之List数据结构使用姿势"),e(a)])]),n("li",null,[n("a",j,[s("【DB系列】Redis之String数据结构的读写"),e(a)])]),n("li",null,[n("a",H,[s("【DB系列】Redis之Jedis配置"),e(a)])]),n("li",null,[n("a",I,[s("【DB系列】Redis之基本配置"),e(a)])])]),C,n("ul",null,[n("li",null,[s("工程："),n("a",V,[s("https://github.com/liuyueyi/spring-boot-demo"),e(a)])]),n("li",null,[s("项目源码: "),n("a",N,[s("https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/122-redis-template"),e(a)])])])])}const P=o(u,[["render",Z],["__file","14.201021-SpringBoot系列教程Redis高级特性之HyperLoglog.html.vue"]]);export{P as default};
