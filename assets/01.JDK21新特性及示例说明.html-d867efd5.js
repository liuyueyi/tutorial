const n=JSON.parse('{"key":"v-0927512c","path":"/java/jdk/jdk21/01.JDK21%E6%96%B0%E7%89%B9%E6%80%A7%E5%8F%8A%E7%A4%BA%E4%BE%8B%E8%AF%B4%E6%98%8E.html","title":"01.JDK21新特性及示例说明","lang":"zh-CN","frontmatter":{"order":1,"title":"01.JDK21新特性及示例说明","tag":["jdk"],"category":["Java","JDK21"],"date":"2025-02-13T09:48:09.000Z","keywords":["Java","JDK21","虚拟线程"],"description":"JDK 21 在 JDK 8 的基础上引入了许多新特性，下面详细介绍一些主要特性并给出相应的示例代码： 1. 虚拟线程（Virtual Threads） 虚拟线程是 JDK 21 引入的轻量级线程，能够以较低的开销处理大量并发任务。与传统的平台线程相比，虚拟线程由 Java 运行时管理，不需要操作系统内核线程的支持，从而可以创建数百万个虚拟线程而不会耗尽系统资源。 示例代码： import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; public class VirtualThreadsExample { public static void main(String[] args) { // 创建一个虚拟线程执行器 try (ExecutorService executor = Executors.newVirtualThreadPerTaskExecutor()) { for (int i = 0; i &lt; 1000; i++) { final int taskId = i; // 提交任务到执行器 executor.submit(() -&gt; { System.out.println(\\"Task \\" + taskId + \\" is running on thread: \\" + Thread.currentThread()); try { // 模拟任务执行 Thread.sleep(100); } catch (InterruptedException e) { Thread.currentThread().interrupt(); } System.out.println(\\"Task \\" + taskId + \\" is completed.\\"); }); } } } }","head":[["meta",{"property":"og:url","content":"https://liuyueyi.github.io/tutorial/java/jdk/jdk21/01.JDK21%E6%96%B0%E7%89%B9%E6%80%A7%E5%8F%8A%E7%A4%BA%E4%BE%8B%E8%AF%B4%E6%98%8E.html"}],["meta",{"property":"og:site_name","content":"一灰灰的站点"}],["meta",{"property":"og:title","content":"01.JDK21新特性及示例说明"}],["meta",{"property":"og:description","content":"JDK 21 在 JDK 8 的基础上引入了许多新特性，下面详细介绍一些主要特性并给出相应的示例代码： 1. 虚拟线程（Virtual Threads） 虚拟线程是 JDK 21 引入的轻量级线程，能够以较低的开销处理大量并发任务。与传统的平台线程相比，虚拟线程由 Java 运行时管理，不需要操作系统内核线程的支持，从而可以创建数百万个虚拟线程而不会耗尽系统资源。 示例代码： import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors; public class VirtualThreadsExample { public static void main(String[] args) { // 创建一个虚拟线程执行器 try (ExecutorService executor = Executors.newVirtualThreadPerTaskExecutor()) { for (int i = 0; i &lt; 1000; i++) { final int taskId = i; // 提交任务到执行器 executor.submit(() -&gt; { System.out.println(\\"Task \\" + taskId + \\" is running on thread: \\" + Thread.currentThread()); try { // 模拟任务执行 Thread.sleep(100); } catch (InterruptedException e) { Thread.currentThread().interrupt(); } System.out.println(\\"Task \\" + taskId + \\" is completed.\\"); }); } } } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-13T08:59:24.000Z"}],["meta",{"property":"article:tag","content":"jdk"}],["meta",{"property":"article:published_time","content":"2025-02-13T09:48:09.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-13T08:59:24.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"01.JDK21新特性及示例说明\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-02-13T09:48:09.000Z\\",\\"dateModified\\":\\"2025-02-13T08:59:24.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"1. 虚拟线程（Virtual Threads）","slug":"_1-虚拟线程-virtual-threads","link":"#_1-虚拟线程-virtual-threads","children":[]},{"level":3,"title":"2. 结构化并发（Structured Concurrency）","slug":"_2-结构化并发-structured-concurrency","link":"#_2-结构化并发-structured-concurrency","children":[]},{"level":3,"title":"3. 记录模式（Record Patterns）","slug":"_3-记录模式-record-patterns","link":"#_3-记录模式-record-patterns","children":[]},{"level":3,"title":"4. 字符串模板（String Templates）","slug":"_4-字符串模板-string-templates","link":"#_4-字符串模板-string-templates","children":[]},{"level":3,"title":"5. 增强的模式匹配（Enhanced Pattern Matching）","slug":"_5-增强的模式匹配-enhanced-pattern-matching","link":"#_5-增强的模式匹配-enhanced-pattern-matching","children":[]}],"git":{"createdTime":1739437164000,"updatedTime":1739437164000,"contributors":[{"name":"yihui","email":"bangzewu@126.com","commits":1}]},"readingTime":{"minutes":2.6,"words":781},"filePathRelative":"java/jdk/jdk21/01.JDK21新特性及示例说明.md","localizedDate":"2025年2月13日","excerpt":"<p>JDK 21 在 JDK 8 的基础上引入了许多新特性，下面详细介绍一些主要特性并给出相应的示例代码：</p>\\n<h3> 1. 虚拟线程（Virtual Threads）</h3>\\n<p>虚拟线程是 JDK 21 引入的轻量级线程，能够以较低的开销处理大量并发任务。与传统的平台线程相比，虚拟线程由 Java 运行时管理，不需要操作系统内核线程的支持，从而可以创建数百万个虚拟线程而不会耗尽系统资源。</p>\\n<p><strong>示例代码</strong>：</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>util<span class=\\"token punctuation\\">.</span>concurrent<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">ExecutorService</span></span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token keyword\\">import</span> <span class=\\"token import\\"><span class=\\"token namespace\\">java<span class=\\"token punctuation\\">.</span>util<span class=\\"token punctuation\\">.</span>concurrent<span class=\\"token punctuation\\">.</span></span><span class=\\"token class-name\\">Executors</span></span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">VirtualThreadsExample</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> args<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token comment\\">// 创建一个虚拟线程执行器</span>\\n        <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">ExecutorService</span> executor <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">Executors</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">newVirtualThreadPerTaskExecutor</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">for</span> <span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> i <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">;</span> i <span class=\\"token operator\\">&lt;</span> <span class=\\"token number\\">1000</span><span class=\\"token punctuation\\">;</span> i<span class=\\"token operator\\">++</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                <span class=\\"token keyword\\">final</span> <span class=\\"token keyword\\">int</span> taskId <span class=\\"token operator\\">=</span> i<span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token comment\\">// 提交任务到执行器</span>\\n                executor<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">submit</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-&gt;</span> <span class=\\"token punctuation\\">{</span>\\n                    <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Task \\"</span> <span class=\\"token operator\\">+</span> taskId <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\" is running on thread: \\"</span> <span class=\\"token operator\\">+</span> <span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">currentThread</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n                        <span class=\\"token comment\\">// 模拟任务执行</span>\\n                        <span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">sleep</span><span class=\\"token punctuation\\">(</span><span class=\\"token number\\">100</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">InterruptedException</span> e<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n                        <span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">currentThread</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">interrupt</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                    <span class=\\"token punctuation\\">}</span>\\n                    <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Task \\"</span> <span class=\\"token operator\\">+</span> taskId <span class=\\"token operator\\">+</span> <span class=\\"token string\\">\\" is completed.\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n                <span class=\\"token punctuation\\">}</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{},"autoDesc":true}');export{n as data};
