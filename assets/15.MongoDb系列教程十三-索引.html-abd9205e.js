import{_ as n,V as s,W as t,X as a,Y as e,a1 as o}from"./framework-094145d2.js";const p="/tutorial/imgs/200418/00.jpg",u={},c=e("p",null,"索引一般用来提高查询效率，避免全集合搜索，那么在mongodb中，支持索引么？如果支持，如何定义索引，如何使用索引，如何确定一个sql是否走索引？",-1),i=o(`<h3 id="_1-创建索引" tabindex="-1"><a class="header-anchor" href="#_1-创建索引" aria-hidden="true">#</a> 1. 创建索引</h3><p><strong>语法定义:</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>db.collection.createIndex<span class="token punctuation">(</span>keys, options<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>请注意，在3.0之前的版本中，也可以使用<code>ensureIndex</code>来创建索引</p><p><strong>参数说明:</strong></p><ul><li>keys：kv结构，key为fieldName, value为1 表示升序创建索引；-1 表示降序创建索引；支持多字段索引</li><li>options：可选参数</li></ul><p>常见参数说明如下表:</p><table><thead><tr><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td><code>background</code></td><td>true，则后台方式创建索引，不阻塞其他操作；默认为false</td></tr><tr><td><code>unique</code></td><td>true，则表示唯一约束索引，比如<code>_id</code>就有唯一约束；默认为false</td></tr><tr><td><code>name</code></td><td>索引名，不指定时，根据field + 方向生成索引名</td></tr><tr><td><code>sparse</code></td><td>true, 则不包含这个字段的不创建索引，且索引查询时查不到不包含这个字段的文档；默认false</td></tr><tr><td><code>expireAfterSeconds</code></td><td>设置文档在集合的生存时间，s为单位</td></tr><tr><td><code>v</code></td><td>版本号</td></tr><tr><td><code>weight</code></td><td>索引权重值，数值在 1 到 99,999 之间，表示该索引相对于其他索引字段的得分权重</td></tr><tr><td><code>default_language</code></td><td>对于文本索引，该参数决定了停用词及词干和词器的规则的列表。 默认为英语</td></tr><tr><td><code>language_override</code></td><td>对于文本索引，该参数指定了包含在文档中的字段名，语言覆盖默认的language，默认值为 language</td></tr></tbody></table><p>实例如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>db.doc_demo.createIndex<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token builtin class-name">:</span> <span class="token number">1</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span><span class="token string">&#39;background&#39;</span><span class="token builtin class-name">:</span> true<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-索引查询" tabindex="-1"><a class="header-anchor" href="#_2-索引查询" aria-hidden="true">#</a> 2. 索引查询</h3><p>查看一个集合定义了哪些索引，借助<code>getIndexes()</code>方法即可，如</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>db.doc_demo.getIndexes<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-索引分析" tabindex="-1"><a class="header-anchor" href="#_3-索引分析" aria-hidden="true">#</a> 3. 索引分析</h3><p>虽然我们创建了索引，但是我们的查询语句却并不一定会走索引，在mysql中我们知道有一个<code>explain</code>语句来分析索引情况，在mongodb中也存在类似的方法</p><p>集合数据如下</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{ &quot;_id&quot; : ObjectId(&quot;5e7b5ac10172dc950171c488&quot;), &quot;name&quot; : &quot;一灰灰blog&quot;, &quot;age&quot; : 19, &quot;skill&quot; : [ &quot;java&quot;, &quot;python&quot;, &quot;sql&quot; ], &quot;tag&quot; : 2 }
{ &quot;_id&quot; : ObjectId(&quot;5e7b5ac40172dc950171c489&quot;), &quot;name&quot; : &quot;一灰灰blog&quot;, &quot;age&quot; : 20, &quot;skill&quot; : [ &quot;web&quot;, &quot;shell&quot;, &quot;js&quot; ], &quot;tag&quot; : 1 }
{ &quot;_id&quot; : ObjectId(&quot;5e7b5bb085a742842d2e23fc&quot;), &quot;name&quot; : &quot;一灰灰&quot;, &quot;age&quot; : 18, &quot;sex&quot; : &quot;man&quot;, &quot;tag&quot; : 2 }
{ &quot;_id&quot; : ObjectId(&quot;5e7b5c2e0172dc950171c48a&quot;), &quot;name&quot; : &quot;一灰灰&quot;, &quot;age&quot; : 18, &quot;hobby&quot; : [ &quot;play game&quot; ] }
{ &quot;_id&quot; : ObjectId(&quot;5e7c5627f020f58f5323e52d&quot;), &quot;name&quot; : &quot;一灰灰2&quot;, &quot;age&quot; : 22, &quot;skill&quot; : [ &quot;android&quot;, &quot;ios&quot; ] }
{ &quot;_id&quot; : ObjectId(&quot;5e7c5a61f020f58f5323e52e&quot;), &quot;name&quot; : &quot;一灰灰&quot;, &quot;doc&quot; : { &quot;title&quot; : &quot;简单的标题&quot;, &quot;content&quot; : &quot;简单的内容&quot;, &quot;tag&quot; : [ &quot;java&quot;, &quot;后端&quot; ] } }
{ &quot;_id&quot; : ObjectId(&quot;5e7c5a8af020f58f5323e52f&quot;), &quot;name&quot; : &quot;一灰灰&quot;, &quot;doc&quot; : { &quot;title&quot; : &quot;哈哈&quot;, &quot;content&quot; : &quot;嘻嘻哈哈&quot;, &quot;tag&quot; : [ &quot;随笔&quot; ], &quot;draft&quot; : true } }
{ &quot;_id&quot; : ObjectId(&quot;5e7c5ae7f020f58f5323e530&quot;), &quot;name&quot; : &quot;一灰灰&quot;, &quot;doc&quot; : { &quot;title&quot; : &quot;22&quot;, &quot;content&quot; : &quot;3333&quot;, &quot;tag&quot; : [ &quot;随笔&quot; ], &quot;draft&quot; : false, &quot;visit&quot; : 10 } }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当前集合上除了默认的<code>_id</code>索引之外，针对<code>name</code>也创建了升序索引</p><p>如需要判断一个查询语句的情况，可以在后面加上<code>explain()</code>方法，如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>db.doc_demo.find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token builtin class-name">:</span> <span class="token string">&#39;一灰灰&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>.explain<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出如下</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
	<span class="token property">&quot;queryPlanner&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token property">&quot;plannerVersion&quot;</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
		<span class="token property">&quot;namespace&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;basic.doc_demo&quot;</span><span class="token punctuation">,</span>
		<span class="token property">&quot;indexFilterSet&quot;</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
		<span class="token property">&quot;parsedQuery&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token property">&quot;name&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
				<span class="token property">&quot;$eq&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;一灰灰&quot;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token property">&quot;winningPlan&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token property">&quot;stage&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;FETCH&quot;</span><span class="token punctuation">,</span>
			<span class="token property">&quot;inputStage&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
				<span class="token property">&quot;stage&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;IXSCAN&quot;</span><span class="token punctuation">,</span>
				<span class="token property">&quot;keyPattern&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
					<span class="token property">&quot;name&quot;</span> <span class="token operator">:</span> <span class="token number">1</span>
				<span class="token punctuation">}</span><span class="token punctuation">,</span>
				<span class="token property">&quot;indexName&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;name_1&quot;</span><span class="token punctuation">,</span>
				<span class="token property">&quot;isMultiKey&quot;</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
				<span class="token property">&quot;multiKeyPaths&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
					<span class="token property">&quot;name&quot;</span> <span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span>
				<span class="token punctuation">}</span><span class="token punctuation">,</span>
				<span class="token property">&quot;isUnique&quot;</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
				<span class="token property">&quot;isSparse&quot;</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
				<span class="token property">&quot;isPartial&quot;</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
				<span class="token property">&quot;indexVersion&quot;</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
				<span class="token property">&quot;direction&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;forward&quot;</span><span class="token punctuation">,</span>
				<span class="token property">&quot;indexBounds&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
					<span class="token property">&quot;name&quot;</span> <span class="token operator">:</span> <span class="token punctuation">[</span>
						<span class="token string">&quot;[\\&quot;一灰灰\\&quot;, \\&quot;一灰灰\\&quot;]&quot;</span>
					<span class="token punctuation">]</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token property">&quot;rejectedPlans&quot;</span> <span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token property">&quot;serverInfo&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span>
		<span class="token property">&quot;host&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;0f51c424211c&quot;</span><span class="token punctuation">,</span>
		<span class="token property">&quot;port&quot;</span> <span class="token operator">:</span> <span class="token number">27017</span><span class="token punctuation">,</span>
		<span class="token property">&quot;version&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;4.0.4&quot;</span><span class="token punctuation">,</span>
		<span class="token property">&quot;gitVersion&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;f288a3bdf201007f3693c58e140056adf8b04839&quot;</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token property">&quot;ok&quot;</span> <span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于是否走索引，主要看stage，通常会有以下几种状态</p><table><thead><tr><th>stage</th><th>描述</th></tr></thead><tbody><tr><td>COLLSCAN</td><td>全表扫描</td></tr><tr><td>IXSCAN</td><td>扫描索引</td></tr><tr><td>FETCH</td><td>根据索引去检索指定document</td></tr><tr><td>SHARD_MERGE</td><td>将各个分片返回数据进行merge</td></tr><tr><td>SORT</td><td>表明在内存中进行了排序</td></tr><tr><td>LIMIT</td><td>使用limit限制返回数</td></tr><tr><td>SKIP</td><td>使用skip进行跳过</td></tr><tr><td>IDHACK</td><td>针对_id进行查询</td></tr><tr><td>SHARDING_FILTER</td><td>通过mongos对分片数据进行查询</td></tr><tr><td>COUNT</td><td>利用db.coll.explain().count()之类进行count运算</td></tr><tr><td>COUNTSCAN</td><td>count不使用Index进行count时的stage返回</td></tr><tr><td>COUNT_SCAN</td><td>count使用了Index进行count时的stage返回</td></tr><tr><td>SUBPLA</td><td>未使用到索引的$or查询的stage返回</td></tr><tr><td>TEXT</td><td>使用全文索引进行查询时候的stage返回</td></tr><tr><td>PROJECTION</td><td>限定返回字段时候stage的返回</td></tr></tbody></table><p>上面的具体查询，对应的stage组合是<code>Fetch+ixscan</code>，也就是说会根据索引查询</p><p>虽然mongodb会根据查询来选择索引，但并不能保证都能选到最优的索引；这种时候我们可以通过<code>hint</code>来强制指定索引，举例如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>db.doc_demo.find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;age&#39;</span><span class="token builtin class-name">:</span> <span class="token number">18</span>, <span class="token string">&#39;name&#39;</span><span class="token builtin class-name">:</span><span class="token string">&#39;一灰灰&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>.hint<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token builtin class-name">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>.explain<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-删除索引" tabindex="-1"><a class="header-anchor" href="#_4-删除索引" aria-hidden="true">#</a> 4. 删除索引</h3><p>一般有下面两种删除方式，全量删除和指定索引删除</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 全量删除</span>
db.collection.dropIndexes<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># 指定删除</span>
db.collection.dropIndex<span class="token punctuation">(</span>索引名<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，指定索引名删除时，如果不确定索引名是啥，可以通过<code>getIndexes()</code>来查看</p><h3 id="_5-文档自动删除" tabindex="-1"><a class="header-anchor" href="#_5-文档自动删除" aria-hidden="true">#</a> 5. 文档自动删除</h3><p>在创建索引的时候，其中有一个参数比较有意思，有必要单独拿出来说明一下，<code>expireAfterSeconds</code> 设置文档的生存时间</p><p>使用它有几个潜规则：</p><ul><li>索引字段为Date类型</li><li>单字段索引，不支持混合索引</li><li>非立即执行</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 插入一条文档，请注意这个时间，因为时区原因相对于北京时间，少8小时</span>
db.doc_demo.insert<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token builtin class-name">:</span> <span class="token string">&#39;yihui&#39;</span>, <span class="token string">&#39;log&#39;</span><span class="token builtin class-name">:</span> <span class="token string">&#39;操作了啥啥啥&#39;</span>, <span class="token string">&#39;createDate&#39;</span><span class="token builtin class-name">:</span> new Date<span class="token punctuation">(</span><span class="token string">&#39;Mar27, 2020 2:54:00&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment"># 创建索引</span>
db.doc_demo.createIndex<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;createDate&#39;</span><span class="token builtin class-name">:</span> <span class="token number">1</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span>expireAfterSeconds: <span class="token number">60</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后过一段时间（并不一定10:55分的时候会删除）再去查询，会发现插入的文档被删除了</p><p>利用这种特性，在mongodb中存一些需要定时删除的数据，相比较我们常用的mysql而言，还是有很大优势的</p><h3 id="_6-覆盖索引" tabindex="-1"><a class="header-anchor" href="#_6-覆盖索引" aria-hidden="true">#</a> 6. 覆盖索引</h3><p>覆盖索引的概念有些类似mysql中的不回表查询的case，直接查询索引，就可以返回所需要的字段了</p><p>比如在前面的case中，我只查询name字段，可以走覆盖索引；但是返回除了name，还有<code>_id</code>，那么就不能了</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 覆盖索引</span>
db.doc_demo.find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token builtin class-name">:</span> <span class="token string">&#39;一灰灰&#39;</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token builtin class-name">:</span> <span class="token number">1</span>, <span class="token string">&#39;_id&#39;</span><span class="token builtin class-name">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment"># 非覆盖索引</span>
db.doc_demo.find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token builtin class-name">:</span> <span class="token string">&#39;一灰灰&#39;</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token builtin class-name">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意：所有索引字段是一个数组时，不能使用覆盖索引</strong></p>`,44);function l(d,r){return s(),t("div",null,[c,a(" more "),i])}const k=n(u,[["render",l],["__file","15.MongoDb系列教程十三-索引.html.vue"]]);export{k as default};
