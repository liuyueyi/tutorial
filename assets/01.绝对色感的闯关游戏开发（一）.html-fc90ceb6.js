import{_ as i,V as a,W as r,a1 as e}from"./framework-094145d2.js";const t="/tutorial/imgs/column/aigame/1-01.jpg",o="/tutorial/imgs/column/aigame/1-02.jpg",l="/tutorial/imgs/column/aigame/1-03.jpg",p="/tutorial/imgs/column/aigame/1-04.jpg",n="/tutorial/imgs/column/aigame/1-05.jpg",c={},s=e('<p>作为一个游戏开发门外汉，接下来我将挑战一下，从0到1，完整记录一下如何借助AI来生成一个完整的可上架的游戏APP</p><h2 id="一、游戏产品设计" tabindex="-1"><a class="header-anchor" href="#一、游戏产品设计" aria-hidden="true">#</a> 一、游戏产品设计</h2><p>首先明确一下我们要做什么，产品的核心玩法：</p><p>一个简单的闯关游戏，每一关中由系统自动生成一些色块，其中只要一个色块的颜色与其他的不一样，只有选中不一样颜色的色块才会进入下一关</p><ul><li>关卡难度设计：随着关卡的增加，色块数变多； 不同颜色的色块与其他颜色的rgb差值更小</li></ul><p>关卡本身功能比较简单，我们需要为它添加一个排行榜竞技/或者在线PK的功能，增加互动性</p><p>接下来就是确定研发路线</p><p>借助trae/cursor来实现代码编程，技术栈选择uniapp来实现实现一次编写，多端运行</p><h2 id="二、项目初始化与快速原型设计" tabindex="-1"><a class="header-anchor" href="#二、项目初始化与快速原型设计" aria-hidden="true">#</a> 二、项目初始化与快速原型设计</h2><h3 id="_2-1-项目初始化" tabindex="-1"><a class="header-anchor" href="#_2-1-项目初始化" aria-hidden="true">#</a> 2.1 项目初始化</h3><p>使用uniapp进行开发，首先需要安装HBuilder，这里省略安装步骤；接下来我们创建一个空的项目</p><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>使用Cursor打开项目，快速实现一个应用原型</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-2-快速原型设计" tabindex="-1"><a class="header-anchor" href="#_2-2-快速原型设计" aria-hidden="true">#</a> 2.2 快速原型设计</h3><p>首次提交信息时，cursor只会帮我们输出一个空的架子，接下来我们回复确认让它补全具体的游戏逻辑，快速实现一个基础可运行的原型</p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>全部接受之后，我们通过uniapp体验一下实际的效果</p><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>然后一个核心游戏玩法的应用基本算是完成了</p><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="三、验证可行性、制定迭代计划" tabindex="-1"><a class="header-anchor" href="#三、验证可行性、制定迭代计划" aria-hidden="true">#</a> 三、验证可行性、制定迭代计划</h2><p>从上面的流程也可以看出，借助cursor快速设计一个原型用于我们的想法验证，成本非常低；现在ai对于普通人的一个友好点在于可以快速的让我们脑子里的想法先落地，不管它靠不靠谱</p><p>接下来就是实际体验一下，看看我们的想法是否靠谱，以及这个原型还有哪些需要改进和优化的地方</p><p>从原型的交互体验来看，核心玩法没问题，生成色块、选择、进入下一关；但是从实际体验来看，玩法比较单调、且后面关卡的色块rgb差异太小了，肉眼太难识别了</p><p>因此后面的迭代方向可以分为两块：</p><ol><li>游戏策略</li></ol><ul><li>设计更优雅的难度升级策略</li></ul><ol start="2"><li>游戏可玩性</li></ol><ul><li>增加游戏的可玩性/竞技性 - 比如排行榜，在线PK，每一关添加倒计时增加紧迫感，当思考方式太久/闯关失败时输出一些嘲讽意味强的弹幕？闯过一些特定关卡时，增加一些喝彩的氛围</li><li>单纯的色块可能吸引力不够，那么是否可以在色块中放一些漂亮的小姐姐图片？</li></ul><p>前期准备工作就绪，接下来我们开始进入游戏的调教正文</p>',31),g=[s];function _(u,d){return a(),r("div",null,g)}const f=i(c,[["render",_],["__file","01.绝对色感的闯关游戏开发（一）.html.vue"]]);export{f as default};
