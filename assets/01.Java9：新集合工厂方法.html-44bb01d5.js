import{_ as n,V as a,W as s,a1 as t}from"./framework-094145d2.js";const p={},e=t(`<p>嘿，各位Java开发者！是不是每次看到代码里那些冗长的集合初始化，就感觉像是在做“体力活”？别担心，Java 9带着它的集合工厂方法来拯救我们啦！这就好比是给你配了一把“魔法棒”，轻轻一挥，集合就创建好了，再也不用写那些繁琐的代码了。接下来，就让我们一起探索Java 9集合工厂方法的神奇之处吧！</p><h2 id="java-9之前的集合创建方式-累觉不爱" tabindex="-1"><a class="header-anchor" href="#java-9之前的集合创建方式-累觉不爱" aria-hidden="true">#</a> Java 9之前的集合创建方式：累觉不爱</h2><p>在Java 9出现之前，创建集合简直就像是一场“苦力之旅”。比如，创建一个<code>List</code>，你得先创建一个<code>ArrayList</code>对象，然后一个接一个地往里加元素。看看下面这串代码，是不是感觉有点“眼熟”？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;苹果&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;香蕉&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;橘子&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这还不算完，要是创建一个<code>Set</code>，你也得先实例化一个<code>HashSet</code>，再逐个添加元素。而<code>Map</code>就更麻烦了，得先创建一个<code>HashMap</code>，然后用<code>put</code>方法一个一个塞进去。这就好比是让你用勺子一勺一勺地往桶里装水，效率低得可怜！</p><p>而且，这种方式创建的集合，一旦初始化完成，要是想改点东西，还得小心翼翼，生怕出错。这就好比是用橡皮泥捏了个小雕塑，稍微一动，可能就变形了。Java 9的集合工厂方法，就是来解决这些问题的！</p><h2 id="java-9集合工厂方法闪亮登场-魔法棒上线" tabindex="-1"><a class="header-anchor" href="#java-9集合工厂方法闪亮登场-魔法棒上线" aria-hidden="true">#</a> Java 9集合工厂方法闪亮登场：魔法棒上线！</h2><h3 id="一-list集合的of方法-一键搞定" tabindex="-1"><a class="header-anchor" href="#一-list集合的of方法-一键搞定" aria-hidden="true">#</a> （一）List集合的of方法：一键搞定</h3><p>Java 9的<code>List.of</code>方法，简直就是给<code>List</code>集合插上了“翅膀”。只需要一行代码，就能创建一个不可变的<code>List</code>集合。看看下面这串代码，是不是感觉眼前一亮？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> fruits <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;苹果&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;香蕉&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;橘子&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这就好比是用魔法棒一挥，一个装满水果的篮子就出现了！而且，这个方法还能创建空的集合，就像变出一个空篮子一样简单：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> emptyList <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要是你想创建一个超大的集合，<code>List.of</code>也完全没问题！你可以直接传入一堆参数，或者把多个<code>List.of</code>组合起来，再用<code>Stream</code>拼成一个大集合。这就好比是把几个小篮子合并成一个大篮子，超方便！</p><h3 id="二-set集合的of方法-拒绝-撞衫" tabindex="-1"><a class="header-anchor" href="#二-set集合的of方法-拒绝-撞衫" aria-hidden="true">#</a> （二）Set集合的of方法：拒绝“撞衫”</h3><p><code>Set.of</code>方法也超级厉害！它不仅能让你快速创建一个不可变的<code>Set</code>集合，还能自动帮你检查重复元素。要是你不小心传了重复的元素，它就会直接“抗议”，抛出一个<code>IllegalArgumentException</code>异常。看看下面这串代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> colors <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;红色&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;蓝色&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;绿色&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要是你写成这样：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> duplicateSet <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;红色&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;蓝色&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;绿色&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;红色&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它就会直接“炸毛”，告诉你不能有重复元素。这就好比是去参加派对，坚决不允许“撞衫”，保证了集合的“独一无二”。</p><h3 id="三-map集合的of和ofentries方法-键值对的-完美搭档" tabindex="-1"><a class="header-anchor" href="#三-map集合的of和ofentries方法-键值对的-完美搭档" aria-hidden="true">#</a> （三）Map集合的of和ofEntries方法：键值对的“完美搭档”</h3><p>对于<code>Map</code>集合，Java 9提供了两个超厉害的方法：<code>of</code>和<code>ofEntries</code>。<code>Map.of</code>方法适合创建包含少量键值对的不可变<code>Map</code>，而且键值对必须成对出现。看看下面这串代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> scores <span class="token operator">=</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;小明&quot;</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token string">&quot;小红&quot;</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token string">&quot;小刚&quot;</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这就好比是把名字和分数一一对应起来，超直观！不过，要是你传了重复的键，它也会直接“抗议”，抛出<code>IllegalArgumentException</code>异常。</p><p>要是你想创建一个超大的<code>Map</code>，<code>Map.ofEntries</code>方法就派上用场了。你可以传入一堆<code>Map.Entry</code>对象，轻松搞定。看看下面这串代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> cities <span class="token operator">=</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">ofEntries</span><span class="token punctuation">(</span>
    <span class="token keyword">new</span> <span class="token class-name">AbstractMap<span class="token punctuation">.</span>SimpleEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;北京&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;中国&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">AbstractMap<span class="token punctuation">.</span>SimpleEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;东京&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;日本&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token keyword">new</span> <span class="token class-name">AbstractMap<span class="token punctuation">.</span>SimpleEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;巴黎&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;法国&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这就好比是把一堆“名字 - 国籍”的卡片整齐地排列起来，超方便！</p><h2 id="对比-新老方法的差异与优势" tabindex="-1"><a class="header-anchor" href="#对比-新老方法的差异与优势" aria-hidden="true">#</a> 对比：新老方法的差异与优势</h2><h3 id="一-代码简洁性与可读性-从-长篇大论-到-一句话搞定" tabindex="-1"><a class="header-anchor" href="#一-代码简洁性与可读性-从-长篇大论-到-一句话搞定" aria-hidden="true">#</a> （一）代码简洁性与可读性：从“长篇大论”到“一句话搞定”</h3><p>Java 9的集合工厂方法，简直是把代码简洁性提升到了一个新的高度。以前创建一个<code>List</code>，得写一大堆代码；现在只需要一行代码。这就好比是从写一篇长篇大论，变成了只说一句话就能搞定。比如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;苹果&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;香蕉&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;橘子&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这种简洁的写法，不仅减少了代码量，还让代码结构更加清晰，一眼就能看出集合里有什么东西。这就好比是把一堆杂物整齐地摆放在柜子里，一目了然。</p><h3 id="二-性能与不可变性-多线程的-守护神" tabindex="-1"><a class="header-anchor" href="#二-性能与不可变性-多线程的-守护神" aria-hidden="true">#</a> （二）性能与不可变性：多线程的“守护神”</h3><p>Java 9的集合工厂方法创建的集合是不可变的，这意味着一旦创建，就不能再修改。这在多线程环境中简直是“神器”！因为不可变集合不需要额外的同步机制来保证线程安全。比如，在一个多线程读取集合的场景中，使用不可变集合就不用担心数据不一致的问题。</p><p>而且，不可变集合在内存管理上也更有优势。JVM可以对它们进行优化，比如缓存哈希码。这就好比是给集合穿上了一件“保护衣”，让它们在运行时更加高效。</p><h3 id="三-开发效率提升-从-搬砖-到-魔法" tabindex="-1"><a class="header-anchor" href="#三-开发效率提升-从-搬砖-到-魔法" aria-hidden="true">#</a> （三）开发效率提升：从“搬砖”到“魔法”</h3><p>使用Java 9的集合工厂方法，开发效率简直提升了一个档次！以前创建集合，得像搬砖一样，一个一个往里加元素；现在只需要“魔法棒”一挥，集合就创建好了。这就好比是从“人力运输”升级到了“传送门”，效率提升可不是一点半点。</p><p>而且，简洁的代码也减少了出错的概率，调试起来也更轻松。这就好比是少走了很多弯路，直接到达目的地。</p><h2 id="使用注意事项-别踩-雷区" tabindex="-1"><a class="header-anchor" href="#使用注意事项-别踩-雷区" aria-hidden="true">#</a> 使用注意事项：别踩“雷区”</h2><h3 id="一-不可变性-别试图-逆天改命" tabindex="-1"><a class="header-anchor" href="#一-不可变性-别试图-逆天改命" aria-hidden="true">#</a> （一）不可变性：别试图“逆天改命”</h3><p>使用<code>List.of</code>、<code>Set.of</code>和<code>Map.of</code>方法创建的集合是不可变的，这意味着一旦创建，就不能再添加、删除或修改元素。要是你试图这么做，就会直接“触雷”，抛出<code>UnsupportedOperationException</code>异常。比如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;苹果&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;香蕉&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;橘子&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这行代码会直接“炸掉”</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，使用这些方法时，一定要想清楚集合的内容是否还会变化。如果还会变，那就老老实实使用传统的集合创建方式。</p><h3 id="二-元素的唯一性-别-撞车" tabindex="-1"><a class="header-anchor" href="#二-元素的唯一性-别-撞车" aria-hidden="true">#</a> （二）元素的唯一性：别“撞车”</h3><p>对于<code>Set</code>和<code>Map</code>集合，Java 9的工厂方法会严格检查元素的唯一性。如果传入了重复的元素或键，就会直接“抗议”，抛出<code>IllegalArgumentException</code>异常。比如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;红色&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;蓝色&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;红色&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这行代码会“炸掉”</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;小明&quot;</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token string">&quot;小红&quot;</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token string">&quot;小明&quot;</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这行代码也会“炸掉”</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这就好比是开车时不能“撞车”，否则就会直接“报废”。</p><h3 id="三-空值的处理-别-放空炮" tabindex="-1"><a class="header-anchor" href="#三-空值的处理-别-放空炮" aria-hidden="true">#</a> （三）空值的处理：别“放空炮”</h3><p>在使用集合工厂方法时，<code>List.of</code>和<code>Set.of</code>都不允许传入<code>null</code>元素，<code>Map.of</code>的键和值也不允许是<code>null</code>。要是你传了<code>null</code>，就会直接“放空炮”，抛出<code>NullPointerException</code>异常。比如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;苹果&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;香蕉&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这行代码会“炸掉”</span>
<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;小明&quot;</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这行代码也会“炸掉”</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，使用这些方法时，一定要确保传入的元素都是有效的，别让<code>null</code>来“搅局”。</p><h2 id="实际应用场景举例-魔法棒的-实战演练" tabindex="-1"><a class="header-anchor" href="#实际应用场景举例-魔法棒的-实战演练" aria-hidden="true">#</a> 实际应用场景举例：魔法棒的“实战演练”</h2><h3 id="一-数据初始化-轻松搞定" tabindex="-1"><a class="header-anchor" href="#一-数据初始化-轻松搞定" aria-hidden="true">#</a> （一）数据初始化：轻松搞定</h3><p>在很多业务场景中，我们需要初始化一些固定的数据集合。比如在一个电商系统中，商品分类是固定的。使用Java 9的集合工厂方法，就可以轻松搞定：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> productCategories <span class="token operator">=</span> <span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;电子产品&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;服装&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;食品&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;家居用品&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这就好比是用魔法棒一挥，一个装满商品分类的“宝箱”就出现了，而且保证了这些分类不会被误改，超安全！</p><h3 id="二-配置文件读取-清晰明了" tabindex="-1"><a class="header-anchor" href="#二-配置文件读取-清晰明了" aria-hidden="true">#</a> （二）配置文件读取：清晰明了</h3><p>在读取配置文件时，我们常常需要把配置信息存储在集合中。比如一个数据库连接配置，使用<code>Map.of</code>方法就可以清晰地搞定：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> dbConfig <span class="token operator">=</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>
    <span class="token string">&quot;url&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jdbc:mysql://localhost:3306/mydb&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span>
    <span class="token string">&quot;password&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123456&quot;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这就好比是把配置信息整齐地摆放在一个“展示柜”里，一目了然，再也不用担心配置错误了。</p><h3 id="三-常量定义-稳如泰山" tabindex="-1"><a class="header-anchor" href="#三-常量定义-稳如泰山" aria-hidden="true">#</a> （三）常量定义：稳如泰山</h3><p>在定义常量集合时，Java 9的集合工厂方法也超有用。比如在一个游戏开发项目中，定义游戏角色的属性集合：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token constant">CHARACTER_ATTRIBUTES</span> <span class="token operator">=</span> <span class="token class-name">Set</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;生命值&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;魔法值&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;攻击力&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;防御力&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这就好比是给游戏角色的属性加上了一层“保护罩”，保证了它们的“独一无二”和“不可篡改”，让游戏运行得更稳定。</p><h2 id="总结与展望-魔法棒的-未来篇章" tabindex="-1"><a class="header-anchor" href="#总结与展望-魔法棒的-未来篇章" aria-hidden="true">#</a> 总结与展望：魔法棒的“未来篇章”</h2><p>Java 9的集合工厂方法，无疑是Java集合框架发展历程中的一个重要里程碑。它就像是一把“魔法棒”，让集合的创建变得简洁、高效，还自带“保护罩”，让数据更安全。无论是代码的可读性、性能，还是开发效率，都提升了一个档次。</p><p>通过实际应用场景的举例，我们可以看到，Java 9的集合工厂方法在各个领域都能轻松应对，无论是数据初始化、配置文件读取还是常量定义，都能发挥出强大的作用。</p><p>展望未来，随着Java版本的不断更新，我们有理由期待它会带来更多“魔法”功能，让集合操作更加简单高效。也许有一天，我们真的可以用魔法棒一挥，就能搞定一切！让我们一起期待吧！</p>`,67),o=[e];function c(l,i){return a(),s("div",null,o)}const d=n(p,[["render",c],["__file","01.Java9：新集合工厂方法.html.vue"]]);export{d as default};
