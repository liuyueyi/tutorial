import{_ as n,V as a,W as s,X as t,Y as e,a1 as o}from"./framework-094145d2.js";const u="/tutorial/imgs/200408/00.jpg",i="/tutorial/imgs/200408/01.jpg",c="/tutorial/imgs/200408/02.jpg",l="/tutorial/imgs/200408/03.jpg",p="/tutorial/imgs/200408/04.jpg",d={},r=e("p",null,"前面介绍的查询可以说是常见的典型case，但是mongodb中有两个比价特殊的数据类型，数组 + 对象，自然的也会有一些非典型的查询case，下面主要针对这两种数据类型的查询姿势，给出实例讲解",-1),q=o(`<h3 id="_1-数组" tabindex="-1"><a class="header-anchor" href="#_1-数组" aria-hidden="true">#</a> 1. 数组</h3><p>首先准备一些供数组操作的文档如下</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{ &quot;_id&quot; : ObjectId(&quot;5e7b5ac10172dc950171c488&quot;), &quot;name&quot; : &quot;一灰灰blog&quot;, &quot;age&quot; : 19, &quot;skill&quot; : [ &quot;java&quot;, &quot;python&quot;, &quot;sql&quot; ], &quot;tag&quot; : 2 }
{ &quot;_id&quot; : ObjectId(&quot;5e7b5ac40172dc950171c489&quot;), &quot;name&quot; : &quot;一灰灰blog&quot;, &quot;age&quot; : 20, &quot;skill&quot; : [ &quot;web&quot;, &quot;shell&quot;, &quot;js&quot; ], &quot;tag&quot; : 1 }
{ &quot;_id&quot; : ObjectId(&quot;5e7b5bb085a742842d2e23fc&quot;), &quot;name&quot; : &quot;一灰灰&quot;, &quot;age&quot; : 18, &quot;sex&quot; : &quot;man&quot;, &quot;tag&quot; : 2 }
{ &quot;_id&quot; : ObjectId(&quot;5e7b5c2e0172dc950171c48a&quot;), &quot;name&quot; : &quot;一灰灰&quot;, &quot;age&quot; : 18, &quot;hobby&quot; : [ &quot;play game&quot; ] }
{ &quot;_id&quot; : ObjectId(&quot;5e7c5627f020f58f5323e52d&quot;), &quot;name&quot; : &quot;一灰灰2&quot;, &quot;age&quot; : 22, &quot;skill&quot; : [ &quot;android&quot;, &quot;ios&quot; ] }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>长度查询</strong></p><p>根据数组长度进行查询，借助<code>$size</code>来统计数组长度</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查询数组长度为3的文档</span>
db.doc_demo.find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;skill&#39;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token variable">$size</span><span class="token builtin class-name">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>长度范围查询</strong></p><p>请注意，不支持长度的比较查询，如下，会报语法错误</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>db.doc_demo.find<span class="token punctuation">(</span><span class="token punctuation">{</span>&#39;skill:<span class="token punctuation">{</span><span class="token variable">$size</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token variable">$gt</span><span class="token builtin class-name">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>要实现范围查询，可以借助<code>$where</code>来实现(<code>$where</code>比较强大，后面单独说明)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 请注意判空需要有</span>
db.doc_demo.find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token variable">$where</span><span class="token builtin class-name">:</span><span class="token string">&#39;this.skill !=null &amp;&amp; this.skill.length&gt;2&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+i+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>数组内容查询</strong></p><p>根据数组内容进行查询，常见的有两种方式，一个是直接根据数组定位比较如</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查询skill数组中，第一个元素为java的文档</span>
db.doc_demo.find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;skill.0&#39;</span><span class="token builtin class-name">:</span> <span class="token string">&#39;java&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这种实用性可能并不大，另外一个常见的case就是查询数组中包含某个元素的文档，这时可以借助<code>$elemMatch</code>来实现</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查询skill数组中包含 java 元素的文档</span>
db.doc_demo.find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;skill&#39;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token variable">$elemMatch</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token variable">$eq</span><span class="token builtin class-name">:</span> <span class="token string">&#39;java&#39;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+c+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>说明，当数组的元素是Object类型时，还可以用右边这种姿势：<code>db.doc_demo.find({&#39;skill&#39;: {$elemMatch: {&#39;subField&#39;: &#39;xxx&#39;}}})</code></p><h3 id="_2-object" tabindex="-1"><a class="header-anchor" href="#_2-object" aria-hidden="true">#</a> 2. Object</h3><p>因为mongodb支持内嵌文档，所以根据内嵌文档进行查询的场景也是不少的</p><p>首先准备三个用于后续查询测试的文档</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{ &quot;_id&quot; : ObjectId(&quot;5e7c5a61f020f58f5323e52e&quot;), &quot;name&quot; : &quot;一灰灰&quot;, &quot;doc&quot; : { &quot;title&quot; : &quot;简单的标题&quot;, &quot;content&quot; : &quot;简单的内容&quot;, &quot;tag&quot; : [ &quot;java&quot;, &quot;后端&quot; ] } }
{ &quot;_id&quot; : ObjectId(&quot;5e7c5a8af020f58f5323e52f&quot;), &quot;name&quot; : &quot;一灰灰&quot;, &quot;doc&quot; : { &quot;title&quot; : &quot;哈哈&quot;, &quot;content&quot; : &quot;嘻嘻哈哈&quot;, &quot;tag&quot; : [ &quot;随笔&quot; ], &quot;draft&quot; : true } }
{ &quot;_id&quot; : ObjectId(&quot;5e7c5ae7f020f58f5323e530&quot;), &quot;name&quot; : &quot;一灰灰&quot;, &quot;doc&quot; : { &quot;title&quot; : &quot;22&quot;, &quot;content&quot; : &quot;3333&quot;, &quot;tag&quot; : [ &quot;随笔&quot; ], &quot;draft&quot; : false, &quot;visit&quot; : 10 } }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>根据内嵌文档字段查询</strong></p><p>查询姿势和field查询相似，只是需要注意一下key的语法为: <code>field.subField</code>, 实例如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>db.doc_demo.find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;doc.title&#39;</span><span class="token builtin class-name">:</span> <span class="token string">&#39;22&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>存在性查询</strong></p><p>查询嵌入文档包含某个field的case，和普通的查询姿势也一样</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>db.doc_demo.find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;doc.visit&#39;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token variable">$exists</span><span class="token builtin class-name">:</span> true<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>排序</strong></p><p>根据Object的成员进行排序，操作姿势也基本一样</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>db.doc_demo.find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;doc&#39;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token variable">$exists</span><span class="token builtin class-name">:</span> true<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>.sort<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;doc.visit&#39;</span><span class="token builtin class-name">:</span> -1<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',35);function b(m,g){return a(),s("div",null,[r,t(" more "),q])}const v=n(d,[["render",b],["__file","13.MongoDb系列教程十一-文档-Document-查询非典型篇.html.vue"]]);export{v as default};
