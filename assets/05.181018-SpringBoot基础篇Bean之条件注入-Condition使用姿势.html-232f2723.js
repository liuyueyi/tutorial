import{_ as e,V as o,W as p,X as i,Y as n,Z as a,$ as t,a1 as c,F as l}from"./framework-094145d2.js";const u="/tutorial/imgs/181018/00.gif",d="/tutorial/imgs/181018/01.gif",r="/tutorial/imgs/181018/02.gif",k="/tutorial/imgs/181018/03.gif",v={},m=n("p",null,"前面几篇关于Bean的基础博文中，主要集中在Bean的定义和使用，但实际的情况中有没有一些场景是不加载我定义的bean，或者只有满足某些前提条件的时候才加载我定义的Bean呢？",-1),b=n("p",null,[a("本篇博文将主要介绍bean的加载中，条件注解"),n("code",null,"@Conditional"),a("的相关使用")],-1),g=c(`<h2 id="i-conditional注解" tabindex="-1"><a class="header-anchor" href="#i-conditional注解" aria-hidden="true">#</a> I. <code>@Conditional</code>注解</h2><p>这个注解在Spring4中引入，其主要作用就是判断条件是否满足，从而决定是否初始化并向容器注册Bean</p><h3 id="_1-定义" tabindex="-1"><a class="header-anchor" href="#_1-定义" aria-hidden="true">#</a> 1. 定义</h3><p><code>@Conditional</code>注解定义如下，其内部主要就是利用了Condition接口，来判断是否满足条件，从而决定是否需要加载Bean</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Conditional</span> <span class="token punctuation">{</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Condition</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是<code>Condtion</code>接口的定义，这个可以说是最基础的入口了，其他的所有条件注解，归根结底，都是通过实现这个接口进行扩展的</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@FunctionalInterface</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Condition</span> <span class="token punctuation">{</span>
    <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">ConditionContext</span> var1<span class="token punctuation">,</span> <span class="token class-name">AnnotatedTypeMetadata</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个接口中，有个参数比较有意思<code>ConditionContext</code>,它持有不少有用的对象，可以用来获取很多系统相关的信息，来丰富条件判断，接口定义如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ConditionContext</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取Bean定义</span>
    <span class="token class-name">BeanDefinitionRegistry</span> <span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 获取Bean工程，因此就可以获取容器中的所有bean</span>
    <span class="token annotation punctuation">@Nullable</span>
    <span class="token class-name">ConfigurableListableBeanFactory</span> <span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// environment 持有所有的配置信息</span>
    <span class="token class-name">Environment</span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 资源信息</span>
    <span class="token class-name">ResourceLoader</span> <span class="token function">getResourceLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 类加载信息</span>
    <span class="token annotation punctuation">@Nullable</span>
    <span class="token class-name">ClassLoader</span> <span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-使用说明" tabindex="-1"><a class="header-anchor" href="#_2-使用说明" aria-hidden="true">#</a> 2. 使用说明</h3><p>通过一个小例子，简单的说一下如何使用Condition和<code>@Conditional</code>注解，来实现bean的条件加载</p><p>首先我们定义一个随机产生数据的类，其功能就是随机生成一些数据</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RandDataComponent</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> rand<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">RandDataComponent</span><span class="token punctuation">(</span><span class="token class-name">Supplier</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> rand<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>rand <span class="token operator">=</span> rand<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> rand<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们目前提供两种随机数据生成的bean，但是需要根据配置来选择具体选中的方式，因此我们如下定义Bean</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConditionalAutoConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span><span class="token class-name">RandIntCondition</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">RandDataComponent</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">randIntComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RandDataComponent</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span><span class="token class-name">RandBooleanCondition</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">RandDataComponent</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> <span class="token function">randBooleanComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RandDataComponent</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> random<span class="token punctuation">.</span><span class="token function">nextBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的配置，先不管<code>@Conditional</code>注解的内容，单看两个Bean的定义，一个是定义int随机数生成；一个是定义boolean随机生成；</p><p>但是我们的系统中，只需要一个随机数据生成器即可，我们选择根据配置<code>conditional.rand.type</code>的值来选择到底用哪个，配置如下</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment"># int 表示选择随机产生int数据; 非int 表示随机产生boolean数据</span>
<span class="token key attr-name">conditional.rand.type</span><span class="token punctuation">=</span><span class="token value attr-value">int</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来就得看这个条件如何加上了，也就是上面配置类<code>ConditionalAutoConfig</code>中两个注解的内容了，两个类都是实现<code>Condition</code>的接口，具体如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RandBooleanCondition</span> <span class="token keyword">implements</span> <span class="token class-name">Condition</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">ConditionContext</span> conditionContext<span class="token punctuation">,</span> <span class="token class-name">AnnotatedTypeMetadata</span> annotatedTypeMetadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> type <span class="token operator">=</span> conditionContext<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;conditional.rand.type&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;boolean&quot;</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RandIntCondition</span> <span class="token keyword">implements</span> <span class="token class-name">Condition</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">ConditionContext</span> conditionContext<span class="token punctuation">,</span> <span class="token class-name">AnnotatedTypeMetadata</span> annotatedTypeMetadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> type <span class="token operator">=</span> conditionContext<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;conditional.rand.type&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;int&quot;</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的实现也比较清晰，获取配置值，然后判断，并返回true/fase；返回true，则表示这个条件满足，那么这个Bean就可以被加载了；否则这个Bean就不会创建</p><h3 id="_3-测试与验证" tabindex="-1"><a class="header-anchor" href="#_3-测试与验证" aria-hidden="true">#</a> 3. 测试与验证</h3><p>针对上面的配置与实现，写一个测试类如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;/conditional&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConditionalRest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">RandDataComponent</span> randDataComponent<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;/show&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> type <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;conditional.rand.type&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> randDataComponent<span class="token punctuation">.</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; &gt;&gt;&gt; &quot;</span> <span class="token operator">+</span> type<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当配置文件的值为int时，每次访问返回的应该都是正整数，演示如下图</p><figure><img src="`+u+'" alt="int随机生成" tabindex="0" loading="lazy"><figcaption>int随机生成</figcaption></figure><p>将配置的值改成boolean之后，再次测试如下图</p><figure><img src="'+d+`" alt="boolean随机生成" tabindex="0" loading="lazy"><figcaption>boolean随机生成</figcaption></figure><h2 id="ii-扩展与小结" tabindex="-1"><a class="header-anchor" href="#ii-扩展与小结" aria-hidden="true">#</a> II. 扩展与小结</h2><p>上面的测试演示了通过配置文件选择注入Bean的情况，如果一个Bean是通过自动扫描加载的，是否可以直接在Bean的类上添加注解来决定是否载入呢？</p><h3 id="_1-自动扫描bean的条件加载" tabindex="-1"><a class="header-anchor" href="#_1-自动扫描bean的条件加载" aria-hidden="true">#</a> 1. 自动扫描Bean的条件加载</h3><p>从使用来讲，和前面的没有什么区别，只是将注解放在具体的类上而言，同样给出一个示例，先定义一个bean</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span><span class="token class-name">ScanDemoCondition</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScanDemoBean</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${conditional.demo.load}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> load<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">getLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> load<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的判断条件如下，当配置文件中<code>conditional.demo.load</code>为true时，才会加载这个配置，否则不实例化</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScanDemoCondition</span> <span class="token keyword">implements</span> <span class="token class-name">Condition</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">matches</span><span class="token punctuation">(</span><span class="token class-name">ConditionContext</span> conditionContext<span class="token punctuation">,</span> <span class="token class-name">AnnotatedTypeMetadata</span> annotatedTypeMetadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>conditionContext<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;conditional.demo.load&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试类和前面差不多，稍微注意下的就是自动注入时，改一下必要条件，避免bean不存在时报错</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span>required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">ScanDemoBean</span> scanDemoBean<span class="token punctuation">;</span>

<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;/scan&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">showDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> type <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;conditional.demo.load&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>scanDemoBean <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;not exists! &gt;&gt;&gt;&quot;</span> <span class="token operator">+</span> type<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;load : &quot;</span> <span class="token operator">+</span> scanDemoBean<span class="token punctuation">.</span><span class="token function">getLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; &gt;&gt;&gt;&quot;</span> <span class="token operator">+</span> type<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当配置为true时，bean应该存在，走上面的else逻辑</p><figure><img src="`+r+'" alt="自动扫描条件准确" tabindex="0" loading="lazy"><figcaption>自动扫描条件准确</figcaption></figure><p>当配置为false时，不会加载bean，走if逻辑</p><figure><img src="'+k+'" alt="自动扫描添加不符" tabindex="0" loading="lazy"><figcaption>自动扫描添加不符</figcaption></figure><h3 id="_2-小结" tabindex="-1"><a class="header-anchor" href="#_2-小结" aria-hidden="true">#</a> 2. 小结</h3><p>通过<code>@Conditional</code>注解配合<code>Condition</code>接口，来决定给一个bean是否创建和注册到Spring容器中，从而实现有选择的加载bean</p><h4 id="a-优势" tabindex="-1"><a class="header-anchor" href="#a-优势" aria-hidden="true">#</a> a. 优势</h4><p>这样做的目的是什么呢？</p><ul><li>当有多个同名bean时，怎么抉择的问题</li><li>解决某些bean的创建有其他依赖条件的case</li></ul><h4 id="b-更多注解" tabindex="-1"><a class="header-anchor" href="#b-更多注解" aria-hidden="true">#</a> b. 更多注解</h4><p>上面可以控制bean的创建，但通过上面的流程，会发现有一点繁琐，有没有什么方式可以简化上面的流程呢？</p><p>只用一个注解就好，不要自己再来实现Condtion接口，Spring框架提供了一系列相关的注解，如下表</p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td><code>@ConditionalOnSingleCandidate</code></td><td>当给定类型的bean存在并且指定为Primary的给定类型存在时,返回true</td></tr><tr><td><code>@ConditionalOnMissingBean</code></td><td>当给定的类型、类名、注解、昵称在beanFactory中不存在时返回true.各类型间是or的关系</td></tr><tr><td><code>@ConditionalOnBean</code></td><td>与上面相反，要求bean存在</td></tr><tr><td><code>@ConditionalOnMissingClass</code></td><td>当给定的类名在类路径上不存在时返回true,各类型间是and的关系</td></tr><tr><td><code>@ConditionalOnClass</code></td><td>与上面相反，要求类存在</td></tr><tr><td><code>@ConditionalOnCloudPlatform</code></td><td>当所配置的CloudPlatform为激活时返回true</td></tr><tr><td><code>@ConditionalOnExpression</code></td><td>spel表达式执行为true</td></tr><tr><td><code>@ConditionalOnJava</code></td><td>运行时的java版本号是否包含给定的版本号.如果包含,返回匹配,否则,返回不匹配</td></tr><tr><td><code>@ConditionalOnProperty</code></td><td>要求配置属性匹配条件</td></tr><tr><td><code>@ConditionalOnJndi</code></td><td>给定的jndi的Location 必须存在一个.否则,返回不匹配</td></tr><tr><td><code>@ConditionalOnNotWebApplication</code></td><td>web环境不存在时</td></tr><tr><td><code>@ConditionalOnWebApplication</code></td><td>web环境存在时</td></tr><tr><td><code>@ConditionalOnResource</code></td><td>要求制定的资源存在</td></tr></tbody></table><h2 id="iii-其他" tabindex="-1"><a class="header-anchor" href="#iii-其他" aria-hidden="true">#</a> III. 其他</h2><h3 id="_0-相关" tabindex="-1"><a class="header-anchor" href="#_0-相关" aria-hidden="true">#</a> 0. 相关</h3><h4 id="a-更多博文" tabindex="-1"><a class="header-anchor" href="#a-更多博文" aria-hidden="true">#</a> a. 更多博文</h4><p><strong>基础篇</strong></p>',54),h={href:"http://spring.hhui.top/spring-blog/2018/10/09/181009-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%9F%BA%E6%9C%AC%E5%AE%9A%E4%B9%89%E4%B8%8E%E4%BD%BF%E7%94%A8/",target:"_blank",rel:"noopener noreferrer"},B={href:"http://spring.hhui.top/spring-blog/2018/10/12/181012-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E8%87%AA%E5%8A%A8%E5%8A%A0%E8%BD%BD/",target:"_blank",rel:"noopener noreferrer"},y={href:"http://spring.hhui.top/spring-blog/2018/10/13/181013-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C/",target:"_blank",rel:"noopener noreferrer"},C={href:"http://spring.hhui.top/spring-blog/2018/10/18/181018-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-Condition%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/",target:"_blank",rel:"noopener noreferrer"},f={href:"http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B-ConditionalOnBean%E4%B8%8E@ConditionalOnClass/",target:"_blank",rel:"noopener noreferrer"},E={href:"http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-ConditionalOnProperty/",target:"_blank",rel:"noopener noreferrer"},_={href:"http://spring.hhui.top/spring-blog/2018/10/19/181019-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87Bean%E4%B9%8B%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5-ConditionalOnExpression/",target:"_blank",rel:"noopener noreferrer"},w=n("p",null,[n("strong",null,"应用篇")],-1),A={href:"http://spring.hhui.top/spring-blog/2018/10/17/181017-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87Bean%E4%B9%8B%E6%B3%A8%E9%94%80%E4%B8%8E%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C%E5%AE%9E%E7%8E%B0%E6%9C%8D%E5%8A%A1mock/",target:"_blank",rel:"noopener noreferrer"},x=n("h4",{id:"b-项目源码",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#b-项目源码","aria-hidden":"true"},"#"),a(" b. 项目源码")],-1),q={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"},S={href:"https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/007-conditionbean",target:"_blank",rel:"noopener noreferrer"};function j(D,R){const s=l("ExternalLinkIcon");return o(),p("div",null,[m,b,i(" more "),g,n("ul",null,[n("li",null,[n("a",h,[a("181009-SpringBoot基础篇Bean之基本定义与使用"),t(s)])]),n("li",null,[n("a",B,[a("181012-SpringBoot基础篇Bean之自动加载"),t(s)])]),n("li",null,[n("a",y,[a("181013-SpringBoot基础篇Bean之动态注册"),t(s)])]),n("li",null,[n("a",C,[a("181018-SpringBoot基础篇Bean之条件注入@Condition使用姿势"),t(s)])]),n("li",null,[n("a",f,[a("181019-SpringBoot基础篇Bean之@ConditionalOnBean与@ConditionalOnClass"),t(s)])]),n("li",null,[n("a",E,[a("181019-SpringBoot基础篇Bean之条件注入@ConditionalOnProperty"),t(s)])]),n("li",null,[n("a",_,[a("181019-SpringBoot基础篇Bean之条件注入@ConditionalOnExpression"),t(s)])])]),w,n("ul",null,[n("li",null,[n("a",A,[a("181017-SpringBoot应用篇Bean之注销与动态注册实现服务mock"),t(s)])])]),x,n("ul",null,[n("li",null,[a("工程："),n("a",q,[a("spring-boot-demo"),t(s)])]),n("li",null,[a("module: "),n("a",S,[a("007-conditionbean"),t(s)])])])])}const O=e(v,[["render",j],["__file","05.181018-SpringBoot基础篇Bean之条件注入-Condition使用姿势.html.vue"]]);export{O as default};
