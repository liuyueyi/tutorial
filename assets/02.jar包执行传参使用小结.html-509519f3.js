import{_ as t,V as p,W as o,X as e,Y as n,Z as c,$ as l,a1 as s,F as i}from"./framework-094145d2.js";const u={},k=n("p",null,"虽说我们现在大多不太直接使用jar包运行方式，目前比较主流的是将自己的服务丢在某个容器中（如tomcat，jetty等）运行，比如我之前所属的电商公司，就是将项目打包为war包，丢到tomcat容器中运行的",-1),r=n("p",null,"在使用SpringBoot时，可能会出现直接打包一个可执行的jar，然后运行，这种时候，通过java命令执行时，时可以传参的，那么问题来了，main方法可以如何优雅的解析这些传参呢？",-1),d=s(`<h2 id="i-简陋版本" tabindex="-1"><a class="header-anchor" href="#i-简陋版本" aria-hidden="true">#</a> I. 简陋版本</h2><p>最容易想到的，无非是自己直接解析main方法的传参，如我们知道的main方法的一般写法为</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>看到上面的写法，很容易就可以猜到，传入的参数最终都放到了args数组中，那么该怎么用就怎么用，一个<code>hello world</code>的实例如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello &quot;</span> <span class="token operator">+</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试如下：</p><figure><img src="https://upload-images.jianshu.io/upload_images/1405936-2d4f2e39d0bbaaf9.png" alt="image.png" tabindex="0" loading="lazy"><figcaption>image.png</figcaption></figure><p>看到这里，真心感觉没有什么干货，上面这些过于小白了吧，估计连入门都算不上，那么参数处理仅止于此么？</p><h2 id="ii-进阶版本" tabindex="-1"><a class="header-anchor" href="#ii-进阶版本" aria-hidden="true">#</a> II. 进阶版本</h2><p>玩过shell的同学应该都知道man命令，可以用来查看很多shell命令的帮助，里面介绍了很多的shell命令的参数说明，而且这些参数一般有缩写和全拼，而且有些参数可以带传值，有些并不需要，可以说shell命令的传参方式，已经拥有自己独立的一套规范了，而且用起来非常的爽</p><p>那么我们的jar包，能否支持这种传参方式呢？</p><p>举一个简单的例子，上面的HelloWord接收一个简单用户名参数</p><ul><li>不传入时，默认输出 hello world</li><li>短参方式: <code>-n xxx</code></li><li>长参方式: <code>--name=xxx</code></li></ul><p>仅仅支持这一个场景，需要自己来解析的话，就得写一长串的代码，好在这种需求已经有轮子了</p><h3 id="_1-commons-cli" tabindex="-1"><a class="header-anchor" href="#_1-commons-cli" aria-hidden="true">#</a> 1. commons-cli</h3><p>首先引入依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-cli<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-cli<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>开始使用，官网已经给出了例子，完整的doc可以参考</p>`,18),m={href:"http://commons.apache.org/proper/commons-cli/usage.html",target:"_blank",rel:"noopener noreferrer"},v=s(`<h3 id="_2-实例演示" tabindex="-1"><a class="header-anchor" href="#_2-实例演示" aria-hidden="true">#</a> 2. 实例演示</h3><p>下面结合我的一个项目，给出实际的使用方式</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppLaunch</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SOURCE_PATH</span> <span class="token operator">=</span> <span class="token string">&quot;./task-core/src/test/java/com/git/hui/task&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TASK_ARG_LONG</span> <span class="token operator">=</span> <span class="token string">&quot;task&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TASK_ARG_SHORT</span> <span class="token operator">=</span> <span class="token string">&quot;t&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">ARG_HELP_LONG</span> <span class="token operator">=</span> <span class="token string">&quot;help&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">ARG_HELP_SHORT</span> <span class="token operator">=</span> <span class="token string">&quot;h&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> run <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>


    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printHelp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Options</span> options <span class="token operator">=</span> <span class="token function">buildOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HelpFormatter</span> helpFormatter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelpFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        helpFormatter<span class="token punctuation">.</span><span class="token function">printHelp</span><span class="token punctuation">(</span><span class="token string">&quot;java -jar \${jar} [options]&quot;</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Options</span> <span class="token function">buildOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Options</span> options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Options</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        options<span class="token punctuation">.</span><span class="token function">addOption</span><span class="token punctuation">(</span>
                <span class="token class-name">Option</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token constant">TASK_ARG_SHORT</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">argName</span><span class="token punctuation">(</span><span class="token constant">TASK_ARG_LONG</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasArg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">longOpt</span><span class="token punctuation">(</span><span class="token constant">TASK_ARG_LONG</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">required</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">desc</span><span class="token punctuation">(</span><span class="token string">&quot;choose task path, default [&quot;</span> <span class="token operator">+</span> <span class="token constant">SOURCE_PATH</span> <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        options<span class="token punctuation">.</span><span class="token function">addOption</span><span class="token punctuation">(</span><span class="token class-name">Option</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token constant">ARG_HELP_SHORT</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">longOpt</span><span class="token punctuation">(</span><span class="token constant">ARG_HELP_LONG</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">desc</span><span class="token punctuation">(</span><span class="token string">&quot;show command help&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> options<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">CommandLine</span> <span class="token function">parseArguments</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arguments<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Options</span> options <span class="token operator">=</span> <span class="token function">buildOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CommandLine</span> commandLine <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            commandLine <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>commandLine<span class="token punctuation">.</span><span class="token function">hasOption</span><span class="token punctuation">(</span><span class="token constant">ARG_HELP_LONG</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">printHelp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> commandLine<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">CommandLine</span> commandLine <span class="token operator">=</span> <span class="token function">parseArguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> scriptSource <span class="token operator">=</span> commandLine<span class="token punctuation">.</span><span class="token function">getOptionValue</span><span class="token punctuation">(</span><span class="token constant">TASK_ARG_LONG</span><span class="token punctuation">,</span> <span class="token constant">SOURCE_PATH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;script source: {}&quot;</span> <span class="token operator">+</span> scriptSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// ....</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对上面的使用姿势进行简单的说明，从逻辑上划分，可以分为下面几块</p><ul><li>定义传参，包括参数说明，缩写和全拼，是否有参数值，描述等</li><li>解析传参数组，将具体的传参解析为<code>CommandLine</code>对象</li><li>获取参数，执行相应的业务逻辑</li></ul><p>从源码角度来看，没什么复杂或者难以理解的地方，稍稍提一点，参数的定义，即<code>buildOption</code>方法中，上面指定了两个参数 <code>help, task</code>, 其中一个要求有参数值，一个不需要参数值，下面实际演示如下</p><figure><img src="https://upload-images.jianshu.io/upload_images/1405936-f2e49d96af80d91b.png" alt="show" tabindex="0" loading="lazy"><figcaption>show</figcaption></figure>`,7);function g(b,f){const a=i("ExternalLinkIcon");return p(),o("div",null,[k,r,e(" more "),d,n("ul",null,[n("li",null,[n("a",m,[c("commons-cli Usage Scenarios"),l(a)])])]),v])}const _=t(u,[["render",g],["__file","02.jar包执行传参使用小结.html.vue"]]);export{_ as default};
