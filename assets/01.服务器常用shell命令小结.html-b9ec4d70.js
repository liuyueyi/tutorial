import{_ as s,V as a,W as n,X as e,Y as i,a1 as l}from"./framework-094145d2.js";const t="/tutorial/hexblog/imgs/190121/00.jpg",c="/tutorial/hexblog/imgs/190121/01.jpg",d="/tutorial/hexblog/imgs/190121/02.jpg",p="/tutorial/hexblog/imgs/190121/03.jpg",r="/tutorial/hexblog/imgs/190121/04.jpg",o="/tutorial/hexblog/imgs/190121/05.jpg",u="/tutorial/hexblog/imgs/190121/06.jpg",v={},m=i("p",null,"记录一下服务器开发平时常用的shell命令，帮助高效发现和解决问题",-1),b=l(`<h3 id="_1-sh-远程登录" tabindex="-1"><a class="header-anchor" href="#_1-sh-远程登录" aria-hidden="true">#</a> 1. sh 远程登录</h3><p>目前最常用的登录服务器的方式就是通过sh，格式如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sh</span> user@ip
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一般登录的时候要求输入登录密码，为了避免这个问题，可以将自己的公钥上传到服务器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 在本机，查看公钥， 并拷贝所有的内容</span>
<span class="token function">vim</span> ~/.ssh/id_rsa.pub


<span class="token comment"># 登录服务器，将公钥贴在下面的文件中，独立一行即可</span>
<span class="token function">vim</span> ~/.ssh/authorized_keys 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-scp-文件拷贝" tabindex="-1"><a class="header-anchor" href="#_2-scp-文件拷贝" aria-hidden="true">#</a> 2. scp 文件拷贝</h3><p>将文件上传到服务器；一般来讲为了保证上传文件的不会因为写权限的问题，常见的是将文件拷贝到<code>/tmp</code>目录下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">scp</span> xxx user@192.168.0.1:/tmp
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>将服务器的文件拷贝当本机的当前目录下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">scp</span> user@192.168.0.1:/tmp/test.txt ./
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_3-jps进程查看" tabindex="-1"><a class="header-anchor" href="#_3-jps进程查看" aria-hidden="true">#</a> 3. JPS进程查看</h3><p>针对java应用而言，如何看系统中有哪些java进程在跑?</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>jps <span class="token parameter variable">-l</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-ps进程查看" tabindex="-1"><a class="header-anchor" href="#_4-ps进程查看" aria-hidden="true">#</a> 4. PS进程查看</h3><p>这个命令用来查看进程，以及对应的资源占用非常常见，一般使用命令如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> python
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>一个输出case</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root       969  0.0  0.0 573852   780 ?        Ssl  1月14   0:38 /usr/bin/python -Es /usr/sbin/tuned -l -P
finbtc    7036  0.0  0.0 112724   984 pts/2    S+   09:38   0:00 grep --color=auto python
finbtc   14274  6.7  0.9 3998860 147968 ?      Ssl  07:00  10:47 /usr/bin/python3.6 /home/finbtc/workspace/coin_data_service/CoinCrawler/CoinCrawler.py coin -r fxh,bbs,github,cmc_info,my_token -w coin_base_info,coin_community,coin_exchange_volume -q 3
finbtc   29326  0.2  0.7 4000596 124044 ?      Sl   1月18   2:33 venv/bin/python3.6 main.py newsletter -e dev -i 15
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-top" tabindex="-1"><a class="header-anchor" href="#_5-top" aria-hidden="true">#</a> 5. top</h3><p>这个也比较常用，查看哪些进程比较占用系统资源</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">top</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>直接输入top，回车可以看到动态的进程资源占用情况，然后按键盘 <code>c</code>，可以查看command的详细信息</p><figure><img src="`+t+`" alt="IMAGE" tabindex="0" loading="lazy"><figcaption>IMAGE</figcaption></figure><p>如果想查看具体某个进程的占用情况，可以通过制定进程号来实现</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">top</span> <span class="token parameter variable">-p</span> <span class="token number">3301</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后显示结果如下</p><figure><img src="`+c+`" alt="IMAGE" tabindex="0" loading="lazy"><figcaption>IMAGE</figcaption></figure><p>进程的维度可能太大，不太好确认到底是里面哪块逻辑占用系统资源，可以更详细的查看线程维度的资源占用</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">top</span> <span class="token parameter variable">-Hp</span> <span class="token number">3301</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>截图如下，其中PID为线程号，这种时候可以结合jstack定位具体的堆栈信息</p><figure><img src="`+d+`" alt="IMAGE" tabindex="0" loading="lazy"><figcaption>IMAGE</figcaption></figure><h3 id="_6-基本操作命令" tabindex="-1"><a class="header-anchor" href="#_6-基本操作命令" aria-hidden="true">#</a> 6. 基本操作命令</h3><p>简单说一下一些基本的命令，包括进入指定目录，查看相关信息等</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 创建文件夹</span>
<span class="token function">mkdir</span> <span class="token builtin class-name">test</span>
<span class="token comment"># 删除文件夹</span>
<span class="token function">rmdir</span> <span class="token builtin class-name">test</span>

<span class="token comment"># 创建文件</span>
<span class="token function">touch</span> test.txt
<span class="token comment"># 删除文件</span>
<span class="token function">rm</span> test.txt

<span class="token comment"># 进入目录</span>
<span class="token builtin class-name">cd</span> /tmp
<span class="token comment"># 回到上一次的目录</span>
<span class="token builtin class-name">cd</span> -

<span class="token comment"># 查看目录下文件</span>
<span class="token function">ls</span>
<span class="token comment"># 查看目录下所有文件</span>
<span class="token function">ls</span> <span class="token parameter variable">-a</span>
<span class="token comment"># 查看目录下文件详细信息</span>
ll <span class="token parameter variable">-h</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-文件or文件夹权限修改" tabindex="-1"><a class="header-anchor" href="#_7-文件or文件夹权限修改" aria-hidden="true">#</a> 7. 文件or文件夹权限修改</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 修改分组</span>
<span class="token function">chgrp</span> xxx <span class="token builtin class-name">test</span>
<span class="token comment"># 修改owner</span>
<span class="token function">chown</span> xxx <span class="token builtin class-name">test</span>

<span class="token comment"># 增加文件执行权限</span>
<span class="token function">chmod</span> +x start.sh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-日志查看" tabindex="-1"><a class="header-anchor" href="#_8-日志查看" aria-hidden="true">#</a> 8. 日志查看</h3><p>通常使用的方式有 <code>vim, less, more, tail, head</code>， 下面分别</p><p><strong>vim方式</strong></p><p>vim方式打开文件，可以使用vim的各种命令，可以修改文件；缺点是当文件特别大时，打开比较费劲；且会锁文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">vim</span> test.log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>less和more方式</strong></p><p>两个没有太大的区别，我个人强烈推荐使用less方式查看日志文件</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">less</span> test.log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>less通过只读的方式打开文件，支持有限的vim命令</p><ul><li>通过 <code>shift + g</code> 跳转到文件末尾，当文件有新内容时，也可以通过执行上面的命令获取最新的内容</li><li>输入 <code>gg</code> 跳转到文件头</li><li><code>ctrl+b</code> 向上翻一页； <code>ctrl+f</code> 向下翻一页</li><li>先按&#39;/&#39;进入查询模式，输入要查的内容回车即可</li></ul><p><strong>tail方式</strong></p><p>这个与前面不一样，显示文件的最后的一些内容，通过添加<code>-f</code>参数可以实时打印文件的最新内容；分析线上日志请求的利器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">tail</span> <span class="token parameter variable">-200f</span> test.log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面的命令表示输出日志的最后200行数据，且实时输出最新的内容</p><p><strong>head方式</strong></p><p>用得不多，查询文件的前多少行内容</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">head</span> <span class="token parameter variable">-n100</span> test.log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_9-清空日志" tabindex="-1"><a class="header-anchor" href="#_9-清空日志" aria-hidden="true">#</a> 9. 清空日志</h3><p>清空日志文件内容，但是不删除文件本身，挺常见的一个场景，使用输出重定向</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&#39;&#39;</span> <span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> test.log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_10-history" tabindex="-1"><a class="header-anchor" href="#_10-history" aria-hidden="true">#</a> 10. history</h3><p>查看历史操作命令</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">history</span> <span class="token operator">|</span> <span class="token function">grep</span> redis
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_11-任务后台执行" tabindex="-1"><a class="header-anchor" href="#_11-任务后台执行" aria-hidden="true">#</a> 11. 任务后台执行</h3><p>nohup方式让程序后台执行，一般格式如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">nohup</span>  python test.py <span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> work.log <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span>
<span class="token comment"># 将进程号保存到文件</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$!</span> <span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> pid.log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-grep命令" tabindex="-1"><a class="header-anchor" href="#_12-grep命令" aria-hidden="true">#</a> 12. grep命令</h3><p>文件太多，如何过滤出想要的数据，常见的是grep命令，很强的工具，说一下常见的一些我个人常用的姿势</p><p>简单的文件搜索，在test.log中查出所有包含<code>hello world</code>的文件行</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">grep</span> <span class="token string">&#39;hello world&#39;</span> test.log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结合tail使用的方式</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 要求精准匹配</span>
<span class="token function">tail</span> <span class="token parameter variable">-f</span> logs/record.csv <span class="token operator">|</span> <span class="token function">grep</span> zgtop
<span class="token comment"># 忽略大小写</span>
<span class="token function">tail</span> <span class="token parameter variable">-f</span> logs/record.csv <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-i</span> ZGTOP
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+p+`" alt="IMAGE" tabindex="0" loading="lazy"><figcaption>IMAGE</figcaption></figure><p>正则匹配方式,实现多种条件匹配</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">tail</span> <span class="token parameter variable">-f</span> logs/record.csv <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">&#39;zgtop|zb&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+r+`" alt="IMAGE" tabindex="0" loading="lazy"><figcaption>IMAGE</figcaption></figure><p>多个文件中匹配查找</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">grep</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-r</span> <span class="token string">&#39;exception&#39;</span> *.log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+o+`" alt="IMAGE" tabindex="0" loading="lazy"><figcaption>IMAGE</figcaption></figure><p>grep的命令比较强大，更详细的使用姿势可以通过<code>--help</code>来查看</p><h3 id="_13-查找" tabindex="-1"><a class="header-anchor" href="#_13-查找" aria-hidden="true">#</a> 13. 查找</h3><p>find命令，简单列几个可能用到的case</p><p><strong>根据文件名查询</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 从当前目录开始，遍历当前目录和所有子目录，列出文件后缀为py的文件</span>
<span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-name</span> <span class="token string">&#39;*.py&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>将目前目录其其下子目录中所有一般文件列出</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">find</span> <span class="token builtin class-name">.</span> <span class="token parameter variable">-type</span> f
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_14-xargs" tabindex="-1"><a class="header-anchor" href="#_14-xargs" aria-hidden="true">#</a> 14. xargs</h3><p>用于管道中的结果传递，举一个经常用到的例子，杀进程</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">cat</span> pid.log <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-I</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token function">kill</span> <span class="token parameter variable">-9</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结合ps实现杀进程的case</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">java</span> <span class="token operator">|</span> <span class="token function">grep</span> hub <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{print $2}&#39;</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-I</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token builtin class-name">echo</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+u+'" alt="IMAGE" tabindex="0" loading="lazy"><figcaption>IMAGE</figcaption></figure>',88);function h(g,k){return a(),n("div",null,[m,e(" more "),b])}const x=s(v,[["render",h],["__file","01.服务器常用shell命令小结.html.vue"]]);export{x as default};
