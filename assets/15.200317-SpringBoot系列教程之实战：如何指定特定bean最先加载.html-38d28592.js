import{_ as o,V as p,W as c,X as i,Y as n,Z as a,$ as e,a1 as t,F as l}from"./framework-094145d2.js";const u="/tutorial/imgs/200317/00.jpg",r={},d=n("p",null,"在日常的业务开发中，绝大多数我们都是不关注bean的加载顺序，然而如果在某些场景下，当我们希望某个bean优于其他的bean被实例化时，往往并没有我们想象中的那么简单",-1),k=t(`<h2 id="i-启动类指定方式" tabindex="-1"><a class="header-anchor" href="#i-启动类指定方式" aria-hidden="true">#</a> I. 启动类指定方式</h2><p>在实际的SpringBoot开发中，我们知道都会有一个启动类，如果希望某个类被优先加载，一个成本最低的简单实现，就是在启动类里添加上依赖</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">Application</span><span class="token punctuation">(</span><span class="token class-name">DemoBean</span> demoBean<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        demoBean<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意上面的构造方法，如果我们希望在应用启动之前，<code>demoBean</code>就已经被加载了，那就让Application强制依赖它，所以再Application的bean初始化之前，肯定会优先实例化<code>demoBean</code></p><p>相信上面这种写法，大家并不会陌生，特别是当我们应用启动之后，发现某个依赖的bean（一般来讲是第三方库提供的bean）还没有初始化导致npe时，用这种方法还是比较多的</p><p><strong>case1</strong></p><p>我们且不谈这种实现方式是否优雅，当我们希望<code>targetBean</code>在所有的bean实例化之前被实例时，上面这种写法是否一定会生效呢？</p><p><strong>case2</strong></p><p>中间件同学：吭哧吭哧的开发了一个🐂🍺jar包，只要接入了保证你的应用永远不会宕机（请无视夸张的言语）,唯一的要求是接入时，需要优先加载jar包里面的<code>firstBean</code>...</p><p>接入方：你的bean要求被首先加载这个得你自己保证啊，我写些if/else代码已经很辛苦了，哪有精力保证你的这个优先加载！！！你自己都没法保证，那我也没办法保证...</p><p>中间件同学：还能不能愉快的玩耍了....</p><h2 id="ii-instantiationawarebeanpostprocessoradapter方式" tabindex="-1"><a class="header-anchor" href="#ii-instantiationawarebeanpostprocessoradapter方式" aria-hidden="true">#</a> II. <code>InstantiationAwareBeanPostProcessorAdapter</code>方式</h2>`,12),v={href:"http://spring.hhui.top/spring-blog/2019/10/29/191029-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BBean%E4%B9%8B%E6%8C%87%E5%AE%9A%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%BA%E5%BA%8F%E7%9A%84%E8%8B%A5%E5%B9%B2%E5%A7%BF%E5%8A%BF/",target:"_blank",rel:"noopener noreferrer"},m=t(`<p>接下来介绍另外一种使用姿势，借助<code>InstantiationAwareBeanPostProcessorAdapter</code>来实现在bean实例化之前优先加载目标bean</p><p><strong>声明</strong></p><ul><li>我个人认为下面这种使用方式，依然很不优雅，如有更好方式，恳请大佬留言告知</li><li>我个人认为下面这种使用方式，依然很不优雅，如有更好方式，恳请大佬留言告知</li><li>我个人认为下面这种使用方式，依然很不优雅，如有更好方式，恳请大佬留言告知</li></ul><h3 id="_1-场景分析" tabindex="-1"><a class="header-anchor" href="#_1-场景分析" aria-hidden="true">#</a> 1. 场景分析</h3><p>假设我们提供了一个配置读取的工具包，但是不同的应用可能对配置的存储有不同的要求，比如有的配置存在本地，有的存在db，有的通过http方式远程获取；而这些存储方式呢，通过<code>application.yml</code>配置文件中的配置参数<code>config.save.mode</code>来指定</p><p>这个工具包呢，会做一件事情，扫描应用程序的所有类，并注入配置信息，所以我们希望在应用程序启动之前，这个工具包就已经从数据源获取到了配置信息，而这又要求先获取应用到底是用的哪个数据源</p><p>简单来讲，就是希望在应用程序工作之前，<code>DatasourceLoader</code>这个bean已经被实例化了</p><p>-- 插播一句，上面这个case，正是我在筹备的<code>SpringBoot实战教程--从0到1创建一个高可用的配置中心</code>的具体应用场景</p><h3 id="_2-常规流程" tabindex="-1"><a class="header-anchor" href="#_2-常规流程" aria-hidden="true">#</a> 2. 常规流程</h3><p>新建一个SpringBoot项目工程，源码中springboot版本为<code>2.2.1.RELEASE</code></p><p>首先我们来定义这个目标bean: <code>DatasourceLoader</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatasourceLoader</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Getter</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> mode<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">DatasourceLoader</span><span class="token punctuation">(</span><span class="token class-name">Environment</span> environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>mode <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;config.save.mode&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;init DatasourceLoader for:&quot;</span> <span class="token operator">+</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">loadResourcres</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;开始初始化资源&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为这个工程主要是供第三方使用，所以按照SpringBoot的通常玩法，声明一个自动配置类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClientAutoConfiguration</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">DatasourceLoader</span> <span class="token function">propertyLoader</span><span class="token punctuation">(</span><span class="token class-name">Environment</span> environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DatasourceLoader</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在资源目录下新建文件夹 <code>META-INF</code>，创建文件<code>spring.factories</code>，内容如下</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.git.hui.boot.client.ClientAutoConfiguration
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后使用方添加依赖，就完了？？？</p><p>上面这套流程，属于一般的工具包写法了，请注意，这种方式，一般情况下是应用程序内声明的bean加载完毕之后，才会加载第三方依赖包中声明的bean；也就是说通过上面的写法，<code>DatasourceLoader</code>并不会被优先加载，也达不到我们的目的（应用都开始服务了，结果所有的配置都是null)</p><h3 id="_3-特殊写法" tabindex="-1"><a class="header-anchor" href="#_3-特殊写法" aria-hidden="true">#</a> 3. 特殊写法</h3><p>接下来我们借助所有的bean在实例化之前，会优先检测是否存在<code>InstantiationAwareBeanPostProcessor</code>接口这个特点，来实现<code>DatasourceLoader</code>的优先加载</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClientBeanProcessor</span> <span class="token keyword">extends</span> <span class="token class-name">InstantiationAwareBeanPostProcessorAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">BeanFactoryAware</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">BeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>beanFactory <span class="token keyword">instanceof</span> <span class="token class-name">ConfigurableListableBeanFactory</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>
                    <span class="token string">&quot;AutowiredAnnotationBeanPostProcessor requires a ConfigurableListableBeanFactory: &quot;</span> <span class="token operator">+</span> beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span><span class="token punctuation">)</span> beanFactory<span class="token punctuation">;</span>
        <span class="token comment">// 通过主动调用beanFactory#getBean来显示实例化目标bean</span>
        <span class="token class-name">DatasourceLoader</span> propertyLoader <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">DatasourceLoader</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>propertyLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的实现比较简单，借助<code>beanFactory#getBean</code>来手动触发bean的实例，通过实现<code>BeanFactoryAware</code>接口来获取<code>BeanFactory</code>，因为实现<code>InstantiationAwareBeanPostProcessor</code>接口的类会优先于Bean被实例，以此来间接的达到我们的目的</p><blockquote><p>关于上面这一套流程分析, 请关注微信公众号/个人博客站点，静待源码分析篇</p></blockquote><p>接下来的问题就是如何让它生效了，我们这里使用Import注解来实现</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Inherited</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ClientAutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">ClientBeanProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">EnableOrderClient</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意上面的注解中，导入上面的自动配置类，和<code>ClientBeanProcessor</code>，所以上一节中的<code>spring.factories</code>文件可以不需要哦</p><h3 id="_4-测试" tabindex="-1"><a class="header-anchor" href="#_4-测试" aria-hidden="true">#</a> 4. 测试</h3><p>上面的主要流程就完事了，接下来就需要进入测试，我们新建一个SpringBoot项目，添加依赖</p><p>先加一个demoBean</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoBean</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">DemoBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;demo bean init!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;print demo bean &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后是启动类， <code>@EnableOrderClient</code>这个注解必须得有哦</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableOrderClient</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token class-name">Application</span><span class="token punctuation">(</span><span class="token class-name">DemoBean</span> demoBean<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        demoBean<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在我们启动之前，请猜测一下，<code>DemoBean</code>和<code>DatasourceLoader</code>这里这两个bean，谁会优先被实例化？</p><p>下面是输出结果</p><figure><img src="`+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从上面的两个红框输出，可以知道我们的启动类指定方式依赖的bean，并不一定会最先被加载哦</p><h3 id="_5-小结" tabindex="-1"><a class="header-anchor" href="#_5-小结" aria-hidden="true">#</a> 5. 小结</h3><p>最后小结一下，本文提出了两种让bean优先加载的方式，一个是在启动类的构造方法中添加依赖，一个是借助<code>InstantiationAwareBeanPostProcessorAdapter</code>在bean实例化之前被创建的特点，结合<code>BeanFactory</code>来手动触发目标bean的创建</p><p>最后通过<code>@Import</code>注解让我们的<code>BeanPostProcessorAdapter</code>生效</p><p><strong>有知道其他方式的大佬，请不吝赐教啊</strong></p><h2 id="ii-其他" tabindex="-1"><a class="header-anchor" href="#ii-其他" aria-hidden="true">#</a> II. 其他</h2><h3 id="_0-项目" tabindex="-1"><a class="header-anchor" href="#_0-项目" aria-hidden="true">#</a> 0. 项目</h3>',42),b={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-case/008-bean-order/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-case/008-bean-order-client",target:"_blank",rel:"noopener noreferrer"};function y(B,f){const s=l("ExternalLinkIcon");return p(),c("div",null,[d,i(" more "),k,n("blockquote",null,[n("p",null,[a("在看下文的实现之前，墙裂推荐先看一下博文: "),n("a",v,[a("【SpringBoot基础系列】指定Bean初始化顺序的若干姿势"),e(s)])])]),m,n("ul",null,[n("li",null,[a("工程："),n("a",b,[a("https://github.com/liuyueyi/spring-boot-demo"),e(s)])]),n("li",null,[a("源码： "),n("ul",null,[n("li",null,[n("a",g,[a("https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-case/008-bean-order/"),e(s)])]),n("li",null,[n("a",h,[a("https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-case/008-bean-order-client"),e(s)])])])])])])}const w=o(r,[["render",y],["__file","15.200317-SpringBoot系列教程之实战：如何指定特定bean最先加载.html.vue"]]);export{w as default};
