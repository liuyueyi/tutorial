import{_ as e,V as o,W as c,X as l,Y as n,Z as s,$ as t,a1 as p,F as i}from"./framework-094145d2.js";const u="/tutorial/imgs/190327/00.jpg",k="/tutorial/imgs/190327/01.jpg",r="/tutorial/imgs/190327/02.jpg",d="/tutorial/imgs/190327/03.jpg",m="/tutorial/imgs/190327/04.jpg",v="/tutorial/imgs/190327/05.jpg",b="/tutorial/imgs/190327/06.jpg",g="/tutorial/imgs/190327/07.jpg",h="/tutorial/imgs/190327/08.jpg",f="/tutorial/imgs/190327/09.jpg",y="/tutorial/imgs/190327/10.jpg",w="/tutorial/imgs/190327/11.jpg",S="/tutorial/imgs/190327/12.jpg",_="/tutorial/imgs/190327/13.jpg",R={},C=n("p",null,"对接外部的一个接口时，发现一个鬼畜的问题，一直提示缺少某个参数，同样的url，通过curl命令访问ok，但是改成RestTemplate请求就不行；因为提供接口的是外部的，所以也无法从服务端着手定位问题，特此记录下这个问题的定位以及解决过程",-1),T=p(`<h2 id="i-问题复现" tabindex="-1"><a class="header-anchor" href="#i-问题复现" aria-hidden="true">#</a> I. 问题复现</h2><p>首先我们是通过get请求访问服务端，参数直接拼接在url中；与我们常规的get请求有点不一样的是其中一个参数要求url编码之后传过去。</p><p>因为不知道服务端的实现，所以再事后定位到这个问题之后，反推了一个服务端可能实现方式</p><h3 id="_1-web服务模拟" tabindex="-1"><a class="header-anchor" href="#_1-web服务模拟" aria-hidden="true">#</a> 1. web服务模拟</h3><p>模拟一个接口，要求必须传入accessKey，且这个参数必须和我们定义的一样（模拟身份标志，用户请求必须带上自己的accessKey, 且必须合法）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloRest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">ALLOW_KEY</span> <span class="token operator">=</span> <span class="token string">&quot;ASHJRK3LJFD+R32SADFLK+FASDJ=&quot;</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;access&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">access</span><span class="token punctuation">(</span><span class="token class-name">String</span> accessKey<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>accessKey <span class="token operator">+</span> <span class="token string">&quot;|&quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span> <span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">ALLOW_KEY</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>accessKey<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;false&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个接口只支持get请求，把参数放在url中的时候，很明显这个accessKey需要编码</p><h3 id="_2-访问验证" tabindex="-1"><a class="header-anchor" href="#_2-访问验证" aria-hidden="true">#</a> 2. 访问验证</h3><p>在拼接访问url时，首先对accessKey进行编码，得到一个访问的连接 <code>http://localhost:39531/access?accessKey=ASHJRK3LJFD%2BR32SADFLK%2BFASDJ%3D&amp;name=yihuihui</code></p><p>下面看下浏览器 + curl + restTemplate三种访问姿势的返回结果</p><p>浏览器访问结果：</p><figure><img src="`+u+'" alt="浏览器访问" tabindex="0" loading="lazy"><figcaption>浏览器访问</figcaption></figure><p>curl访问结果：</p><figure><img src="'+k+`" alt="curl访问" tabindex="0" loading="lazy"><figcaption>curl访问</figcaption></figure><p>restTemplate访问结果：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUrlEncode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">&quot;http://localhost:39531/access?accessKey=ASHJRK3LJFD%2BR32SADFLK%2BFASDJ%3D&amp;name=yihuihui&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">RestTemplate</span> restTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> ans <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+r+`" alt="restTemplate访问" tabindex="0" loading="lazy"><figcaption>restTemplate访问</figcaption></figure><p>看到上面的输出，结果就很有意思了，同样的url为啥前面的访问没啥问题，换到RestTemplate就不对了？？？</p><h2 id="ii-问题定位分析" tabindex="-1"><a class="header-anchor" href="#ii-问题定位分析" aria-hidden="true">#</a> II. 问题定位分析</h2><p>如果服务端的代码也在我们的掌控中，可以通过debug服务端，查看请求参数来定位问题；但是这个问题出现时，服务端不在掌握中，这个时候就只能从客户端出发，来推测可能出现问题的原因了；</p><p>接下来记录下我们定位这个问题的&quot;盲人摸象&quot;过程</p><h3 id="_1-问题猜测" tabindex="-1"><a class="header-anchor" href="#_1-问题猜测" aria-hidden="true">#</a> 1. 问题猜测</h3><p>很容易怀疑问题出在url编码后的参数上，直接传这种编码后的url参数会不会解析有问题，既然编码之后不行，那就改成不编码试一试</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUrlEncode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">&quot;http://localhost:39531/access?accessKey=ASHJRK3LJFD%2BR32SADFLK%2BFASDJ%3D&amp;name=yihuihui&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">RestTemplate</span> restTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> ans <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>

    url <span class="token operator">=</span> <span class="token string">&quot;http://localhost:39531/access?accessKey=ASHJRK3LJFD+R32SADFLK+FASDJ=&amp;name=yihuihui&quot;</span><span class="token punctuation">;</span>
    ans <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>毫无疑问，访问依然失败，模拟case如下</p><figure><img src="`+d+`" alt="test case" tabindex="0" loading="lazy"><figcaption>test case</figcaption></figure><p>传编码后的不行，传编码之前的也不行，这就蛋疼了；接下来怎么办？换个http包试一试</p><p>接下来改用HttpClient访问，看下能不能正常访问</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUrlEncode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">&quot;http://localhost:39531/access?accessKey=ASHJRK3LJFD%2BR32SADFLK%2BFASDJ%3D&amp;name=yihuihui&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">RestTemplate</span> restTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> ans <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token comment">//创建httpclient对象</span>
    <span class="token class-name">CloseableHttpClient</span> httpClient <span class="token operator">=</span> <span class="token class-name">HttpClients</span><span class="token punctuation">.</span><span class="token function">createDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//创建请求方法的实例， 并指定请求url</span>
    <span class="token class-name">HttpGet</span> httpget <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpGet</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//获取http响应状态码</span>
    <span class="token class-name">CloseableHttpResponse</span> response <span class="token operator">=</span> httpClient<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>httpget<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">HttpEntity</span> entity <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//接收响应头</span>
    <span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token class-name">EntityUtils</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>entity<span class="token punctuation">,</span> <span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>httpget<span class="token punctuation">.</span><span class="token function">getURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
    httpClient<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如下，神器的一幕出现了，返回结果正常了</p><figure><img src="`+m+'" alt="httpclient" tabindex="0" loading="lazy"><figcaption>httpclient</figcaption></figure><p>到了这一步，基本上可以知道是RestTemplate的使用问题了，要么就是操作姿势不对，要么就是RestTemplate有什么潜规则是我们不知道的</p><h3 id="_2-问题定位" tabindex="-1"><a class="header-anchor" href="#_2-问题定位" aria-hidden="true">#</a> 2. 问题定位</h3><p>同样的url，两种不同的包返回结果不一样，自然而然的就会想到对比下两个的实现方式了，看看哪里不同；如果对两个包的源码不太熟悉的话，想一下子定位都问题，并不容易，对这两个源码，我也是不熟的，不过因为巧和，没有深入到底层的实现就发现了疑是问题的关键点所在</p><p>首先看的RestTemplate的发起请求的逻辑，如下（下图中有关键点，单独看不太容易抓到）</p><figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>接下来再去debug HttpClient的请求链路中，在创建<code>HttpGet</code>对象时，看到下面这一行代码</p><figure><img src="'+b+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>单独看上面两个，好像发现不了什么问题；但是两个对比着看，就发现一个有意思的地方了，在<code>HttpTemplate</code>的<code>execute</code>方法中，创建URI居然不是我们熟知的 <code>URI.create()</code>，接下来就来验证下是不是这里的问题了；</p><p>测试方法也比较简单，直接传入URI对象参数，看能否访问成功</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUrlEncode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">&quot;http://localhost:39531/access?accessKey=ASHJRK3LJFD%2BR32SADFLK%2BFASDJ%3D&amp;name=yihuihui&quot;</span><span class="token punctuation">;</span>
    <span class="token class-name">RestTemplate</span> restTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> ans <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>


    ans <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token constant">URI</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从截图也可以看出，返回true表示成功了，因此我们可以圈定问题的范围，就在RestTemplate中url参数的构建上了</p><figure><img src="`+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-原因分析" tabindex="-1"><a class="header-anchor" href="#_3-原因分析" aria-hidden="true">#</a> 3. 原因分析</h3><p>前面定位到了出问题的环节，在RestTemplate创建URI对象的地方，接下来我们深入源码，看一下这段逻辑的神奇之处</p><p>通过单步执行，下面截取关键链路的代码，下面圈出的就是定位最终实现uri创建的具体对象<code>org.springframework.web.util.DefaultUriBuilderFactory.DefaultUriBuilder</code></p><figure><img src="'+h+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>接下来重点放在具体实现方法中</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// org.springframework.web.util.DefaultUriBuilderFactory.DefaultUriBuilder#build(java.lang.Object...)</span>

<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">URI</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> uriVars<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>defaultUriVariables<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		map<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>defaultUriVariables<span class="token punctuation">)</span><span class="token punctuation">;</span>
		map<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>uriVars<span class="token punctuation">)</span><span class="token punctuation">;</span>
		uriVars <span class="token operator">=</span> map<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>encodingMode<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">EncodingMode</span><span class="token punctuation">.</span><span class="token constant">VALUES_ONLY</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		uriVars <span class="token operator">=</span> <span class="token class-name">UriUtils</span><span class="token punctuation">.</span><span class="token function">encodeUriVariables</span><span class="token punctuation">(</span>uriVars<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token class-name">UriComponents</span> uriComponents <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>uriComponentsBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expand</span><span class="token punctuation">(</span>uriVars<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>encodingMode<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">EncodingMode</span><span class="token punctuation">.</span><span class="token constant">URI_COMPONENT</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		uriComponents <span class="token operator">=</span> uriComponents<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token constant">URI</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>uriComponents<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">URI</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> uriVars<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ObjectUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>uriVars<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>defaultUriVariables<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>encodingMode<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">EncodingMode</span><span class="token punctuation">.</span><span class="token constant">VALUES_ONLY</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		uriVars <span class="token operator">=</span> <span class="token class-name">UriUtils</span><span class="token punctuation">.</span><span class="token function">encodeUriVariables</span><span class="token punctuation">(</span>uriVars<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token class-name">UriComponents</span> uriComponents <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>uriComponentsBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">expand</span><span class="token punctuation">(</span>uriVars<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>encodingMode<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">EncodingMode</span><span class="token punctuation">.</span><span class="token constant">URI_COMPONENT</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		uriComponents <span class="token operator">=</span> uriComponents<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token constant">URI</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>uriComponents<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两个builder方法提供关键URI生成逻辑，根据最后的返回可以知道，生成URI依然是使用<code>URI.create</code>，所以出问题的地方就应该是 <code>uriComponents.encode()</code> 实现url编码的地方了，对应的代码如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// org.springframework.web.util.HierarchicalUriComponents#encode</span>

<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">HierarchicalUriComponents</span> <span class="token function">encode</span><span class="token punctuation">(</span><span class="token class-name">Charset</span> charset<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>encoded<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token class-name">String</span> scheme <span class="token operator">=</span> <span class="token function">getScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">String</span> fragment <span class="token operator">=</span> <span class="token function">getFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">String</span> schemeTo <span class="token operator">=</span> <span class="token punctuation">(</span>scheme <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token function">encodeUriComponent</span><span class="token punctuation">(</span>scheme<span class="token punctuation">,</span> charset<span class="token punctuation">,</span> <span class="token class-name">Type</span><span class="token punctuation">.</span><span class="token constant">SCHEME</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">String</span> fragmentTo <span class="token operator">=</span> <span class="token punctuation">(</span>fragment <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token function">encodeUriComponent</span><span class="token punctuation">(</span>fragment<span class="token punctuation">,</span> charset<span class="token punctuation">,</span> <span class="token class-name">Type</span><span class="token punctuation">.</span><span class="token constant">FRAGMENT</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">String</span> userInfoTo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>userInfo <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token function">encodeUriComponent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>userInfo<span class="token punctuation">,</span> charset<span class="token punctuation">,</span> <span class="token class-name">Type</span><span class="token punctuation">.</span><span class="token constant">USER_INFO</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">String</span> hostTo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>host <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token function">encodeUriComponent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>host<span class="token punctuation">,</span> charset<span class="token punctuation">,</span> <span class="token function">getHostType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">PathComponent</span> pathTo <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>charset<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">MultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> paramsTo <span class="token operator">=</span> <span class="token function">encodeQueryParams</span><span class="token punctuation">(</span>charset<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HierarchicalUriComponents</span><span class="token punctuation">(</span>
			schemeTo<span class="token punctuation">,</span> fragmentTo<span class="token punctuation">,</span> userInfoTo<span class="token punctuation">,</span> hostTo<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>port<span class="token punctuation">,</span> pathTo<span class="token punctuation">,</span> paramsTo<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">// org.springframework.web.util.HierarchicalUriComponents#encodeQueryParams</span>
<span class="token keyword">private</span> <span class="token class-name">MultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">encodeQueryParams</span><span class="token punctuation">(</span><span class="token class-name">Charset</span> charset<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queryParams<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">MultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>queryParams<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
		<span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token function">encodeUriComponent</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> charset<span class="token punctuation">,</span> <span class="token class-name">Type</span><span class="token punctuation">.</span><span class="token constant">QUERY_PARAM</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> encodedValues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>values<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> value <span class="token operator">:</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			encodedValues<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">encodeUriComponent</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> charset<span class="token punctuation">,</span> <span class="token class-name">Type</span><span class="token punctuation">.</span><span class="token constant">QUERY_PARAM</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> encodedValues<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>记录下参数编码的前后对比，编码前参数为 <code>ASHJRK3LJFD%2BR32SADFLK%2BFASDJ%3D</code></p><figure><img src="`+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>编码之后，参数变为<code>ASHJRK3LJFD%252BR32SADFLK%252BFASDJ%253D</code></p><figure><img src="'+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>对比下上面的区别，发现这个参数编码，会将请求参数中的 <code>%</code> 编码为 <code>%25</code>, 所以问题就清楚了，我传进来本来就已经是编码之后的了，结果再编码一次，相当于修改了请求参数了</p><p>看到这里，自然而然就有一个想法，既然你会给我的参数进行编码，那么为啥我传入的非编码的参数也不行呢？</p><p>接下来我们改一下请求的url参数，再执行一下上面的过程，看下编码之后的参数长啥样</p><figure><img src="'+w+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从上图很明显可以看出，现编码之后的和我们URLEncode的结果不一样，加号没有被编码, 我们调用jdk的url解码，发现将上面编码后的内容解码出来，+号没了</p><figure><img src="'+S+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>所以问题的原因也找到了，RestTemplate中首先url编码解码的逻辑和<code>URLEncode/URLDecode</code>不一致导致的</p><h4 id="_4-关键代码分析" tabindex="-1"><a class="header-anchor" href="#_4-关键代码分析" aria-hidden="true">#</a> 4. 关键代码分析</h4><p>最后一步，就是看下具体的url参数编码的实现方法了，下面贴出源码，并在关键地方给出说明</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// org.springframework.web.util.HierarchicalUriComponents#encodeUriComponent(java.lang.String, java.nio.charset.Charset, org.springframework.web.util.HierarchicalUriComponents.Type)</span>
<span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">encodeUriComponent</span><span class="token punctuation">(</span><span class="token class-name">String</span> source<span class="token punctuation">,</span> <span class="token class-name">Charset</span> charset<span class="token punctuation">,</span> <span class="token class-name">Type</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> source<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>charset<span class="token punctuation">,</span> <span class="token string">&quot;Charset must not be null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> <span class="token string">&quot;Type must not be null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span>charset<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">ByteArrayOutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span>bytes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">boolean</span> changed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span> b <span class="token operator">:</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			b <span class="token operator">+=</span> <span class="token number">256</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		
		<span class="token comment">// 注意这一行，我们的type实际上为 org.springframework.web.util.HierarchicalUriComponents.Type#QUERY_PARAM</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>type<span class="token punctuation">.</span><span class="token function">isAllowed</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span> <span class="token punctuation">{</span>
			bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token char">&#39;%&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">char</span> hex1 <span class="token operator">=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">forDigit</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xF</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">char</span> hex2 <span class="token operator">=</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">forDigit</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> <span class="token number">0xF</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>hex1<span class="token punctuation">)</span><span class="token punctuation">;</span>
			bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>hex2<span class="token punctuation">)</span><span class="token punctuation">;</span>
			changed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>changed <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> charset<span class="token punctuation">)</span> <span class="token operator">:</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>if/else 这一段逻辑需要捞出来好好看一下，这里决定了什么字符会进行编码；其中 <code>type.isAllowed</code> 对应的代码为</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// org.springframework.web.util.HierarchicalUriComponents.Type#QUERY_PARAM</span>
<span class="token constant">QUERY_PARAM</span> <span class="token punctuation">{</span>
	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAllowed</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token char">&#39;=&#39;</span> <span class="token operator">==</span> c <span class="token operator">||</span> <span class="token char">&#39;&amp;&#39;</span> <span class="token operator">==</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token function">isPchar</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token char">&#39;/&#39;</span> <span class="token operator">==</span> c <span class="token operator">||</span> <span class="token char">&#39;?&#39;</span> <span class="token operator">==</span> c<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>

<span class="token comment">// isPchar 对应的相关代码为</span>

<span class="token doc-comment comment">/**
 * Indicates whether the given character is in the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">pchar</span></span><span class="token punctuation">}</span> set.
 * <span class="token keyword">@see</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.ietf.org/rfc/rfc3986.txt<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>RFC 3986, appendix A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
 */</span>
<span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isPchar</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">isUnreserved</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isSubDelimiter</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token char">&#39;:&#39;</span> <span class="token operator">==</span> c <span class="token operator">||</span> <span class="token char">&#39;@&#39;</span> <span class="token operator">==</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Indicates whether the given character is in the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">unreserved</span></span><span class="token punctuation">}</span> set.
 * <span class="token keyword">@see</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.ietf.org/rfc/rfc3986.txt<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>RFC 3986, appendix A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
 */</span>
<span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isUnreserved</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">isAlpha</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isDigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token char">&#39;-&#39;</span> <span class="token operator">==</span> c <span class="token operator">||</span> <span class="token char">&#39;.&#39;</span> <span class="token operator">==</span> c <span class="token operator">||</span> <span class="token char">&#39;_&#39;</span> <span class="token operator">==</span> c <span class="token operator">||</span> <span class="token char">&#39;~&#39;</span> <span class="token operator">==</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Indicates whether the given character is in the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">sub<span class="token operator">-</span>delims</span></span><span class="token punctuation">}</span> set.
 * <span class="token keyword">@see</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.ietf.org/rfc/rfc3986.txt<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>RFC 3986, appendix A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
 */</span>
<span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isSubDelimiter</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token char">&#39;!&#39;</span> <span class="token operator">==</span> c <span class="token operator">||</span> <span class="token char">&#39;$&#39;</span> <span class="token operator">==</span> c <span class="token operator">||</span> <span class="token char">&#39;&amp;&#39;</span> <span class="token operator">==</span> c <span class="token operator">||</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">==</span> c <span class="token operator">||</span> <span class="token char">&#39;(&#39;</span> <span class="token operator">==</span> c <span class="token operator">||</span> <span class="token char">&#39;)&#39;</span> <span class="token operator">==</span> c <span class="token operator">||</span> <span class="token char">&#39;*&#39;</span> <span class="token operator">==</span> c <span class="token operator">||</span> <span class="token char">&#39;+&#39;</span> <span class="token operator">==</span> c <span class="token operator">||</span>
			<span class="token char">&#39;,&#39;</span> <span class="token operator">==</span> c <span class="token operator">||</span> <span class="token char">&#39;;&#39;</span> <span class="token operator">==</span> c <span class="token operator">||</span> <span class="token char">&#39;=&#39;</span> <span class="token operator">==</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Indicates whether the given character is in the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token constant">ALPHA</span></span></span><span class="token punctuation">}</span> set.
 * <span class="token keyword">@see</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.ietf.org/rfc/rfc3986.txt<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>RFC 3986, appendix A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
 */</span>
<span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isAlpha</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>c <span class="token operator">&gt;=</span> <span class="token char">&#39;a&#39;</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token char">&#39;z&#39;</span> <span class="token operator">||</span> c <span class="token operator">&gt;=</span> <span class="token char">&#39;A&#39;</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token char">&#39;Z&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Indicates whether the given character is in the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token constant">DIGIT</span></span></span><span class="token punctuation">}</span> set.
 * <span class="token keyword">@see</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.ietf.org/rfc/rfc3986.txt<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>RFC 3986, appendix A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
 */</span>
<span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isDigit</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span>c <span class="token operator">&gt;=</span> <span class="token char">&#39;0&#39;</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token char">&#39;9&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面涉及的方法挺多，小结一下需要转码的字符为: <code>=</code>, <code>&amp;</code></p><p>下图是维基百科中关于url参数编码的说明，比如上例中的+号，按照维基百科的需要转码；但是在Spring中却是不需要转码的</p><figure><img src="`+_+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>所以为啥Spring要这么干呢？网上搜索了一下，发现有人也遇到过这个问题，并提给了Spring的官方，对应链接为</p>',71),x={href:"https://jira.spring.io/projects/SPR/issues/SPR-17621?filter=allissues",target:"_blank",rel:"noopener noreferrer"},U=n("p",null,"官方人员的解释如下",-1),j={href:"https://www.ietf.org/rfc/rfc3986.txt",target:"_blank",rel:"noopener noreferrer"},A=p(`<h2 id="iii-小结" tabindex="-1"><a class="header-anchor" href="#iii-小结" aria-hidden="true">#</a> III. 小结</h2><p>最后复盘一下这个问题，当使用<code>RestTemplate</code>发起请求时，如果请求参数中有需要url编码时，不希望出现问题的使用姿势应传入URI对象而不是字符串，如下面两种方式</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token annotation punctuation">@Nullable</span>
<span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">URI</span> url<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">HttpMethod</span> method<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">RequestCallback</span> requestCallback<span class="token punctuation">,</span>
	<span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ResponseExtractor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> responseExtractor<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RestClientException</span> <span class="token punctuation">{</span>

  <span class="token keyword">return</span> <span class="token function">doExecute</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> method<span class="token punctuation">,</span> requestCallback<span class="token punctuation">,</span> responseExtractor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Override</span>
<span class="token annotation punctuation">@Nullable</span>
<span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token class-name">URI</span> url<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> responseType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RestClientException</span> <span class="token punctuation">{</span>
	<span class="token class-name">RequestCallback</span> requestCallback <span class="token operator">=</span> <span class="token function">acceptHeaderRequestCallback</span><span class="token punctuation">(</span>responseType<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">HttpMessageConverterExtractor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> responseExtractor <span class="token operator">=</span>
			<span class="token keyword">new</span> <span class="token class-name">HttpMessageConverterExtractor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>responseType<span class="token punctuation">,</span> <span class="token function">getMessageConverters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> logger<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token function">execute</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">,</span> requestCallback<span class="token punctuation">,</span> responseExtractor<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意Spring的url参数编码，默认只会针对 <code>=</code> 和 <code>&amp;</code> 进行处理；为了兼容我们一般的后端的url编解码处理在需要编码参数时，目前尽量不要使用Spring默认的方式，不然接收到数据会和预期的不一致</p><h2 id="iv-其他" tabindex="-1"><a class="header-anchor" href="#iv-其他" aria-hidden="true">#</a> IV. 其他</h2><h3 id="_0-项目" tabindex="-1"><a class="header-anchor" href="#_0-项目" aria-hidden="true">#</a> 0. 项目</h3>`,6),q={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"};function E(F,D){const a=i("ExternalLinkIcon");return o(),c("div",null,[C,l(" more "),T,n("ul",null,[n("li",null,[n("a",x,[s("HierarchicalUriComponents.encodeUriComponent() method can not encode Pchar"),t(a)])])]),U,n("blockquote",null,[n("p",null,[s("根据 "),n("a",j,[s("RFC 3986"),t(a)]),s(" 加号等符号的确实可以出现在参数中的，而且不需要编码，有问题的在于服务端的解析没有与时俱进")])]),A,n("ul",null,[n("li",null,[s("工程："),n("a",q,[s("spring-boot-demo"),t(a)])])])])}const H=e(R,[["render",E],["__file","190327-Spring-RestTemplate之urlencode参数解析异常全程分析.html.vue"]]);export{H as default};
