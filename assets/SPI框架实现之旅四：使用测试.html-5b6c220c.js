import{_ as p,V as c,W as o,X as i,Y as n,Z as s,$ as e,a1 as t,F as l}from"./framework-094145d2.js";const u={},r=n("h1",{id:"使用测试",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#使用测试","aria-hidden":"true"},"#"),s(" 使用测试")],-1),d=n("blockquote",null,[n("p",null,"前面三篇主要是介绍如何设计的，如何实现的，这一篇，则主要集中在如何使用。实现得再好，如果不好用，也白搭")],-1),k=n("p",null,"本篇介绍几个简单的使用case，包括静态使用，动态适配，自定义选择器等",-1),v=t(`<h2 id="_1-简单的静态使用" tabindex="-1"><a class="header-anchor" href="#_1-简单的静态使用" aria-hidden="true">#</a> 1. 简单的静态使用</h2><p>定义一个SPI接口 <code>IPrint</code>, 两个实现 <code>FilePrint</code>, <code>ConsolePrint</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Spi</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPrint</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilePrint</span> <span class="token keyword">implements</span> <span class="token class-name">IPrint</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;file print: &quot;</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsolePrint</span> <span class="token keyword">implements</span> <span class="token class-name">IPrint</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;console print: &quot;</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加配置文件 <code>com.hust.hui.quicksilver.spi.test.print.IPrint</code>, 内容如下</p><pre><code>com.hust.hui.quicksilver.spi.test.print.ConsolePrint
com.hust.hui.quicksilver.spi.test.print.FilePrint
</code></pre><p>测试代码如下</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>@Test
public void testPrint() throws NoSpiMatchException {
   SpiLoader&lt;IPrint&gt; spiLoader = SpiLoader.load(IPrint.class);

   IPrint print = spiLoader.getService(&quot;ConsolePrint&quot;);
   print.print(&quot;console----&gt;&quot;);


   print = spiLoader.getService(&quot;FilePrint&quot;);
   print.print(&quot;file----&gt;&quot;);


   try {
       print = spiLoader.getService(&quot;undefine&quot;);
       print.print(&quot;undefine----&quot;);
       Assert.assertTrue(false);
   } catch (Exception e) {
       System.out.println(&quot;type error--&gt;&quot; + e);
   }


   try {
       print = spiLoader.getService(123);
       print.print(&quot;type error----&quot;);
       Assert.assertTrue(false);
   } catch (Exception e){
       System.out.println(&quot;type error--&gt;&quot; + e);
   }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出如下</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>console print: console----&gt;
file print: file----&gt;
type error--&gt;com.hust.hui.quicksilver.spi.exception.NoSpiMatchException: no spiImpl match the name you choose! your choose is: undefine
type error--&gt;java.lang.IllegalArgumentException: conf spiInterfaceType should be sub class of [class java.lang.String] but yours:class java.lang.Integer
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>演示如下</p>`,10),m=n("img",{src:"http://s2.mogucdn.com/mlcdn/c45406/170531_308geabej59hh3hegbf2cdkb0e8kj_1224x718.gif",alt:"http://s2.mogucdn.com/mlcdn/c45406/170531_308geabej59hh3hegbf2cdkb0e8kj_1224x718.gif",tabindex:"0",loading:"lazy"},null,-1),b={href:"http://s2.mogucdn.com/mlcdn/c45406/170531_308geabej59hh3hegbf2cdkb0e8kj_1224x718.gif",target:"_blank",rel:"noopener noreferrer"},g=t(`<h2 id="_2-动态适配" tabindex="-1"><a class="header-anchor" href="#_2-动态适配" aria-hidden="true">#</a> 2. 动态适配</h2><p>与静态的使用有点区别，主要的区别点在于接口的定义（需要注意第一个参数是作为选择器选择SPI实现的参数），同样是上面这个spi接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Spi</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPrint</span> <span class="token punctuation">{</span>

    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token keyword">void</span> <span class="token function">adaptivePrint</span><span class="token punctuation">(</span><span class="token class-name">String</span> conf<span class="token punctuation">,</span> <span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;file print: &quot;</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">adaptivePrint</span><span class="token punctuation">(</span><span class="token class-name">String</span> conf<span class="token punctuation">,</span> <span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;file adaptivePrint: &quot;</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsolePrint</span> <span class="token keyword">implements</span> <span class="token class-name">IPrint</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;console print: &quot;</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">adaptivePrint</span><span class="token punctuation">(</span><span class="token class-name">String</span> conf<span class="token punctuation">,</span> <span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;console adaptivePrint: &quot;</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要是新增了一个接口 <code>adaptivePrint</code>, 其他的没有啥区别，测试代码如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAdaptivePrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SpiProxyCompileException</span> <span class="token punctuation">{</span>
  <span class="token class-name">IPrint</span> print <span class="token operator">=</span> <span class="token class-name">SpiLoader</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">IPrint</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAdaptive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


  print<span class="token punctuation">.</span><span class="token function">adaptivePrint</span><span class="token punctuation">(</span><span class="token string">&quot;FilePrint&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;[file print]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  print<span class="token punctuation">.</span><span class="token function">adaptivePrint</span><span class="token punctuation">(</span><span class="token string">&quot;ConsolePrint&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;[console print]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>file adaptivePrint: [file print]
console adaptivePrint: [console print]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>演示图</p>`,8),h=n("img",{src:"http://s2.mogucdn.com/mlcdn/c45406/170531_54f638fkcl58c6lihl92adei31c78_1222x718.gif",alt:"http://s2.mogucdn.com/mlcdn/c45406/170531_54f638fkcl58c6lihl92adei31c78_1222x718.gif",tabindex:"0",loading:"lazy"},null,-1),f={href:"http://s2.mogucdn.com/mlcdn/c45406/170531_54f638fkcl58c6lihl92adei31c78_1222x718.gif",target:"_blank",rel:"noopener noreferrer"},_=t(`<h2 id="_3-自定义选择器" tabindex="-1"><a class="header-anchor" href="#_3-自定义选择器" aria-hidden="true">#</a> 3. 自定义选择器</h2><blockquote><p>上面两个很简单的演示了下使用方式，最基本的方法， 没有加上 @SpiConf 注解， 没有显示指定选择器类 型，下面则演示下，如何自定义选择器</p></blockquote><p><strong>SPI接口</strong></p><p>有一个欢迎方法，我们需求根据用户的来源显示不同的欢迎至此， 下面定义了一个 <code>UserSelector</code>选择器，这个就是我们自定义的选择器</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Spi</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IUser</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@SpiAdaptive</span><span class="token punctuation">(</span>selector <span class="token operator">=</span> <span class="token class-name">UserSelector</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">void</span> <span class="token function">welcome</span><span class="token punctuation">(</span><span class="token class-name">UserDO</span> userDO<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>spi实现类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QQUser</span> <span class="token keyword">implements</span> <span class="token class-name">IUser</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">welcome</span><span class="token punctuation">(</span><span class="token class-name">UserDO</span> userDO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;qq 欢迎你! &quot;</span> <span class="token operator">+</span> userDO<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeixinUser</span> <span class="token keyword">implements</span> <span class="token class-name">IUser</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">welcome</span><span class="token punctuation">(</span><span class="token class-name">UserDO</span> userDO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;weixin 欢迎你! &quot;</span> <span class="token operator">+</span> userDO<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>META-INF/services/</code> 目录下的配置如下 <code>com.hust.hui.quicksilver.spi.def.spi.IUser</code></p><pre><code>com.hust.hui.quicksilver.spi.def.spi.QQUser
com.hust.hui.quicksilver.spi.def.spi.WeixinUser
</code></pre><p>选择器实现如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserSelector</span> <span class="token keyword">implements</span> <span class="token class-name">ISelector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserDO</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">K</span> <span class="token function">selector</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">SpiImplWrapper</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">,</span> <span class="token class-name">UserDO</span> conf<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSpiMatchException</span> <span class="token punctuation">{</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>conf <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> conf<span class="token punctuation">.</span><span class="token function">getMarket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;userDo or userDO#market should not be null!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>


        <span class="token class-name">String</span> name <span class="token operator">=</span> conf<span class="token punctuation">.</span><span class="token function">getMarket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSpiImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>


        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSpiMatchException</span><span class="token punctuation">(</span><span class="token string">&quot;no spiImp matched marked: &quot;</span> <span class="token operator">+</span> conf<span class="token punctuation">.</span><span class="token function">getMarket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的选择器逻辑可以看出，我们是根据 UserDO的market参数来进行选择的， UserDO的定义如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Getter</span>
<span class="token annotation punctuation">@Setter</span>
<span class="token annotation punctuation">@ToString</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDO</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> uname<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> avatar<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">MarketEnum</span> market<span class="token punctuation">;</span>

<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">MarketEnum</span> <span class="token punctuation">{</span>
    <span class="token function">WEIXIN</span><span class="token punctuation">(</span><span class="token string">&quot;WeixinUser&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>

    <span class="token function">QQ</span><span class="token punctuation">(</span><span class="token string">&quot;QQUser&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token class-name">MarketEnum</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试代码如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUserSPI</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SpiProxyCompileException</span> <span class="token punctuation">{</span>
   <span class="token class-name">SpiLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IUser</span><span class="token punctuation">&gt;</span></span> loader <span class="token operator">=</span> <span class="token class-name">SpiLoader</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">IUser</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token class-name">IUser</span> user <span class="token operator">=</span> loader<span class="token punctuation">.</span><span class="token function">getAdaptive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


   <span class="token class-name">UserDO</span> weixinUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   weixinUser<span class="token punctuation">.</span><span class="token function">setAvatar</span><span class="token punctuation">(</span><span class="token string">&quot;weixin.avatar.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   weixinUser<span class="token punctuation">.</span><span class="token function">setUname</span><span class="token punctuation">(</span><span class="token string">&quot;微信用户&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   weixinUser<span class="token punctuation">.</span><span class="token function">setMarket</span><span class="token punctuation">(</span><span class="token class-name">MarketEnum</span><span class="token punctuation">.</span><span class="token constant">WEIXIN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   user<span class="token punctuation">.</span><span class="token function">welcome</span><span class="token punctuation">(</span>weixinUser<span class="token punctuation">)</span><span class="token punctuation">;</span>


   <span class="token class-name">UserDO</span> qqUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   qqUser<span class="token punctuation">.</span><span class="token function">setAvatar</span><span class="token punctuation">(</span><span class="token string">&quot;qq.avatar.jpg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   qqUser<span class="token punctuation">.</span><span class="token function">setUname</span><span class="token punctuation">(</span><span class="token string">&quot;qq用户&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   qqUser<span class="token punctuation">.</span><span class="token function">setMarket</span><span class="token punctuation">(</span><span class="token class-name">MarketEnum</span><span class="token punctuation">.</span><span class="token constant">QQ</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   user<span class="token punctuation">.</span><span class="token function">welcome</span><span class="token punctuation">(</span>qqUser<span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;-----over------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果:</p><pre><code>weixin 欢迎你! UserDO(uname=微信用户, avatar=weixin.avatar.jpg, market=WEIXIN)
qq 欢迎你! UserDO(uname=qq用户, avatar=qq.avatar.jpg, market=QQ)
</code></pre><p>演示如下:</p>`,18),y=n("img",{src:"http://s2.mogucdn.com/mlcdn/c45406/170531_8af3ek900d8c783031lc7h375a0b8_1222x718.gif",alt:"http://s2.mogucdn.com/mlcdn/c45406/170531_8af3ek900d8c783031lc7h375a0b8_1222x718.gif",tabindex:"0",loading:"lazy"},null,-1),w={href:"http://s2.mogucdn.com/mlcdn/c45406/170531_8af3ek900d8c783031lc7h375a0b8_1222x718.gif",target:"_blank",rel:"noopener noreferrer"},q=n("h2",{id:"_3-其他",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-其他","aria-hidden":"true"},"#"),s(" 3. 其他")],-1),E=n("h3",{id:"博客系列链接",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#博客系列链接","aria-hidden":"true"},"#"),s(" 博客系列链接：")],-1),x={href:"/hexblog/2018/05/30/SPI%E6%A1%86%E6%9E%B6%E5%AE%9E%E7%8E%B0%E4%B9%8B%E6%97%85%E5%9B%9B%EF%BC%9A%E4%BD%BF%E7%94%A8%E6%B5%8B%E8%AF%95/",target:"_blank",rel:"noopener noreferrer"},S={href:"/hexblog/2018/05/30/SPI%E6%A1%86%E6%9E%B6%E5%AE%9E%E7%8E%B0%E4%B9%8B%E6%97%85%E4%B8%89%EF%BC%9A%E5%AE%9E%E7%8E%B0%E8%AF%B4%E6%98%8E/",target:"_blank",rel:"noopener noreferrer"},I={href:"/hexblog/2018/05/30/SPI%E6%A1%86%E6%9E%B6%E5%AE%9E%E7%8E%B0%E4%B9%8B%E6%97%85%E4%BA%8C%EF%BC%9A%E6%95%B4%E4%BD%93%E8%AE%BE%E8%AE%A1/",target:"_blank",rel:"noopener noreferrer"},P={href:"/hexblog/2017/05/29/SPI%E6%A1%86%E6%9E%B6%E5%AE%9E%E7%8E%B0%E4%B9%8B%E6%97%85%E4%B8%80%EF%BC%9A%E8%83%8C%E6%99%AF%E4%BB%8B%E7%BB%8D/",target:"_blank",rel:"noopener noreferrer"},B=n("h3",{id:"项目-quickalarm",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#项目-quickalarm","aria-hidden":"true"},"#"),s(" 项目: QuickAlarm")],-1),U={href:"https://github.com/liuyueyi/quick-spi",target:"_blank",rel:"noopener noreferrer"},j={href:"https://liuyueyi.github.io/hexblog/",target:"_blank",rel:"noopener noreferrer"},A={id:"个人博客-z-blog",tabindex:"-1"},O=n("a",{class:"header-anchor",href:"#个人博客-z-blog","aria-hidden":"true"},"#",-1),D={href:"https://liuyueyi.github.io/hexblog",target:"_blank",rel:"noopener noreferrer"},C=n("p",null,"基于hexo + github pages搭建的个人博客，记录所有学习和工作中的博文，欢迎大家前去逛逛",-1),M=n("h3",{id:"声明",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#声明","aria-hidden":"true"},"#"),s(" 声明")],-1),Q={href:"https://weibo.com/p/1005052169825577/home",target:"_blank",rel:"noopener noreferrer"},F=n("h3",{id:"扫描关注",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#扫描关注","aria-hidden":"true"},"#"),s(" 扫描关注")],-1),N=n("figure",null,[n("img",{src:"https://s17.mogucdn.com/mlcdn/c45406/180209_74fic633aebgh5dgfhid2fiiggc99_1220x480.png",alt:"QrCode",tabindex:"0",loading:"lazy"}),n("figcaption",null,"QrCode")],-1);function L(T,W){const a=l("ExternalLinkIcon");return c(),o("div",null,[r,d,k,i(" more "),v,n("figure",null,[m,n("figcaption",null,[n("a",b,[s("http://s2.mogucdn.com/mlcdn/c45406/170531_308geabej59hh3hegbf2cdkb0e8kj_1224x718.gif"),e(a)])])]),g,n("figure",null,[h,n("figcaption",null,[n("a",f,[s("http://s2.mogucdn.com/mlcdn/c45406/170531_54f638fkcl58c6lihl92adei31c78_1222x718.gif"),e(a)])])]),_,n("figure",null,[y,n("figcaption",null,[n("a",w,[s("http://s2.mogucdn.com/mlcdn/c45406/170531_8af3ek900d8c783031lc7h375a0b8_1222x718.gif"),e(a)])])]),q,E,n("ul",null,[n("li",null,[n("a",x,[s("SPI框架实现之旅四：使用测试"),e(a)])]),n("li",null,[n("a",S,[s("SPI框架实现之旅三：实现说明"),e(a)])]),n("li",null,[n("a",I,[s("SPI框架实现之旅二：整体设计"),e(a)])]),n("li",null,[n("a",P,[s("SPI框架实现之旅一：背景介绍"),e(a)])])]),B,n("ul",null,[n("li",null,[s("项目地址： "),n("a",U,[s("Quick-SPI"),e(a)])]),n("li",null,[s("博客地址： "),n("a",j,[s("小灰灰Blog"),e(a)])])]),n("h3",A,[O,s(" 个人博客： "),n("a",D,[s("Z+|blog"),e(a)])]),C,M,n("p",null,[s("尽信书则不如，已上内容，纯属一家之言，因本人能力一般，见识有限，如发现bug或者有更好的建议，随时欢迎批评指正，我的微博地址: "),n("a",Q,[s("小灰灰Blog"),e(a)])]),F,N])}const V=p(u,[["render",L],["__file","SPI框架实现之旅四：使用测试.html.vue"]]);export{V as default};
