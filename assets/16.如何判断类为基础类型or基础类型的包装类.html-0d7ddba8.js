import{_ as s,V as a,W as e,X as p,Y as n,Z as t,a1 as c}from"./framework-094145d2.js";const o={},l=n("h1",{id:"实战16-判断类为基础类型or基础类型的包装类",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#实战16-判断类为基础类型or基础类型的包装类","aria-hidden":"true"},"#"),t(" 实战16：判断类为基础类型or基础类型的包装类")],-1),i=n("p",null,"判断一个类是否为基础类型属于常规操作了，一般我们遇到这种case，要怎么处理呢？",-1),u=n("p",null,"一个一个的if/else判断? 还是其他的操作姿势？",-1),k=c(`<h2 id="_1-基础类型判断" tabindex="-1"><a class="header-anchor" href="#_1-基础类型判断" aria-hidden="true">#</a> 1. 基础类型判断</h2><p>基础类型可以借助class类的<code>isPrimitive</code>方法来实现判定，使用姿势也简单</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果返回true，那么这个对象就是基本类型</p><ul><li>boolean</li><li>char</li><li>byte</li><li>short</li><li>int</li><li>long</li><li>float</li><li>double</li><li>void</li></ul><p>但是请注意，对于封装类型，比如Long，访问isPrimitive返回的是false</p><h2 id="_2-封装类型判断" tabindex="-1"><a class="header-anchor" href="#_2-封装类型判断" aria-hidden="true">#</a> 2. 封装类型判断</h2><p>那么封装类型可以怎么判断呢？难道一个一个的判定不成？</p><p>首先我们注意到<code>Class#isPrimitive</code>的方法签名，如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@see</span>     <span class="token reference"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Boolean</span><span class="token punctuation">#</span><span class="token field">TYPE</span></span>
 * <span class="token keyword">@see</span>     <span class="token reference"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Character</span><span class="token punctuation">#</span><span class="token field">TYPE</span></span>
 * <span class="token keyword">@see</span>     <span class="token reference"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Byte</span><span class="token punctuation">#</span><span class="token field">TYPE</span></span>
 * <span class="token keyword">@see</span>     <span class="token reference"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Short</span><span class="token punctuation">#</span><span class="token field">TYPE</span></span>
 * <span class="token keyword">@see</span>     <span class="token reference"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Integer</span><span class="token punctuation">#</span><span class="token field">TYPE</span></span>
 * <span class="token keyword">@see</span>     <span class="token reference"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Long</span><span class="token punctuation">#</span><span class="token field">TYPE</span></span>
 * <span class="token keyword">@see</span>     <span class="token reference"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Float</span><span class="token punctuation">#</span><span class="token field">TYPE</span></span>
 * <span class="token keyword">@see</span>     <span class="token reference"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Double</span><span class="token punctuation">#</span><span class="token field">TYPE</span></span>
 * <span class="token keyword">@see</span>     <span class="token reference"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Void</span><span class="token punctuation">#</span><span class="token field">TYPE</span></span>
 * <span class="token keyword">@since</span> JDK1.1
 */</span>
<span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">boolean</span> <span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的注释中，提到了Boolean#Type之类的静态成员，也就是说包装类型，都有一个TYPE的静态成员</p><p>比如boolean的是这个</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> <span class="token constant">TYPE</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">getPrimitiveClass</span><span class="token punctuation">(</span><span class="token string">&quot;boolean&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>所以我们可以通过这个TYPE来判定，当前对象是否为封装对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">)</span> clz<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">&quot;TYPE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果Class对象没有TYPE字段，那么就不是封装类，直接抛异常，返回false；当然这种通过异常的方式来判定，并不优雅；但是写法上比我们一个一个的if/else进行对比，要好得多了</p>`,16);function d(r,v){return a(),e("div",null,[l,i,u,p(" more "),k])}const _=s(o,[["render",d],["__file","16.如何判断类为基础类型or基础类型的包装类.html.vue"]]);export{_ as default};
