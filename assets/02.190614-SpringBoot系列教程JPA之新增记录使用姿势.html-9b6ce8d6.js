import{_ as p,V as o,W as c,X as i,Y as n,Z as s,$ as t,a1 as e,F as l}from"./framework-094145d2.js";const u="/tutorial/imgs/190614/00.jpg",r="/tutorial/imgs/190614/01.jpg",d="/tutorial/imgs/190614/02.jpg",k="/tutorial/imgs/190614/03.jpg",m="/tutorial/imgs/190614/04.jpg",v="/tutorial/imgs/190614/05.jpg",b="/tutorial/imgs/190614/06.jpg",y="/tutorial/imgs/190614/07.jpg",g={},h=n("p",null,"上一篇文章介绍了如何快速的搭建一个JPA的项目环境，并给出了一个简单的演示demo，接下来我们开始业务教程，也就是我们常说的CURD，接下来进入第一篇，如何添加数据",-1),f=n("p",null,"通过本篇文章，你可以get到以下技能点",-1),w=n("ul",null,[n("li",null,"POJO对象如何与表关联"),n("li",null,"如何向DB中添加单条记录"),n("li",null,"如何批量向DB中添加记录"),n("li",null,"save 与 saveAndFlush的区别")],-1),O=n("h2",{id:"i-环境准备",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#i-环境准备","aria-hidden":"true"},"#"),s(" I. 环境准备")],-1),_={href:"http://spring.hhui.top/spring-blog/2019/06/12/190612-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/",target:"_blank",rel:"noopener noreferrer"},P=e(`<p>下面简单的看一下演示添加记录的过程中，需要的配置</p><h3 id="_1-表准备" tabindex="-1"><a class="header-anchor" href="#_1-表准备" aria-hidden="true">#</a> 1. 表准备</h3><p>沿用前一篇的表，结构如下</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>money<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;用户名&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>money<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;0&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;钱&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>is_deleted<span class="token punctuation">\`</span></span> <span class="token keyword">tinyint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>create_at<span class="token punctuation">\`</span></span> <span class="token keyword">timestamp</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;创建时间&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>update_at<span class="token punctuation">\`</span></span> <span class="token keyword">timestamp</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;更新时间&#39;</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-项目配置" tabindex="-1"><a class="header-anchor" href="#_2-项目配置" aria-hidden="true">#</a> 2. 项目配置</h3><p>配置信息，与之前有一点点区别，我们新增了更详细的日志打印；本篇主要目标集中在添加记录的使用姿势，对于配置说明，后面单独进行说明</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment">## DataSource</span>
<span class="token key attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://127.0.0.1:3306/story?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false</span>
<span class="token key attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.jdbc.Driver</span>
<span class="token key attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
<span class="token key attr-name">spring.datasource.password</span><span class="token punctuation">=</span>
<span class="token comment">## jpa相关配置</span>
<span class="token key attr-name">spring.jpa.database</span><span class="token punctuation">=</span><span class="token value attr-value">MYSQL</span>
<span class="token key attr-name">spring.jpa.hibernate.ddl-auto</span><span class="token punctuation">=</span><span class="token value attr-value">none</span>
<span class="token key attr-name">spring.jpa.show-sql</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
<span class="token key attr-name">spring.jackson.serialization.indent_output</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
<span class="token key attr-name">spring.jpa.hibernate.naming.physical-strategy</span><span class="token punctuation">=</span><span class="token value attr-value">org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-insert使用教程" tabindex="-1"><a class="header-anchor" href="#ii-insert使用教程" aria-hidden="true">#</a> II. Insert使用教程</h2><blockquote><p>在开始之前，先声明一下，因为个人实际项目中并没有使用到JPA，对JPA的原则和hibernate的一些特性了解的也不多，目前处于学习探索阶段，主要是介绍下使用姿势，下面的东西都是经过测试得出，有些地方描述可能与规范不太一样，或者有些差错，请发现的大佬指正</p></blockquote><p>接下来我们进入正题，如何通过JPA实现我们常见的Insert功能</p><h3 id="_1-pojo与表关联" tabindex="-1"><a class="header-anchor" href="#_1-pojo与表关联" aria-hidden="true">#</a> 1. POJO与表关联</h3><p>首先第一步就是将POJO对象与表关联起来，这样就可以直接通过java的操作方式来实现数据库的操作了；</p><p>我们直接创建一个MoneyPo对象，包含上面表中的几个字段</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MoneyPO</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Long</span> money<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Byte</span> isDeleted<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Timestamp</span> createAt<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">Timestamp</span> updateAt<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自然而然地，我们就有几个问题了</p><ul><li>这个POJO怎么告诉框架它是和表Money绑定的呢？</li><li>Java中变量命令推荐驼峰结构，那么 <code>isDeleted</code> 又如何与表中的 <code>is_deleted</code> 关联呢？</li><li>POJO中成员变量的类型如何与表中的保持一致呢，如果不一致会怎样呢？</li></ul><p>针对上面的问题，一个一个来说明</p>`,17),j={href:"https://docs.jboss.org/hibernate/core/4.3/manual/en-US/html/ch01.html#tutorial-associations-mappinguser",target:"_blank",rel:"noopener noreferrer"},E=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>git<span class="token punctuation">.</span>hui<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>entity</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">CreatedDate</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>persistence<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Timestamp</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * Created by @author yihui in 21:01 19/6/10.
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Entity</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;money&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MoneyPO</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Id</span>
    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">IDENTITY</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;money&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> money<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;is_deleted&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Byte</span> isDeleted<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;create_at&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@CreatedDate</span>
    <span class="token keyword">private</span> <span class="token class-name">Timestamp</span> createAt<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;update_at&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@CreatedDate</span>
    <span class="token keyword">private</span> <span class="token class-name">Timestamp</span> updateAt<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有几个有意思的地方，需要我们注意</p><h4 id="a-entity注解" tabindex="-1"><a class="header-anchor" href="#a-entity注解" aria-hidden="true">#</a> a. entity注解</h4><p><code>@Entity</code> 这个注解比较重要，用于声明这个POJO是一个与数据库中叫做 <code>money</code> 的表关联的对象；</p><ul><li><code>@Entity</code>注解有一个参数name，用于指定表名，如果不主动指定时，默认用类名，即上面如果不指定那么，那么默认与表 <code>moneypo</code> 绑定</li></ul><p>另外一个常见的方式是在类上添加注解 <code>@Table</code>，然后指定表名，也是可以的</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Entity</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;money&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MoneyPO</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="b-主键指定" tabindex="-1"><a class="header-anchor" href="#b-主键指定" aria-hidden="true">#</a> b. 主键指定</h4><p>我们可以看到id上面有三个注解，我们先看下前面两个</p><ul><li><code>@Id</code> 顾名思义，用来表明这家伙是主键，比较重要，需要特殊关照</li><li><code>@GeneratedValue</code> 设置初始值，谈到主键，我们一般会和”自增“这个一起说，所以你经常会看到的取值为 <code>strategy = GenerationType.IDENTITY</code> (由数据库自动生成）</li></ul><p>这个注解主要提供了四种方式，分别说明如下</p><table><thead><tr><th>取值</th><th>说明</th></tr></thead><tbody><tr><td><code>GenerationType.TABLE</code></td><td>使用一个特定的数据库表格来保存主键</td></tr><tr><td><code>GenerationType.SEQUENCE</code></td><td>根据底层数据库的序列来生成主键，条件是数据库支持序列</td></tr><tr><td><code>GenerationType.IDENTITY</code></td><td>主键由数据库自动生成（主要是自动增长型）</td></tr><tr><td><code>GenerationType.AUTO</code></td><td>主键由程序控制</td></tr></tbody></table>`,12),q={href:"https://blog.csdn.net/fancylovejava/article/details/7438660",target:"_blank",rel:"noopener noreferrer"},T=e(`<h4 id="c-column注解" tabindex="-1"><a class="header-anchor" href="#c-column注解" aria-hidden="true">#</a> c. Column注解</h4><p>这个注解就是用来解决我们pojo成员名和数据库列名不一致的问题的，这个注解内部的属性也不少，相对容易理解，后面会单开一章来记录这些常用注解的说明查阅</p><h4 id="d-createdate注解" tabindex="-1"><a class="header-anchor" href="#d-createdate注解" aria-hidden="true">#</a> d. CreateDate注解</h4><p>这个注解和前面不一样的是它并非来自<code>jpa-api</code>包，而是<code>spring-data-common</code>包中提供的，表示会根据当前时间创建一个时间戳对象</p><h4 id="e-其他" tabindex="-1"><a class="header-anchor" href="#e-其他" aria-hidden="true">#</a> e. 其他</h4><p>到这里这个POJO已经创建完毕，后续的表中添加记录也可以直接使用它了，但是还有几个问题是没有明确答案的，先提出来，期待后文可以给出回答</p><ol><li>POJO属性的类型与表中类型</li><li>mysql表中列可以有默认值，这个在POJO中怎么体现</li><li>一个表包含另一个表的主键时（主键关联，外键）等特殊的情况，POJO中有体现么？</li></ol><h3 id="_2-repository-api声明" tabindex="-1"><a class="header-anchor" href="#_2-repository-api声明" aria-hidden="true">#</a> 2. Repository API声明</h3><p>jpa非常有意思的一点就是你只需要创建一个接口就可以实现db操作，就这么神奇，可惜本文里面见不到太多神奇的用法，这块放在查询篇来见证奇迹</p><p>我们定义的API需要继承自<code>org.springframework.data.repository.CrudRepository</code>，如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>git<span class="token punctuation">.</span>hui<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>git<span class="token punctuation">.</span>hui<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">MoneyPO</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>jpa<span class="token punctuation">.</span>repository<span class="token punctuation">.</span></span><span class="token class-name">JpaRepository</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>repository<span class="token punctuation">.</span></span><span class="token class-name">CrudRepository</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 新增数据
 * Created by @author yihui in 11:00 19/6/12.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MoneyCreateRepository</span> <span class="token keyword">extends</span> <span class="token class-name">CrudRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MoneyPO</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>好的，到这里就可以直接添加数据了 （感觉什么都没干，你居然告诉我可以插入数据？？？）</p><h3 id="_3-使用姿势" tabindex="-1"><a class="header-anchor" href="#_3-使用姿势" aria-hidden="true">#</a> 3. 使用姿势</h3><h4 id="a-基础使用case" tabindex="-1"><a class="header-anchor" href="#a-基础使用case" aria-hidden="true">#</a> a. 基础使用case</h4><p>常规的使用姿势，无非单个插入和批量插入，我们先来看一下常规操作</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JpaInsertDemo</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">MoneyCreateRepository</span> moneyCreateRepository<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">addOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">addMutl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 单个添加</span>
        <span class="token class-name">MoneyPO</span> moneyPO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MoneyPO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        moneyPO<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;jpa 一灰灰&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        moneyPO<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        moneyPO<span class="token punctuation">.</span><span class="token function">setIsDeleted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Timestamp</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timestamp</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        moneyPO<span class="token punctuation">.</span><span class="token function">setCreateAt</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>
        moneyPO<span class="token punctuation">.</span><span class="token function">setUpdateAt</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">MoneyPO</span> res <span class="token operator">=</span> moneyCreateRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>moneyPO<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;after insert res: &quot;</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addMutl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 批量添加</span>
        <span class="token class-name">MoneyPO</span> moneyPO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MoneyPO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        moneyPO<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;batch jpa 一灰灰&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        moneyPO<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        moneyPO<span class="token punctuation">.</span><span class="token function">setIsDeleted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Timestamp</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timestamp</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        moneyPO<span class="token punctuation">.</span><span class="token function">setCreateAt</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>
        moneyPO<span class="token punctuation">.</span><span class="token function">setUpdateAt</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">MoneyPO</span> moneyPO2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MoneyPO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        moneyPO2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;batch jpa 一灰灰&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        moneyPO2<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        moneyPO2<span class="token punctuation">.</span><span class="token function">setIsDeleted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        moneyPO2<span class="token punctuation">.</span><span class="token function">setCreateAt</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>
        moneyPO2<span class="token punctuation">.</span><span class="token function">setUpdateAt</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MoneyPO</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> moneyCreateRepository<span class="token punctuation">.</span><span class="token function">saveAll</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>moneyPO<span class="token punctuation">,</span> moneyPO2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;after batchAdd res: &quot;</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看下上面的两个插入方式，就这么简单，</p><ul><li>通过IoC/DI注入 repository</li><li>创建PO对象，然后调用<code>save</code>, <code>saveAll</code>方法就ok了</li></ul><p>上面是一般的使用姿势，那么非一般使用姿势呢？</p><h4 id="b-插入时默认值支持方式" tabindex="-1"><a class="header-anchor" href="#b-插入时默认值支持方式" aria-hidden="true">#</a> b. 插入时默认值支持方式</h4><p>在创建表的时候，我们知道字段都有默认值，那么如果PO对象中某个成员我不传，可以插入成功么？会是默认的DB值么？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addWithNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 单个添加</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">MoneyPO</span> moneyPO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MoneyPO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        moneyPO<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;jpa 一灰灰 ex&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        moneyPO<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span><span class="token number">2000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        moneyPO<span class="token punctuation">.</span><span class="token function">setIsDeleted</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">MoneyPO</span> res <span class="token operator">=</span> moneyCreateRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>moneyPO<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;after insert res: &quot;</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;addWithNull field: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当看到上面的<code>try/catch</code>可能就有预感，上面的执行多半要跪（😏😏😏），下面是执行截图，也是明确告诉了我们这个不能为null</p><figure><img src="`+u+`" alt="0" tabindex="0" loading="lazy"><figcaption>0</figcaption></figure><p><strong>那么有办法解决么？难道就这么向现实放弃，向大佬妥协么？</strong></p><p>默认值嘛，一个很容易想到的方法，我直接在PO对象中给一个默认值，是不是也可以，然后我们的PO改造为</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Entity</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;money&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MoneyPO</span> <span class="token punctuation">{</span>
    <span class="token comment">// ... 省略其他</span>
    
    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;is_deleted&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Byte</span> isDeleted <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0x00</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试代码注释一行,变成下面这个</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addWithNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 单个添加</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">MoneyPO</span> moneyPO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MoneyPO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        moneyPO<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;jpa 一灰灰 ex&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        moneyPO<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span><span class="token number">2000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//            moneyPO.setIsDeleted(null);</span>
        <span class="token class-name">MoneyPO</span> res <span class="token operator">=</span> moneyCreateRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>moneyPO<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;after insert res: &quot;</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;addWithNull field: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次执行看下结果如何，顺利走下去，没有报错，喜大普奔</p><figure><img src="`+r+`" alt="1" tabindex="0" loading="lazy"><figcaption>1</figcaption></figure><p>这样我就满足了吗？要是手抖上面测试注释掉的那一行忘了注释，岂不是依然会跪？而且我希望是表中的默认值，直接在代码中硬编码会不会不太优雅？这个主动设置的默认值，在后面查询的时候会不会有坑？</p><ul><li>作为一个有追求的新青年，当然对上面的答案say no了</li></ul><p>我们的解决方法也简单，在PO类上，加一个注解 <code>@DynamicInsert</code>，表示在最终创建sql的时候，为null的项就不要了哈</p><p>然后我们的新的PO，在原始版本上变成如下(注意干掉上一次的默认值）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@DynamicInsert</span>
<span class="token annotation punctuation">@Entity</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;money&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MoneyPO</span> <span class="token punctuation">{</span>
  <span class="token comment">// ... 省略</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再来一波实际的测试，完美了，没有抛异常，插入成功，而且控制台中输出的sql日志也验证了我们上面说的<code>@DynamicInsert</code>注解的作用（日志输出hibernate的sql，可以通过配置application.properties文件，添加参数<code>spring.jpa.show-sql=true</code>）</p><figure><img src="`+d+'" alt="2" tabindex="0" loading="lazy"><figcaption>2</figcaption></figure><h4 id="c-类型关联" tabindex="-1"><a class="header-anchor" href="#c-类型关联" aria-hidden="true">#</a> c. 类型关联</h4><p>针对上面的PO对象，有几个地方感觉不爽，isDelete我想要boolean，true表示删除false表示没删除，搞一个byte用起来太不方便了，这个要怎么搞？</p><p>这个并不怎么复杂，因为直接将byte类型改成boolean就可以了，如果db中时0对应的false；1对应的true，下面是验证结果，并没有啥问题</p><figure><img src="'+k+`" alt="3" tabindex="0" loading="lazy"><figcaption>3</figcaption></figure><p>在JPA规范中，并不是所有的类型的属性都可以持久化的，下表列举了可映射为持久化的属性类型:</p><table><thead><tr><th>分类</th><th>类型</th></tr></thead><tbody><tr><td>基本类型</td><td>byte、int、short、long、boolean、char、float、double</td></tr><tr><td>基本类型封装类</td><td>Byte、Integer、Short、Long、Boolean、Character、Float、Double</td></tr><tr><td>字节和字符数组</td><td>byte[]、Byte[]、char[]、Character[]</td></tr><tr><td>大数值类型</td><td>BigInteger、BigDecimal</td></tr><tr><td>字符串类型</td><td>String</td></tr><tr><td>时间日期类</td><td>java.util.Date、java.util.Calendar、java.sql.Date、java.sql.Time、java.sql.Timestamp</td></tr><tr><td>集合类</td><td>java.util.Collection、java.util.List、java.util.Set、java.util.Map</td></tr><tr><td>枚举类型</td><td></td></tr><tr><td>嵌入式</td><td></td></tr></tbody></table><p>关于类型关联，在查询这一篇会更详细的进行展开说明，比如有个特别有意思的点</p><p><strong>如db中is_delete为1，需要映射到PO中的false，0映射到true，和我们上面默认的是个反的，要怎么搞？</strong></p><h4 id="d-插入时指定id" tabindex="-1"><a class="header-anchor" href="#d-插入时指定id" aria-hidden="true">#</a> d. 插入时指定ID</h4><p>再插入的时候，我们上面的case都是没有指定id的，但是如果你指定了id，会发生什么事情？</p><p>我们将po恢复到之前的状态，测试代码如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addWithId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 单个添加</span>
    <span class="token class-name">MoneyPO</span> moneyPO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MoneyPO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    moneyPO<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    moneyPO<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;jpa 一灰灰 ex&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    moneyPO<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span><span class="token number">2200L</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    moneyPO<span class="token punctuation">.</span><span class="token function">setIsDeleted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">MoneyPO</span> res <span class="token operator">=</span> moneyCreateRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>moneyPO<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;after insert res: &quot;</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看下输出结果，惊讶的发现，这个指定id并没有什么卵用，最终db中插入的记录依然是自增的方式来的</p><figure><img src="`+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>为什么会这样子呢，我们看下sql是怎样的</p><figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>直接把id给丢了，也就是说我们设置的id不生效，我们知道<code>@GeneratedValue</code> 这个注解指定了id的增长方式，如果我们去掉这个注解会怎样</p><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从输出结果来看：</p><ul><li>如果这个id对应的记录不存在，则新增</li><li>如果这个id对应的记录存在，则更新</li></ul><p>不然这个注解可以主动指定id方式进行插入or修改，那么如果没有这个注解，插入时也不指定id，会怎样呢？</p><p>很遗憾的是直接抛异常了，没有这个注解，就必须手动赋值id了</p><figure><img src="'+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_4-小结" tabindex="-1"><a class="header-anchor" href="#_4-小结" aria-hidden="true">#</a> 4. 小结</h3><p>本文主要介绍了下如何使用JPA来实现插入数据，单个or批量插入，也抛出了一些问题，有的给出了回答，有的等待后文继续跟进，下面简单小结一下主要的知识点</p><ul><li>POJO与表关联方式 <ul><li>注意几个注解的使用</li><li>如 <code>@Entity</code>, <code>@Table</code> 用于指定这个POJO对应哪张表</li><li>如 <code>@Column</code> 用于POJO的成员变量与表中的列进行关联</li><li>如 <code>@Id</code> <code>@GeneratedValue</code>来指定主键</li><li>POJO成员变量类型与DB表中列的关系</li></ul></li><li>db插入的几种姿势 <ul><li>save 单个插入</li><li>saveAll 批量插入</li><li>插入时，如要求DO中成员为null时，用mysql默认值，可以使用注解 <code>@DynamicInsert</code>，实现最终拼接部分sql方式插入</li><li>指定id查询时的几种case</li></ul></li></ul><p>此外本文还留了几个坑没有填</p><ul><li>POJO成员类型与表列类型更灵活的转换怎么玩？</li><li>save 与 saveAndFlush 之间的区别（从命名上，前者保存，可能只保存内存，不一定落库；后者保存并落库，但是没有找到验证他们区别的实例代码，所以先不予评价）</li><li>注解的更详细使用说明</li></ul><h2 id="ii-其他" tabindex="-1"><a class="header-anchor" href="#ii-其他" aria-hidden="true">#</a> II. 其他</h2><h3 id="_1-相关博文" tabindex="-1"><a class="header-anchor" href="#_1-相关博文" aria-hidden="true">#</a> -1. 相关博文</h3>',68),A={href:"http://spring.hhui.top/spring-blog/2019/06/12/190612-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BJPA%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/",target:"_blank",rel:"noopener noreferrer"},M={href:"https://blog.csdn.net/fancylovejava/article/details/7438660",target:"_blank",rel:"noopener noreferrer"},x={href:"https://docs.jboss.org/hibernate/core/4.3/manual/en-US/html/ch01.html#tutorial-associations-mappinguser",target:"_blank",rel:"noopener noreferrer"},D=n("h3",{id:"_0-项目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0-项目","aria-hidden":"true"},"#"),s(" 0. 项目")],-1),I={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"},C={href:"https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/102-jpa",target:"_blank",rel:"noopener noreferrer"};function B(N,S){const a=l("ExternalLinkIcon");return o(),c("div",null,[h,f,w,i(" more "),O,n("p",null,[s("实际开始之前，需要先走一些必要的操作，如安装测试使用mysql，创建SpringBoot项目工程，设置好配置信息等，关于搭建项目的详情可以参考前一篇文章 "),n("a",_,[s("190612-SpringBoot系列教程JPA之基础环境搭建"),t(a)])]),P,n("p",null,[s("对hibernate熟悉的同学，可能知道我可以通过xml配置的方式，来关联POJO与数据库表（当然mybatis也是这么玩的），友情链接一下"),n("a",j,[s("hibernate的官方说明教程"),t(a)]),s("；我们使用SpringBoot，当然是选择注解的方式了，下面是通过注解的方式改造之后的DO对象")]),E,n("p",null,[s("关于这几种使用姿势，这里不详细展开了，有兴趣的可以可以看一下这博文: "),n("a",q,[s("@GeneratedValue"),t(a)])]),T,n("ul",null,[n("li",null,[n("a",A,[s("190612-SpringBoot系列教程JPA之基础环境搭建"),t(a)])]),n("li",null,[n("a",M,[s("@GenerateValue"),t(a)])]),n("li",null,[n("a",x,[s("hibernate官方教程"),t(a)])])]),D,n("ul",null,[n("li",null,[s("工程："),n("a",I,[s("https://github.com/liuyueyi/spring-boot-demo"),t(a)])]),n("li",null,[s("module: "),n("a",C,[s("https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/102-jpa"),t(a)])])])])}const J=p(g,[["render",B],["__file","02.190614-SpringBoot系列教程JPA之新增记录使用姿势.html.vue"]]);export{J as default};
