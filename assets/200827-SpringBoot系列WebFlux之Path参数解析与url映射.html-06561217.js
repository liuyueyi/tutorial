import{_ as p,V as o,W as c,X as i,Y as n,Z as s,$ as t,a1 as e,F as l}from"./framework-094145d2.js";const u={},r=n("p",null,"异步、反应式、函数式编程，近来可以说是逐渐主流了；Spring5通过Reactor增加了对反应式编程的支持，而Spring WebFlux不同于以往的web框架，作为一个非阻塞异步web框架，可以充分的利用多核CPU硬件资源，提供更强的并发支持；Spring官方对WebFlux的支持非常友好，基本上对于惯于Spring WEB的java开发者，可以很简单的迁移过来",-1),d=n("p",null,"接下来我们将进入WebFlux系列教程，努力使用最简明的语言，来介绍一下WebFlux的基本玩法，让各位小伙伴可以顺畅的切换和使用WebFlux来体验反应式编程的魅力",-1),k=n("p",null,"本文将主要介绍WebFlux提供web接口时的url匹配，以及对应的path参数解析",-1),v=e(`<h2 id="i-项目环境" tabindex="-1"><a class="header-anchor" href="#i-项目环境" aria-hidden="true">#</a> I. 项目环境</h2><p>本项目借助<code>SpringBoot 2.2.1.RELEASE</code> + <code>maven 3.5.3</code> + <code>IDEA</code>进行开发</p><h3 id="_1-依赖" tabindex="-1"><a class="header-anchor" href="#_1-依赖" aria-hidden="true">#</a> 1. 依赖</h3><p>使用WebFlux，最主要的引入依赖如下（省略掉了SpringBoot的相关依赖，如对于如何创建SpringBoot项目不太清楚的小伙伴，可以关注一下我之前的博文）</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-webflux<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-path匹配与参数解析" tabindex="-1"><a class="header-anchor" href="#ii-path匹配与参数解析" aria-hidden="true">#</a> II. Path匹配与参数解析</h2>`,6),m={href:"https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-ann-requestmapping-uri-templates",target:"_blank",rel:"noopener noreferrer"},b=e(`<p>下面的示例主要是基于注解的方式，基本知识点和SpringWeb没有太大的区别（至于函数式的用法，后面会专门介绍）</p><h3 id="_1-基本path参数获取" tabindex="-1"><a class="header-anchor" href="#_1-基本path参数获取" aria-hidden="true">#</a> 1. 基本path参数获取</h3><p>path参数，举例如: <code>http://127.0.0.1:8080/name/test</code>中<code>name</code>和<code>test</code>就算是path参数，我们主要是借助<code>@PathVariable</code>来获取</p><p>一个具体实例</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;path&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PathAction</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 最基本的path获取方式
     *
     * <span class="token keyword">@param</span> <span class="token parameter">index</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;/basic/{index}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">basic</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;index&quot;</span><span class="token punctuation">)</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;path index: &quot;</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>针对上面的case，我们简单的设计了三个访问case，具体结果如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>➜  ~ <span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080/path/basic/1&#39;</span>
path index: <span class="token number">1</span>%

➜  ~ <span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080/path/basic/1/2&#39;</span>
<span class="token punctuation">{</span><span class="token string">&quot;timestamp&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;2020-08-26T13:35:26.221+0000&quot;</span>,<span class="token string">&quot;path&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;/path/basic/1/2&quot;</span>,<span class="token string">&quot;status&quot;</span>:404,<span class="token string">&quot;error&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;Not Found&quot;</span>,<span class="token string">&quot;message&quot;</span>:null,<span class="token string">&quot;requestId&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;8256bf73&quot;</span><span class="token punctuation">}</span>%

➜  ~ <span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080/path/basic/&#39;</span>
<span class="token punctuation">{</span><span class="token string">&quot;timestamp&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;2020-08-26T13:35:32.196+0000&quot;</span>,<span class="token string">&quot;path&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;/path/basic/&quot;</span>,<span class="token string">&quot;status&quot;</span>:404,<span class="token string">&quot;error&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;Not Found&quot;</span>,<span class="token string">&quot;message&quot;</span>:null,<span class="token string">&quot;requestId&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;eeda1111&quot;</span><span class="token punctuation">}</span>%
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意上面的输出，<code>/basic/{index}</code> 只能匹配单级的path路径参数，而且上面的写法中，这级path路径必须存在</p><p>查看<code>PathVariable</code>注解可以看到里面有一个<code>required</code>属性，如果设置为false，会怎样呢</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;/basic2/{index}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">basic2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;index&quot;</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;basic2 index: &quot;</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试case如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>➜  ~ <span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080/path/basic2/&#39;</span>
<span class="token punctuation">{</span><span class="token string">&quot;timestamp&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;2020-08-26T13:41:40.100+0000&quot;</span>,<span class="token string">&quot;path&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;/path/basic2/&quot;</span>,<span class="token string">&quot;status&quot;</span>:404,<span class="token string">&quot;error&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;Not Found&quot;</span>,<span class="token string">&quot;message&quot;</span>:null,<span class="token string">&quot;requestId&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;b2729e2c&quot;</span><span class="token punctuation">}</span>%

➜  ~ <span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080/path/basic2/22&#39;</span>
basic2 index: <span class="token number">22</span>%


➜  ~ <span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080/path/basic2/22/3&#39;</span>
<span class="token punctuation">{</span><span class="token string">&quot;timestamp&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;2020-08-26T13:41:44.400+0000&quot;</span>,<span class="token string">&quot;path&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;/path/basic2/22/3&quot;</span>,<span class="token string">&quot;status&quot;</span>:404,<span class="token string">&quot;error&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;Not Found&quot;</span>,<span class="token string">&quot;message&quot;</span>:null,<span class="token string">&quot;requestId&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;0b3f173c&quot;</span><span class="token punctuation">}</span>%
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的实际case，也可以看出来，级别这个属性设置为false，但是url路径依然需要正确匹配,多一级和少一级都不行</p><h3 id="_2-多path参数" tabindex="-1"><a class="header-anchor" href="#_2-多path参数" aria-hidden="true">#</a> 2. 多path参数</h3><p>上面只有一个path参数，如果有多个参数，也比较简单</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 多个参数的场景
 *
 * <span class="token keyword">@param</span> <span class="token parameter">index</span>
 * <span class="token keyword">@param</span> <span class="token parameter">order</span>
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;/mbasic/{index}/{order}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">mbasic</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;index&quot;</span><span class="token punctuation">)</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;order&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> order<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;mpath arguments: &quot;</span> <span class="token operator">+</span> index <span class="token operator">+</span> <span class="token string">&quot; | &quot;</span> <span class="token operator">+</span> order<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试case如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>➜  ~ <span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080/path/mbasic/1/asc&#39;</span>
mpath arguments: <span class="token number">1</span> <span class="token operator">|</span> asc%
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-部分path参数匹配" tabindex="-1"><a class="header-anchor" href="#_3-部分path参数匹配" aria-hidden="true">#</a> 3. 部分path参数匹配</h3><p>上面的两个case，都是完整的匹配某一级路径，下面介绍部分匹配的case</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 路径中的部分内容匹配
 *
 * - /part/test.txt -&gt; name = test
 * - /part/a/test.txt -&gt; 不匹配
 *
 * <span class="token keyword">@param</span> <span class="token parameter">name</span>
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;/part/{name}.txt&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">part</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;part path argument: &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意上面的path路径，后缀是<code>.txt</code>，如下面的实例中<code>part/hello.txt</code>中那么对应的就是<code>hello</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>➜  ~ <span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080/path/part/hello.txt&#39;</span>
part path argument: hello%

➜  ~ <span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080/path/part/hello.tx&#39;</span>
<span class="token punctuation">{</span><span class="token string">&quot;timestamp&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;2020-08-26T13:47:49.121+0000&quot;</span>,<span class="token string">&quot;path&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;/path/part/hello.tx&quot;</span>,<span class="token string">&quot;status&quot;</span>:404,<span class="token string">&quot;error&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;Not Found&quot;</span>,<span class="token string">&quot;message&quot;</span>:null,<span class="token string">&quot;requestId&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;1075d683&quot;</span><span class="token punctuation">}</span>%
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-正则匹配" tabindex="-1"><a class="header-anchor" href="#_4-正则匹配" aria-hidden="true">#</a> 4. 正则匹配</h3><p>接下来更高端的path参数匹配来了，支持一些简单的正则，如我们希望对<code>spring-web-3.0.5.jar</code>这段path路径进行解析，希望将<code>spring-web</code>作为<code>name</code>, <code>3.0.5</code>作为<code>version</code>，<code>.jar</code>作为<code>ext</code></p><p>因此我们的rest接口写法可以如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 正则匹配
 *
 * /path/path/pattern/spring-web-3.0.5.jar  -&gt; name = spring-web,  version=3.0.5,  ext=.jar
 *
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;/pattern/{name:[a-z-]+}-{version:\\\\d\\\\.\\\\d\\\\.\\\\d}{ext:\\\\.[a-z]+}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">urlPattern</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span>
        <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;version&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> version<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;ext&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> ext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;pattern arguments name=&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot; version=&quot;</span> <span class="token operator">+</span> version <span class="token operator">+</span> <span class="token string">&quot; ext=&quot;</span> <span class="token operator">+</span> ext<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-多级path参数匹配" tabindex="-1"><a class="header-anchor" href="#_5-多级path参数匹配" aria-hidden="true">#</a> 5. 多级path参数匹配</h3><p>注意上面的所有写法，都有一个特点，那就是只能针对单级的path路径进行全/部分匹配（本文中将path路径中<code>//</code>之间作为一级），那么如果我希望我的path参数可以匹配多级，可以怎么办</p><ul><li>如 <code>/path/name/hello</code> 请求路径中，我希望将 <code>/name/hello</code> 作为一个path参数</li></ul><p>针对上面的场景，我们主要是借助<code>{*name}</code>方式来处理，注意这个参数名前面的*号</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 匹配:
 *
 * - /path/pattern2  -&gt; name == &quot;&quot;
 * - /path/pattern2/hello  -&gt; name == /hello
 * - /path/pattern2/test/hello -&gt; name = /test/hello
 *
 * <span class="token keyword">@param</span> <span class="token parameter">name</span>
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;/pattern2/{*name}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">pattern2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;pattern2 argument: &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试case如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>➜  ~ <span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080/path/pattern2&#39;</span>
pattern2 argument: %

➜  ~ <span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080/path/pattern2/hello&#39;</span>
pattern2 argument: /hello%

➜  ~ <span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080/path/pattern2/hello/world&#39;</span>
pattern2 argument: /hello/world%
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-路径匹配" tabindex="-1"><a class="header-anchor" href="#_6-路径匹配" aria-hidden="true">#</a> 6. 路径匹配</h3><p>前面介绍的是path参数解析，接下来我们简单的看一下最常见的三种路径匹配方式</p><h4 id="a" tabindex="-1"><a class="header-anchor" href="#a" aria-hidden="true">#</a> a. *</h4><p>一个星号，表示匹配0个or1个单级path路径</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 单个*号，只能匹配一级目录，注意这种方式与上面的 pattern2 之间的区别
 *
 * 可以匹配:
 *
 * - /path/pattern3/hello
 * - /path/pattern3
 *
 * 不能匹配
 *
 * - /path/pattern3/hello/1
 *
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;/pattern3/*&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">pattern3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;pattern3 succeed!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实测case如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 请注意，这里是没有/结尾的</span>
➜  ~ <span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080/path/pattern3&#39;</span>
<span class="token punctuation">{</span><span class="token string">&quot;timestamp&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;2020-08-27T00:01:20.703+0000&quot;</span>,<span class="token string">&quot;path&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;/path/pattern3&quot;</span>,<span class="token string">&quot;status&quot;</span>:404,<span class="token string">&quot;error&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;Not Found&quot;</span>,<span class="token string">&quot;message&quot;</span>:null,<span class="token string">&quot;requestId&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;c88f5066&quot;</span><span class="token punctuation">}</span>%

➜  ~ <span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080/path/pattern3/&#39;</span>
pattern3 succeed<span class="token operator">!</span>%

➜  ~ <span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080/path/pattern3/a&#39;</span>
pattern3 succeed<span class="token operator">!</span>%

➜  ~ <span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080/path/pattern3/a/b&#39;</span>
<span class="token punctuation">{</span><span class="token string">&quot;timestamp&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;2020-08-27T00:01:18.144+0000&quot;</span>,<span class="token string">&quot;path&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;/path/pattern3/a/b&quot;</span>,<span class="token string">&quot;status&quot;</span>:404,<span class="token string">&quot;error&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;Not Found&quot;</span>,<span class="token string">&quot;message&quot;</span>:null,<span class="token string">&quot;requestId&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;203dc7d4&quot;</span><span class="token punctuation">}</span>%
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意上面的实例，<code>/path/pattern3</code> 访问404, 而<code>/path/pattern3/</code>是可以的，唯一的区别就是多了一个后缀<code>/</code></p><ul><li>why?</li><li>是因为path路径的星号前面有一个<code>/</code>导致的么？</li></ul><p>接下来我们再设计一个case，将<code>*</code>前面的<code>/</code>干掉，再测试一下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;/pattern33**&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">pattern33</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;pattern33 succeed!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次测试，结果如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>➜  ~ <span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080/path/pattern3311&#39;</span>
pattern33 succeed<span class="token operator">!</span>%

➜  ~ <span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080/path/pattern33/11&#39;</span>
<span class="token punctuation">{</span><span class="token string">&quot;timestamp&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;2020-08-27T00:05:51.236+0000&quot;</span>,<span class="token string">&quot;path&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;/path/pattern33/11&quot;</span>,<span class="token string">&quot;status&quot;</span>:404,<span class="token string">&quot;error&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;Not Found&quot;</span>,<span class="token string">&quot;message&quot;</span>:null,<span class="token string">&quot;requestId&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;d8cbd546&quot;</span><span class="token punctuation">}</span>%

➜  ~ <span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080/path/pattern33&#39;</span>
pattern33 succeed<span class="token operator">!</span>%

➜  ~ <span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080/path/pattern331/&#39;</span>
pattern33 succeed<span class="token operator">!</span>%
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>借助前面两个case，我们基本上可以看出<code>*</code>的作用</p><ul><li><code>*</code>前面的完全匹配 <ul><li>比如<code>/pattern3/*</code>，那么访问的path路径前缀必须是<code>/pattern3/</code></li></ul></li><li><code>*</code>最多表示单级路径，简单来讲就是<code>*</code>所代表的的位置中不能出现<code>/x</code><ul><li>比如<code>/pattern33**</code>，那么<code>/pattern331/</code>可以匹配，但是<code>/pattern331/1</code>不能</li></ul></li></ul><h4 id="b" tabindex="-1"><a class="header-anchor" href="#b" aria-hidden="true">#</a> b. **</h4><p>有别与上面的单个<code>*</code>匹配0-1级path路径，两个<code>**</code>则表示可以一直匹配到最后一层</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 对于 pattern4开头的都可以匹配
 *
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;/pattern4/**&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">pattern4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;pattern4 succeed!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试case如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>➜  ~ <span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080/path/pattern4&#39;</span>
pattern4 succeed<span class="token operator">!</span>%

➜  ~ <span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080/path/pattern4/12&#39;</span>
pattern4 succeed<span class="token operator">!</span>%

➜  ~ <span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080/path/pattern4/12/3&#39;</span>
pattern4 succeed<span class="token operator">!</span>%
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>请注意</strong></p><ul><li>直接访问<code>/pattern4</code>也是可以命中的，这个和上面是有区别的</li></ul><h4 id="c" tabindex="-1"><a class="header-anchor" href="#c" aria-hidden="true">#</a> c. ?</h4><p>单个字符的通配，比较简单如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 匹配  pattern5/test   pattern5/tast ...
 * 不匹配 pattern5/tst pattern5/tesst
 *
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;/pattern5/t?st&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Mono</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">pattern5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Mono</span><span class="token punctuation">.</span><span class="token function">just</span><span class="token punctuation">(</span><span class="token string">&quot;pattern5 succeed!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问case</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>➜  ~ <span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080/path/pattern5/test&#39;</span>
pattern5 succeed<span class="token operator">!</span>%

➜  ~ <span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080/path/pattern5/t/st&#39;</span>
<span class="token punctuation">{</span><span class="token string">&quot;timestamp&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;2020-08-27T00:13:42.557+0000&quot;</span>,<span class="token string">&quot;path&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;/path/pattern5/t/st&quot;</span>,<span class="token string">&quot;status&quot;</span>:404,<span class="token string">&quot;error&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;Not Found&quot;</span>,<span class="token string">&quot;message&quot;</span>:null,<span class="token string">&quot;requestId&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;add34639&quot;</span><span class="token punctuation">}</span>%

➜  ~ <span class="token function">curl</span> <span class="token string">&#39;http://127.0.0.1:8080/path/pattern5/tst&#39;</span>
<span class="token punctuation">{</span><span class="token string">&quot;timestamp&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;2020-08-27T00:14:01.078+0000&quot;</span>,<span class="token string">&quot;path&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;/path/pattern5/tst&quot;</span>,<span class="token string">&quot;status&quot;</span>:404,<span class="token string">&quot;error&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;Not Found&quot;</span>,<span class="token string">&quot;message&quot;</span>:null,<span class="token string">&quot;requestId&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;b2691121&quot;</span><span class="token punctuation">}</span>%
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的测试输出也可以看出</p><ul><li><code>?</code> 对应的地方不能是<code>/</code>以及其他不被支持的字符（如<code>?</code>,<code>&#39;</code>,<code>&quot;</code>, <code>%</code>等)</li><li><code>?</code> 对应的地方必须存在</li></ul><h3 id="_7-小结" tabindex="-1"><a class="header-anchor" href="#_7-小结" aria-hidden="true">#</a> 7. 小结</h3><p>虽然本文的主题是webflux中path参数解析与url映射匹配，但是看下来我们会神奇的发现，这些知识点和SpringMVC中，貌似也没有什么区别，事实上也确实如此；对于注解的使用场景时，绝大多数，都是之前怎么玩，现在依然可以怎么玩</p><p>下面用一个表格针对上面的知识点进行汇总</p><table><thead><tr><th>pattern</th><th>描述</th><th>举例</th></tr></thead><tbody><tr><td><code>?</code></td><td>匹配一个字符</td><td><code>pages/t?st.html</code> 匹配 <code>/pages/test.html</code> and <code>/pages/t3st.html</code></td></tr><tr><td><code>*</code></td><td>匹配单级path路径中0-多个字符</td><td><code>&quot;/resources/*.png&quot;</code> matches <code>&quot;/resources/file.png&quot;</code> <br> <code>&quot;/projects/*/versions&quot;</code> matches <code>&quot;/projects/spring/versions&quot;</code> but does not match <code>&quot;/projects/spring/boot/versions&quot;</code></td></tr><tr><td><code>**</code></td><td>匹配0-多个path路径</td><td><code>&quot;/resources/**&quot;</code> matches <code>&quot;/resources/file.png&quot;</code> and <code>&quot;/resources/images/file.png&quot;</code> <br> 而<code>&quot;/resources/**/file.png&quot; </code>这种写法是非法的</td></tr><tr><td><code>{name}</code></td><td>匹配单级path路径参数</td><td><code>&quot;/projects/{project}/versions&quot;</code> matches <code>&quot;/projects/spring/versions&quot;</code> and captures <code>project=spring</code></td></tr><tr><td><code>{name:[a-z]+}</code></td><td>正则</td><td><code>&quot;/projects/{project:[a-z]+}/versions&quot;</code> matches <code>&quot;/projects/spring/versions&quot;</code> but not <code>&quot;/projects/spring1/versions&quot;</code></td></tr><tr><td><code>{*path}</code></td><td>匹配path路径中，0-最后一级path路径参数</td><td><code>&quot;/resources/{*file}&quot;</code> matches <code>&quot;/resources/images/file.png&quot;</code> and captures <code>file=images/file.png</code></td></tr></tbody></table><h2 id="ii-其他" tabindex="-1"><a class="header-anchor" href="#ii-其他" aria-hidden="true">#</a> II. 其他</h2><h3 id="_0-项目" tabindex="-1"><a class="header-anchor" href="#_0-项目" aria-hidden="true">#</a> 0. 项目</h3>`,69),g={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/223-webflux-params",target:"_blank",rel:"noopener noreferrer"};function q(f,x){const a=l("ExternalLinkIcon");return o(),c("div",null,[r,d,k,i(" more "),v,n("blockquote",null,[n("p",null,[s("下面所有内容基于官方文档完成: "),n("a",m,[s("https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-ann-requestmapping-uri-templates"),t(a)])])]),b,n("ul",null,[n("li",null,[s("工程："),n("a",g,[s("https://github.com/liuyueyi/spring-boot-demo"),t(a)])]),n("li",null,[s("源码: "),n("a",h,[s("https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/223-webflux-params"),t(a)])])])])}const w=p(u,[["render",q],["__file","200827-SpringBoot系列WebFlux之Path参数解析与url映射.html.vue"]]);export{w as default};
