const n=JSON.parse('{"key":"v-0aabc222","path":"/java/jdk/jdk8_/12.Java21%EF%BC%9A%E7%BB%93%E6%9E%84%E5%8C%96%E5%B9%B6%E5%8F%91.html","title":"12.Java 21 结构化并发：开启并发编程新篇章","lang":"zh-CN","frontmatter":{"order":12,"title":"12.Java 21 结构化并发：开启并发编程新篇章","tag":["jdk","AIGen"],"category":["Java"],"date":"2025-02-14T18:21:09.000Z","keywords":["Java","JDK21","结构化并发"],"description":"Java 21结构化并发：开启并发编程新篇章 Java并发编程演进之路 嘿，Java开发者们！还记得刚学Java时写并发代码的痛苦吗？那时，我们得继承Thread类或实现Runnable接口，手动管理线程的创建与销毁。代码繁琐不说，一旦涉及大量线程，管理起来更是让人崩溃！比如，你可能写过这样的代码： class MyThread extends Thread { @Override public void run() { System.out.println(\\"MyThread is running\\"); } } class MyRunnable implements Runnable { @Override public void run() { System.out.println(\\"MyRunnable is running\\"); } } public class Main { public static void main(String[] args) { MyThread thread = new MyThread(); Thread runnableThread = new Thread(new MyRunnable()); thread.start(); runnableThread.start(); } }","head":[["meta",{"property":"og:url","content":"https://liuyueyi.github.io/tutorial/java/jdk/jdk8_/12.Java21%EF%BC%9A%E7%BB%93%E6%9E%84%E5%8C%96%E5%B9%B6%E5%8F%91.html"}],["meta",{"property":"og:site_name","content":"一灰灰的站点"}],["meta",{"property":"og:title","content":"12.Java 21 结构化并发：开启并发编程新篇章"}],["meta",{"property":"og:description","content":"Java 21结构化并发：开启并发编程新篇章 Java并发编程演进之路 嘿，Java开发者们！还记得刚学Java时写并发代码的痛苦吗？那时，我们得继承Thread类或实现Runnable接口，手动管理线程的创建与销毁。代码繁琐不说，一旦涉及大量线程，管理起来更是让人崩溃！比如，你可能写过这样的代码： class MyThread extends Thread { @Override public void run() { System.out.println(\\"MyThread is running\\"); } } class MyRunnable implements Runnable { @Override public void run() { System.out.println(\\"MyRunnable is running\\"); } } public class Main { public static void main(String[] args) { MyThread thread = new MyThread(); Thread runnableThread = new Thread(new MyRunnable()); thread.start(); runnableThread.start(); } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-14T10:52:18.000Z"}],["meta",{"property":"article:tag","content":"jdk"}],["meta",{"property":"article:tag","content":"AIGen"}],["meta",{"property":"article:published_time","content":"2025-02-14T18:21:09.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-14T10:52:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"12.Java 21 结构化并发：开启并发编程新篇章\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-02-14T18:21:09.000Z\\",\\"dateModified\\":\\"2025-02-14T10:52:18.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"Java并发编程演进之路","slug":"java并发编程演进之路","link":"#java并发编程演进之路","children":[]},{"level":2,"title":"结构化并发：概念与核心原理","slug":"结构化并发-概念与核心原理","link":"#结构化并发-概念与核心原理","children":[{"level":3,"title":"结构化并发是什么","slug":"结构化并发是什么","link":"#结构化并发是什么","children":[]},{"level":3,"title":"核心原理剖析","slug":"核心原理剖析","link":"#核心原理剖析","children":[]}]},{"level":2,"title":"Java 21结构化并发特性深度解析","slug":"java-21结构化并发特性深度解析","link":"#java-21结构化并发特性深度解析","children":[{"level":3,"title":"上下文关联的任务创建","slug":"上下文关联的任务创建","link":"#上下文关联的任务创建","children":[]},{"level":3,"title":"更好的异常传播机制","slug":"更好的异常传播机制","link":"#更好的异常传播机制","children":[]},{"level":3,"title":"简化并发控制的API","slug":"简化并发控制的api","link":"#简化并发控制的api","children":[]},{"level":3,"title":"与虚拟线程的完美融合","slug":"与虚拟线程的完美融合","link":"#与虚拟线程的完美融合","children":[]}]},{"level":2,"title":"代码示例：实战Java 21结构化并发","slug":"代码示例-实战java-21结构化并发","link":"#代码示例-实战java-21结构化并发","children":[{"level":3,"title":"简单任务并发执行","slug":"简单任务并发执行","link":"#简单任务并发执行","children":[]},{"level":3,"title":"复杂任务场景应用","slug":"复杂任务场景应用","link":"#复杂任务场景应用","children":[]}]},{"level":2,"title":"结构化并发应用场景与优势","slug":"结构化并发应用场景与优势","link":"#结构化并发应用场景与优势","children":[{"level":3,"title":"常见应用场景","slug":"常见应用场景","link":"#常见应用场景","children":[]},{"level":3,"title":"相比传统并发的显著优势","slug":"相比传统并发的显著优势","link":"#相比传统并发的显著优势","children":[]}]},{"level":2,"title":"总结与展望","slug":"总结与展望","link":"#总结与展望","children":[]}],"git":{"createdTime":1739530338000,"updatedTime":1739530338000,"contributors":[{"name":"yihui","email":"bangzewu@126.com","commits":1}]},"readingTime":{"minutes":13.4,"words":4019},"filePathRelative":"java/jdk/jdk8+/12.Java21：结构化并发.md","localizedDate":"2025年2月14日","excerpt":"<h1> Java 21结构化并发：开启并发编程新篇章</h1>\\n<h2> Java并发编程演进之路</h2>\\n<p>嘿，Java开发者们！还记得刚学Java时写并发代码的痛苦吗？那时，我们得继承<code>Thread</code>类或实现<code>Runnable</code>接口，手动管理线程的创建与销毁。代码繁琐不说，一旦涉及大量线程，管理起来更是让人崩溃！比如，你可能写过这样的代码：</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">MyThread</span> <span class=\\"token keyword\\">extends</span> <span class=\\"token class-name\\">Thread</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token annotation punctuation\\">@Override</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">run</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"MyThread is running\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">MyRunnable</span> <span class=\\"token keyword\\">implements</span> <span class=\\"token class-name\\">Runnable</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token annotation punctuation\\">@Override</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">run</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">System</span><span class=\\"token punctuation\\">.</span>out<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">println</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"MyRunnable is running\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Main</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> args<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">MyThread</span> thread <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">MyThread</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token class-name\\">Thread</span> runnableThread <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Thread</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">MyRunnable</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        thread<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">start</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        runnableThread<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">start</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{},"autoDesc":true}');export{n as data};
