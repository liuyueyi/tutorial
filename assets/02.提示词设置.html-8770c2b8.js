import{_ as c,V as l,W as i,Y as n,Z as s,$ as a,a0 as u,a1 as t,F as e}from"./framework-094145d2.js";const r="/tutorial/imgs/column/springai/02-1.webp",k="/tutorial/imgs/column/springai/02-2.webp",d="/tutorial/imgs/column/springai/02-3.webp",m={},v=t(`<h1 id="_02-提示词的使用" tabindex="-1"><a class="header-anchor" href="#_02-提示词的使用" aria-hidden="true">#</a> 02. 提示词的使用</h1><p>上一篇文章快速带大家基于SpringAi创建了一个调用大模型的示例工程，接下来我们将进入一些大模型交互的细节，这里主要介绍如何使用提示词，以使大模型的输出更加符合我们的需求</p><h2 id="一、基础知识" tabindex="-1"><a class="header-anchor" href="#一、基础知识" aria-hidden="true">#</a> 一、基础知识</h2><h3 id="_1-提示词-prompt" tabindex="-1"><a class="header-anchor" href="#_1-提示词-prompt" aria-hidden="true">#</a> 1. 提示词（Prompt）</h3><p>提示词：Prompt，也可以理解为预设，是模型在开始对话时，预先设定的一些内容，这些内容会作为模型输入，从而影响模型输出的结果。</p><p>SpringAI中，我们使用 <code>Prompt</code> 类来表示一个提示词，<code>Prompt</code> 类中包含一个 <code>List&lt;Message&gt;</code> 属性，用于表示提示词中的消息列表。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Prompt</span> <span class="token keyword">implements</span> <span class="token class-name">ModelRequest</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">// 消息列表</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&gt;</span></span> messages<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">ChatOptions</span> chatOptions<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-消息-message" tabindex="-1"><a class="header-anchor" href="#_2-消息-message" aria-hidden="true">#</a> 2. 消息（Message）</h3><p>用户与大模型中间的对话，通常是由一个或多个消息组成，其中每个消息都需要与一个角色关联；角色表示消息作者的角色。</p><p>SpringAI中，我们使用 <code>Message</code> 类来表示一个消息，<code>Message</code> 类中包含一个 <code>MessageType</code> 属性，用于表示消息的类型。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Content</span> <span class="token punctuation">{</span>

    <span class="token class-name">String</span> <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">getMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Message</span> <span class="token keyword">extends</span> <span class="token class-name">Content</span> <span class="token punctuation">{</span>
    <span class="token class-name">MessageType</span> <span class="token function">getMessageType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面定义的<code>MessageType</code>定义消息类型，和大模型中定义的角色进行映射，ChatGPT了解它应该如何行为以及谁在发起调用</p>`,12),g=n("img",{src:r,alt:"https://docs.spring.io/spring-ai/reference/api/prompt.html#_prompt",tabindex:"0",loading:"lazy"},null,-1),b={href:"https://docs.spring.io/spring-ai/reference/api/prompt.html#_prompt",target:"_blank",rel:"noopener noreferrer"},h=t(`<p>通常有四种角色：</p><ul><li>system: 系统角色，用于通过分配特定行为给大模型来创建对话的上下文或范围，通常我们预设的提示词会和 <code>system</code> 角色关联</li><li>user: 用户角色，用于表示用户输入的文本，通常我们输入的提问也会和 <code>user</code> 角色关联</li><li>assistant: 助手角色，用于表示模型生成的文本，通常大模型生成的答案也会和 <code>assistant</code> 角色关联</li><li>tool: 工具角色，用于表示模型调用的函数返回的内容，会和 <code>tool</code> 角色关联</li></ul><h3 id="_3-提示词模板" tabindex="-1"><a class="header-anchor" href="#_3-提示词模板" aria-hidden="true">#</a> 3. 提示词模板</h3><p>提示词实际上是一个字符串，若提示词全部由程序预设，会导致提示词的复用性差，因此，SpringAI提供了一种模板语法，用于生成提示词，模板语法如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>You are a helpful AI assistant that helps people find information.
Your name is {name}
You should reply to the user&#39;s request with your name and also in the style of a {voice}.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>模板语法中，<code>{name}</code> 和 <code>{voice}</code> 是模板变量，模板变量的值会根据调用时传入的参数进行替换</p><p>关联的类定义如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 提示词模板</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PromptTemplate</span> <span class="token keyword">implements</span> <span class="token class-name">PromptTemplateActions</span><span class="token punctuation">,</span> <span class="token class-name">PromptTemplateMessageActions</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>


<span class="token comment">// 提示词模板解析渲染，即使用传入的Map替换模板中的变量</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TemplateRenderer</span> <span class="token keyword">extends</span> <span class="token class-name">BiFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token class-name">String</span> <span class="token function">apply</span><span class="token punctuation">(</span><span class="token class-name">String</span> template<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> variables<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、实例演示" tabindex="-1"><a class="header-anchor" href="#二、实例演示" aria-hidden="true">#</a> 二、实例演示</h2>`,9),f=t(`<h3 id="_1-提示词基础使用" tabindex="-1"><a class="header-anchor" href="#_1-提示词基础使用" aria-hidden="true">#</a> 1. 提示词基础使用</h3><p>我们这里同样基于智普的免费大模型进行演示，首先创建一个Controller控制器</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChatController</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ZhiPuAiChatModel</span> chatModel<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">public</span> <span class="token class-name">ChatController</span><span class="token punctuation">(</span><span class="token class-name">ZhiPuAiChatModel</span> chatModel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>chatModel <span class="token operator">=</span> chatModel<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后再定义一个对话的接口，还是与之前的demo工程的一样，接收用户的传入文本，不同的地方在于我们再方式实现中，显示创建一个提示词</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/ai/generate&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">Map</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> defaultValue <span class="token operator">=</span> <span class="token string">&quot;Tell me a joke&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Prompt</span> prompt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Prompt</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span>
            <span class="token class-name">ZhiPuAiChatOptions</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token class-name">ZhiPuAiApi<span class="token punctuation">.</span>ChatModel<span class="token punctuation">.</span>GLM_4_Flash</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">temperature</span><span class="token punctuation">(</span><span class="token number">0.7d</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">user</span><span class="token punctuation">(</span><span class="token string">&quot;一灰灰&quot;</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Generation</span> generation <span class="token operator">=</span> chatModel<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;generation&quot;</span><span class="token punctuation">,</span> generation <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token string">&quot;&quot;</span> <span class="token operator">:</span> generation<span class="token punctuation">.</span><span class="token function">getOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>提示词的创建方式比较简单，直接new一个对象，如上面的示例</p><ul><li>第一个参数：string类型：默认表示用户输入的消息</li><li>第二个参数：ChatOptions类型：表示模型调用的参数，如模型名称、温度、用户名称等</li></ul><ol><li><p><strong><code>temperature</code> 参数作用</strong>：</p><ul><li>用于控制生成文本的<strong>随机性或创造性</strong>。</li><li>数值范围一般在 <code>0.0</code> 到 <code>1.0</code> 之间（有时也可超出该范围）： <ul><li>当 <code>temperature</code> 接近 <code>0.0</code> 时，输出会趋于确定性和保守，通常选择概率最高的词；</li><li>当 <code>temperature</code> 接近 <code>1.0</code> 或更高时，输出更具多样性和创造性，可能会选择低概率但更有趣的词。</li></ul></li><li>示例中设置为 <code>0.7d</code>，表示适度平衡确定性与多样性。</li></ul></li><li><p><strong><code>user</code> 参数作用</strong>：</p><ul><li>用于标识请求的发起者，通常是<strong>用户的唯一标识符</strong>（如用户名、ID 等）。</li><li>主要用途包括： <ul><li><strong>日志记录和审计</strong>：便于追踪哪个用户触发了此次 AI 调用；</li><li><strong>配额管理</strong>：某些平台依据 <code>user</code> 字段进行使用量统计与限制；</li><li><strong>行为分析</strong>：用于后续的数据分析或个性化推荐等场景。</li></ul></li><li>示例中设置为 <code>&quot;一灰灰&quot;</code>，可能代表当前请求来源的用户身份标识。</li></ul></li></ol><p>如果我们希望预设一个系统的提示词，比如给大模型定义一个身份：“你现在是一个专注于给3-5岁儿童聊天的助手”，那么我们可以这样创建一个提示词：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/ai/childGenerate&quot;</span><span class="token punctuation">)</span>
 <span class="token keyword">public</span> <span class="token class-name">Map</span> <span class="token function">childJokeGenerate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> defaultValue <span class="token operator">=</span> <span class="token string">&quot;Tell me a joke&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token class-name">Prompt</span> prompt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Prompt</span><span class="token punctuation">(</span>
             <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SystemMessage</span><span class="token punctuation">(</span><span class="token string">&quot;你现在是一个专注于给3-5岁儿童聊天的助手&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">UserMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
             <span class="token class-name">ZhiPuAiChatOptions</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                     <span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token class-name">ZhiPuAiApi<span class="token punctuation">.</span>ChatModel<span class="token punctuation">.</span>GLM_4_Flash</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                     <span class="token punctuation">.</span><span class="token function">temperature</span><span class="token punctuation">(</span><span class="token number">0.7d</span><span class="token punctuation">)</span>
                     <span class="token punctuation">.</span><span class="token function">user</span><span class="token punctuation">(</span><span class="token string">&quot;一灰灰&quot;</span><span class="token punctuation">)</span>
                     <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
     <span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token class-name">Generation</span> generation <span class="token operator">=</span> chatModel<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">return</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;generation&quot;</span><span class="token punctuation">,</span> generation <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token string">&quot;&quot;</span> <span class="token operator">:</span> generation<span class="token punctuation">.</span><span class="token function">getOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们访问对比一下上面两个接口的返回情况，很明显<code>childGenerate</code>生成的笑话内容更适合3-5岁小朋友</p><figure><img src="`+k+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>小结一下，提示词的使用方式：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 直接创建一个用户的消息提示词</span>
<span class="token class-name">Prompt</span> prompt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Prompt</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 若我们需要创建不同角色的消息，则可以使用</span>
<span class="token class-name">Prompt</span> prompt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Prompt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SystemMessage</span><span class="token punctuation">(</span><span class="token string">&quot;xxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">UserMessage</span><span class="token punctuation">(</span><span class="token string">&quot;xxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 若希望指定模型调用的参数，则需要使用 ChatOptions</span>
<span class="token class-name">Prompt</span> prompt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Prompt</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token class-name">ZhiPuAiChatOptions</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">temperature</span><span class="token punctuation">(</span><span class="token number">0.7d</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-提示词模板" tabindex="-1"><a class="header-anchor" href="#_2-提示词模板" aria-hidden="true">#</a> 2. 提示词模板</h3><p>接下来我们再来看一下提示词模板的使用示例，创建一个角色扮演的接口，我们预设的系统提示词模板为</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>我们现在开始角色扮演的聊天，你来扮演{personality}的{aiRole}, 我来扮演{myRole}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>直接借助SpringAI提供的 <code>PromptTemplate</code> 来实现提示词模板的解析，常见的使用方式</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 这里创建的是 UserMessage 类型的提示词</span>
<span class="token class-name">PromptTemplate</span> promptTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PromptTemplate</span><span class="token punctuation">(</span><span class="token string">&quot;Tell me a {adjective} joke about {topic}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Prompt</span> prompt <span class="token operator">=</span> promptTemplate<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;adjective&quot;</span><span class="token punctuation">,</span> adjective<span class="token punctuation">,</span> <span class="token string">&quot;topic&quot;</span><span class="token punctuation">,</span> topic<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们创建一个接口，接收三个参数，分别表示角色的个性、角色名称、用户角色名称，然后使用模板渲染，并创建一个系统提示词，实现与用户的对话</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;/ai/roleChat&quot;</span><span class="token punctuation">)</span>
 <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">roleChat</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;personality&quot;</span><span class="token punctuation">,</span> defaultValue <span class="token operator">=</span> <span class="token string">&quot;温柔&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> personality<span class="token punctuation">,</span>
                        <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;aiRole&quot;</span><span class="token punctuation">,</span> defaultValue <span class="token operator">=</span> <span class="token string">&quot;女朋友&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> aiRole<span class="token punctuation">,</span>
                        <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;myRole&quot;</span><span class="token punctuation">,</span> defaultValue <span class="token operator">=</span> <span class="token string">&quot;男朋友&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> myRole<span class="token punctuation">,</span>
                        <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;msg&quot;</span><span class="token punctuation">,</span> defaultValue <span class="token operator">=</span> <span class="token string">&quot;最近心情不好&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token class-name">PromptTemplate</span> promptTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PromptTemplate</span><span class="token punctuation">(</span><span class="token string">&quot;我们现在开始角色扮演的聊天，你来扮演{personality}的{aiRole}, 我来扮演{myRole}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token class-name">String</span> text <span class="token operator">=</span> promptTemplate<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;personality&quot;</span><span class="token punctuation">,</span> personality<span class="token punctuation">,</span> <span class="token string">&quot;aiRole&quot;</span><span class="token punctuation">,</span> aiRole<span class="token punctuation">,</span> <span class="token string">&quot;myRole&quot;</span><span class="token punctuation">,</span> myRole<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token class-name">Prompt</span> prompt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Prompt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SystemMessage</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">UserMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

     <span class="token class-name">Generation</span> generation <span class="token operator">=</span> chatModel<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">return</span> generation <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token string">&quot;&quot;</span> <span class="token operator">:</span> generation<span class="token punctuation">.</span><span class="token function">getOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来我们看看传入不同的参数的表现情况</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>http://localhost:8080/ai/roleChat?personality<span class="token operator">=</span>刁蛮<span class="token operator">&amp;</span><span class="token assign-left variable">msg</span><span class="token operator">=</span>今天真倒霉，没有赶上早班车迟到了

http://localhost:8080/ai/roleChat?personality<span class="token operator">=</span>温柔<span class="token operator">&amp;</span><span class="token assign-left variable">msg</span><span class="token operator">=</span>今天真倒霉，没有赶上早班车迟到了

http://localhost:8080/ai/roleChat?personality<span class="token operator">=</span>刻薄<span class="token operator">&amp;</span><span class="token assign-left variable">aiRole</span><span class="token operator">=</span>老板<span class="token operator">&amp;</span><span class="token assign-left variable">myRole</span><span class="token operator">=</span>员工<span class="token operator">&amp;</span><span class="token assign-left variable">msg</span><span class="token operator">=</span>今天雨下太大了，没有赶上早班车迟到了
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从上面的输出也可以看出，当我传入不同的角色描述，返回的对话信息也会根据我的描述进行显著的变化</p><h3 id="_3-提示词高级使用" tabindex="-1"><a class="header-anchor" href="#_3-提示词高级使用" aria-hidden="true">#</a> 3. 提示词高级使用</h3><p>通过提示词模板<code>promptTemplate.create</code>创建的提示词，默认是创建<code>UserMessage</code>类型的消息；如果我们希望创建的是系统提示词呢？可以使用<code>SystemPromptTemplate</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;/ai/roleChat&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">roleChat</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;personality&quot;</span><span class="token punctuation">,</span> defaultValue <span class="token operator">=</span> <span class="token string">&quot;温柔&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> personality<span class="token punctuation">,</span>
      <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;aiRole&quot;</span><span class="token punctuation">,</span> defaultValue <span class="token operator">=</span> <span class="token string">&quot;女朋友&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> aiRole<span class="token punctuation">,</span>
      <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;myRole&quot;</span><span class="token punctuation">,</span> defaultValue <span class="token operator">=</span> <span class="token string">&quot;男朋友&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> myRole<span class="token punctuation">,</span>
      <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;msg&quot;</span><span class="token punctuation">,</span> defaultValue <span class="token operator">=</span> <span class="token string">&quot;最近心情不好&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token class-name">SystemPromptTemplate</span> promptTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SystemPromptTemplate</span><span class="token punctuation">(</span><span class="token string">&quot;我们现在开始角色扮演的聊天，你来扮演{personality}的{aiRole}, 我来扮演{myRole}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token class-name">Message</span> systemMsg <span class="token operator">=</span> promptTemplate<span class="token punctuation">.</span><span class="token function">createMessage</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;personality&quot;</span><span class="token punctuation">,</span> personality<span class="token punctuation">,</span> <span class="token string">&quot;aiRole&quot;</span><span class="token punctuation">,</span> aiRole<span class="token punctuation">,</span> <span class="token string">&quot;myRole&quot;</span><span class="token punctuation">,</span> myRole<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token class-name">Prompt</span> prompt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Prompt</span><span class="token punctuation">(</span>systemMsg<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">UserMessage</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

     <span class="token class-name">Generation</span> generation <span class="token operator">=</span> chatModel<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">return</span> generation <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token string">&quot;&quot;</span> <span class="token operator">:</span> generation<span class="token punctuation">.</span><span class="token function">getOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，提示词模板中需要替换的内容是放在<code>{}</code>中的，当然我们也可以自定义替换的内容，比如使用<code>&lt;&gt;</code>来替换，此时我们需要在创建<code>PromptTemplate</code>的时候传入一个参数<code>delimiter</code>，表示替换内容的分隔符</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">PromptTemplate</span> promptTemplate <span class="token operator">=</span> <span class="token class-name">PromptTemplate</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">renderer</span><span class="token punctuation">(</span><span class="token class-name">StTemplateRenderer</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">startDelimiterToken</span><span class="token punctuation">(</span><span class="token char">&#39;&lt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endDelimiterToken</span><span class="token punctuation">(</span><span class="token char">&#39;&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">template</span><span class="token punctuation">(</span><span class="token string">&quot;我们现在开始角色扮演的对话，你来扮演{personality}的{aiRole}, 我来扮演{myRole}&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> text <span class="token operator">=</span> promptTemplate<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;personality&quot;</span><span class="token punctuation">,</span> personality<span class="token punctuation">,</span> <span class="token string">&quot;aiRole&quot;</span><span class="token punctuation">,</span> aiRole<span class="token punctuation">,</span> <span class="token string">&quot;myRole&quot;</span><span class="token punctuation">,</span> myRole<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>提示词的使用，除了上面的字符串硬编码方式之外，SpringAI还提供了资源注入的方式，如</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:/prompts/system-message.st&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">Resource</span> systemResource<span class="token punctuation">;</span>

<span class="token class-name">SystemPromptTemplate</span> systemPromptTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SystemPromptTemplate</span><span class="token punctuation">(</span>systemResource<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、小结" tabindex="-1"><a class="header-anchor" href="#三、小结" aria-hidden="true">#</a> 三、小结</h2><p>本文主要介绍在SpringAI中提示词的使用方式，如最基本的大模型交互时，由SpringAI默认根据文本封装一个用户消息</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 接收一个文本，封装成用户消息，返回大模型的响应文本</span>
chatModel<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当然也可以手动创建</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Prompt</span> prompt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Prompt</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
chatModel<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如提示词有复用的场景，则优先考虑提示词模板</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">PromptTemplate</span> promptTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PromptTemplate</span><span class="token punctuation">(</span><span class="token string">&quot;Tell me a {adjective} joke about {topic}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Prompt</span> prompt <span class="token operator">=</span> promptTemplate<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">&quot;adjective&quot;</span><span class="token punctuation">,</span> adjective<span class="token punctuation">,</span> <span class="token string">&quot;topic&quot;</span><span class="token punctuation">,</span> topic<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
chatModel<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,39),q={href:"https://github.com/liuyueyi/spring-ai-demo/tree/master/S02-prompt-demo",target:"_blank",rel:"noopener noreferrer"};function y(w,_){const p=e("ExternalLinkIcon"),o=e("RouterLink");return l(),i("div",null,[v,n("figure",null,[g,n("figcaption",null,[n("a",b,[s("https://docs.spring.io/spring-ai/reference/api/prompt.html#_prompt"),a(p)])])]),h,n("p",null,[s("首先我们需要创建一个SpringAI的项目，基本流程同 "),a(o,{to:"/spring/springai/%E5%9F%BA%E7%A1%80%E7%AF%87/01.%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AASpringAI-Demo%E5%B7%A5%E7%A8%8B.html"},{default:u(()=>[s("创建一个SpringAI-Demo工程")]),_:1})]),f,n("p",null,[s("文中所有涉及到的代码，可以到项目中获取 "),n("a",q,[s("https://github.com/liuyueyi/spring-ai-demo"),a(p)])])])}const x=c(m,[["render",y],["__file","02.提示词设置.html.vue"]]);export{x as default};
