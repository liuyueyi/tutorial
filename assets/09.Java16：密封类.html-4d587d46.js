import{_ as n,V as s,W as a,a1 as e}from"./framework-094145d2.js";const p={},t=e(`<h1 id="解锁java-16密封类-代码安全与可维护性的新利器" tabindex="-1"><a class="header-anchor" href="#解锁java-16密封类-代码安全与可维护性的新利器" aria-hidden="true">#</a> 解锁Java 16密封类：代码安全与可维护性的新利器</h1><h2 id="一、java-16那些事儿" tabindex="-1"><a class="header-anchor" href="#一、java-16那些事儿" aria-hidden="true">#</a> 一、Java 16那些事儿</h2><p>嘿，Java爱好者们！2021年3月16日，Java 16像是一位带着宝藏的探险家，突然闯进了我们的编程世界。它带来了17个新特性，从语言到库，从性能优化到各种小惊喜，每个都像是给开发者准备的礼物🎁。其中，密封类（Sealed Classes）作为第二次预览特性，特别亮眼，就像夜空中最闪亮的星星✨。</p><p>想象一下，你正在写代码，突然发现某个类被继承得乱七八糟，继承体系完全失控。是不是特别烦？Java 16的密封类就是来解决这个问题的。它能给类的继承体系“上锁”，让继承变得可控。接下来，咱们就一起看看这个“秩序守护者”到底有多厉害！</p><h2 id="二、密封类初印象" tabindex="-1"><a class="header-anchor" href="#二、密封类初印象" aria-hidden="true">#</a> 二、密封类初印象</h2><h3 id="一-密封类是啥" tabindex="-1"><a class="header-anchor" href="#一-密封类是啥" aria-hidden="true">#</a> （一）密封类是啥</h3><p>在Java里，类的继承就像家族传承。但如果家族成员随便加入，就会乱成一团。密封类就是给这个家族传承加上“锁”的存在。它用<code>sealed</code>关键字修饰，通过<code>permits</code>子句列出允许继承的子类，从而控制继承体系。</p><p>举个栗子，假设你正在写一个图形绘制系统，有一个<code>Shape</code>类作为所有图形的基类。正常情况下，你只希望<code>Circle</code>（圆形）和<code>Rectangle</code>（矩形）能继承它。这时候，就可以把<code>Shape</code>类定义为密封类，并在<code>permits</code>子句中列出<code>Circle</code>和<code>Rectangle</code>。其他类就无法随意继承<code>Shape</code>类了，继承体系瞬间变得清晰又稳定。</p><h3 id="二-密封类语法大揭秘" tabindex="-1"><a class="header-anchor" href="#二-密封类语法大揭秘" aria-hidden="true">#</a> （二）密封类语法大揭秘</h3><p>密封类的语法其实很简单，就像给类加上了一个“允许继承名单”。定义一个密封类的语法如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token keyword">permits</span> <span class="token class-name">Circle</span><span class="token punctuation">,</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>
    <span class="token comment">// 类的成员和方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>子类在继承密封类时，需要根据需求使用不同的关键字来声明：</p><ul><li><code>final</code>关键字修饰的子类：表示这个子类不能再被继承，就像家族的分支到这儿就结束了。比如：</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>
    <span class="token comment">// 子类的成员和方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>sealed</code>关键字修饰的子类：表示这个子类仍然是密封的，还可以继续限制自己的子类。比如：</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token keyword">permits</span> <span class="token class-name">Square</span> <span class="token punctuation">{</span>
    <span class="token comment">// 子类的成员和方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>non - sealed</code>关键字修饰的子类：表示这个子类打破了密封限制，恢复成普通类，可以被任意类继承。比如：</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> non <span class="token operator">-</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Shape2</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>
    <span class="token comment">// 子类的成员和方法</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>小贴士</strong>：密封类的语法就像给类的继承体系画了一张“家谱图”，让你一眼就能看清楚谁可以继承谁。</p><h2 id="三、密封类的超能力" tabindex="-1"><a class="header-anchor" href="#三、密封类的超能力" aria-hidden="true">#</a> 三、密封类的超能力</h2><h3 id="一-控制继承结构" tabindex="-1"><a class="header-anchor" href="#一-控制继承结构" aria-hidden="true">#</a> （一）控制继承结构</h3><p>想象一下，你的代码就像一个精心规划的家族树，每个分支都清晰明确。密封类就像是家族树的规划师，能严格控制类的继承结构。</p><p>比如，在一个图形绘制系统中，<code>Shape</code>类作为所有图形的基类，定义了一些通用属性和方法。如果不使用密封类，任何类都可以继承<code>Shape</code>类，继承体系可能会变得混乱。但有了密封类，你可以明确指定哪些类可以继承它，比如<code>Circle</code>和<code>Rectangle</code>。这样一来，其他类就无法随意继承<code>Shape</code>类，继承体系瞬间变得清晰又稳定。</p><p><strong>小贴士</strong>：密封类让继承体系变得可控，就像给家族树画了一道“安全线”，防止乱七八糟的分支出现。</p><h3 id="二-提升代码安全性" tabindex="-1"><a class="header-anchor" href="#二-提升代码安全性" aria-hidden="true">#</a> （二）提升代码安全性</h3><p>密封类不仅能控制继承结构，还能提升代码的安全性。想象一下，你的代码就像一个城堡，而密封类就是坚固的城墙，能有效防止恶意子类的入侵。</p><p>比如，在一个权限管理系统中，有一个<code>Permission</code>类用于验证用户权限。如果不使用密封类，恶意子类可能会继承<code>Permission</code>类并重写验证方法，导致权限验证失效。但如果你把<code>Permission</code>类定义为密封类，并只允许一些受信任的子类继承它，就能防止恶意子类的出现，确保权限验证逻辑的安全性。</p><p><strong>小贴士</strong>：密封类就像给代码加了一把“安全锁”，只有经过授权的子类才能进入继承体系。</p><h3 id="三-增强代码可维护性" tabindex="-1"><a class="header-anchor" href="#三-增强代码可维护性" aria-hidden="true">#</a> （三）增强代码可维护性</h3><p>在大型项目中，代码的可维护性就像城市的交通规划一样重要。密封类就像是城市交通的指示牌，能让代码结构更清晰，便于理解和维护。</p><p>比如，在一个企业级应用中，有一个<code>BusinessObject</code>类作为业务对象的基类。如果你把它定义为密封类，并且只允许几个特定的业务对象类继承它，比如<code>Customer</code>和<code>Order</code>，其他开发者在查看代码时就能一眼明白这个继承体系的结构，快速定位和修改相关代码。</p><p><strong>小贴士</strong>：密封类让代码结构更清晰，就像一个整洁的书架，每本书都放在合适的位置，方便你快速找到需要的信息。</p><h2 id="四、密封类实战演练" tabindex="-1"><a class="header-anchor" href="#四、密封类实战演练" aria-hidden="true">#</a> 四、密封类实战演练</h2><h3 id="一-简单示例走一波" tabindex="-1"><a class="header-anchor" href="#一-简单示例走一波" aria-hidden="true">#</a> （一）简单示例走一波</h3><p>理论讲了这么多，是不是有点懵？别急，咱们来看一个简单的代码示例。</p><p>假设你正在写一个图形绘制系统，有一个<code>Shape</code>类作为所有图形的基类，它有两个子类：<code>Circle</code>（圆形）和<code>Rectangle</code>（矩形）。用密封类来实现，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 定义密封类 Shape</span>
<span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token keyword">permits</span> <span class="token class-name">Circle</span><span class="token punctuation">,</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">double</span> <span class="token function">calculateArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// final修饰的子类Circle，不能再被继承</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> radius<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> radius<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calculateArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> radius <span class="token operator">*</span> radius<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// final修饰的子类Rectangle，不能再被继承</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> width<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> height<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token keyword">double</span> width<span class="token punctuation">,</span> <span class="token keyword">double</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calculateArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> width <span class="token operator">*</span> height<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们可以在测试类中使用这些类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShapeTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Shape</span> circle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token number">5.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Shape</span> rectangle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token number">4.0</span><span class="token punctuation">,</span> <span class="token number">6.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;圆形的面积: &quot;</span> <span class="token operator">+</span> circle<span class="token punctuation">.</span><span class="token function">calculateArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;矩形的面积: &quot;</span> <span class="token operator">+</span> rectangle<span class="token punctuation">.</span><span class="token function">calculateArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>圆形的面积: 78.53981633974483
矩形的面积: 24.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>是不是特别简单？密封类让代码结构清晰，逻辑一目了然。</p><h3 id="二-复杂场景也不怕" tabindex="-1"><a class="header-anchor" href="#二-复杂场景也不怕" aria-hidden="true">#</a> （二）复杂场景也不怕</h3><p>在实际项目中，密封类的应用场景往往更复杂。比如，你正在开发一个2D游戏，游戏中有不同类型的角色，每个角色都有自己的行为和属性。可以用密封类来组织这些角色，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 定义密封类 Character</span>
<span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Character</span> <span class="token keyword">permits</span> <span class="token class-name">Warrior</span><span class="token punctuation">,</span> <span class="token class-name">Mage</span><span class="token punctuation">,</span> <span class="token class-name">Archer</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">int</span> health<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Character</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> health<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>health <span class="token operator">=</span> health<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// sealed修饰的子类Warrior，还可以继续限制自己的子类</span>
<span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Warrior</span> <span class="token keyword">extends</span> <span class="token class-name">Character</span> <span class="token keyword">permits</span> <span class="token class-name">Knight</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> strength<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Warrior</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> health<span class="token punctuation">,</span> <span class="token keyword">int</span> strength<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> health<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>strength <span class="token operator">=</span> strength<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot; 战士发动强力攻击，造成 &quot;</span> <span class="token operator">+</span> strength <span class="token operator">+</span> <span class="token string">&quot; 点伤害！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// final修饰的Warrior的子类Knight，不能再被继承</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Knight</span> <span class="token keyword">extends</span> <span class="token class-name">Warrior</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">Knight</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> health<span class="token punctuation">,</span> <span class="token keyword">int</span> strength<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> health<span class="token punctuation">,</span> strength<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot; 骑士发动冲锋攻击，造成 &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>strength <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; 点伤害！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// final修饰的子类Mage，不能再被继承</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Mage</span> <span class="token keyword">extends</span> <span class="token class-name">Character</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> magicPower<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Mage</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> health<span class="token punctuation">,</span> <span class="token keyword">int</span> magicPower<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> health<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>magicPower <span class="token operator">=</span> magicPower<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot; 法师释放魔法，造成 &quot;</span> <span class="token operator">+</span> magicPower <span class="token operator">+</span> <span class="token string">&quot; 点伤害！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// final修饰的子类Archer，不能再被继承</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Archer</span> <span class="token keyword">extends</span> <span class="token class-name">Character</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> agility<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Archer</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> health<span class="token punctuation">,</span> <span class="token keyword">int</span> agility<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> health<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>agility <span class="token operator">=</span> agility<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot; 弓箭手射出利箭，造成 &quot;</span> <span class="token operator">+</span> agility <span class="token operator">+</span> <span class="token string">&quot; 点伤害！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在游戏场景中，可以这样使用这些角色类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Game</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Character</span> warrior <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Warrior</span><span class="token punctuation">(</span><span class="token string">&quot;亚瑟&quot;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Character</span> mage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mage</span><span class="token punctuation">(</span><span class="token string">&quot;梅林&quot;</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Character</span> archer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Archer</span><span class="token punctuation">(</span><span class="token string">&quot;罗宾汉&quot;</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        warrior<span class="token punctuation">.</span><span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        mage<span class="token punctuation">.</span><span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        archer<span class="token punctuation">.</span><span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Character</span> knight <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Knight</span><span class="token punctuation">(</span><span class="token string">&quot;兰斯洛特&quot;</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        knight<span class="token punctuation">.</span><span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>亚瑟 战士发动强力攻击，造成 20 点伤害！
梅林 法师释放魔法，造成 30 点伤害！
罗宾汉 弓箭手射出利箭，造成 25 点伤害！
兰斯洛特 骑士发动冲锋攻击，造成 50 点伤害！
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>是不是特别清晰？密封类让代码结构一目了然，逻辑清晰，维护起来也特别方便。</p><h2 id="五、避坑指南" tabindex="-1"><a class="header-anchor" href="#五、避坑指南" aria-hidden="true">#</a> 五、避坑指南</h2><h3 id="一-常见错误及解决" tabindex="-1"><a class="header-anchor" href="#一-常见错误及解决" aria-hidden="true">#</a> （一）常见错误及解决</h3><p>使用密封类时，可能会遇到一些常见的坑。别怕，咱们来一一解决！</p><h4 id="子类未按规定修饰" tabindex="-1"><a class="header-anchor" href="#子类未按规定修饰" aria-hidden="true">#</a> 子类未按规定修饰</h4><p>如果子类没有使用<code>final</code>、<code>sealed</code>或<code>non - sealed</code>关键字修饰，编译器会报错。比如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token keyword">permits</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span>
    <span class="token comment">// 类体</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>
    <span class="token comment">// 类体</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解决方法：根据需求，为子类添加合适的修饰关键字。比如，如果<code>Circle</code>类不需要再被继承，可以用<code>final</code>修饰：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>
    <span class="token comment">// 类体</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="未在permits子句中列出子类" tabindex="-1"><a class="header-anchor" href="#未在permits子句中列出子类" aria-hidden="true">#</a> 未在permits子句中列出子类</h4><p>如果密封类的<code>permits</code>子句中没有列出允许继承的子类，其他类即使符合条件也无法继承该密封类。比如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>
    <span class="token comment">// 类体</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>
    <span class="token comment">// 类体</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解决方法：在密封类的<code>permits</code>子句中明确列出允许继承的子类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token keyword">permits</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span>
    <span class="token comment">// 类体</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="子类不在同一包中" tabindex="-1"><a class="header-anchor" href="#子类不在同一包中" aria-hidden="true">#</a> 子类不在同一包中</h4><p>如果允许子类扩展密封类，那么子类必须和密封类定义在同一个包中。比如：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 密封类Shape，位于package1包中</span>
<span class="token keyword">package</span> <span class="token namespace">package1</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">sealed</span> <span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token keyword">permits</span> <span class="token class-name">Circle</span> <span class="token punctuation">{</span>
    <span class="token comment">// 类体</span>
<span class="token punctuation">}</span>

<span class="token comment">// 子类Circle，位于package2包中</span>
<span class="token keyword">package</span> <span class="token namespace">package2</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>
    <span class="token comment">// 类体</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解决方法：将子类<code>Circle</code>移动到与密封类<code>Shape</code>相同的包中。</p><h3 id="二-注意事项要牢记" tabindex="-1"><a class="header-anchor" href="#二-注意事项要牢记" aria-hidden="true">#</a> （二）注意事项要牢记</h3><h4 id="密封类与其他特性的结合使用" tabindex="-1"><a class="header-anchor" href="#密封类与其他特性的结合使用" aria-hidden="true">#</a> 密封类与其他特性的结合使用</h4><p>密封类可以和Java的其他特性结合使用，比如模式匹配、泛型、注解等。但在结合使用时，需要注意它们之间的相互影响和兼容性。比如，泛型类型参数的声明和使用需要保持一致，否则可能会出现编译错误。</p><h4 id="密封类的性能影响" tabindex="-1"><a class="header-anchor" href="#密封类的性能影响" aria-hidden="true">#</a> 密封类的性能影响</h4><p>虽然密封类本身不会对性能产生显著的负面影响，但过度使用可能会让代码变得复杂，影响扩展性和灵活性。所以，使用密封类时，要根据具体需求合理权衡。</p><h2 id="六、密封类与其他特性的梦幻联动" tabindex="-1"><a class="header-anchor" href="#六、密封类与其他特性的梦幻联动" aria-hidden="true">#</a> 六、密封类与其他特性的梦幻联动</h2><h3 id="一-和模式匹配的默契配合" tabindex="-1"><a class="header-anchor" href="#一-和模式匹配的默契配合" aria-hidden="true">#</a> （一）和模式匹配的默契配合</h3><p>密封类和模式匹配就像是一对默契十足的搭档，能让代码变得更加简洁高效。</p><p>比如，在一个图形绘制系统中，你有一个密封类<code>Shape</code>和它的子类<code>Circle</code>、<code>Rectangle</code>和<code>Square</code>。现在需要一个方法来描述不同形状的信息。如果不使用密封类和模式匹配，代码可能是这样的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">describeShape</span><span class="token punctuation">(</span><span class="token class-name">Shape</span> shape<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>shape <span class="token keyword">instanceof</span> <span class="token class-name">Circle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Circle</span> circle <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Circle</span><span class="token punctuation">)</span> shape<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;A circle with radius &quot;</span> <span class="token operator">+</span> circle<span class="token punctuation">.</span><span class="token function">getRadius</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>shape <span class="token keyword">instanceof</span> <span class="token class-name">Rectangle</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Rectangle</span> rectangle <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Rectangle</span><span class="token punctuation">)</span> shape<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;A rectangle with width &quot;</span> <span class="token operator">+</span> rectangle<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; and height &quot;</span> <span class="token operator">+</span> rectangle<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>shape <span class="token keyword">instanceof</span> <span class="token class-name">Square</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Square</span> square <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Square</span><span class="token punctuation">)</span> shape<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;A square with side &quot;</span> <span class="token operator">+</span> square<span class="token punctuation">.</span><span class="token function">getSide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Unknown shape&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码看起来特别繁琐，还容易出错。但如果使用密封类和模式匹配，代码就变得简洁明了：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">describeShape</span><span class="token punctuation">(</span><span class="token class-name">Shape</span> shape<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>shape<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token class-name">Circle</span> c <span class="token operator">-&gt;</span> <span class="token string">&quot;A circle with radius &quot;</span> <span class="token operator">+</span> c<span class="token punctuation">.</span><span class="token function">getRadius</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">Rectangle</span> r <span class="token operator">-&gt;</span> <span class="token string">&quot;A rectangle with width &quot;</span> <span class="token operator">+</span> r<span class="token punctuation">.</span><span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; and height &quot;</span> <span class="token operator">+</span> r<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">Square</span> s <span class="token operator">-&gt;</span> <span class="token string">&quot;A square with side &quot;</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">getSide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>是不是特别清爽？密封类和模式匹配的结合，让代码不仅简洁，还更安全。</p><h3 id="二-与其他特性的协同作战" tabindex="-1"><a class="header-anchor" href="#二-与其他特性的协同作战" aria-hidden="true">#</a> （二）与其他特性的协同作战</h3><p>密封类不仅能和模式匹配配合，还能和访问修饰符、泛型、注解等其他特性一起使用，打造出更强大的代码。</p><p>比如，你可以用自定义注解标记密封类的子类，然后在运行时通过反射读取这些注解信息，实现动态行为。或者，你可以定义一个泛型密封类，用于表示不同类型的数据集合，同时限制只有特定的子类可以继承它。</p><p><strong>小贴士</strong>：密封类和其他特性的结合，就像给你的代码加上了“超级外挂”，让代码更强大、更灵活。</p><h2 id="七、总结与展望" tabindex="-1"><a class="header-anchor" href="#七、总结与展望" aria-hidden="true">#</a> 七、总结与展望</h2><p>Java 16的密封类就像是一把“继承控制钥匙”，能让你在管理类的继承结构时更加得心应手。它不仅能控制继承体系，还能提升代码的安全性和可维护性。在实际项目中，密封类已经展现出了它的强大魅力，无论是在简单的图形绘制系统，还是复杂的游戏开发场景中，都能帮助你更好地组织代码。</p><p>如果你还在用Java 16及以上版本，不妨大胆尝试密封类，相信它会给你带来全新的编程体验。同时，也可以期待Java在未来的版本中，继续完善和扩展与密封类相关的特性。</p><p>最后，如果你在使用密封类时有任何有趣的经验，或者遇到过什么坑，欢迎在评论区分享哦！</p>`,88),c=[t];function o(l,i){return s(),a("div",null,c)}const d=n(p,[["render",o],["__file","09.Java16：密封类.html.vue"]]);export{d as default};
