import{_ as n,V as a,W as s,X as e,Y as t,a1 as i}from"./framework-094145d2.js";const p="/tutorial/imgs/200328/00.jpg",c="/tutorial/imgs/200328/01.jpg",l="/tutorial/imgs/200328/02.jpg",o="/tutorial/imgs/200328/03.jpg",u="/tutorial/imgs/200328/04.jpg",d="/tutorial/imgs/200328/05.jpg",r="/tutorial/imgs/200328/06.jpg",m="/tutorial/imgs/200328/07.jpg",g="/tutorial/imgs/200328/08.jpg",k={},b=t("p",null,"MongoDb文档查询，主要借助find方法来完成，在实际的业务开发中，为了满足各种复杂的业务场景，查询的姿势也是各种各样，本篇则主要介绍基本的使用姿势，不涉及到聚合、排序、分页相关内容",-1),v=i(`<h3 id="_1-查询语法" tabindex="-1"><a class="header-anchor" href="#_1-查询语法" aria-hidden="true">#</a> 1. 查询语法</h3><p>查询语法定义比较简单，复杂的是查询条件的组合；语法定义如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>db.collection.find<span class="token punctuation">(</span>query, projection<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>query: 查询条件，如果不填，则表示查询所有文档</li><li>projection: 查询需要返回的field，如果不填则返回所有的数据</li></ul><p>此外为了mongo-cli的返回结果更加友好，可以在最后添加<code>.pretty()</code>，使输出更友好</p><h3 id="_2-查询所有" tabindex="-1"><a class="header-anchor" href="#_2-查询所有" aria-hidden="true">#</a> 2. 查询所有</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>db.doc_demo.find<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-根据条件精准查询" tabindex="-1"><a class="header-anchor" href="#_3-根据条件精准查询" aria-hidden="true">#</a> 3. 根据条件精准查询</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>db.doc_demo.find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token builtin class-name">:</span> <span class="token string">&#39;一灰灰&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+c+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_4-数字比较查询" tabindex="-1"><a class="header-anchor" href="#_4-数字比较查询" aria-hidden="true">#</a> 4. 数字比较查询</h3><p>对于数字类型的field，可以借助符号<code>$gt</code>(&gt;), <code>$get</code>(&gt;=), <code>$lt</code>(&lt;), <code>$lte</code>(&lt;=), <code>$ne</code>(!=) 来表示具体的操作</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#查询age&gt;18的文档</span>
db.doc_demo.find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;age&#39;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token variable">$gt</span><span class="token builtin class-name">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment"># 查询age&lt;20的文档</span>
db.doc_demo.find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;age&#39;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token variable">$lt</span><span class="token builtin class-name">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+l+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_5-模糊查询" tabindex="-1"><a class="header-anchor" href="#_5-模糊查询" aria-hidden="true">#</a> 5. 模糊查询</h3><p>在mysql中有一个like用于模糊查询，在mongodb中，同样支持基于正则的模糊查询</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查询name以灰灰结尾的文档</span>
db.doc_demo.find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token builtin class-name">:</span> /灰灰$/<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment"># 查询name中包含 lo 字符的文档</span>
db.doc_demo.find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token builtin class-name">:</span> /lo/<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment"># 查询name中包含l, g字符的文档</span>
db.doc_demo.find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token builtin class-name">:</span> /l.g/<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment"># 查询name以一灰灰开头的文档</span>
db.doc_demo.find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token builtin class-name">:</span> /^一灰灰/<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+o+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_6-and条件" tabindex="-1"><a class="header-anchor" href="#_6-and条件" aria-hidden="true">#</a> 6. and条件</h3><p>多个查询条件需要满足时，并不需要什么特殊的操作，只需要在查询bson中，加上多个条件即可</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查询age &gt; 18, 且name为 一灰灰blog的文档</span>
db.doc_demo.find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;age&#39;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token variable">$gt</span><span class="token builtin class-name">:</span> <span class="token number">18</span><span class="token punctuation">}</span>, <span class="token string">&#39;name&#39;</span><span class="token builtin class-name">:</span><span class="token string">&#39;一灰灰blog&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_7-or条件" tabindex="-1"><a class="header-anchor" href="#_7-or条件" aria-hidden="true">#</a> 7. or条件</h3><p>和and不需要额外的操作不同，or条件需要借助 <code>$or</code> 来实现，语法如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>db.collection.find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token variable">$or</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>queyr1, query2<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>实例如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查询age &gt; 18, 且name为 一灰灰blog的文档 或 age &lt; 20 且name为一灰灰的文档</span>
db.doc_demo.find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token variable">$or</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">&#39;age&#39;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token variable">$gt</span><span class="token builtin class-name">:</span> <span class="token number">18</span><span class="token punctuation">}</span>, <span class="token string">&#39;name&#39;</span><span class="token builtin class-name">:</span><span class="token string">&#39;一灰灰blog&#39;</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span><span class="token string">&#39;age&#39;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token variable">$lt</span><span class="token builtin class-name">:</span> <span class="token number">20</span><span class="token punctuation">}</span>, <span class="token string">&#39;name&#39;</span><span class="token builtin class-name">:</span> <span class="token string">&#39;一灰灰&#39;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_8-限制返回成员" tabindex="-1"><a class="header-anchor" href="#_8-限制返回成员" aria-hidden="true">#</a> 8. 限制返回成员</h3><p>有些时候我们只需要获取文档中的部分成员，可以在第二个参数中进行指定，规则如下</p><ul><li><code>成员名: 1</code>： 表示这个成员需要返回</li><li><code>成员名: 0</code>： 表示这个成员不返回</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 表示返回的结果中，除了_id之外，其他的正常返回</span>
db.doc_demo.find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span><span class="token string">&#39;_id&#39;</span><span class="token builtin class-name">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment"># 表示返回的结果中，除了_id之外，就只要name和age</span>
db.doc_demo.find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span>, <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token builtin class-name">:</span> <span class="token number">1</span>, <span class="token string">&#39;age&#39;</span><span class="token builtin class-name">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>请注意，一般在使用了 <code>成员名: 1</code> 来指定返回field时，会自动返回<code>_id</code>，如果不需要，请显示加上 <code>_id: 0</code></p><h3 id="_9-field类型查询" tabindex="-1"><a class="header-anchor" href="#_9-field类型查询" aria-hidden="true">#</a> 9. field类型查询</h3><p>根据field的成员类型来作为查询条件，一般有两种方式，这里只介绍更优雅的，语法如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">{</span>field: <span class="token punctuation">{</span><span class="token variable">$type</span><span class="token builtin class-name">:</span> <span class="token string">&#39;类型&#39;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>举例说明</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>db.doc_demo.find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;skill&#39;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token variable">$type</span><span class="token builtin class-name">:</span> <span class="token string">&#39;array&#39;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+m+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_10-存在查询" tabindex="-1"><a class="header-anchor" href="#_10-存在查询" aria-hidden="true">#</a> 10. 存在查询</h3><p>mongodb的一个特点就是集合的结构不固定，所以某个成员可能存在也可能不存在，所以当我们的查询条件中需要加一个是否存在的判断时，可以如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查询tag存在的文档</span>
db.doc_demo.find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;tag&#39;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token variable">$exists</span>:true<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment"># 查询tag不存在的文档</span>
db.doc_demo.find<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;tag&#39;</span><span class="token builtin class-name">:</span> null<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',45);function h(_,f){return a(),s("div",null,[b,e(" more "),v])}const y=n(k,[["render",h],["__file","11.MongoDb系列教程九-文档-Document-查询基础篇.html.vue"]]);export{y as default};
