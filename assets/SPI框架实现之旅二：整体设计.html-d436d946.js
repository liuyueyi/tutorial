import{_ as e,V as o,W as c,X as l,Y as n,Z as s,$ as t,a1 as p,F as i}from"./framework-094145d2.js";const u={},r=n("h1",{id:"整体设计",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#整体设计","aria-hidden":"true"},"#"),s(" 整体设计")],-1),k=n("blockquote",null,[n("p",null,"上一篇简单的说了一下spi相关的东西， 接下来我们准备开动，本篇博文主要集中在一些术语，使用规范的约定和使用方式")],-1),d=n("h2",{id:"设计思路",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#设计思路","aria-hidden":"true"},"#"),s(" 设计思路")],-1),m=n("p",null,[s("下图围绕 "),n("code",null,"SpiLoader"),s(" 为中心，描述了三个主要的流程：")],-1),v=n("ol",null,[n("li",null,"load所有的spi实现"),n("li",null,"初始化选择器 selector"),n("li",null,"获取spi实现类 （or一个实现类代理）")],-1),b=n("img",{src:"https://static.oschina.net/uploads/img/201705/26185143_ULnL.png",alt:"https://static.oschina.net/uploads/img/201705/26185143_ULnL.png",tabindex:"0",loading:"lazy"},null,-1),h={href:"https://static.oschina.net/uploads/img/201705/26185143_ULnL.png",target:"_blank",rel:"noopener noreferrer"},g=p(`<hr><h2 id="基础类说明" tabindex="-1"><a class="header-anchor" href="#基础类说明" aria-hidden="true">#</a> 基础类说明</h2><blockquote><p>主要介绍一下框架中涉及到的接口和注解，并指出需要注意的点</p></blockquote><h3 id="_1-selector-选择器" tabindex="-1"><a class="header-anchor" href="#_1-selector-选择器" aria-hidden="true">#</a> 1. <code>Selector</code> 选择器</h3><blockquote><p>为了最大程度的支持业务方对spi实现类的选择，我们定义了一个选择器的概念，用于获取spi实现类</p></blockquote><h4 id="接口定义如下" tabindex="-1"><a class="header-anchor" href="#接口定义如下" aria-hidden="true">#</a> 接口定义如下:</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ISelector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">K</span> <span class="token function">selector</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">SpiImplWrapper</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">,</span> <span class="token class-name">T</span> conf<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSpiMatchException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="结合上面的接口定义-我们可以考虑下-选择器应该如何工作" tabindex="-1"><a class="header-anchor" href="#结合上面的接口定义-我们可以考虑下-选择器应该如何工作" aria-hidden="true">#</a> 结合上面的接口定义，我们可以考虑下，选择器应该如何工作？</h4><ul><li>根据传入的条件，从所有的实现类中，找到一个最匹配的实现类返回</li><li>如果查不到，则抛一个异常<code>NoSpiMatchException</code>出去</li></ul><p>所以传入的参数会是两个， 一个是所有的实现类列表<code>map</code>（至于上面为什么用map，后续分析），一个是用于判断的输入条件<code>conf</code></p><h4 id="框架中会提供两种基本的选择器实现" tabindex="-1"><a class="header-anchor" href="#框架中会提供两种基本的选择器实现" aria-hidden="true">#</a> 框架中会提供两种基本的选择器实现，</h4><ul><li><code>DefaultSelector</code> ， 对每个实现类赋予唯一的name，默认选择器则表示根据name来查找实现类</li><li><code>ParamsSelector</code>， 在实现类上加上 <code>@SpiConf</code> 注解，定义其中的 <code>params</code>，当传入的参数(<code>conf</code>)， 能完全匹配定义的params，表示这个实现类就是你所需要的</li></ul><h4 id="自定义实现" tabindex="-1"><a class="header-anchor" href="#自定义实现" aria-hidden="true">#</a> 自定义实现</h4><p>自定义实现比较简单，实现上面的接口即可</p><h3 id="_2-spi-注解" tabindex="-1"><a class="header-anchor" href="#_2-spi-注解" aria-hidden="true">#</a> 2. <code>Spi</code> 注解</h3><blockquote><p>要求所有的spi接口，都必须有这个注解；</p></blockquote><h4 id="定义如下" tabindex="-1"><a class="header-anchor" href="#定义如下" aria-hidden="true">#</a> 定义如下</h4><p>主要是有一个参数，用于指定是选择器类型，定义spi接口的默认选择器，</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Spi</span> <span class="token punctuation">{</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">ISelector</span><span class="token punctuation">&gt;</span></span> <span class="token function">selector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">DefaultSelector</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="说明" tabindex="-1"><a class="header-anchor" href="#说明" aria-hidden="true">#</a> 说明</h4><p>在上一篇《SPI框架实现之旅一》中，使用jdk的spi方式中，并没有使用注解依然可以正常工作，我们这里定义这个注解且要求必需有，出于下面几个考虑</p><ul><li>醒目，告诉开发者，这个接口是声明的spi接口， 使用的时候注意下</li><li>加入选择器参数，方便用户扩展自己的选择方式</li></ul><h3 id="_3-spiadaptive-注解" tabindex="-1"><a class="header-anchor" href="#_3-spiadaptive-注解" aria-hidden="true">#</a> 3. <code>SpiAdaptive</code> 注解</h3><blockquote><p>对需要自适应的场景，为了满足一个spi接口，应用多重不同的选择器场景，可以加上这个注解； 如果不加这个注解，则表示采用默认的选择器来自适应</p></blockquote><h4 id="接口说明" tabindex="-1"><a class="header-anchor" href="#接口说明" aria-hidden="true">#</a> 接口说明</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * SPI 自适应注解, 表示该方法会用到spi实现
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">/&gt;</span></span>
 * Created by yihui on 2017/5/24.
 */</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">SpiAdaptive</span> <span class="token punctuation">{</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">ISelector</span><span class="token punctuation">&gt;</span></span> <span class="token function">selector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token class-name">DefaultSelector</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="说明-1" tabindex="-1"><a class="header-anchor" href="#说明-1" aria-hidden="true">#</a> 说明</h4><p>这个注解内容和 @Spi 基本上一模一样，唯一的区别是一个放在类上，一个放在方法上，那么为什么这么考虑？</p><ul><li><code>@Spi</code> 注解放在类上，更多的表名这个接口是我们定义的一个SPI接口，但是使用方式可以有两种（静态 + 动态确认）</li><li><code>@SpiAdaptive</code> 只能在自适应的场景下使用，用于额外指定spi接口中某个方法的选择器 （如果一个spi接口全部只需要一个选择器即可，那么可以不使用这个注解）</li></ul><p>如下面的这个例子，print方法和 echo方法其实是等价的，都是采用 <code>DefaultSelector</code> 来确认具体的实现类；而 <code>write</code> 和 <code>pp</code> 方法则是采用 <code>ParamsSelector</code> 选择器;</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Created by yihui on 2017/5/25.
 */</span>
<span class="token annotation punctuation">@Spi</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ICode</span> <span class="token punctuation">{</span>

    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> contet<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token annotation punctuation">@SpiAdaptive</span>
    <span class="token keyword">void</span> <span class="token function">echo</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token annotation punctuation">@SpiAdaptive</span><span class="token punctuation">(</span>selector <span class="token operator">=</span> <span class="token class-name">ParamsSelector</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">String</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token annotation punctuation">@SpiAdaptive</span><span class="token punctuation">(</span>selector <span class="token operator">=</span> <span class="token class-name">ParamsSelector</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">void</span> <span class="token function">pp</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">String</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-spiconf-注解" tabindex="-1"><a class="header-anchor" href="#_4-spiconf-注解" aria-hidden="true">#</a> 4. <code>SpiConf</code> 注解</h3><blockquote><p>这个主键主要是用在实现类上（或实现类的方法上），里面存储一些选择条件，通常是和<code>Selector</code>搭配使用</p></blockquote><h4 id="定义如下-1" tabindex="-1"><a class="header-anchor" href="#定义如下-1" aria-hidden="true">#</a> 定义如下</h4><p>定义了三个字段:</p><ul><li>name 唯一标识，用于 <code>DefaultSelector</code>；</li><li>params 参数条件， 用于 <code>ParamsSelector</code>；</li><li>order : 优先级， 主要是为了解决多个实现类都满足选择条件时， 应该选择哪一个 （谈到这里就有个想法， 通过一个参数，来选择是否让满足条件的全部返回）</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">,</span> <span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">SpiConf</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 唯一标识
     *
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>


    <span class="token doc-comment comment">/**
     * 参数过滤, 单独一个元素,表示参数必须包含; 用英文分号,左边为参数名,右边为参数值,表示参数的值必须是右边的
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">/&gt;</span></span>
     * 形如  <span class="token punctuation">{</span>&quot;a&quot;, &quot;a:12&quot;, &quot;b:TAG&quot;<span class="token punctuation">}</span>
     *
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">params</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>


    <span class="token doc-comment comment">/**
     * 排序, 越小优先级越高
     *
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">int</span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="说明-2" tabindex="-1"><a class="header-anchor" href="#说明-2" aria-hidden="true">#</a> 说明</h4><p><code>SpiConf</code> 注解可以修饰类，也可以修饰方法，因此当一个实现类中，类和方法都有这个注解时， 怎么处理 ？</p><p>以下面的这个测试类进行说明</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Created by yihui on 2017/5/25.
 */</span>
<span class="token annotation punctuation">@SpiConf</span><span class="token punctuation">(</span>params <span class="token operator">=</span> <span class="token string">&quot;code&quot;</span><span class="token punctuation">,</span> order <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsoleCode</span> <span class="token keyword">implements</span> <span class="token class-name">ICode</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> contet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;console print:---&gt;&quot;</span> <span class="token operator">+</span> contet<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token doc-comment comment">/**
     * 显示指定了name, 因此可以直接通过 consoleEcho 来确定调用本实现方法
     * <span class="token keyword">@param</span> <span class="token parameter">name</span>
     * <span class="token keyword">@param</span> <span class="token parameter">content</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@SpiConf</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;consoleEcho&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">echo</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> content<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;console echo:----&gt;&quot;</span> <span class="token operator">+</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token doc-comment comment">/**
     * 实际的优先级取 方法 和类上的最高优先级, 实际为1； 
     * \`ParamsSelector\`选择器时， 执行该方法的条件等同于  \`<span class="token punctuation">{</span>&quot;code&quot;, &quot;type:console&quot;<span class="token punctuation">}</span>\`
     * <span class="token keyword">@param</span> <span class="token parameter">context</span>
     * <span class="token keyword">@param</span> <span class="token parameter">content</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@SpiConf</span><span class="token punctuation">(</span>params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;type:console&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> order <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">String</span> content<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;console write:----&gt;&quot;</span> <span class="token operator">+</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在设计中，遵循下面几个原则：</p><ul><li>类上的<code>SpiConf</code>注解， 默认适用与类中的所有方法</li><li>方法上有<code>SpiConf</code>注解，采取下面的规则 <ul><li>方法注解声明name时，两个会同时生效，即想调用上面的echo方法， 通过传入 <code>ConsoleCode</code>（类注解不显示赋值时，采用类名代替） 和 <code>consoleEcho</code> 等价</li><li>方法注解未声明name时，只能通过类注解上定义的name（or默认的类名）来选择</li><li>order，取最高优先级，如上面的 <code>write</code> 方法的优先级是 1; 当未显示定义order时，以定义的为准</li><li>params: 取并集，即要求类上 + 方法上的条件都满足</li></ul></li></ul><h2 id="spi加载器" tabindex="-1"><a class="header-anchor" href="#spi加载器" aria-hidden="true">#</a> SPI加载器</h2><blockquote><p>spi加载器的主要业务逻辑集中在 <code>SpiLoader</code> 类中，包含通过spi接口，获取所有的实现类； 获取spi接口对应的选择器 （包括类对应的选择器， 方法对应的选择器）； 返回Spi接口实现类（静态确认的实现类，自适应的代理类）</p></blockquote><p>从上面的简述，基本上可以看出这个类划分为三个功能点， 下面将逐一说明，本篇博文主要集中在逻辑的设计层，至于优化（如懒加载，缓存优化等） 放置下一篇博文单独叙述</p><h3 id="_1-加载spi实现类" tabindex="-1"><a class="header-anchor" href="#_1-加载spi实现类" aria-hidden="true">#</a> 1. 加载spi实现类</h3><blockquote><p>这一块比较简单，我们直接利用了jdk的 <code>ServiceLoader</code> 来根据接口，获取所有的实现类；因此我们的spi实现，需要满足jdk定义的这一套规范</p></blockquote><p>具体的代码业务逻辑非常简单，大致流程如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> spiInterfaceType<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;common cannot be null...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>spiInterfaceType<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;common class:&quot;</span> <span class="token operator">+</span> spiInterfaceType <span class="token operator">+</span> <span class="token string">&quot; must be interface!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">withSpiAnnotation</span><span class="token punctuation">(</span>spiInterfaceType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;common class:&quot;</span> <span class="token operator">+</span> spiInterfaceType <span class="token operator">+</span> <span class="token string">&quot; must have the annotation of @Spi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
   
<span class="token class-name">ServiceLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> serviceLoader <span class="token operator">=</span> <span class="token class-name">ServiceLoader</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>spiInterfaceType<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">T</span> spiImpl<span class="token operator">:</span> serviceLoader<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// xxx</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="注意" tabindex="-1"><a class="header-anchor" href="#注意" aria-hidden="true">#</a> 注意</h4><ul><li>因为使用了jdk的标准，因此每定义一个spi接口，必须在 <code>META_INF.services</code> 下新建一个文件， 文件名为包含包路径的spi接口名， 内部为包含包路径的实现类名</li><li>每个spi接口，要求必须有 <code>@Spi</code> 注解</li><li>Spi接口必须是 <code>interface</code> 类型， 不支持抽象类和类的方式</li></ul><h4 id="拓展" tabindex="-1"><a class="header-anchor" href="#拓展" aria-hidden="true">#</a> 拓展</h4><p>虽然这里直接使用了spi的规范，我们其实完全可以自己定义标准的，只要能将这个接口的所有实现类找到， 怎么实现都可以由你定义</p><p>如使用spring框架后，可以考虑通过 <code>applicationContext.getBeansOfAnnotaion(xxx )</code> 来获取所有的特定注解的bean，这样就可以不需要自己新建一个文件，来存储spi接口和其实现类的映射关系了</p><h4 id="构建spi实现的关系表" tabindex="-1"><a class="header-anchor" href="#构建spi实现的关系表" aria-hidden="true">#</a> 构建spi实现的关系表</h4><p>上面获取了spi实现类，显然我们的目标并不局限于简单的获取实现类，在获取实现类之后，还需要解析其中的 <code>@SpiConf</code> 注解信息，用于表示要选择这个实现，必须满足什么样的条件</p><p><code>SpiImplWrapper</code> : spi实现类，以及定义的各种条件的封装类</p><p>注解的解析过程流程如下:</p><ul><li>name: 注解定义时，采用定义的值； 否则采用简单类名 （因此一个系统中不允许两个实现类同名的情况）</li><li>order： 优先级， 注解定义时，采用定义的值；未定义时采用默认；</li><li>params: 参数约束条件， 会取类上和方法上的并集（原则上要求类上的约束和方法上的约束不能冲突）</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SpiImplWrapper</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> spiServiceList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 解析注解</span>
spiConf <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">SpiConf</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>spiConf <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 没有添加注解时， 采用默认的方案</span>
      implName <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      implOrder <span class="token operator">=</span> <span class="token class-name">SpiImplWrapper</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_ORDER</span><span class="token punctuation">;</span>

      <span class="token comment">// 参数选择器时, 要求spi实现类必须有 @SpiConf 注解, 否则选择器无法获取校验条件参数</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>currentSelector<span class="token punctuation">.</span><span class="token function">getSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">ParamsSelector</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;spiImpl must contain annotation @SpiConf!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      map <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      implName <span class="token operator">=</span> spiConf<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>implName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          implName <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      implOrder <span class="token operator">=</span> spiConf<span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token class-name">SpiImplWrapper</span><span class="token punctuation">.</span><span class="token constant">DEFAULT_ORDER</span> <span class="token operator">:</span> spiConf<span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

      map <span class="token operator">=</span> <span class="token function">parseParms</span><span class="token punctuation">(</span>spiConf<span class="token punctuation">.</span><span class="token function">params</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 添加一个类级别的封装类</span>
  spiServiceList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SpiImplWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> implOrder<span class="token punctuation">,</span> implName<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  
  <span class="token comment">// ------------</span>
  <span class="token comment">// 解析参数的方法</span>
  
   <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">parseParms</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>params<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>


        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>params<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strs<span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> param <span class="token operator">:</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            strs <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>param<span class="token punctuation">,</span> <span class="token string">&quot;:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>strs<span class="token punctuation">.</span>length <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> strs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>strs<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> map<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-初始化选择器" tabindex="-1"><a class="header-anchor" href="#_2-初始化选择器" aria-hidden="true">#</a> 2. 初始化选择器</h3><blockquote><p>我们的选择器会区分为两类，一个是类上定义的选择器， 一个是方法上定义的选择器； 在自适应的使用方式中，方法上定义的优先级 &gt; 类上定义</p></blockquote><p>简单来讲，初始化选择器，就是扫一遍SPI接口中的注解，实例化选择器后，缓存住对应的结果, 实现如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token doc-comment comment">/**
* 选择器, 根据条件, 选择具体的 SpiImpl;
*/</span>
<span class="token keyword">private</span> <span class="token class-name">SelectorWrapper</span> currentSelector<span class="token punctuation">;</span>


<span class="token doc-comment comment">/**
* 自适应时, 方法对应的选择器
*/</span>
<span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">SelectorWrapper</span><span class="token punctuation">&gt;</span></span> currentMethodSelector<span class="token punctuation">;</span>


<span class="token doc-comment comment">/**
* 每一个 SpiLoader 中, 每种类型的选择器, 只保存一个实例
* 因此可以在选择器中, 如<span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">ParamsSelector</span></span><span class="token punctuation">}</span> 对spiImplMap进行处理并缓存结果
*/</span>
<span class="token keyword">private</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">,</span> <span class="token class-name">SelectorWrapper</span><span class="token punctuation">&gt;</span></span> selectorInstanceCacheMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token class-name">Spi</span> ano <span class="token operator">=</span> spiInterfaceType<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Spi</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>ano <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       currentSelector <span class="token operator">=</span> <span class="token function">initSelector</span><span class="token punctuation">(</span><span class="token class-name">DefaultSelector</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
       currentSelector <span class="token operator">=</span> <span class="token function">initSelector</span><span class="token punctuation">(</span>ano<span class="token punctuation">.</span><span class="token function">selector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>


   <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>spiInterfaceType<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   currentMethodSelector <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token class-name">SelectorWrapper</span> temp<span class="token punctuation">;</span>
   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span><span class="token class-name">SpiAdaptive</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">continue</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>

       temp <span class="token operator">=</span> <span class="token function">initSelector</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">SpiAdaptive</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">selector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">continue</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>

       currentMethodSelector<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">private</span> <span class="token class-name">SelectorWrapper</span> <span class="token function">initSelector</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">ISelector</span><span class="token punctuation">&gt;</span></span> clz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token comment">// 优先从选择器缓存中获取类型对应的选择器</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>selectorInstanceCacheMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>clz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">return</span> selectorInstanceCacheMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>clz<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token keyword">try</span> <span class="token punctuation">{</span>
       <span class="token class-name">ISelector</span> selector <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token class-name">Class</span> paramClz <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

       <span class="token class-name">Type</span><span class="token punctuation">[</span><span class="token punctuation">]</span> types <span class="token operator">=</span> clz<span class="token punctuation">.</span><span class="token function">getGenericInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Type</span> t <span class="token operator">:</span> types<span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token keyword">instanceof</span> <span class="token class-name">ParameterizedType</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
               paramClz <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ParameterizedType</span><span class="token punctuation">)</span> t<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getActualTypeArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
               <span class="token keyword">break</span><span class="token punctuation">;</span>
           <span class="token punctuation">}</span>
       <span class="token punctuation">}</span>

       <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>paramClz <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token class-name">SelectorWrapper</span> wrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SelectorWrapper</span><span class="token punctuation">(</span>selector<span class="token punctuation">,</span> paramClz<span class="token punctuation">)</span><span class="token punctuation">;</span>
       selectorInstanceCacheMap<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>clz<span class="token punctuation">,</span> wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">return</span> wrapper<span class="token punctuation">;</span>
   <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;illegal selector defined! yous:&quot;</span> <span class="token operator">+</span> clz<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="说明-3" tabindex="-1"><a class="header-anchor" href="#说明-3" aria-hidden="true">#</a> 说明</h4><ol><li><p><code>SeectorWrapper</code> 选择器封装类</p><p>这里我们在获取选择器时，特意定义了一个封装类，其中包含具体的选择器对象，以及所匹配的参数类型，因此可以在下一步通过选择器获取实现类时，保证传入的参数类型合法</p></li><li><p><code>private SelectorWrapper initSelector(Class&lt;? extends ISelector&gt; clz)</code> 具体的实例化选择器的方法</p><p>从实现来看，优先从选择器缓存中获取选择器对象，这样的目的是保证一个spi接口，每种类型的选择器只有一个实例；因此在自定义选择器中，你完全可以做一些选择判断的缓存逻辑，如 <code>ParamsSelector</code> 中的spi实现类的有序缓存列表</p></li><li><p><code>currentSelector</code> , <code>currentMethodSelector</code>, <code>selectorInstanceCacheMap</code></p><pre><code> currentSelector:   对应的是类选择器，每个SPI接口必然会有一个，作为打底的选择器
 currentMethodSelector:  方法选择器映射关系表，key为方法名，value为该方法对应的选择器； 所以spi接口中，不支持重载
 selectorInstanceCacheMap: spi接口所有定义的选择器映射关系表，key为选择器类型，value是实例；用于保障每个spi接口中选择器只会有一个实例
</code></pre></li></ol><h3 id="_3-获取实现类" tabindex="-1"><a class="header-anchor" href="#_3-获取实现类" aria-hidden="true">#</a> 3. 获取实现类</h3><blockquote><p>对使用者而言，最关注的就是这个接口，这里会返回我们需要的实现类（or代理）；内部的逻辑也比较清楚，首先确定选择器，然后通过选择器便利所有的实现类，把满足条件的返回即可</p></blockquote><p>从上面的描述可以看到，主要分为两步</p><ol><li>获取选择器</li><li>根据选择器，遍历所有的实现类，找出匹配的返回</li></ol><h4 id="获取选择器" tabindex="-1"><a class="header-anchor" href="#获取选择器" aria-hidden="true">#</a> 获取选择器</h4><p>初始化选择器之后，我们会有 <code>currentSelector</code> , <code>currentMethodSelector</code> 两个缓存</p><ul><li>静态确定spi实现时，直接用 <code>currentSelector</code> 即可 （spi接口中所有方法都公用类定义选择器）</li><li>动态适配时， 根据方法名在 <code>currentMethodSelector</code> 中获取选择器，如果没有，则表示该方法没有<code>@SpiAdaptive</code>注解，直接使用类的选择器 <code>currentMethodSelector</code> 即可</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 动态适配时，获取方法对应对应的selector实现逻辑</span>
<span class="token class-name">SelectorWrapper</span> selector <span class="token operator">=</span> currentMethodSelector<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>selector <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 自适应方法上未定义选择器, 则默认继承类的</span>
  selector <span class="token operator">=</span> currentSelector<span class="token punctuation">;</span>
  currentMethodSelector<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>methodName<span class="token punctuation">,</span> selector<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>selector<span class="token punctuation">.</span><span class="token function">getConditionType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>conf<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 选择器类型校验</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>conf <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;conf spiInterfaceType should be sub class of [&quot;</span> <span class="token operator">+</span> currentSelector<span class="token punctuation">.</span><span class="token function">getConditionType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;] but yours:&quot;</span> <span class="token operator">+</span> conf<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

 <span class="token comment">// 参数不匹配时，且传入的参数为String类型， 则尝试使用默认选择器进行兼容（不建议在实现时，出现这种场景）</span>
  selector <span class="token operator">=</span> <span class="token constant">DEFAULT_SELECTOR</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="选择实现类" tabindex="-1"><a class="header-anchor" href="#选择实现类" aria-hidden="true">#</a> 选择实现类</h4><p>这个的主要逻辑就是遍历所有的实现类，判断是否满足选择器的条件，将第一个找到的返回即可，所有的业务逻辑都在 <code>ISelector</code> 中实现，如下面给出的默认选择器，根据name来获取实现类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 默认的根据name 获取具体的实现类
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">/&gt;</span></span>
 * Created by yihui on 2017/5/24.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultSelector</span> <span class="token keyword">implements</span> <span class="token class-name">ISelector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">K</span> <span class="token function">selector</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">SpiImplWrapper</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSpiMatchException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;spiName should not be empty!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;no impl spi!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>


        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSpiMatchException</span><span class="token punctuation">(</span><span class="token string">&quot;no spiImpl match the name you choose! your choose is: &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSpiImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="流程说明" tabindex="-1"><a class="header-anchor" href="#流程说明" aria-hidden="true">#</a> 流程说明</h2><blockquote><p>上面主要就各个点单独的进行了说明，看起来可能比较分散，看完之后可能没有一个清晰的流程，这里就整个实现的流程顺一遍，主要从使用者的角度出发，当定义了一个SPI接口后，到获取spi实现的过程中，上面的这些步骤是怎样串在一起的</p></blockquote><h3 id="流程图" tabindex="-1"><a class="header-anchor" href="#流程图" aria-hidden="true">#</a> 流程图</h3><p>先拿简单的静态获取SPI实现流程说明（动态的其实差不多，具体的差异下一篇说明），先看下这种用法的使用姿势</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Spi</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPrint</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilePrint</span> <span class="token keyword">implements</span> <span class="token class-name">IPrint</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;file print: &quot;</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConsolePrint</span> <span class="token keyword">implements</span> <span class="token class-name">IPrint</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;console print: &quot;</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSpiMatchException</span> <span class="token punctuation">{</span>
   <span class="token class-name">SpiLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">IPrint</span><span class="token punctuation">&gt;</span></span> spiLoader <span class="token operator">=</span> <span class="token class-name">SpiLoader</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">IPrint</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token class-name">IPrint</span> print <span class="token operator">=</span> spiLoader<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token string">&quot;ConsolePrint&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   print<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;console----&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="spiloader-iprint-spiloader-spiloader-load-iprint-class" tabindex="-1"><a class="header-anchor" href="#spiloader-iprint-spiloader-spiloader-load-iprint-class" aria-hidden="true">#</a> <code>SpiLoader&lt;IPrint&gt; spiLoader = SpiLoader.load(IPrint.class);</code></h4><p>这行代码触发的action 主要是初始化所有的选择器, 如下图</p><ul><li>首先从缓存中查</li><li>是否已经初始化过了有则直接返回；</li><li>缓存中没有，则进入new一个新的对象出来 <ul><li>解析类上注解 <code>@Spi</code>，初始化 <code>currentSelector</code></li><li>解析所有方法的注解 <code>@SpiAdaptive</code> ， 初始化 <code>currentMethodSelector</code></li></ul></li><li>塞入缓存，并返回</li></ul>`,87),f=n("img",{src:"https://static.oschina.net/uploads/img/201705/27140821_19ee.png",alt:"https://static.oschina.net/uploads/img/201705/27140821_19ee.png",tabindex:"0",loading:"lazy"},null,-1),y={href:"https://static.oschina.net/uploads/img/201705/27140821_19ee.png",target:"_blank",rel:"noopener noreferrer"},S=p('<h4 id="iprint-print-spiloader-getservice-consoleprint" tabindex="-1"><a class="header-anchor" href="#iprint-print-spiloader-getservice-consoleprint" aria-hidden="true">#</a> <code>IPrint print = spiLoader.getService(&quot;ConsolePrint&quot;);</code></h4><p>根据name获取实现类，具体流程如下</p><ul><li>判断是否加载过所有实现类 <code>spiImplClassCacheMap</code></li><li>没有加载，则重新加载所有的实现类 <ul><li>通过jdk的 <code>ServiceLoader.load()</code> 方法获取所有的实现类</li><li>遍历实现类，根据 <code>@SpiConf</code> 注解初始化参数，封装 <code>SpiImplWrapper </code>对象</li><li>保存封装的 <code>SpiImplWrapper</code>对象到缓存</li></ul></li><li>执行 <code>currentSelector.select()</code> 方法，获取匹配的实现类</li></ul>',3),w=n("img",{src:"https://static.oschina.net/uploads/img/201705/27150620_EOUL.png",alt:"https://static.oschina.net/uploads/img/201705/27150620_EOUL.png",tabindex:"0",loading:"lazy"},null,-1),_={href:"https://static.oschina.net/uploads/img/201705/27150620_EOUL.png",target:"_blank",rel:"noopener noreferrer"},E=n("h2",{id:"其他",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#其他","aria-hidden":"true"},"#"),s(" 其他")],-1),x=n("h3",{id:"博客系列链接",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#博客系列链接","aria-hidden":"true"},"#"),s(" 博客系列链接：")],-1),I={href:"/hexblog/2018/05/30/SPI%E6%A1%86%E6%9E%B6%E5%AE%9E%E7%8E%B0%E4%B9%8B%E6%97%85%E5%9B%9B%EF%BC%9A%E4%BD%BF%E7%94%A8%E6%B5%8B%E8%AF%95/",target:"_blank",rel:"noopener noreferrer"},q={href:"/hexblog/2018/05/30/SPI%E6%A1%86%E6%9E%B6%E5%AE%9E%E7%8E%B0%E4%B9%8B%E6%97%85%E4%B8%89%EF%BC%9A%E5%AE%9E%E7%8E%B0%E8%AF%B4%E6%98%8E/u",target:"_blank",rel:"noopener noreferrer"},C={href:"/hexblog/2018/05/30/SPI%E6%A1%86%E6%9E%B6%E5%AE%9E%E7%8E%B0%E4%B9%8B%E6%97%85%E4%BA%8C%EF%BC%9A%E6%95%B4%E4%BD%93%E8%AE%BE%E8%AE%A1/",target:"_blank",rel:"noopener noreferrer"},A={href:"/hexblog/2017/05/29/SPI%E6%A1%86%E6%9E%B6%E5%AE%9E%E7%8E%B0%E4%B9%8B%E6%97%85%E4%B8%80%EF%BC%9A%E8%83%8C%E6%99%AF%E4%BB%8B%E7%BB%8D/",target:"_blank",rel:"noopener noreferrer"},P=n("h3",{id:"项目-quickalarm",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#项目-quickalarm","aria-hidden":"true"},"#"),s(" 项目: QuickAlarm")],-1),B={href:"https://github.com/liuyueyi/quick-spi",target:"_blank",rel:"noopener noreferrer"},M={href:"https://liuyueyi.github.io/hexblog/",target:"_blank",rel:"noopener noreferrer"},T={id:"个人博客-z-blog",tabindex:"-1"},j=n("a",{class:"header-anchor",href:"#个人博客-z-blog","aria-hidden":"true"},"#",-1),L={href:"https://liuyueyi.github.io/hexblog",target:"_blank",rel:"noopener noreferrer"},N=n("p",null,"基于hexo + github pages搭建的个人博客，记录所有学习和工作中的博文，欢迎大家前去逛逛",-1),z=n("h3",{id:"声明",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#声明","aria-hidden":"true"},"#"),s(" 声明")],-1),D={href:"https://weibo.com/p/1005052169825577/home",target:"_blank",rel:"noopener noreferrer"},W=n("h3",{id:"扫描关注",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#扫描关注","aria-hidden":"true"},"#"),s(" 扫描关注")],-1),O=n("figure",null,[n("img",{src:"https://s17.mogucdn.com/mlcdn/c45406/180209_74fic633aebgh5dgfhid2fiiggc99_1220x480.png",alt:"QrCode",tabindex:"0",loading:"lazy"}),n("figcaption",null,"QrCode")],-1);function U(F,R){const a=i("ExternalLinkIcon");return o(),c("div",null,[r,k,l("more"),d,m,v,n("figure",null,[b,n("figcaption",null,[n("a",h,[s("https://static.oschina.net/uploads/img/201705/26185143_ULnL.png"),t(a)])])]),g,n("figure",null,[f,n("figcaption",null,[n("a",y,[s("https://static.oschina.net/uploads/img/201705/27140821_19ee.png"),t(a)])])]),S,n("figure",null,[w,n("figcaption",null,[n("a",_,[s("https://static.oschina.net/uploads/img/201705/27150620_EOUL.png"),t(a)])])]),E,x,n("ul",null,[n("li",null,[n("a",I,[s("SPI框架实现之旅四：使用测试"),t(a)])]),n("li",null,[n("a",q,[s("SPI框架实现之旅三：实现说明"),t(a)])]),n("li",null,[n("a",C,[s("SPI框架实现之旅二：整体设计"),t(a)])]),n("li",null,[n("a",A,[s("SPI框架实现之旅一：背景介绍"),t(a)])])]),P,n("ul",null,[n("li",null,[s("项目地址： "),n("a",B,[s("Quick-SPI"),t(a)])]),n("li",null,[s("博客地址： "),n("a",M,[s("小灰灰Blog"),t(a)])])]),n("h3",T,[j,s(" 个人博客： "),n("a",L,[s("Z+|blog"),t(a)])]),N,z,n("p",null,[s("尽信书则不如，已上内容，纯属一家之言，因本人能力一般，见识有限，如发现bug或者有更好的建议，随时欢迎批评指正，我的微博地址: "),n("a",D,[s("小灰灰Blog"),t(a)])]),W,O])}const H=e(u,[["render",U],["__file","SPI框架实现之旅二：整体设计.html.vue"]]);export{H as default};
