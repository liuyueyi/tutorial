import{_ as p,V as o,W as c,X as i,Y as n,Z as s,$ as e,a1 as t,F as l}from"./framework-094145d2.js";const u={},r=n("p",null,"前几天有位小伙伴问了一个很有意思的问题，使用JPA保存数据时，即便我指定了主键id，但是新插入的数据主键却是mysql自增的id；那么是什么原因导致的呢？又可以如何解决呢?",-1),d=n("p",null,"本文将介绍一下如何使用JPA的AUTO保存策略来指定数据库主键id",-1),k=n("h2",{id:"i-环境准备",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#i-环境准备","aria-hidden":"true"},"#"),s(" I. 环境准备")],-1),m={href:"http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247484246&idx=1&sn=dc53bcaaca00b955eeda0e54c1dcfbed&chksm=fce718facb9091ecb5d9a76b039c5f52fbddb23aa383991aa633c0daa00752dbcb4916393730&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},v=t(`<p>下面简单的看一下后续的代码中，需要的配置 （我们使用的是mysql数据库）</p><h3 id="_1-表准备" tabindex="-1"><a class="header-anchor" href="#_1-表准备" aria-hidden="true">#</a> 1. 表准备</h3><p>沿用前一篇的表，结构如下</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>money<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;用户名&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>money<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;0&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;钱&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>is_deleted<span class="token punctuation">\`</span></span> <span class="token keyword">tinyint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>create_at<span class="token punctuation">\`</span></span> <span class="token keyword">timestamp</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;创建时间&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>update_at<span class="token punctuation">\`</span></span> <span class="token keyword">timestamp</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;更新时间&#39;</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-项目配置" tabindex="-1"><a class="header-anchor" href="#_2-项目配置" aria-hidden="true">#</a> 2. 项目配置</h3><p>配置信息，与之前有一点点区别，我们新增了更详细的日志打印；本篇主要目标集中在添加记录的使用姿势，对于配置说明，后面单独进行说明</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment">## DataSource</span>
<span class="token key attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://127.0.0.1:3306/story?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false</span>
<span class="token key attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.jdbc.Driver</span>
<span class="token key attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
<span class="token key attr-name">spring.datasource.password</span><span class="token punctuation">=</span>
<span class="token comment">## jpa相关配置</span>
<span class="token key attr-name">spring.jpa.database</span><span class="token punctuation">=</span><span class="token value attr-value">MYSQL</span>
<span class="token key attr-name">spring.jpa.hibernate.ddl-auto</span><span class="token punctuation">=</span><span class="token value attr-value">none</span>
<span class="token key attr-name">spring.jpa.show-sql</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
<span class="token key attr-name">spring.jackson.serialization.indent_output</span><span class="token punctuation">=</span><span class="token value attr-value">true</span>
<span class="token key attr-name">spring.jpa.hibernate.naming.physical-strategy</span><span class="token punctuation">=</span><span class="token value attr-value">org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-insert教程" tabindex="-1"><a class="header-anchor" href="#ii-insert教程" aria-hidden="true">#</a> II. Insert教程</h2><p>首先简单的看一下，我们一般使用默认的数据库自增生成主键的使用方式，以便后面的自定义主键生成策略的对比</p>`,9),b={href:"http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247484247&idx=1&sn=a58a45f11c0758045b07b1d8fcf0873a&chksm=fce718fbcb9091ed779b0e472c7c9e923c9874c3ba796bd6a05af526bb0faef8a8bba7fee8fc&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},y=t(`<h3 id="_1-自增主键" tabindex="-1"><a class="header-anchor" href="#_1-自增主键" aria-hidden="true">#</a> 1. 自增主键</h3><p>首先我们需要定义PO，与数据库中的表绑定起来</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@DynamicUpdate</span>
<span class="token annotation punctuation">@DynamicInsert</span>
<span class="token annotation punctuation">@Entity</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;money&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MoneyPO</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Id</span>
    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">IDENTITY</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;money&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> money<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;is_deleted&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Byte</span> isDeleted<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;create_at&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@CreatedDate</span>
    <span class="token keyword">private</span> <span class="token class-name">Timestamp</span> createAt<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;update_at&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@CreatedDate</span>
    <span class="token keyword">private</span> <span class="token class-name">Timestamp</span> updateAt<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意上面的主键生成策略用的是 <code>GenerationType.IDENTITY</code>，配合mysql的使用就是利用数据库的自增来生成主键id</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 新增数据
 * Created by @author yihui in 11:00 19/6/12.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MoneyCreateRepositoryV2</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MoneyPO</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来保存数据就很简单了</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addWithId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">MoneyPO</span> po1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MoneyPO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    po1<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    po1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;jpa 一灰灰 1x&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    po1<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span><span class="token number">2200L</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    po1<span class="token punctuation">.</span><span class="token function">setIsDeleted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">MoneyPO</span> r1 <span class="token operator">=</span> moneyCreateRepositoryV2<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>po1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;after insert res: &quot;</span> <span class="token operator">+</span> r1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>强烈建议实际的体验一下上面的代码执行</p><p>首次执行确保数据库中不存在id为20的记录，虽然我们的PO对象中，指定了id为20，但是执行完毕之后，新增的数据id却不是20</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Hibernate: select moneypo0_.id as id1_0_0_, moneypo0_.create_at as create_a2_0_0_, moneypo0_.is_deleted as is_delet3_0_0_, moneypo0_.money as money4_0_0_, moneypo0_.name as name5_0_0_, moneypo0_.update_at as update_a6_0_0_ from money moneypo0_ where moneypo0_.id=?
Hibernate: insert into money (is_deleted, money, name) values (?, ?, ?)
after insert res: MoneyPO(id=104, name=jpa 一灰灰 1x, money=2208, isDeleted=0, createAt=null, updateAt=null)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面是执行的sql日志，注意插入的sql，是没有指定id的，所以新增的记录的id就会利用mysql的自增策略</p><p>当我们的db中存在id为20的记录时，再次执行，查看日志发现实际执行的是更新数据</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Hibernate: select moneypo0_.id as id1_0_0_, moneypo0_.create_at as create_a2_0_0_, moneypo0_.is_deleted as is_delet3_0_0_, moneypo0_.money as money4_0_0_, moneypo0_.name as name5_0_0_, moneypo0_.update_at as update_a6_0_0_ from money moneypo0_ where moneypo0_.id=?
Hibernate: update money set create_at=?, money=?, name=?, update_at=? where id=?
after insert res: MoneyPO(id=20, name=jpa 一灰灰 1x, money=2234, isDeleted=0, createAt=null, updateAt=null)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>大胆猜测，save的执行过程逻辑如</strong></p><ul><li>首先根据id到数据库中查询对应的数据</li><li>如果数据不存在，则新增（插入sql不指定id）</li><li>如果数据存在，则判断是否有变更，以确定是否需要更新</li></ul><h3 id="_2-指定id" tabindex="-1"><a class="header-anchor" href="#_2-指定id" aria-hidden="true">#</a> 2. 指定id</h3><p>那么问题来了，如果我希望当我的po中指定了数据库id时，db中没有这条记录时，就插入id为指定值的记录；如果存在记录，则更新</p><p>要实现上面这个功能，自定义主键id，那么我们就需要修改一下主键的生成策略了，官方提供了四种</p><table><thead><tr><th>取值</th><th>说明</th></tr></thead><tbody><tr><td><code>GenerationType.TABLE</code></td><td>使用一个特定的数据库表格来保存主键</td></tr><tr><td><code>GenerationType.SEQUENCE</code></td><td>根据底层数据库的序列来生成主键，条件是数据库支持序列</td></tr><tr><td><code>GenerationType.IDENTITY</code></td><td>主键由数据库自动生成（主要是自动增长型）</td></tr><tr><td><code>GenerationType.AUTO</code></td><td>主键由程序控制</td></tr></tbody></table><p>从上面四种生成策略说明中，很明显我们要使用的就是AUTO策略了，我们新增一个PO，并指定保存策略</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@DynamicUpdate</span>
<span class="token annotation punctuation">@DynamicInsert</span>
<span class="token annotation punctuation">@Entity</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;money&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutoMoneyPO</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Id</span>
    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span><span class="token constant">AUTO</span><span class="token punctuation">,</span> generator <span class="token operator">=</span> <span class="token string">&quot;myid&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@GenericGenerator</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;myid&quot;</span><span class="token punctuation">,</span> strategy <span class="token operator">=</span> <span class="token string">&quot;com.git.hui.boot.jpa.generator.ManulInsertGenerator&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;money&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> money<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;is_deleted&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Byte</span> isDeleted<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;create_at&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@CreatedDate</span>
    <span class="token keyword">private</span> <span class="token class-name">Timestamp</span> createAt<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;update_at&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@CreatedDate</span>
    <span class="token keyword">private</span> <span class="token class-name">Timestamp</span> updateAt<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>采用自定义的生成策略，需要注意，<code>@GenericGenerator(name = &quot;myid&quot;, strategy = &quot;com.git.hui.boot.jpa.generator.ManulInsertGenerator&quot;)</code>这个需要有，否则执行会抛异常</p><p>这一行代码的意思是，主键id是由<code>ManulInsertGenerator</code>来生成</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 *  自定义的主键生成策略，如果填写了主键id，如果数据库中没有这条记录，则新增指定id的记录；否则更新记录
 *
 *  如果不填写主键id，则利用数据库本身的自增策略指定id
 *
 * Created by @author yihui in 20:51 19/11/13.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ManulInsertGenerator</span> <span class="token keyword">extends</span> <span class="token class-name">IdentityGenerator</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Serializable</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token class-name">SharedSessionContractImplementor</span> s<span class="token punctuation">,</span> <span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">HibernateException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Serializable</span> id <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getEntityPersister</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassMetadata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getIdentifier</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>id<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> id<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体的主键生成方式也比较简单了，首先是判断PO中有没有主键，如果有则直接使用PO中的主键值；如果没有，就利用<code>IdentityGenerator</code>策略来生成主键（而这个主键生成策略，正好是<code>GenerationType.IDENTITY</code>利用数据库自增生成主键的策略）</p><p>接下来我们再次测试插入</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 使用自定义的主键生成策略</span>
<span class="token class-name">AutoMoneyPO</span> moneyPO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AutoMoneyPO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
moneyPO<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
moneyPO<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;jpa 一灰灰 ex&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
moneyPO<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span><span class="token number">2200L</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
moneyPO<span class="token punctuation">.</span><span class="token function">setIsDeleted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">AutoMoneyPO</span> res <span class="token operator">=</span> moneyCreateRepositoryWithId<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>moneyPO<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;after insert res: &quot;</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>

moneyPO<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span><span class="token number">3200L</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
res <span class="token operator">=</span> moneyCreateRepositoryWithId<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>moneyPO<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;after insert res: &quot;</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>

moneyPO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AutoMoneyPO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
moneyPO<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;jpa 一灰灰 2ex&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
moneyPO<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span><span class="token number">2200L</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
moneyPO<span class="token punctuation">.</span><span class="token function">setIsDeleted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token number">0x00</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
res <span class="token operator">=</span> moneyCreateRepositoryWithId<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>moneyPO<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;after insert res: &quot;</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码执行时，确保数据库中没有主键为20的数据，输出sql日志如下</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 第一次插入
Hibernate: select automoneyp0_.id as id1_0_0_, automoneyp0_.create_at as create_a2_0_0_, automoneyp0_.is_deleted as is_delet3_0_0_, automoneyp0_.money as money4_0_0_, automoneyp0_.name as name5_0_0_, automoneyp0_.update_at as update_a6_0_0_ from money automoneyp0_ where automoneyp0_.id=?
Hibernate: insert into money (is_deleted, money, name, id) values (?, ?, ?, ?)
after insert res: AutoMoneyPO(id=20, name=jpa 一灰灰 ex, money=2238, isDeleted=0, createAt=null, updateAt=null)

# 第二次指定id插入
Hibernate: select automoneyp0_.id as id1_0_0_, automoneyp0_.create_at as create_a2_0_0_, automoneyp0_.is_deleted as is_delet3_0_0_, automoneyp0_.money as money4_0_0_, automoneyp0_.name as name5_0_0_, automoneyp0_.update_at as update_a6_0_0_ from money automoneyp0_ where automoneyp0_.id=?
Hibernate: update money set create_at=?, money=?, update_at=? where id=?
after insert res: AutoMoneyPO(id=20, name=jpa 一灰灰 ex, money=3228, isDeleted=0, createAt=null, updateAt=null)

# 第三次无id插入
Hibernate: insert into money (is_deleted, money, name) values (?, ?, ?)
after insert res: AutoMoneyPO(id=107, name=jpa 一灰灰 2ex, money=2228, isDeleted=0, createAt=null, updateAt=null)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意上面的日志输出</p><ul><li>第一次插入时拼装的写入sql是包含id的，也就达到了我们指定id新增数据的要求</li><li>第二次插入时，因为id=20的记录存在，所以执行的是更新操作</li><li>第三次插入时，因为没有id，所以插入的sql中也没有指定id，使用mysql的自增来生成主键id</li></ul><h2 id="ii-其他" tabindex="-1"><a class="header-anchor" href="#ii-其他" aria-hidden="true">#</a> II. 其他</h2><h3 id="_0-项目-博文" tabindex="-1"><a class="header-anchor" href="#_0-项目-博文" aria-hidden="true">#</a> 0. 项目&amp;博文</h3>`,33),_={href:"http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247484246&idx=1&sn=dc53bcaaca00b955eeda0e54c1dcfbed&chksm=fce718facb9091ecb5d9a76b039c5f52fbddb23aa383991aa633c0daa00752dbcb4916393730&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},g={href:"http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247484247&idx=1&sn=a58a45f11c0758045b07b1d8fcf0873a&chksm=fce718fbcb9091ed779b0e472c7c9e923c9874c3ba796bd6a05af526bb0faef8a8bba7fee8fc&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},h={href:"http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247484257&idx=1&sn=6b68fc6745d000f84bc75dc76e24ddf0&chksm=fce718cdcb9091db719d14bde42aef0e0d68ad5636f65d5704ce88580394209f5f56b56ce0fb&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},f={href:"http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247484262&idx=1&sn=5cf81ea48e9854837e6efb3c04c2b36b&chksm=fce718cacb9091dc1df7417dd9f638d35cc9de16a84b62a3bd4481d208f49806e2d59c2414b6&token=1576389657&lang=zh_CN#rd",target:"_blank",rel:"noopener noreferrer"},w={href:"http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247484273&idx=1&sn=483d3317dd5172c6fa73292c82e41041&chksm=fce718ddcb9091cb1872787234efa986d9a1e1711f60761976006113c9c352416cc300e2c6ae&token=1576389657&lang=zh_CN#rd",target:"_blank",rel:"noopener noreferrer"},q={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"},T={href:"https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/102-jpa",target:"_blank",rel:"noopener noreferrer"};function M(x,A){const a=l("ExternalLinkIcon");return o(),c("div",null,[r,d,i(" more "),k,n("p",null,[s("实际开始之前，需要先走一些必要的操作，如安装测试使用mysql，创建SpringBoot项目工程，设置好配置信息等，关于搭建项目的详情可以参考前一篇文章 "),n("a",m,[s("190612-SpringBoot系列教程JPA之基础环境搭建"),e(a)])]),v,n("p",null,[s("对于jpa的插入数据的知识点不太清楚的同学，可以看一下之前的博文： "),n("a",b,[s("190614-SpringBoot系列教程JPA之新增记录使用姿势"),e(a)])]),y,n("ul",null,[n("li",null,[n("p",null,[n("a",_,[s("190612-SpringBoot系列教程JPA之基础环境搭建"),e(a)])])]),n("li",null,[n("p",null,[n("a",g,[s("190614-SpringBoot系列教程JPA之新增记录使用姿势"),e(a)])])]),n("li",null,[n("p",null,[n("a",h,[s("190623-SpringBoot系列教程JPA之update使用姿势"),e(a)])])]),n("li",null,[n("p",null,[n("a",f,[s("190702-SpringBoot系列教程JPA之delete使用姿势详解"),e(a)])])]),n("li",null,[n("p",null,[n("a",w,[s("190717-SpringBoot系列教程JPA之query使用姿势详解之基础篇"),e(a)])])]),n("li",null,[n("p",null,[s("工程："),n("a",q,[s("https://github.com/liuyueyi/spring-boot-demo"),e(a)])])]),n("li",null,[n("p",null,[s("module: "),n("a",T,[s("https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/102-jpa"),e(a)])])])])])}const P=p(u,[["render",M],["__file","06.191119-SpringBoot系列教程JPA之指定id保存.html.vue"]]);export{P as default};
