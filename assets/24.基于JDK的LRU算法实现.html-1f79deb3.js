import{_ as n,V as s,W as a,a1 as p}from"./framework-094145d2.js";const t={},e=p(`<h1 id="实战24-基于jdk的lru算法实现" tabindex="-1"><a class="header-anchor" href="#实战24-基于jdk的lru算法实现" aria-hidden="true">#</a> 实战24： 基于JDK的LRU算法实现</h1><h2 id="_1-lru算法" tabindex="-1"><a class="header-anchor" href="#_1-lru算法" aria-hidden="true">#</a> 1. LRU算法</h2><p>缓存淘汰算法--LRU算法LRU（Least recently used，最近最少使用）算法</p><p>根据数据的历史访问记录来进行淘汰数据，其核心思想是&quot;如果数据最近被访问过，那么将来被访问的几率也更高&quot;</p><p>再Java中可以非常简单的实现LRU算法，主要利用的是LinkedHashMap容器</p><h3 id="_1-1-lru算法实现" tabindex="-1"><a class="header-anchor" href="#_1-1-lru算法实现" aria-hidden="true">#</a> 1.1 LRU算法实现</h3><p>inkedHashMap底层就是用的HashMap加双链表实现的，而且本身已经实现了按照访问顺序的存储。此外，LinkedHashMap中本身就实现了一个方法removeEldestEntry用于判断是否需要移除最不常读取的数，方法默认是直接返回false，不会移除元素</p><p>因此我们只需要重写这个方法，可以实现当缓存满之后，就移除最不常用的数据</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LruCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">LruCache</span><span class="token punctuation">(</span><span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token number">0.75f</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">removeEldestEntry</span><span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> eldest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 当元素个数，超过指定的大小时，淘汰最老的数据</span>
        <span class="token keyword">return</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> size<span class="token punctuation">;</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">LruCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LruCache</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;一灰灰blog_2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;一灰灰blog_&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> cache<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cache<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意上面的访问，当i == 6 时，主动访问了一下 <code>一灰灰blog_2</code>，主要就是不希望淘汰掉它，再看下对应的输出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>0:{一灰灰blog_0=0}
1:{一灰灰blog_0=0, 一灰灰blog_1=1}
2:{一灰灰blog_0=0, 一灰灰blog_1=1, 一灰灰blog_2=2}
3:{一灰灰blog_0=0, 一灰灰blog_1=1, 一灰灰blog_2=2, 一灰灰blog_3=3}
4:{一灰灰blog_1=1, 一灰灰blog_2=2, 一灰灰blog_3=3, 一灰灰blog_4=4}
5:{一灰灰blog_2=2, 一灰灰blog_3=3, 一灰灰blog_4=4, 一灰灰blog_5=5}
6:{一灰灰blog_4=4, 一灰灰blog_5=5, 一灰灰blog_2=2, 一灰灰blog_6=6}
7:{一灰灰blog_5=5, 一灰灰blog_2=2, 一灰灰blog_6=6, 一灰灰blog_7=7}
4
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际输出与我们预期一致</p><h3 id="_1-2-小结" tabindex="-1"><a class="header-anchor" href="#_1-2-小结" aria-hidden="true">#</a> 1.2 小结</h3><p>jdk中蕴含了大量的财富，就看我们能不能识别出来了；通常我非常推荐&lt;3年的小伙伴，有事没事多盘一下jdk的经典实现，比如各种容器的底层结构，并发类的设计思想等</p>`,14),c=[e];function o(l,i){return s(),a("div",null,c)}const k=n(t,[["render",o],["__file","24.基于JDK的LRU算法实现.html.vue"]]);export{k as default};
