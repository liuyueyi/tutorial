import{_ as e,V as p,W as o,X as c,Y as n,Z as s,$ as t,a1 as i,F as l}from"./framework-094145d2.js";const u="/tutorial/imgs/201030/00.jpg",r={},k=n("p",null,"分布式锁，应用场景可以说是比较多的，网上随便一查就能搜到很多的文章；那么这里为什么跟着来一篇呢，原因也很简单，别人写的再好再清晰，那也是别人的知识点；自己思考过的、写过的才属于自己；",-1),d=n("p",null,"本篇虽然名为redis实现分布式锁，但也会说一下基于数据库实现分布式锁的思路（至于ZK实现的分布式锁，没玩过zk，就不抄了）",-1),m=i(`<h2 id="i-分布式锁" tabindex="-1"><a class="header-anchor" href="#i-分布式锁" aria-hidden="true">#</a> I. 分布式锁</h2><h3 id="_1-介绍" tabindex="-1"><a class="header-anchor" href="#_1-介绍" aria-hidden="true">#</a> 1. 介绍</h3><p>锁，这个名词或者动词可以说频繁的出现在我们的编程生涯中，当然我们最常见的就是单体应用中的<code>synchronized</code>以及<code>Lock</code>，主要就是为了确保某一段代码逻辑（特别是写逻辑）一次只能被一个业务方调用执行</p><p>而分布式锁最大的特点就是，希望即便是在分布式的环境中，即便有多个应用、多个实例操作某段业务逻辑，也能确保这段逻辑的&quot;串行&quot;执行</p><h3 id="_2-应用场景" tabindex="-1"><a class="header-anchor" href="#_2-应用场景" aria-hidden="true">#</a> 2. 应用场景</h3><p>分布式锁最主要的特点就是希望能确保，在某一时间段内，只能有一个业务方，访问某段业务逻辑</p><p>从上面的描述，一个非常典型的case就是电商里面的下单减库存</p><p>我们在创建订单之前，得确保库存足够，假设有这么一个场景</p><ul><li>商品只有2个库存</li><li>用户A，下单买两个，去判断库存为2，可以购买</li><li>用户B，下单买1个，去判断库存，发现也是2，可以购买</li><li>当用户A,B的订单都完成了，最终库存变成-1了，导致超卖</li></ul><p>如果我们使用分布式锁，把这段逻辑包裹住</p><ul><li>用户A，下单买2个，抢占分布式锁成功，判断库存为2</li><li>用户B，下单买1个，抢占分布式锁，已经被A占用了，抢不到，等待；直到用户A释放</li><li>用户A，订单生成，库存-2，现在真实库存变为0，释放锁</li><li>用户B，多次尝试获取锁，成功之后，再去看库存，为0，不满足，下单失败</li></ul><h3 id="_3-db版分布式锁" tabindex="-1"><a class="header-anchor" href="#_3-db版分布式锁" aria-hidden="true">#</a> 3. DB版分布式锁</h3><p>这种方式我个人没有用过，根据网上查询到一些资料，从原理上进行简单的说明</p><p><strong>唯一键约束方式</strong></p><p>借助mysql的唯一键约束，确保一次只能有一个<code>insert sql</code>是成功的，操作成功的就认为是成功的抢了锁；如果插入失败，则表示没有抢占；删除这条记录就表示释放锁</p><p>这种方式实现比较简单，但是问题比较多</p><ul><li>如果抢占锁的小伙伴一直不删除这条记录，那这个锁就永不释放么？</li><li>抢占锁失败直接抛异常，一个是不友好，另外一个就是非阻塞方式，需要我们自己来循环的判断是否</li><li>非重入的，即持有锁的小伙伴，再次去获取锁的时候，也是失败</li><li>性能瓶颈</li></ul><p><strong>乐观锁</strong></p><p>在数据库中添加一个version字段，在修改的时候，加一个version的查询限定，一把的业务逻辑为</p><ul><li><code>select * from table where id=1</code></li><li>执行业务逻辑</li><li><code>update xxx, version=version+1 wherer id=1 and version=oldVersion</code> 如果执行成功，则表示正确持有锁，业务流程ok；如果失败，则表示没有抢占到锁，回滚</li></ul><p>上面这个做法，有个比较明显的问题，没有阻塞操作，和我们预期的分布式锁差别有点大</p><p><strong>悲观锁</strong></p><p>如果想解决上面的阻塞问题，我们可以考虑使用写锁</p><ul><li>开启事务</li><li><code>select * from table where id=1 for update</code></li><li>执行业务逻辑</li><li>提交事务，释放锁</li></ul><p>上面是利用数据库的写锁来完成排他性，同样存在锁释放问题</p><p><strong>小结</strong></p><p>上面的几个思路主要来自于网络上的一些博文，就我个人看完的观点，基于db的分布式锁绝不是一个优雅的选择方案，如非万不得已，不要这么干</p><h2 id="ii-redis版分布式锁" tabindex="-1"><a class="header-anchor" href="#ii-redis版分布式锁" aria-hidden="true">#</a> II. Redis版分布式锁</h2><p>关于redis实现分布式锁的方案由来已久了，主要是借助redis的单线程模型，以及命令执行的原子性，通过确保同一时刻，只能有一个<code>setnx</code>成功，即表示抢占到锁；其他失败的小伙伴只能遗憾的加入下一次的抢锁计划</p><p>为了避免持有锁的小伙伴因为异常挂掉没有释放锁，从而导致其他客户端都拿不到锁的问题，因此在抢占锁的时候，我们需要考虑设置有效期；幸运的是redis已经支持一个命令执行上面的过程了</p><h3 id="_1-实现" tabindex="-1"><a class="header-anchor" href="#_1-实现" aria-hidden="true">#</a> 1. 实现</h3><p>redis分布式锁</p><p>设置锁和释放锁两个方面；</p><ul><li>setnx：当不存在时，设置成功；存在时，设置失败</li><li>为了防止持有锁的客户端挂掉，没有释放锁，从而导致其他客户端都拿不到锁的case，我们需要设置锁的有效期</li></ul><p>这里我们借助<code>SET key value [EX seconds | PX milliseconds] [NX | XX] [KEEPTTL]</code>来实现原子的操作</p><p>下面是基于<code>RedisTemplate</code>来实现</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">ERROR_CODE</span> <span class="token operator">=</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">;</span>
<span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span>

<span class="token keyword">private</span> <span class="token class-name">Random</span> random<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token class-name">RedisDistributeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">randPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;%04d&quot;</span><span class="token punctuation">,</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token class-name">String</span> lockKey<span class="token punctuation">,</span> <span class="token keyword">long</span> expireSeconds<span class="token punctuation">,</span> <span class="token keyword">int</span> maxRetryTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 为了避免value冲突，加一个随机的前缀串</span>
    <span class="token class-name">String</span> value <span class="token operator">=</span> <span class="token function">randPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;_&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> expireSeconds <span class="token operator">*</span> <span class="token number">1000</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> ans<span class="token punctuation">;</span>
    <span class="token keyword">int</span> retryTimes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        ans <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span> value<span class="token punctuation">,</span> expireSeconds<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ans<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        retryTimes<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>retryTimes <span class="token operator">&lt;</span> maxRetryTime<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token constant">ERROR_CODE</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>释放锁的时候需要注意，持有者不能把别人的锁给释放掉了（比如A持有了锁，超时时间为5s，但是它的业务逻辑超过了5s，导致B也获取到了锁，如果这时候A执行完了，把B的锁删掉，那就gg了）</p><p>因此，删除的重点是，只能删自己的锁（这里就需要借助lua脚本来执行原子操作了）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token class-name">String</span> lockKey<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//释放锁的lua脚本,保证判断和删除操作的原子性</span>
    <span class="token class-name">String</span> script <span class="token operator">=</span>
            <span class="token string">&quot;if redis.call(&#39;get&#39;,KEYS[1]) == ARGV[1] then return redis.call(&#39;del&#39;,KEYS[1]) else return 0 end&quot;</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">)</span>
    <span class="token class-name">RedisScript</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> redisScript <span class="token operator">=</span> <span class="token class-name">RedisScript</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>script<span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">boolean</span><span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>redisScript<span class="token punctuation">,</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-测试" tabindex="-1"><a class="header-anchor" href="#_2-测试" aria-hidden="true">#</a> 2. 测试</h3><p>我们写一个简单的并发扣库存的测试case，主要的逻辑就是当前的库存小于购买数时，下单失败</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">AtomicInteger</span> count <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 在一个线程持有锁的过程中，不允许其他的线程持有锁
     *
     * <span class="token keyword">@param</span> <span class="token parameter">redisDistributeLock</span>
     * <span class="token keyword">@param</span> <span class="token parameter">lockKey</span>
     * <span class="token keyword">@param</span> <span class="token parameter">threadName</span>
     * <span class="token keyword">@param</span> <span class="token parameter">retryTime</span>
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">threadTest</span><span class="token punctuation">(</span><span class="token class-name">RedisDistributeLock</span> redisDistributeLock<span class="token punctuation">,</span> <span class="token class-name">String</span> lockKey<span class="token punctuation">,</span> <span class="token class-name">String</span> threadName<span class="token punctuation">,</span> <span class="token keyword">int</span> retryTime<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">String</span> value <span class="token operator">=</span> redisDistributeLock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span> <span class="token number">10_000</span><span class="token punctuation">,</span> retryTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>count<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">int</span> left <span class="token operator">=</span> count<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token operator">-</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>threadName <span class="token operator">+</span> <span class="token string">&quot;减库存，剩余: &quot;</span> <span class="token operator">+</span> left <span class="token operator">+</span> <span class="token string">&quot; 购买: &quot;</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>threadName <span class="token operator">+</span> <span class="token string">&quot;库存不足下单失败，当前库存: &quot;</span> <span class="token operator">+</span> count<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; 购买： &quot;</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                redisDistributeLock<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">Application</span><span class="token punctuation">(</span><span class="token class-name">RedisDistributeLock</span> redisDistributeLock<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> lockKey <span class="token operator">=</span> <span class="token string">&quot;lock_key&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">threadTest</span><span class="token punctuation">(</span>redisDistributeLock<span class="token punctuation">,</span> lockKey<span class="token punctuation">,</span> <span class="token string">&quot;t-&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">20</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="ii-其他" tabindex="-1"><a class="header-anchor" href="#ii-其他" aria-hidden="true">#</a> II. 其他</h2><h3 id="_0-项目" tabindex="-1"><a class="header-anchor" href="#_0-项目" aria-hidden="true">#</a> 0. 项目</h3><p><strong>系列博文</strong></p>',47),E={href:"https://spring.hhui.top/spring-blog/2020/10/27/201027-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRedis%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B9%8BGEO/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://spring.hhui.top/spring-blog/2020/10/21/201021-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRedis%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B9%8BHyperLoglog/",target:"_blank",rel:"noopener noreferrer"},B={href:"https://spring.hhui.top/spring-blog/2020/10/17/201017-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRedis%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B9%8B%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://spring.hhui.top/spring-blog/2020/10/14/201014-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRedis%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E4%B9%8BBitmap%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%E5%8F%8A%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%E4%BB%8B%E7%BB%8D/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://spring.hhui.top/spring-blog/2020/04/11/200411-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8BRedis%E4%B9%8B%E7%AE%A1%E9%81%93Pipelined%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://spring.hhui.top/spring-blog/2019/09/27/190927-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8BRedis%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/",target:"_blank",rel:"noopener noreferrer"},A={href:"https://spring.hhui.top/spring-blog/2019/05/13/190513-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8B%E5%80%9F%E5%8A%A9Redis%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%AB%99%E7%82%B9%E7%BB%9F%E8%AE%A1%E6%9C%8D%E5%8A%A1/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://spring.hhui.top/spring-blog/2018/12/25/181225-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8B%E5%80%9F%E5%8A%A9Redis%E5%AE%9E%E7%8E%B0%E6%8E%92%E8%A1%8C%E6%A6%9C%E5%8A%9F%E8%83%BD/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://spring.hhui.top/spring-blog/2018/12/12/181212-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BZSet%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/",target:"_blank",rel:"noopener noreferrer"},y={href:"https://spring.hhui.top/spring-blog/2018/12/11/181211-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BSet%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://spring.hhui.top/spring-blog/2018/12/02/181202-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BHash%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/",target:"_blank",rel:"noopener noreferrer"},S={href:"https://spring.hhui.top/spring-blog/2018/11/09/181109-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BList%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/",target:"_blank",rel:"noopener noreferrer"},R={href:"https://spring.hhui.top/spring-blog/2018/11/08/181108-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BString%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E8%AF%BB%E5%86%99/",target:"_blank",rel:"noopener noreferrer"},D={href:"https://spring.hhui.top/spring-blog/2018/11/01/181101-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BJedis%E9%85%8D%E7%BD%AE/",target:"_blank",rel:"noopener noreferrer"},F={href:"https://spring.hhui.top/spring-blog/2018/10/29/181029-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8B%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/",target:"_blank",rel:"noopener noreferrer"},x=n("p",null,[n("strong",null,"工程源码")],-1),q={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"},T={href:"https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/122-redis-template",target:"_blank",rel:"noopener noreferrer"};function L(I,K){const a=l("ExternalLinkIcon");return p(),o("div",null,[k,d,c(" more "),m,n("ul",null,[n("li",null,[n("a",E,[s("【DB系列】Redis高级特性之GEO"),t(a)])]),n("li",null,[n("a",v,[s("【DB系列】Redis高级特性之HyperLoglog"),t(a)])]),n("li",null,[n("a",B,[s("【DB系列】Redis高级特性之发布订阅"),t(a)])]),n("li",null,[n("a",b,[s("【DB系列】Redis高级特性之Bitmap使用姿势及应用场景介绍"),t(a)])]),n("li",null,[n("a",h,[s("【DB系列】Redis之管道Pipelined使用姿势"),t(a)])]),n("li",null,[n("a",g,[s("【DB系列】Redis集群环境配置"),t(a)])]),n("li",null,[n("a",A,[s("【DB系列】借助Redis搭建一个简单站点统计服务（应用篇）"),t(a)])]),n("li",null,[n("a",_,[s("【DB系列】借助Redis实现排行榜功能（应用篇）"),t(a)])]),n("li",null,[n("a",f,[s("【DB系列】Redis之ZSet数据结构使用姿势"),t(a)])]),n("li",null,[n("a",y,[s("【DB系列】Redis之Set数据结构使用姿势"),t(a)])]),n("li",null,[n("a",w,[s("【DB系列】Redis之Hash数据结构使用姿势"),t(a)])]),n("li",null,[n("a",S,[s("【DB系列】Redis之List数据结构使用姿势"),t(a)])]),n("li",null,[n("a",R,[s("【DB系列】Redis之String数据结构的读写"),t(a)])]),n("li",null,[n("a",D,[s("【DB系列】Redis之Jedis配置"),t(a)])]),n("li",null,[n("a",F,[s("【DB系列】Redis之基本配置"),t(a)])])]),x,n("ul",null,[n("li",null,[s("工程："),n("a",q,[s("https://github.com/liuyueyi/spring-boot-demo"),t(a)])]),n("li",null,[s("项目源码: "),n("a",T,[s("https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/122-redis-template"),t(a)])])])])}const N=e(r,[["render",L],["__file","20.201030-SpringBoot系列教程Redis实现分布式锁（应用篇）.html.vue"]]);export{N as default};
