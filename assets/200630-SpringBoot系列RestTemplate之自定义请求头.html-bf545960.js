import{_ as e,V as o,W as p,X as c,Y as n,Z as s,$ as t,a1 as u,F as i}from"./framework-094145d2.js";const l={},r=n("p",null,"上一篇介绍了RestTemplate的基本使用姿势，在文末提出了一些扩展的高级使用姿势，本篇将主要集中在如何携带自定义的请求头，如设置User-Agent，携带Cookie",-1),k=n("ul",null,[n("li",null,"Get携带请求头"),n("li",null,"Post携带请求头"),n("li",null,"拦截器方式设置统一请求头")],-1),d=u(`<h2 id="i-项目搭建" tabindex="-1"><a class="header-anchor" href="#i-项目搭建" aria-hidden="true">#</a> I. 项目搭建</h2><h3 id="_1-配置" tabindex="-1"><a class="header-anchor" href="#_1-配置" aria-hidden="true">#</a> 1. 配置</h3><p>借助SpringBoot搭建一个SpringWEB项目，提供一些用于测试的REST服务</p><ul><li>SpringBoot版本: <code>2.2.1.RELEASE</code></li><li>核心依赖: <code>spring-boot-stater-web</code></li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了后续输出的日志更直观，这里设置了一下日志输出格式，在配置文件<code>application.yml</code>中，添加</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">logging</span><span class="token punctuation">:</span>
  <span class="token key atrule">pattern</span><span class="token punctuation">:</span>
    <span class="token key atrule">console</span><span class="token punctuation">:</span> (%msg%n%n)<span class="token punctuation">{</span>blue<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-rest服务" tabindex="-1"><a class="header-anchor" href="#_2-rest服务" aria-hidden="true">#</a> 2. Rest服务</h3><p>添加三个接口，分别提供GET请求，POST表单，POST json对象，然后返回请求头、请求参数、cookie，具体实现逻辑相对简单，也不属于本篇重点，因此不赘述说明</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoRest</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> headerNames <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeaderNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> name<span class="token punctuation">;</span>

        <span class="token class-name">JSONObject</span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>headerNames<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            name <span class="token operator">=</span> headerNames<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            headers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> headers<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getParams</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Cookie</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cookies <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cookies <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> cookies<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">JSONObject</span> ck <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Cookie</span> cookie <span class="token operator">:</span> cookies<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ck<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cookie<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cookie<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> ck<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">buildResult</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">buildResult</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">buildResult</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> params <span class="token operator">=</span> <span class="token function">getParams</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> headers <span class="token operator">=</span> <span class="token function">getHeaders</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> cookies <span class="token operator">=</span> <span class="token function">getCookies</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            params <span class="token operator">+=</span> <span class="token string">&quot; | &quot;</span> <span class="token operator">+</span> obj<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token string">&quot;params: &quot;</span> <span class="token operator">+</span> params <span class="token operator">+</span> <span class="token string">&quot;\\nheaders: &quot;</span> <span class="token operator">+</span> headers <span class="token operator">+</span> <span class="token string">&quot;\\ncookies: &quot;</span> <span class="token operator">+</span> cookies<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;get&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">buildResult</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;post&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">post</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">buildResult</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Data</span>
    <span class="token annotation punctuation">@NoArgsConstructor</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ReqBody</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">4536744669004135021L</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;body&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">postBody</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">ReqBody</span> body<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span>
                <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">)</span> <span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">buildResult</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-使用姿势" tabindex="-1"><a class="header-anchor" href="#ii-使用姿势" aria-hidden="true">#</a> II. 使用姿势</h2><p>最常见的携带请求头的需求，无非是referer校验，user-agent的防爬以及携带cookie，使用RestTemplate可以借助<code>HttpHeaders</code>来处理请求头</p><h3 id="_1-get携带请求头" tabindex="-1"><a class="header-anchor" href="#_1-get携带请求头" aria-hidden="true">#</a> 1. Get携带请求头</h3><p>前一篇博文介绍了GET请求的三种方式，但是<code>getForObject</code>/<code>getForEntity</code>都不满足我们的场景，这里需要引入<code>exchange</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">header</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">RestTemplate</span> restTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">HttpHeaders</span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        headers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;user-agent&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        headers<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;cookie&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;my_user_id=haha123; UN=1231923;gr_user_id=welcome_yhh;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 注意几个请求参数</span>
        <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> restTemplate
                <span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span><span class="token string">&quot;http://127.0.0.1:8080/get?name=一灰灰&amp;age=20&quot;</span><span class="token punctuation">,</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">,</span>
                        <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;get with selfDefine header: {}&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>exchange的使用姿势和我们前面介绍的<code>postForEntity</code>差不多，只是多了一个指定HttpMethod的参数而已</p><p><strong>重点在于将请求头塞入HttpEntity</strong></p><p>输出结果</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>(get with selfDefine header: &lt;200,params: {&quot;name&quot;:[&quot;一灰灰&quot;],&quot;age&quot;:[&quot;20&quot;]}
headers: {&quot;cookie&quot;:&quot;my_user_id=haha123; UN=1231923;gr_user_id=welcome_yhh;&quot;,&quot;host&quot;:&quot;127.0.0.1:8080&quot;,&quot;connection&quot;:&quot;keep-alive&quot;,&quot;accept&quot;:&quot;text/plain, application/json, application/*+json, */*&quot;,&quot;user-agent&quot;:&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36&quot;}
cookies: {&quot;my_user_id&quot;:&quot;haha123&quot;,&quot;UN&quot;:&quot;1231923&quot;,&quot;gr_user_id&quot;:&quot;welcome_yhh&quot;},[Content-Type:&quot;text/plain;charset=UTF-8&quot;, Content-Length:&quot;447&quot;, Date:&quot;Mon, 29 Jun 2020 07:48:49 GMT&quot;]&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-post携带请求头" tabindex="-1"><a class="header-anchor" href="#_2-post携带请求头" aria-hidden="true">#</a> 2. Post携带请求头</h3><p>post携带请求头，也可以利用上面的方式实现；当然我们一般直接借助<code>postForObject/postForEntity</code>就可以满足需求了</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// httpHeaders 和上面的一致，这里省略相关代码</span>
<span class="token comment">// post 带请求头</span>
<span class="token class-name">MultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
params<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;一灰灰Blog&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
params<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">String</span> response <span class="token operator">=</span> restTemplate
        <span class="token punctuation">.</span><span class="token function">postForObject</span><span class="token punctuation">(</span><span class="token string">&quot;http://127.0.0.1:8080/post&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;post with selfDefine header: {}&quot;</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>(post with selfDefine header: params: {&quot;name&quot;:[&quot;一灰灰Blog&quot;],&quot;age&quot;:[&quot;20&quot;]}
headers: {&quot;content-length&quot;:&quot;338&quot;,&quot;cookie&quot;:&quot;my_user_id=haha123; UN=1231923;gr_user_id=welcome_yhh;&quot;,&quot;host&quot;:&quot;127.0.0.1:8080&quot;,&quot;content-type&quot;:&quot;multipart/form-data;charset=UTF-8;boundary=2VJHo9r6lYgR_WoSBy1FQC40jvBvGtLk7QUaymGg&quot;,&quot;connection&quot;:&quot;keep-alive&quot;,&quot;accept&quot;:&quot;text/plain, application/json, application/*+json, */*&quot;,&quot;user-agent&quot;:&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36&quot;}
cookies: {&quot;my_user_id&quot;:&quot;haha123&quot;,&quot;UN&quot;:&quot;1231923&quot;,&quot;gr_user_id&quot;:&quot;welcome_yhh&quot;}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-拦截器方式" tabindex="-1"><a class="header-anchor" href="#_3-拦截器方式" aria-hidden="true">#</a> 3. 拦截器方式</h3><p>如果我们可以确定每次发起请求时，都要设置一个自定义的 <code>User-Agent</code>，每次都使用上面的两种姿势就有点繁琐了，因此我们是可以通过拦截器的方式来添加通用的请求头，这样使用这个RestTemplate时，都会携带上请求头</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 借助拦截器的方式来实现塞统一的请求头</span>
<span class="token class-name">ClientHttpRequestInterceptor</span> interceptor <span class="token operator">=</span> <span class="token punctuation">(</span>httpRequest<span class="token punctuation">,</span> bytes<span class="token punctuation">,</span> execution<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
    httpRequest<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;user-agent&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    httpRequest<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;cookie&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;my_user_id=haha123; UN=1231923;gr_user_id=interceptor;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> execution<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>httpRequest<span class="token punctuation">,</span> bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

restTemplate<span class="token punctuation">.</span><span class="token function">getInterceptors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>interceptor<span class="token punctuation">)</span><span class="token punctuation">;</span>
response <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span><span class="token string">&quot;http://127.0.0.1:8080/get?name=一灰灰&amp;age=20&quot;</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;get with selfDefine header by Interceptor: {}&quot;</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这个使用姿势比较适用于通用的场景，测试输出</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>(get with selfDefine header by Interceptor: params: {&quot;name&quot;:[&quot;一灰灰&quot;],&quot;age&quot;:[&quot;20&quot;]}
headers: {&quot;cookie&quot;:&quot;my_user_id=haha123; UN=1231923;gr_user_id=interceptor;&quot;,&quot;host&quot;:&quot;127.0.0.1:8080&quot;,&quot;connection&quot;:&quot;keep-alive&quot;,&quot;accept&quot;:&quot;text/plain, application/json, application/*+json, */*&quot;,&quot;user-agent&quot;:&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36&quot;}
cookies: {&quot;my_user_id&quot;:&quot;haha123&quot;,&quot;UN&quot;:&quot;1231923&quot;,&quot;gr_user_id&quot;:&quot;interceptor&quot;}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-请求头错误使用姿势" tabindex="-1"><a class="header-anchor" href="#_4-请求头错误使用姿势" aria-hidden="true">#</a> 4. 请求头错误使用姿势</h3><p>在我们使用自定义请求头时，有一个需要特殊重视的地方，HttpHeaders使用不当，可能导致请求头爆炸</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 错误的请求头使用姿势
 */</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">errorHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">RestTemplate</span> restTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 为了复用headers，避免每次都创建这个对象，但是在循环中又是通过 add 方式添加请求头，那么请求头会越来越膨胀，最终导致请求超限</span>
    <span class="token comment">// 这种case，要么将add改为set；要么不要在循环中这么干</span>
    <span class="token class-name">HttpHeaders</span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;user-agent&quot;</span><span class="token punctuation">,</span>
                <span class="token string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;cookie&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;my_user_id=haha123; UN=1231923;gr_user_id=welcome_yhh;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> res <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span><span class="token string">&quot;http://127.0.0.1:8080/get?name=一灰灰&amp;age=20&quot;</span><span class="token punctuation">,</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;get with selfDefine header: {}&quot;</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面演示的关键点为</p><ul><li>希望复用 HttpHeaders</li><li><code>headers.add</code> 方式添加请求头；而不是前面的 <code>set</code>方式</li></ul><p>输出如下，请注意每一次请求过后，请求头膨胀了一次</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>(get with selfDefine header: &lt;200,params: {&quot;name&quot;:[&quot;一灰灰&quot;],&quot;age&quot;:[&quot;20&quot;]}
headers: {&quot;cookie&quot;:&quot;my_user_id=haha123; UN=1231923;gr_user_id=welcome_yhh;&quot;,&quot;host&quot;:&quot;127.0.0.1:8080&quot;,&quot;connection&quot;:&quot;keep-alive&quot;,&quot;accept&quot;:&quot;text/plain, application/json, application/*+json, */*&quot;,&quot;user-agent&quot;:&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36&quot;}
cookies: {&quot;my_user_id&quot;:&quot;haha123&quot;,&quot;UN&quot;:&quot;1231923&quot;,&quot;gr_user_id&quot;:&quot;welcome_yhh&quot;},[Content-Type:&quot;text/plain;charset=UTF-8&quot;, Content-Length:&quot;447&quot;, Date:&quot;Mon, 29 Jun 2020 07:48:49 GMT&quot;]&gt;

(get with selfDefine header: &lt;200,params: {&quot;name&quot;:[&quot;一灰灰&quot;],&quot;age&quot;:[&quot;20&quot;]}
headers: {&quot;cookie&quot;:&quot;my_user_id=haha123; UN=1231923;gr_user_id=welcome_yhh;; my_user_id=haha123; UN=1231923;gr_user_id=welcome_yhh;&quot;,&quot;host&quot;:&quot;127.0.0.1:8080&quot;,&quot;connection&quot;:&quot;keep-alive&quot;,&quot;accept&quot;:&quot;text/plain, application/json, application/*+json, */*&quot;,&quot;user-agent&quot;:&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36&quot;}
cookies: {&quot;my_user_id&quot;:&quot;haha123&quot;,&quot;UN&quot;:&quot;1231923&quot;,&quot;gr_user_id&quot;:&quot;welcome_yhh&quot;},[Content-Type:&quot;text/plain;charset=UTF-8&quot;, Content-Length:&quot;503&quot;, Date:&quot;Mon, 29 Jun 2020 07:48:49 GMT&quot;]&gt;

(get with selfDefine header: &lt;200,params: {&quot;name&quot;:[&quot;一灰灰&quot;],&quot;age&quot;:[&quot;20&quot;]}
headers: {&quot;cookie&quot;:&quot;my_user_id=haha123; UN=1231923;gr_user_id=welcome_yhh;; my_user_id=haha123; UN=1231923;gr_user_id=welcome_yhh;; my_user_id=haha123; UN=1231923;gr_user_id=welcome_yhh;&quot;,&quot;host&quot;:&quot;127.0.0.1:8080&quot;,&quot;connection&quot;:&quot;keep-alive&quot;,&quot;accept&quot;:&quot;text/plain, application/json, application/*+json, */*&quot;,&quot;user-agent&quot;:&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36&quot;}
cookies: {&quot;my_user_id&quot;:&quot;haha123&quot;,&quot;UN&quot;:&quot;1231923&quot;,&quot;gr_user_id&quot;:&quot;welcome_yhh&quot;},[Content-Type:&quot;text/plain;charset=UTF-8&quot;, Content-Length:&quot;559&quot;, Date:&quot;Mon, 29 Jun 2020 07:48:49 GMT&quot;]&gt;

(get with selfDefine header: &lt;200,params: {&quot;name&quot;:[&quot;一灰灰&quot;],&quot;age&quot;:[&quot;20&quot;]}
headers: {&quot;cookie&quot;:&quot;my_user_id=haha123; UN=1231923;gr_user_id=welcome_yhh;; my_user_id=haha123; UN=1231923;gr_user_id=welcome_yhh;; my_user_id=haha123; UN=1231923;gr_user_id=welcome_yhh;; my_user_id=haha123; UN=1231923;gr_user_id=welcome_yhh;&quot;,&quot;host&quot;:&quot;127.0.0.1:8080&quot;,&quot;connection&quot;:&quot;keep-alive&quot;,&quot;accept&quot;:&quot;text/plain, application/json, application/*+json, */*&quot;,&quot;user-agent&quot;:&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36&quot;}
cookies: {&quot;my_user_id&quot;:&quot;haha123&quot;,&quot;UN&quot;:&quot;1231923&quot;,&quot;gr_user_id&quot;:&quot;welcome_yhh&quot;},[Content-Type:&quot;text/plain;charset=UTF-8&quot;, Content-Length:&quot;615&quot;, Date:&quot;Mon, 29 Jun 2020 07:48:49 GMT&quot;]&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-其他" tabindex="-1"><a class="header-anchor" href="#ii-其他" aria-hidden="true">#</a> II. 其他</h2><h3 id="_0-项目-系列博文" tabindex="-1"><a class="header-anchor" href="#_0-项目-系列博文" aria-hidden="true">#</a> 0. 项目&amp;系列博文</h3><p><strong>系列博文</strong></p>`,39),m={href:"http://spring.hhui.top/spring-blog/2020/06/17/200617-SpringBoot%E7%B3%BB%E5%88%97RestTemplate%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95%E5%B0%8F%E7%BB%93/",target:"_blank",rel:"noopener noreferrer"},q=n("p",null,[n("strong",null,"源码")],-1),v={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/221-web-resttemplate",target:"_blank",rel:"noopener noreferrer"};function g(b,_){const a=i("ExternalLinkIcon");return o(),p("div",null,[r,k,c(" more "),d,n("ul",null,[n("li",null,[n("a",m,[s("【WEB系列】RestTemplate基础用法小结"),t(a)])])]),q,n("ul",null,[n("li",null,[s("工程："),n("a",v,[s("https://github.com/liuyueyi/spring-boot-demo"),t(a)])]),n("li",null,[s("项目: "),n("a",h,[s("https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/221-web-resttemplate"),t(a)])])])])}const f=e(l,[["render",g],["__file","200630-SpringBoot系列RestTemplate之自定义请求头.html.vue"]]);export{f as default};
