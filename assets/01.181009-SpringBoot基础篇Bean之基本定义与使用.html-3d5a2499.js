import{_ as e,V as t,W as p,X as o,Y as n,Z as a,$ as c,a1 as i,F as l}from"./framework-094145d2.js";const u={},r=n("p",null,"我们知道在Spring中，有两个非常有名的特性，依赖注入（DI）与切面（AOP)，其中依赖注入其主要的作用，可以说就是维护Spring容器创建的Bean之间的依赖关系，简单来说就是一个bean（假定名为A）持有另一个Bean（假定名为B）的引用作为成员变量b，则由Spring容器自动将B赋值给A的成员变量b",-1),d=n("p",null,"因此在想理解依赖注入，就有必要了解下创建和使用Bean的几种姿势；本篇博文作为基础篇，将介绍",-1),k=n("ul",null,[n("li",null,"bean的基本创建方式"),n("li",null,"bean的常见使用姿势")],-1),v=i(`<h2 id="i-bean的几种创建方式" tabindex="-1"><a class="header-anchor" href="#i-bean的几种创建方式" aria-hidden="true">#</a> I. Bean的几种创建方式</h2><p>在SpringBoot的大环境下，基本上不再使用以前的xml配置，所以本篇博文也不再介绍以往Spring中，通过xml来声明bean的使用方式</p><h3 id="_1-注解方式" tabindex="-1"><a class="header-anchor" href="#_1-注解方式" aria-hidden="true">#</a> 1. 注解方式</h3><p>这种也是我们最常见的使用姿势，一般就是在类上添加<code>@Component</code>, <code>@Service</code>等注解（<code>@Controller</code>表示提供http接口的bean, <code>@Configuration</code>表示配置类Bean)</p><p>添加上这种注解的类，会被Spring容器扫描加载，自动生成单例的bean，一个典型的实例如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnoDemoBean</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> type <span class="token operator">=</span> <span class="token string">&quot;AnoDemoBean&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name <span class="token operator">+</span> <span class="token string">&quot; _&quot;</span> <span class="token operator">+</span> type<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在实际测试时，发现无法获取上面的bean，就需要注意下bean的包路径，是否在被你程序的扫描路径包含</p><h3 id="_2-bean定义方式" tabindex="-1"><a class="header-anchor" href="#_2-bean定义方式" aria-hidden="true">#</a> 2. <code>@Bean</code>定义方式</h3><p>这种方式，主要是结合<code>Configuration</code>来定义bean，首先是声明一个配置类，然后再配置类中，通过返回bean对象的方法形式来声明bean，一般使用姿势如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigDemoBean</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> type <span class="token operator">=</span> <span class="token string">&quot;ConfigDemoBean&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name <span class="token operator">+</span> <span class="token string">&quot; _&quot;</span> <span class="token operator">+</span> type<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanLoadConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ConfigDemoBean</span> <span class="token function">configDemoBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConfigDemoBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要说明的一点是BeanLoadConfig类本身也被Spring容器看为一个Bean</p><h3 id="_3-工厂类方式" tabindex="-1"><a class="header-anchor" href="#_3-工厂类方式" aria-hidden="true">#</a> 3. 工厂类方式</h3><p>FactoryBean本质上也是一个Bean，但是可以通过他来生成你期待的Bean，在实际的业务场景中可能使用场景不多，但是在抽象的框架层面应用很广，一个简单的使用姿势如</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FacDemoBean</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> type <span class="token operator">=</span> <span class="token string">&quot;FacDemoBean&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name <span class="token operator">+</span> <span class="token string">&quot; _&quot;</span> <span class="token operator">+</span> type<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoFactoryBean</span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FacDemoBean</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">FacDemoBean</span> <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FacDemoBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">FacDemoBean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
 
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanLoadConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">DemoFactoryBean</span> <span class="token function">demoFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DemoFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">FacDemoBean</span> <span class="token function">facDemoBean</span><span class="token punctuation">(</span><span class="token class-name">DemoFactoryBean</span> demoFactoryBean<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> demoFactoryBean<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-bean的使用姿势" tabindex="-1"><a class="header-anchor" href="#ii-bean的使用姿势" aria-hidden="true">#</a> II. Bean的使用姿势</h2><p>前面介绍了如何创建Bean，创建完之后，接着就是使用了，下面介绍最基本的几种使用方式</p><h3 id="_1-autowired注入" tabindex="-1"><a class="header-anchor" href="#_1-autowired注入" aria-hidden="true">#</a> 1. <code>Autowired</code>注入</h3><p>将注解<code>@Autowired</code>或者<code>@Resource</code>添加到成员变量上，即表示这个成员变量会由Spring容器注入对应的Bean对象</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">ConfigDemoBean</span> configDemoBean<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>由Spring容器依赖注入的方式，从代码上看，是不会找到有什么地方主动的塞入了这个值，但是使用处却可以直接使用，因此需要注意有可能会出现npe</p><h3 id="_2-setter方法" tabindex="-1"><a class="header-anchor" href="#_2-setter方法" aria-hidden="true">#</a> 2. Setter方法</h3><p>和前面其实也差不多，只不过注解放在了setter方法上</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">FacDemoBean</span> facDemoBean<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">setFacDemoBean</span><span class="token punctuation">(</span><span class="token class-name">FacDemoBean</span> facDemoBean<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>facDemoBean <span class="token operator">=</span> facDemoBean<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-构造方法" tabindex="-1"><a class="header-anchor" href="#_3-构造方法" aria-hidden="true">#</a> 3. 构造方法</h3><p>顾名思义，就是在构造方法中传入Bean对象来初始化</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoController</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">AnoDemoBean</span> anoDemoBean<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">DemoController</span><span class="token punctuation">(</span><span class="token class-name">AnoDemoBean</span> anoDemoBean<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>anoDemoBean <span class="token operator">=</span> anoDemoBean<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方式的好处是可以避免潜在的NPE问题（后面将有博文专门提及），而且针对Bean不存在的情况，系统会抛出异常，提早知道问题</p><h3 id="_4-小结" tabindex="-1"><a class="header-anchor" href="#_4-小结" aria-hidden="true">#</a> 4. 小结</h3><p>本篇主要介绍了Bean的基本创建和使用姿势，基本上也是我们在平常的业务开发中使用得最广的方式了，是不是会这些就行了呢？业务做多了之后，随之而来就会有一些疑问</p><ul><li>提供的jar包给第三方使用，如何保证其他人能顺利加载jar包中的bean？</li><li>bean初始化的先后顺序是怎样的？</li><li>可以手动注册一个Bean么，改怎么做？</li><li>BeanFactory与FactoryBean的区别是啥，各自的典型应用场景又是什么？</li><li>重名的Bean是否可以解决？</li></ul><h2 id="ii-其他" tabindex="-1"><a class="header-anchor" href="#ii-其他" aria-hidden="true">#</a> II. 其他</h2><h3 id="_0-项目" tabindex="-1"><a class="header-anchor" href="#_0-项目" aria-hidden="true">#</a> 0. 项目</h3>`,32),m={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"};function b(h,g){const s=l("ExternalLinkIcon");return t(),p("div",null,[r,d,k,o("more"),v,n("ul",null,[n("li",null,[a("工程："),n("a",m,[a("spring-boot-demo"),c(s)])])])])}const y=e(u,[["render",b],["__file","01.181009-SpringBoot基础篇Bean之基本定义与使用.html.vue"]]);export{y as default};
