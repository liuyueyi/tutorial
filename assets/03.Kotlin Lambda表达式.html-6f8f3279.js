const a=JSON.parse('{"key":"v-576296c0","path":"/codelan/kotlin/03.Kotlin%20Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F.html","title":"3. Kotlin Lambda表达式","lang":"zh-CN","frontmatter":{"order":3,"title":"3. Kotlin Lambda表达式","tag":["Kotlin"],"category":["Kotlin"],"date":"2025-05-22T08:15:07.000Z","keywords":"Kotlin Lambda","description":"以下是关于 Kotlin Lambda 表达式的深度解析，包含核心概念、使用方式、工作原理及最佳实践： 一、Lambda 表达式的本质 定义：Lambda 是一个匿名函数，可作为参数传递或赋值给变量。 Kotlin 中的 Lambda 是函数式编程的核心工具，用于简化代码和实现高阶函数。 基本语法： { 参数列表 -&gt; 函数体 } // 示例：加法 Lambda val sum: (Int, Int) -&gt; Int = { a, b -&gt; a + b }","head":[["meta",{"property":"og:url","content":"https://liuyueyi.github.io/tutorial/codelan/kotlin/03.Kotlin%20Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"一灰灰的站点"}],["meta",{"property":"og:title","content":"3. Kotlin Lambda表达式"}],["meta",{"property":"og:description","content":"以下是关于 Kotlin Lambda 表达式的深度解析，包含核心概念、使用方式、工作原理及最佳实践： 一、Lambda 表达式的本质 定义：Lambda 是一个匿名函数，可作为参数传递或赋值给变量。 Kotlin 中的 Lambda 是函数式编程的核心工具，用于简化代码和实现高阶函数。 基本语法： { 参数列表 -&gt; 函数体 } // 示例：加法 Lambda val sum: (Int, Int) -&gt; Int = { a, b -&gt; a + b }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-30T08:22:22.000Z"}],["meta",{"property":"article:tag","content":"Kotlin"}],["meta",{"property":"article:published_time","content":"2025-05-22T08:15:07.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-30T08:22:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3. Kotlin Lambda表达式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-05-22T08:15:07.000Z\\",\\"dateModified\\":\\"2025-05-30T08:22:22.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"一、Lambda 表达式的本质","slug":"一、lambda-表达式的本质","link":"#一、lambda-表达式的本质","children":[]},{"level":3,"title":"二、Lambda 的使用方式","slug":"二、lambda-的使用方式","link":"#二、lambda-的使用方式","children":[]},{"level":3,"title":"三、Lambda 的关键特性","slug":"三、lambda-的关键特性","link":"#三、lambda-的关键特性","children":[]},{"level":3,"title":"四、Lambda 的工作原理","slug":"四、lambda-的工作原理","link":"#四、lambda-的工作原理","children":[]},{"level":3,"title":"五、内联 Lambda（性能优化）","slug":"五、内联-lambda-性能优化","link":"#五、内联-lambda-性能优化","children":[]},{"level":3,"title":"六、常见陷阱与注意事项","slug":"六、常见陷阱与注意事项","link":"#六、常见陷阱与注意事项","children":[]},{"level":3,"title":"七、最佳实践推荐","slug":"七、最佳实践推荐","link":"#七、最佳实践推荐","children":[]},{"level":3,"title":"八、Lambda 与其他 Kotlin 特性的结合","slug":"八、lambda-与其他-kotlin-特性的结合","link":"#八、lambda-与其他-kotlin-特性的结合","children":[]},{"level":3,"title":"九、性能考量","slug":"九、性能考量","link":"#九、性能考量","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1748588678000,"updatedTime":1748593342000,"contributors":[{"name":"yihui","email":"bangzewu@126.com","commits":2}]},"readingTime":{"minutes":4.81,"words":1442},"filePathRelative":"codelan/kotlin/03.Kotlin Lambda表达式.md","localizedDate":"2025年5月22日","excerpt":"<p>以下是关于 Kotlin Lambda 表达式的深度解析，包含核心概念、使用方式、工作原理及最佳实践：</p>\\n<h3> <strong>一、Lambda 表达式的本质</strong></h3>\\n<p><strong>定义</strong>：Lambda 是一个<strong>匿名函数</strong>，可作为参数传递或赋值给变量。</p>\\n<p>Kotlin 中的 Lambda 是<strong>函数式编程</strong>的核心工具，用于简化代码和实现高阶函数。</p>\\n<p><strong>基本语法</strong>：</p>\\n<div class=\\"language-kotlin line-numbers-mode\\" data-ext=\\"kt\\"><pre class=\\"language-kotlin\\"><code><span class=\\"token punctuation\\">{</span> 参数列表 <span class=\\"token operator\\">-&gt;</span> 函数体 <span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">// 示例：加法 Lambda</span>\\n<span class=\\"token keyword\\">val</span> sum<span class=\\"token operator\\">:</span> <span class=\\"token punctuation\\">(</span>Int<span class=\\"token punctuation\\">,</span> Int<span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-&gt;</span> Int <span class=\\"token operator\\">=</span> <span class=\\"token punctuation\\">{</span> a<span class=\\"token punctuation\\">,</span> b <span class=\\"token operator\\">-&gt;</span> a <span class=\\"token operator\\">+</span> b <span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","copyright":{},"autoDesc":true}');export{a as data};
