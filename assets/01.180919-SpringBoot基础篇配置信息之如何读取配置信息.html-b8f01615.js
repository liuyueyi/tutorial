import{_ as t,V as p,W as o,X as c,Y as n,Z as s,$ as e,a1 as l,F as i}from"./framework-094145d2.js";const u={},r=n("p",null,"SpringBoot极大的减少了配置，开一个新项目时，完全可以做到什么配置都不加，就可以直接跑，简单方便的同时，就带来了一个问题",-1),d=n("ul",null,[n("li",null,"怎么知道这些默认的配置是什么？"),n("li",null,"如果要修改默认配置怎么办？"),n("li",null,"如何添加自定义的配置？"),n("li",null,"如何读取这些配置？")],-1),k=l(`<h2 id="i-配置信息读取" tabindex="-1"><a class="header-anchor" href="#i-配置信息读取" aria-hidden="true">#</a> I. 配置信息读取</h2><p>首先创建一个SpringBoot项目，这一块就直接省略掉，下面直奔主题，如何获取配置</p><h3 id="_1-配置文件" tabindex="-1"><a class="header-anchor" href="#_1-配置文件" aria-hidden="true">#</a> 1. 配置文件</h3><p>默认读取配置文件 <code>application.properties</code> 或者 <code>application.yml</code> 中的配置信息，两种不同的文件类型，对应的内部配置方式也不太一样</p><p><strong>配置文件位置</strong></p><p>一般来说，默认的配置文件<code>application.properties</code>或者<code>application.yml</code>文件放在目录</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>src/main/resources/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>properties格式</strong></p><p>properties配置文件属于比较常见的一种了，定义也比较简单，形如 <code>key=value</code>，一个实例如下</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment">#服务端口号</span>
<span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">8081</span>

<span class="token key attr-name">app.proper.key</span><span class="token punctuation">=</span><span class="token value attr-value">\${random.uuid}</span>
<span class="token key attr-name">app.proper.id</span><span class="token punctuation">=</span><span class="token value attr-value">\${random.int}</span>
<span class="token key attr-name">app.proper.value</span><span class="token punctuation">=</span><span class="token value attr-value">test123</span>

<span class="token key attr-name">app.demo.val</span><span class="token punctuation">=</span><span class="token value attr-value">autoInject</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>yml格式</strong></p><p>yml格式的配置文件是以缩进来表示分层，kv之间用冒号来分割，形如</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment">#服务端口号</span>
<span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span>

<span class="token key atrule">app</span><span class="token punctuation">:</span>
  <span class="token key atrule">proper</span><span class="token punctuation">:</span>
    <span class="token key atrule">key</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>random.uuid<span class="token punctuation">}</span>
    <span class="token key atrule">id</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>random.int<span class="token punctuation">}</span>
    <span class="token key atrule">value</span><span class="token punctuation">:</span> test123

  <span class="token key atrule">demo</span><span class="token punctuation">:</span>
    <span class="token key atrule">val</span><span class="token punctuation">:</span> autoInject
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>格式对比</strong></p><p>两种不同格式的配置文件，有啥区别？</p><p>单纯从使用来讲，并没有特别的不同，而且我个人也一直这么认为的，直到遇到了一个诡异的问题，后面给出</p><h3 id="_2-配置读取" tabindex="-1"><a class="header-anchor" href="#_2-配置读取" aria-hidden="true">#</a> 2. 配置读取</h3><p>程序启动之后，如何获取配置文件<code>application.yml</code>中的配置信息呢？在实际的使用中，最常见的有三种姿势</p><h4 id="a-environment-读取" tabindex="-1"><a class="header-anchor" href="#a-environment-读取" aria-hidden="true">#</a> a. Environment 读取</h4><p>所有的配置信息，都会加载到Environment实体中，因此我们可以通过这个对象来获取系统的配置，通过这种方式不仅可以获取<code>application.yml</code>配置信息，还可以获取更多的系统信息</p><p>使用姿势如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">Environment</span> environment<span class="token punctuation">;</span>
 
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;show&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;env&quot;</span><span class="token punctuation">,</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;server.port&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="b-value-注解方式" tabindex="-1"><a class="header-anchor" href="#b-value-注解方式" aria-hidden="true">#</a> b. @Value 注解方式</h4><p><code>@Value</code>注解可以将配置信息注入到Bean的属性，也是比较常见的使用方式，但有几点需要额外注意</p><ul><li>如果配置信息不存在会怎样？</li><li>配置冲突了会怎样（即多个配置文件中有同一个key时）？</li></ul><p>使用方式如下，主要是通过 <code>\${}</code>，大括号内为配置的Key；如果配置不存在时，给一个默认值时，可以用冒号分割，后面为具体的值</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoController</span> <span class="token punctuation">{</span>
    <span class="token comment">// 配置必须存在，且获取的是配置名为 app.demo.val 的配置信息</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${app.demo.val}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> autoInject<span class="token punctuation">;</span>

    <span class="token comment">// 配置app.demo.not不存在时，不抛异常，给一个默认值data</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${app.demo.not:dada}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> notExists<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;show&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;autoInject&quot;</span><span class="token punctuation">,</span> autoInject<span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;not&quot;</span><span class="token punctuation">,</span> notExists<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="c-对象映射方式" tabindex="-1"><a class="header-anchor" href="#c-对象映射方式" aria-hidden="true">#</a> c. 对象映射方式</h4><p>上面的两种方式对于某几个特别的配置来说，一个一个的写还好，如果配置特别多时，每一个都去这么玩，估计会敲的键盘原地爆炸了，当然这么不友好的事情，怎么能忍！因此就有了下面这种使用方式</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">&quot;app.proper&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProperBean</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> key<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> value<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的写法，含义是将配置文件中配置 <code>app.proper.key</code>, <code>app.proper.id</code>, <code>app.proper.value</code>三个配置的值，赋值给上面的bean</p><ul><li>即通过注解<code>ConfigurationProperties</code>来制定配置的前缀</li><li>通过Bean的属性名，补上前缀，来完整定位配置信息的Key，并获取Value赋值给这个Bean</li></ul><p>上面这个过程，配置的注入，从有限的经验来看，多半是反射来实现的，所以这个Bean属性的Getter/Setter方法得加一下，上面借助了Lombok来实现，标一个<code>@Component</code>表示这是个Bean，托付给Spring的ApplicationConttext来管理</p><h3 id="_3-读取测试" tabindex="-1"><a class="header-anchor" href="#_3-读取测试" aria-hidden="true">#</a> 3. 读取测试</h3><p>配置文件<code>application.properties</code>信息如下</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token comment">#服务端口号</span>
<span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">8081</span>

<span class="token key attr-name">app.proper.key</span><span class="token punctuation">=</span><span class="token value attr-value">\${random.uuid}</span>
<span class="token key attr-name">app.proper.id</span><span class="token punctuation">=</span><span class="token value attr-value">\${random.int}</span>
<span class="token key attr-name">app.proper.value</span><span class="token punctuation">=</span><span class="token value attr-value">test123</span>

<span class="token key attr-name">app.demo.val</span><span class="token punctuation">=</span><span class="token value attr-value">autoInject</span>

<span class="token key attr-name">user.name</span><span class="token punctuation">=</span><span class="token value attr-value">一灰灰Blog</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>写一个DemoController来返回读取的配置值</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">Environment</span> environment<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">ProperBean</span> properBean<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${app.demo.val}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> autoInject<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${app.demo.not:dada}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> notExists<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${user.name}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;show&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;properBean&quot;</span><span class="token punctuation">,</span> properBean<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;autoInject&quot;</span><span class="token punctuation">,</span> autoInject<span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;env&quot;</span><span class="token punctuation">,</span> environment<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;server.port&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;not&quot;</span><span class="token punctuation">,</span> notExists<span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问后输出如下</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;autoInject&quot;</span><span class="token operator">:</span> <span class="token string">&quot;autoInject&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;not&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dada&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;env&quot;</span><span class="token operator">:</span> <span class="token string">&quot;8081&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;properBean&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ProperBean(key=d4f49141-fa67-4e4c-9e23-c495ff02fda7, id=132483528, value=test123)&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意上面的<code>not</code> 和 <code>name</code>返回</p><ul><li>属性<code>notExists</code>对应的配置信息，在配置文件中没有定义，所以返回默认的data</li><li>属性<code>name</code>对应的配置信息 <code>user.name</code> 在<code>application.properties</code>文件中是<code>一灰灰Blog</code>，但是返回了user（测试环境为mac，mac系统的用户名为user，为啥叫user？因为某某人...） <ul><li>造成这个的根源是application.properties的配置被更高优先级的系统配置覆盖了</li></ul></li></ul><h3 id="_4-小结" tabindex="-1"><a class="header-anchor" href="#_4-小结" aria-hidden="true">#</a> 4. 小结</h3><p>前面主要介绍了常见的三种获取配置信息的方式，但遗留了几个问题</p>`,44),v={href:"http://user.name",target:"_blank",rel:"noopener noreferrer"},m=n("li",null,[s("如何读取其他配置文件如 "),n("code",null,"xxx.properties"),s(" 的配置信息（能读取么？）")],-1),b=n("li",null,"配置文件中的 ${random.int} 是什么鬼？",-1),g=n("li",null,"SpringBoot的默认配置是些啥",-1),h=n("h2",{id:"ii-其他",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ii-其他","aria-hidden":"true"},"#"),s(" II. 其他")],-1),y=n("h3",{id:"_0-项目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0-项目","aria-hidden":"true"},"#"),s(" 0. 项目")],-1),_={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"},q={href:"https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/000-properties",target:"_blank",rel:"noopener noreferrer"};function f(w,x){const a=i("ExternalLinkIcon");return p(),o("div",null,[r,d,c(" more "),k,n("ul",null,[n("li",null,[s("配置信息读取的优先级问题（为什么 "),n("a",v,[s("user.name"),e(a)]),s(" 配置被覆盖？）")]),m,b,g]),h,y,n("ul",null,[n("li",null,[s("工程："),n("a",_,[s("spring-boot-demo"),e(a)])]),n("li",null,[s("modal： "),n("a",q,[s("spring-boot-demo#000-properties"),e(a)])])])])}const j=t(u,[["render",f],["__file","01.180919-SpringBoot基础篇配置信息之如何读取配置信息.html.vue"]]);export{j as default};
