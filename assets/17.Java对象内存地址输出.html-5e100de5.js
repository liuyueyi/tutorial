import{_ as a,V as e,W as t,X as p,Y as n,Z as s,a1 as o}from"./framework-094145d2.js";const c={},l=n("h1",{id:"实战17-java对象内存地址输出",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#实战17-java对象内存地址输出","aria-hidden":"true"},"#"),s(" 实战17：Java对象内存地址输出")],-1),i=n("h2",{id:"输出对象地址",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#输出对象地址","aria-hidden":"true"},"#"),s(" 输出对象地址")],-1),u=n("p",null,[s("当一个对象没有重写"),n("code",null,"hascode"),s("方法时，它返回的内存地址，当覆盖之后，我们有什么办法获取对象的内存地址么?")],-1),d=n("ul",null,[n("li",null,[s("使用 "),n("code",null,"System.identityHashCode()"),s(" 输出内存地址")])],-1),r=o(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">BaseDo</span> base <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BaseDo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    base<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> addr <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>base<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;|&quot;</span> <span class="token operator">+</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">BaseDo</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果如:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>997608398|997608398
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个有啥用？</p><ul><li>判断两个对象是否为同一个对象时，可以借用（我是在验证Mybatis的一级缓存的，判断返回的Entity是否确实是同一个的时候以此来判定的）</li></ul>`,5);function k(v,m){return e(),t("div",null,[l,i,u,d,p(" more "),r])}const b=a(c,[["render",k],["__file","17.Java对象内存地址输出.html.vue"]]);export{b as default};
