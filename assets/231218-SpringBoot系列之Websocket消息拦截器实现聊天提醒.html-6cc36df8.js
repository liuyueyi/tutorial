import{_ as e,V as p,W as o,X as c,Y as n,Z as s,$ as t,a1 as i,F as l}from"./framework-094145d2.js";const u="/tutorial/imgs/231218/00.jpg",r="/tutorial/imgs/231218/01.gif",k={},d=n("p",null,"在上一篇文章中，我们成功地为WebSocket的聊天应用添加了身份验证功能。然而，当时遗留了一个关键问题：当一个新用户加入群聊时，我们希望向群聊内的其他成员发送一条欢迎消息，以告知他们有新朋友加入了。那么，如何实现这一需求呢？",-1),m=n("p",null,[s("接下来，我们将重点介绍如何使用"),n("code",null,"ChannelInterceptor"),s("来实现加入/退出群聊的通知功能。")],-1),v=i(`<h2 id="i-实例演示" tabindex="-1"><a class="header-anchor" href="#i-实例演示" aria-hidden="true">#</a> I. 实例演示</h2><h3 id="_1-项目搭建" tabindex="-1"><a class="header-anchor" href="#_1-项目搭建" aria-hidden="true">#</a> 1. 项目搭建</h3><p>项目搭建过程与前文类似，请直接参考上文 或者 查看文末的项目源码</p><h3 id="_2-websocket配置" tabindex="-1"><a class="header-anchor" href="#_2-websocket配置" aria-hidden="true">#</a> 2. WebSocket配置</h3><p>在之前介绍的几篇博文中，我们提到了通过实现接口<code>WebSocketMessageBrokerConfigure</code>在之前介绍的几篇博文中，我们提到了通过实现接口<code>WebSocketMessageBrokerConfigurer</code> 来进行 WebSocket 的配置。</p><p>本文的重点正是在这个配置类中进行实现，因此我们将借此机会回顾一下之前的内容。</p><ul><li>首先，我们需要创建一个配置类，并实现 <code>WebSocketMessageBrokerConfigurer</code> 接口。然后，我们可以重写其中的方法来配置 WebSocket 的相关参数和消息代理。</li><li>在 <code>configureMessageBroker</code> 方法中，我们可以指定使用的消息代理（例如：SimpleBroker）以及对应的前缀（用于路由消息）。同时，我们还可以设置订阅者模式（<code>subscriptionChannel</code>）和广播模式（<code>publisherChannel</code>），以便在不同的场景下使用不同的通信方式。</li><li>接下来，在 <code>registerStompEndpoints</code> 方法中，我们可以注册一个或多个端点（<code>endpoint</code>），并为每个端点指定一个路径（<code>path</code>）。这样，客户端就可以通过这个路径与服务器进行 WebSocket 通信了。</li><li>最后，在 <code>addInterceptors</code> 方法中，我们可以添加一些拦截器（<code>interceptor</code>），用于处理 WebSocket 连接、消息发送和接收等过程中的一些逻辑。例如，我们可以添加一个身份验证拦截器，用于验证客户端的身份信息。</li></ul><p><code>WebSocketMessageBrokerConfigurer</code> 接口允许我们配置 Stomp 协议的各种属性，包括端点、拦截器、消息转换器等。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableWebSocketMessageBroker</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StompConfiguration</span> <span class="token keyword">implements</span> <span class="token class-name">WebSocketMessageBrokerConfigurer</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 这里定义的是客户端接收服务端消息的相关信息
     *
     * <span class="token keyword">@param</span> <span class="token parameter">registry</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureMessageBroker</span><span class="token punctuation">(</span><span class="token class-name">MessageBrokerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 消息代理指定了客户端订阅地址，前端订阅的就是这个路径, 接收后端发送的消息</span>
        <span class="token comment">// 对应 index.js中的 stompClient.subscribe(&#39;/topic/hello&#39;</span>
        registry<span class="token punctuation">.</span><span class="token function">enableSimpleBroker</span><span class="token punctuation">(</span><span class="token string">&quot;/topic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 表示配置一个或多个前缀，通过这些前缀过滤出需要被注解方法处理的消息。</span>
        <span class="token comment">// 例如，前缀为 /app 的 destination 可以通过@MessageMapping注解的方法处理，</span>
        <span class="token comment">// 而其他 destination （例如 /topic /queue）将被直接交给 broker 处理</span>
        registry<span class="token punctuation">.</span><span class="token function">setApplicationDestinationPrefixes</span><span class="token punctuation">(</span><span class="token string">&quot;/app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 添加一个服务端点，来接收客户端的连接
     * 即客户端创建ws时，指定的地址, let socket = new WebSocket(&quot;ws://ws/hello&quot;);
     *
     * <span class="token keyword">@param</span> <span class="token parameter">registry</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerStompEndpoints</span><span class="token punctuation">(</span><span class="token class-name">StompEndpointRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Endpoint指定了客户端建立连接时的请求地址</span>
        registry<span class="token punctuation">.</span><span class="token function">addEndpoint</span><span class="token punctuation">(</span><span class="token string">&quot;/ws/chat/{channel}&quot;</span>
                <span class="token comment">// 设置拦截器，从cookie中识别出登录用户</span>
                <span class="token punctuation">.</span><span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token function">authHandshakeInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">withSockJS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 定义接收客户端发送消息的拦截器
     *
     * <span class="token keyword">@param</span> <span class="token parameter">registration</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureClientInboundChannel</span><span class="token punctuation">(</span><span class="token class-name">ChannelRegistration</span> registration<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        registration<span class="token punctuation">.</span><span class="token function">interceptors</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SocketInChannelInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 定义后端返回消息给客户端的拦截器
     *
     * <span class="token keyword">@param</span> <span class="token parameter">registration</span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureClientOutboundChannel</span><span class="token punctuation">(</span><span class="token class-name">ChannelRegistration</span> registration<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        registration<span class="token punctuation">.</span><span class="token function">interceptors</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SocketOutChannelInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>configureMessageBroker()方法</strong></p><p>配置消息代理与消息转发</p><ul><li><code>registry.enableSimpleBroker(&quot;/topic&quot;)</code>: 启用简单的消息代理，即对于客户端而言，前端需要订阅的就是这个路径，如对应 index.js中的 <code>stompClient.subscribe(&#39;/topic/hello&#39;, xx)</code></li><li><code>registry.setApplicationDestinationPrefixes(&quot;/app&quot;)</code>: 设置了目标转发的前缀为<code>/app</code>，客户端发送给<code>/app/xxx</code>的消息，会被转发给<code>@MessageMapping</code>注解修饰的方法</li></ul><p>如我们定义的消息转发实现</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChatController</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 当接受到客户端发送的消息时, 发送的路径是： /app/hello/xxx (这个/app前缀是 StompConfiguration 中的配置的)
     * 将返回结果推送给所有订阅了 /topic/chat/channel 的消费者
     *
     * <span class="token keyword">@param</span> <span class="token parameter">content</span>
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@MessageMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hello/{channel}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">String</span> content<span class="token punctuation">,</span> <span class="token annotation punctuation">@DestinationVariable</span><span class="token punctuation">(</span><span class="token string">&quot;channel&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> channel<span class="token punctuation">,</span> <span class="token class-name">SimpMessageHeaderAccessor</span> headerAccessor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> text <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;【%s】发送内容：%s&quot;</span><span class="token punctuation">,</span> headerAccessor<span class="token punctuation">.</span><span class="token function">getSessionAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;uname&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">WsAnswerHelper</span><span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">&quot;/topic/chat/&quot;</span> <span class="token operator">+</span> channel<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>registerStompEndpoints()方法</strong></p><p>注册连接端点</p><ul><li><code>registry.addEndpoint(&quot;/ws/chat/{channel}&quot;)</code>: 添加端点，对应的就是客户端建立连接的url</li><li><code>.addInterceptors(authHandshakeInterceptor())</code>: 上文中用于身份识别的拦截器</li></ul><p>此外对于跨域支持，也是在这里进行设置，如在上面的链式使用中，添加 <code>.setAllowedOrigins(&quot;*&quot;)</code></p><p><strong>configureClientInboundChannel()方法</strong></p><p>用于设置接收客户端消息的相关配置参数，如线程连接参数、拦截器配置</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureClientInboundChannel</span><span class="token punctuation">(</span><span class="token class-name">ChannelRegistration</span> registration<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    registration<span class="token punctuation">.</span><span class="token function">taskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">corePoolSize</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">maxPoolSize</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">queueCapacity</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keepAliveSeconds</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    registration<span class="token punctuation">.</span><span class="token function">interceptors</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SocketInChannelInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于拦截器<code>SocketInChannelInterceptor</code>为我们自定义的实现，其内部实现了我们对聊天通知的核心逻辑；咱们下一节再看它</p><p>请注意上面配置的taskExecutor, 上面的几个配置参数和线程池的配置参数别无二致，一般建议是使用自定义的线程池来进行管理；方便监控</p><p><strong>configureClientOutboundChannel()方法</strong></p><p>与前面的使用姿势一致，唯一的区别则在于它主要设置的是服务端返回消息给客户端的相关配置，或者拦截</p><h3 id="_3-管道拦截" tabindex="-1"><a class="header-anchor" href="#_3-管道拦截" aria-hidden="true">#</a> 3. 管道拦截</h3><p>在完成前面的配置后，接下来我们将进入管道拦截器的重点部分。我们的目标是在用户进入或离开群聊时，向群聊的其他成员推送一条通知。</p><p>为了实现这一目标，一个直观的方案是监控客户端的订阅和取消订阅操作，并在此基础上进行相应的操作。因此，我们的核心实现将基于之前定义的<code>SocketInChannelInterceptor</code>。</p><p>首先来看一下管道拦截器的接口签名</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ChannelInterceptor</span> <span class="token punctuation">{</span>
    <span class="token comment">// 消息实际发送到channel之前调用</span>
    <span class="token annotation punctuation">@Nullable</span>
    <span class="token keyword">default</span> <span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">preSend</span><span class="token punctuation">(</span><span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> message<span class="token punctuation">,</span> <span class="token class-name">MessageChannel</span> channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> message<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 消息发送到channel之后调用</span>
    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">postSend</span><span class="token punctuation">(</span><span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> message<span class="token punctuation">,</span> <span class="token class-name">MessageChannel</span> channel<span class="token punctuation">,</span> <span class="token keyword">boolean</span> sent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 发送完毕之后调用，无论有没有异常，都会被回调</span>
    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">afterSendCompletion</span><span class="token punctuation">(</span><span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> message<span class="token punctuation">,</span> <span class="token class-name">MessageChannel</span> channel<span class="token punctuation">,</span> <span class="token keyword">boolean</span> sent<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于消息广播通知，我们放在<code>afterSendCompletion</code>来实现，判断客户端的命令，对于订阅/取消订阅进行处理</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SocketInChannelInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">ChannelInterceptor</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterSendCompletion</span><span class="token punctuation">(</span><span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> message<span class="token punctuation">,</span> <span class="token class-name">MessageChannel</span> channel<span class="token punctuation">,</span> <span class="token keyword">boolean</span> sent<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;IN: afterSendCompletion: {}, sent: {}&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span> sent<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">StompHeaderAccessor</span> headerAccessor <span class="token operator">=</span> <span class="token class-name">StompHeaderAccessor</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//消息头访问器</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>headerAccessor<span class="token punctuation">.</span><span class="token function">getCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">// 避免非stomp消息类型，例如心跳检测</span>

        <span class="token comment">// 订阅成功，回复一个订阅成功的消息</span>
        <span class="token class-name">String</span> uname <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> headerAccessor<span class="token punctuation">.</span><span class="token function">getSessionAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span><span class="token string">&quot;uname&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>headerAccessor<span class="token punctuation">.</span><span class="token function">getCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">StompCommand</span><span class="token punctuation">.</span><span class="token constant">SUBSCRIBE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 订阅成功，回复一个订阅成功的消息</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[IN-After] {} 订阅完成: {}&quot;</span><span class="token punctuation">,</span> uname<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">WsAnswerHelper</span><span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> message<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;simpDestination&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;🔔【系统消息】：欢迎: 【&quot;</span> <span class="token operator">+</span> uname <span class="token operator">+</span> <span class="token string">&quot;】 加入聊天!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>headerAccessor<span class="token punctuation">.</span><span class="token function">getCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">StompCommand</span><span class="token punctuation">.</span><span class="token constant">UNSUBSCRIBE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// fixme 需要注意，下面这个要求取消订阅时，将订阅的 destination 也传递过来，否则这个离开的消息不知道发送给谁</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[IN-After] {} 取消订阅: {}&quot;</span><span class="token punctuation">,</span> uname<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">WsAnswerHelper</span><span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> message<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;simpSubscriptionId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;🔔【系统消息】：【&quot;</span> <span class="token operator">+</span> uname <span class="token operator">+</span> <span class="token string">&quot;】 离开了聊天!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">ChannelInterceptor</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">afterSendCompletion</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> channel<span class="token punctuation">,</span> sent<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的订阅实现相对简单，主要有下面几个关键知识点：</p><ol><li>封装消息头访问器： <code>StompHeaderAccessor.wrap(message)</code>， 简化请求相关信息的获取方式</li><li>判断交互类型： <code>headerAccessor.getCommand()</code></li><li>获取请求头：</li></ol><ul><li><code>headerAccessor.getHeader(&quot;simpDestination&quot;)</code></li><li><code>message.getHeaders().get(&quot;simpDestination&quot;)</code></li></ul><p>需要注意一点：直接可以从请求头中找到客户端订阅的是哪个群组(通过<code>destination</code>)，但是对于取消订阅时，则拿不到这个信息了，因此需要客户端再取消时，将这个关键信息回传给我们</p><h3 id="_4-前端订阅-取消订阅" tabindex="-1"><a class="header-anchor" href="#_4-前端订阅-取消订阅" aria-hidden="true">#</a> 4. 前端订阅/取消订阅</h3><p>前面说到了需要再取消订阅的时候，告诉后端退出的是哪个群组，所以我们的客户端的使用上，需要做一些小的适配调整</p><p>完整的前端代码可以参考项目源码中的 <code>chat.html</code>， 下面是关键的订阅/取消订阅逻辑</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> subscribeMap <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token doc-comment comment">/**
 * 订阅
 * <span class="token keyword">@param</span> <span class="token parameter">ref</span>
 * <span class="token keyword">@param</span> <span class="token parameter">id</span>
 */</span>
<span class="token keyword">function</span> <span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token parameter">ref<span class="token punctuation">,</span> id<span class="token punctuation">,</span> showMsgId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> channel <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">#</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;准备订阅: &quot;</span><span class="token punctuation">,</span> channel<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token constant">SUBS_ID</span> <span class="token operator">=</span> <span class="token string">&quot;/topic/chat/&quot;</span> <span class="token operator">+</span> channel<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>ref<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&#39;btn-success&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>stompClient <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;请先建立链接&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 执行订阅</span>
        ref<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">&#39;订阅成功&#39;</span><span class="token punctuation">;</span>
        ref<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&#39;btn-success&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ref<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;btn-danger&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">#</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">&quot;disabled&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 订阅，并保存返回的对象，用户后续的取消订阅</span>
        subscribeMap<span class="token punctuation">[</span>channel<span class="token punctuation">]</span> <span class="token operator">=</span> stompClient<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">&#39;/topic/chat/&#39;</span> <span class="token operator">+</span> channel<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">greeting</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 表示这个长连接，订阅了 &quot;/topic/hello&quot; , 这样后端像这个路径转发消息时，我们就可以拿到对应的返回</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;resp: &quot;</span><span class="token punctuation">,</span> greeting<span class="token punctuation">.</span>body<span class="token punctuation">)</span>
                <span class="token function">showGreeting</span><span class="token punctuation">(</span>showMsgId<span class="token punctuation">,</span> greeting<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token constant">SUBS_ID</span><span class="token punctuation">}</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 取消订阅</span>
        ref<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">&#39;开始订阅&#39;</span><span class="token punctuation">;</span>
        ref<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;btn-success&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        ref<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&#39;btn-danger&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">#</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">&quot;disabled&quot;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 下面这种取消订阅方式，和if中的取消订阅方式等价</span>
        <span class="token comment">// stompClient.unsubscribe(SUBS_ID);</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>subscribeMap<span class="token punctuation">[</span>channel<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            subscribeMap<span class="token punctuation">[</span>channel<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            subscribeMap<span class="token punctuation">[</span>channel<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再上面的实现中，使用一个对象<code>subscribeMap</code>来存储订阅关系，并设置了订阅的ID 正好等于订阅的<code>channel</code>, 这样在订阅/取消订阅时，都会新增一个id的请求头，如下图所示，这样后端就可以根据这个id来做离开群聊的广播通知</p><figure><img src="`+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_5-效果演示" tabindex="-1"><a class="header-anchor" href="#_5-效果演示" aria-hidden="true">#</a> 5. 效果演示</h3><p>接下来我们实际演示一下，开始订阅/和结束订阅时，其他的小伙伴是否可以收到相关的提示消息</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>从上图可以比较直观的看到，当一个用户加入群聊时，其他用户/自己均可以正常收到对应的系统通知消息；离开群聊时，因为取消了订阅所以也就只有其他的小伙伴能收到系统消息，而自己是收不到的</p><h3 id="_6-小结" tabindex="-1"><a class="header-anchor" href="#_6-小结" aria-hidden="true">#</a> 6. 小结</h3><p>本文主要介绍了管道拦截器，用于在接收和发送客户端消息时进行定制开发，以满足特定需求场景。</p><p>目前为止，我们所讨论的都是与群聊相关的内容。然而，如果后台系统希望向用户推送私人消息，例如提醒用户在线时间过长需要休息的提示消息，应该如何实现呢？</p><h2 id="iii-不能错过的源码和相关知识点" tabindex="-1"><a class="header-anchor" href="#iii-不能错过的源码和相关知识点" aria-hidden="true">#</a> III. 不能错过的源码和相关知识点</h2><h3 id="_0-项目" tabindex="-1"><a class="header-anchor" href="#_0-项目" aria-hidden="true">#</a> 0. 项目</h3>',51),b={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-case/207-websocket-chat",target:"_blank",rel:"noopener noreferrer"};function h(f,y){const a=l("ExternalLinkIcon");return p(),o("div",null,[d,m,c(" more "),v,n("ul",null,[n("li",null,[s("工程："),n("a",b,[s("https://github.com/liuyueyi/spring-boot-demo"),t(a)])]),n("li",null,[s("源码："),n("a",g,[s("https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-case/207-websocket-chat"),t(a)])])])])}const S=e(k,[["render",h],["__file","231218-SpringBoot系列之Websocket消息拦截器实现聊天提醒.html.vue"]]);export{S as default};
