import{_ as i,V as c,W as l,Y as n,Z as s,$ as a,X as u,a0 as r,a1 as t,F as e}from"./framework-094145d2.js";const k="/tutorial/imgs/190513/00.jpg",d="/tutorial/imgs/190513/01.jpg",v="/tutorial/imgs/190513/02.jpg",m="/tutorial/imgs/190513/03.jpg",b="/tutorial/imgs/190513/04.jpg",g="/tutorial/imgs/190513/05.jpg",h="/tutorial/imgs/190513/06.jpg",y="/tutorial/imgs/190513/07.jpg",f="/tutorial/imgs/190513/08.jpg",w="/tutorial/imgs/190513/09.jpg",_="/tutorial/imgs/190513/10.jpg",B="/tutorial/imgs/190513/11.jpg",S="/tutorial/imgs/190513/12.jpg",E={},x=n("p",null,"判断一个网站值不值钱的一个重要标准就是看pv/uv，那么你知道pv,uv是怎么统计的么？当然现在有第三方做的比较完善的可以直接使用，但如果让我们自己来实现这么一个功能，应该怎么做呢？",-1),V={href:"https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-case/124-redis-sitecount",target:"_blank",rel:"noopener noreferrer"},A=t('<h2 id="i-背景及需求" tabindex="-1"><a class="header-anchor" href="#i-背景及需求" aria-hidden="true">#</a> I. 背景及需求</h2><p>为了看看我的博客是不是我一个人的单机游戏，所以就想着统计一下总的访问量，每日的访问人数，哪些博文又是大家感兴趣的，点击得多的；</p><p>因此就萌发了自己撸一个pv/uv统计的服务，当然我这个也不需要特别完善高大上，能满足我自己的基本需要就可以了</p><ul><li>希望统计站点(域名）总访问次数</li><li>希望统计站点总的访问人数，当前访问者在访问人数中的排名（即这个ip是所有访问ip中的第多少位访问的这个站点）</li><li>每个子页面都有访问次数，访问总人数，当前ip访问的排名统计</li><li>同一个ip，同一天内访问同一个子页面，pv次数只加1次；隔天之后，再次访问pv+1</li></ul><h2 id="ii-方案设计" tabindex="-1"><a class="header-anchor" href="#ii-方案设计" aria-hidden="true">#</a> II. 方案设计</h2><p>前面的背景和需求，可以说大致说明了我们要做个什么东西，以及需要注意哪些事项，再进行方案设计的过程中，则需要对需求进行详细拆解</p><h3 id="_1-术语说明" tabindex="-1"><a class="header-anchor" href="#_1-术语说明" aria-hidden="true">#</a> 1. 术语说明</h3><p>前面提到了pv,uv，在我们的实际实现中，会发现这个服务中对于pv,uv的定义和标准定义并不是完全一致的，下面进行说明</p><h4 id="a-pv" tabindex="-1"><a class="header-anchor" href="#a-pv" aria-hidden="true">#</a> a. pv</h4><p><code>page viste</code>, 每个页面的访问次数，在本服务中，我们的pv指的是总量，即从开始接入时，到现在总的访问次数</p><p>但是这里有个限制： <strong>一个合法的ip，一天之内pv统计次数只能+1次</strong></p><ul><li>根据ip进行区分，因此需要获取访问者ip</li><li>同一天内，这个ip访问相同的URI，只能算一次有效pv；第二天之后，再次访问，则可以再算一次有效pv</li></ul><h4 id="b-hot" tabindex="-1"><a class="header-anchor" href="#b-hot" aria-hidden="true">#</a> b. hot</h4><p>前面的pv针对ip进行了限制，一个ip同一天的访问，只能计算一次，大部分情况下这种统计并没有什么问题，但是如果一个文章写得特别有参考意义，导致有人重复的看，仔细的看，换着花样的刷新看，这个时候统计下总的访问次数是不是也挺好的</p><p>因此在这个服务中，引入了hot（热度）的概念，对于一个uri而言，只要一次点击，hot+1</p><h4 id="c-uv" tabindex="-1"><a class="header-anchor" href="#c-uv" aria-hidden="true">#</a> c. uv</h4><p><code>unique visitor</code>, 这个就是统计URI的访问ip数</p><h3 id="_2-流程图" tabindex="-1"><a class="header-anchor" href="#_2-流程图" aria-hidden="true">#</a> 2. 流程图</h3><p>通过前面三个术语的定义，我们的操作流程就相对清晰了，我们的服务接收一个IP和URI，然后操作对应的pv,uv,hot并返回</p><ul><li>首先判断这个ip是否为第一次访问这个URI</li><li>是，则pv+1, uv+1, hot+1</li><li>否，表示之前访问过，uv就不能变了 <ul><li>判断是否今天第一次访问</li><li>是，今天访问过，那么pv不变，hot+1</li><li>否，之前访问过，今天没有，pv可以+1， hot+1</li></ul></li></ul><p>对应的流程图如下</p><figure><img src="'+k+'" alt="流程图" tabindex="0" loading="lazy"><figcaption>流程图</figcaption></figure><h3 id="_3-数据结构" tabindex="-1"><a class="header-anchor" href="#_3-数据结构" aria-hidden="true">#</a> 3. 数据结构</h3><p>流程清晰之后，接下来就需要看下pv,uv,hot三个数据怎么存了</p><h4 id="a-pv-1" tabindex="-1"><a class="header-anchor" href="#a-pv-1" aria-hidden="true">#</a> a. pv</h4><p>pv保存的就是访问次数，与ip无关，所以kv存储就可以满足我们的需求了，这里的key为uri，value则保存pv的值</p><h4 id="b-hot-1" tabindex="-1"><a class="header-anchor" href="#b-hot-1" aria-hidden="true">#</a> b. hot</h4><p>hot和pv类似，同样用kv可以满足要求</p><h4 id="c-uv-1" tabindex="-1"><a class="header-anchor" href="#c-uv-1" aria-hidden="true">#</a> c. uv</h4><p>uv这里有两个数据，一个是uv总数，要给是这个ip的访问排名，redis中有个zset数据结构正好就可以做这个</p><p>zset数据结构中，我们定义value为ip，score为ip的排名，那么uv就是最大的score了</p><h4 id="d-结构图" tabindex="-1"><a class="header-anchor" href="#d-结构图" aria-hidden="true">#</a> d. 结构图</h4><figure><img src="'+d+`" alt="流程图" tabindex="0" loading="lazy"><figcaption>流程图</figcaption></figure><h3 id="_4-方案设计" tabindex="-1"><a class="header-anchor" href="#_4-方案设计" aria-hidden="true">#</a> 4. 方案设计</h3><p>流程清晰，结构设计出来之后，就可以进入具体的方案设计环节了，在这个环节中，我们引入一个app的维度，这样我们的服务就可以通用了；</p><p>每个使用者都申请一个app，那么这个使用者的请求的所有站点统计数据，都关联到这个app上，这样也有利于后续统计了</p><h4 id="a-接口api" tabindex="-1"><a class="header-anchor" href="#a-接口api" aria-hidden="true">#</a> a. 接口API</h4><p>引入了app之后，结合前面的两个参数ip + URI，我们的请求参数就清晰了</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VisitReqDTO</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 应用区分
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> app<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 访问者ip
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> ip<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 访问的URI
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> uri<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们返回的数据，pv + uv + rank + hot，所以返回的基础VO如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Created by @author yihui in 16:19 19/5/12.
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VisitVO</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * pv，与传统的有点区别，这里表示这个url的总访问次数；每个ip，一天次数只+1
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> pv<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * uv 页面总的ip访问数
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> uv<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 当前ip，第一次访问本url的排名
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> rank<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 热度，每次访问计数都+1
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> hot<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">VisitVO</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name">VisitVO</span><span class="token punctuation">(</span><span class="token class-name">VisitVO</span> visitVO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>pv <span class="token operator">=</span> visitVO<span class="token punctuation">.</span>pv<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>uv <span class="token operator">=</span> visitVO<span class="token punctuation">.</span>uv<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>rank <span class="token operator">=</span> visitVO<span class="token punctuation">.</span>rank<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>hot <span class="token operator">=</span> visitVO<span class="token punctuation">.</span>hot<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外需要注意一点的是，发起一个子页面的请求时，这个时候我们基于域名的站点总数统计也应该被触发（简单来说，访问<code>http://spring.hhui.top/spring-blog/</code>时，不仅这个uri的统计需要更新， <code>spring.hhui.top</code>这个域名的pv,uv,hot也需要随之统计）</p><p>因此我们最终的返回对象应该是</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SiteVisitDTO</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 站点访问统计
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">VisitVO</span> siteVO<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 页面访问统计
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">VisitVO</span> uriVO<span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有输出，又返回，那么访问api就简单了</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">SiteVisitDTO</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">VisitReqDTO</span> reqDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="b-hot相关api" tabindex="-1"><a class="header-anchor" href="#b-hot相关api" aria-hidden="true">#</a> b. hot相关api</h4><p>hot数据结构为hash，每次请求过来，都是次数+1，因此直接使用redis的 <code>hIncrBy</code>，实现计数+1，并返回最终的计数</p><ul><li>key: <code>&quot;hot_cnt_&quot; + app</code> 作为hash的key</li><li>field: 使用URI作为hash的field</li><li>value: 保存具体的hot，整型</li></ul><figure><img src="`+v+`" alt="hot api" tabindex="0" loading="lazy"><figcaption>hot api</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 应用的热度统计计数
 *
 * <span class="token keyword">@param</span> <span class="token parameter">app</span>
 * <span class="token keyword">@return</span>
 */</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">buildHotKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> app<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;hot_cnt_&quot;</span> <span class="token operator">+</span> app<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 热度，每访问一次，计数都+1
 *
 * <span class="token keyword">@param</span> <span class="token parameter">key</span>
 * <span class="token keyword">@param</span> <span class="token parameter">uri</span>
 * <span class="token keyword">@return</span>
 */</span>
<span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">addHot</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="c-pv相关api" tabindex="-1"><a class="header-anchor" href="#c-pv相关api" aria-hidden="true">#</a> c. pv相关api</h4><p>pv与hot不一样的是并不是每次都需要计数+1，所以它需要有一个查询pv的接口，和一个计数+1的接口</p><ul><li>key: <code>&quot;site_cnt_&quot; + app</code> 作为hash的key</li><li>field: 使用URI作为hash的field</li><li>value: 保存具体的pv，整型</li></ul><figure><img src="`+m+`" alt="pv api" tabindex="0" loading="lazy"><figcaption>pv api</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 应用的pv统计计数
 *
 * <span class="token keyword">@param</span> <span class="token parameter">app</span>
 * <span class="token keyword">@return</span>
 */</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">buildPvKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> app<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;site_cnt_&quot;</span> <span class="token operator">+</span> app<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 获取pv
 *
 * pv存储结果为hash，一个应用一个key; field 为uri； value为pv
 *
 * <span class="token keyword">@return</span> null表示首次有人访问；这个时候需要+1
 */</span>
<span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">getPv</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token doc-comment comment">/**
 * pv 次数+1
 *
 * <span class="token keyword">@param</span> <span class="token parameter">key</span>
 * <span class="token keyword">@param</span> <span class="token parameter">uri</span>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addPv</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> uri<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="d-uv相关api" tabindex="-1"><a class="header-anchor" href="#d-uv相关api" aria-hidden="true">#</a> d. uv相关api</h4><p>前面说到uv采用的是zset数据结构，其中ip作为value，排名作为score；所以uv就是最大的score</p><ul><li>key: 根据app和uri来确定uv的key</li><li>value: 存储访问者ip（ipv4格式的）</li><li>score: 排名，整型</li></ul><figure><img src="`+b+`" alt="uv api" tabindex="0" loading="lazy"><figcaption>uv api</figcaption></figure><p>因为uv需要返回两个结构，所以我们的返回需要注意</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * app+uri 对应的uv
 *
 * <span class="token keyword">@param</span> <span class="token parameter">app</span>
 * <span class="token keyword">@param</span> <span class="token parameter">uri</span>
 * <span class="token keyword">@return</span>
 */</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">buildUvKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> app<span class="token punctuation">,</span> <span class="token class-name">String</span> uri<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;uri_rank_&quot;</span> <span class="token operator">+</span> app <span class="token operator">+</span> <span class="token string">&quot;_&quot;</span> <span class="token operator">+</span> uri<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token doc-comment comment">/**
 * 获取uri对应的uv，以及当前访问ip的历史访问排名
 * 使用zset来存储，key为uri唯一标识；value为ip；score为访问的排名
 *
 * <span class="token keyword">@param</span> <span class="token parameter">key</span> : 由app与URI来生成，即一个uri维护一个uv集
 * <span class="token keyword">@param</span> <span class="token parameter">ip</span>: 访问者ip
 * <span class="token keyword">@return</span> 返回uv/rank, 如果对应的值为0，表示没有访问过
 */</span>
<span class="token keyword">public</span> <span class="token class-name">ImmutablePair</span><span class="token operator">&lt;</span><span class="token doc-comment comment">/** uv */</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token doc-comment comment">/** rank */</span><span class="token class-name">Long</span><span class="token operator">&gt;</span> <span class="token function">getUv</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> ip<span class="token punctuation">)</span> 

<span class="token doc-comment comment">/**
 * uv +1
 *
 * <span class="token keyword">@param</span> <span class="token parameter">key</span>
 * <span class="token keyword">@param</span> <span class="token parameter">ip</span>
 * <span class="token keyword">@param</span> <span class="token parameter">rank</span>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUv</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> ip<span class="token punctuation">,</span> <span class="token class-name">Long</span> rank<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="e-今日是否访问" tabindex="-1"><a class="header-anchor" href="#e-今日是否访问" aria-hidden="true">#</a> e. 今日是否访问</h4><p>前面的都还算比较简单，接下来有个非常有意思的地方了，如何判断这个ip，今天访问没访问？</p><p><strong>方案一</strong></p><p>要实现这个功能，一个自然而然的想法就出来了，直接kv就行了</p><ul><li>key: <code>uri_年月日_ip</code></li><li>value: 1</li></ul><p>如果value存在，表示今天访问过，如果不存在，则没有访问过</p><p><strong>方案二</strong></p><p>前面那个倒是没啥问题，如果我希望统计今天某个uri的ip访问数，上面的就不太好处理，很容易想到用hash来替换</p><ul><li>key: <code>uri_年月日</code></li><li>field: <code>ip</code></li><li>value: 1</li></ul><p>同样value存在，则表示今天访问过；否则没有访问过</p><p>如果需要统计今天访问的总数，hlen一把就可以；还可以获取今天所有访问过的ip</p><p><strong>方案三</strong></p><p>前面的方案看似挺好的，但是有个缺陷，如果我这个站点特别火，每天几百万的uv，这个存储量就有点夸张了</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 简单的算一下 10w uv的存储开销
field: ip   # 一个ip(255.255.255.255) 字符串存储算 16B；
value: 1  # 算 1B

10w uv = 10w * 17B = 1.7MB

# 假设这个站点有100个10w uv的子页面，每天存储需要 170MB
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过上面简单的计算可以看出这存储开销对于比较火的站点而言，有点吓人；然后可以找其他的存储方式了，所以bitmap可以隆重登场了</p><figure><img src="`+g+'" alt="bitmap" tabindex="0" loading="lazy"><figcaption>bitmap</figcaption></figure><p>我们将位数组分成四节，分别于ip的四段对应，因为ipv4每一段取值是(0-2^8)，所以我们的位数组，也只需要(4 * 8b = 4B)，相比较前面的方案来说，存储空间大大减少</p><p>看到上面这个结构，会有一个疑问，为什么分成四节？将ip转成整形，作为下标，一个就可以了</p><ul><li>答：将ip转为整型，取值将是 (0 - 2^32)，需要的bitmap空间为<code>4Gb</code>，显然不如上面优雅</li></ul>',81),R={class:"hint-container danger"},q=t('<p class="hint-container-title">警告</p><p><strong>重要说明</strong></p><p>这种方案有个致命的问题，就是误判，如</p><ul><li>192.168.1.1</li><li>192.168.3.3</li></ul><p>这两个ip访问之后，会导致误判 <code>192.168.1.3</code> 也访问了，所以不要进行拆分；当不拆分直接bitmap时，固定消耗为 <code>2^32b = 512M</code>，实际上更推荐的做法则是前面介绍的HyperLogLog</p><p>下面的实现主要看一下设计思路以及redis的使用，请不要直接应用，会有坑，会有坑，会有坑！！！</p>',6),L=t(`<hr><p><strong>方案确定</strong></p><p>上面三个方案中，我们选择了第三个，对应的api设计也比较简单了</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>
<span class="token comment">// 获取今天的日期，格式为 20190512</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getToday</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">LocalDate</span> date <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> year <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> month <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getMonthValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> day <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">StringBuilder</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> buf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>month <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">&quot;0&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>month<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>day <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">&quot;0&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
    
    
<span class="token doc-comment comment">/**
 * 每日访问统计
 *
 * <span class="token keyword">@param</span> <span class="token parameter">app</span>
 * <span class="token keyword">@param</span> <span class="token parameter">uri</span>
 * <span class="token keyword">@return</span>
 */</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">buildUriTagKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> app<span class="token punctuation">,</span> <span class="token class-name">String</span> uri<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;uri_tag_&quot;</span> <span class="token operator">+</span> <span class="token class-name">DateUtil</span><span class="token punctuation">.</span><span class="token function">getToday</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;_&quot;</span> <span class="token operator">+</span> app <span class="token operator">+</span> <span class="token string">&quot;_&quot;</span> <span class="token operator">+</span> uri<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token doc-comment comment">/**
 * 标记ip访问过这个key
 *
 * <span class="token keyword">@param</span> <span class="token parameter">key</span>
 * <span class="token keyword">@param</span> <span class="token parameter">ip</span>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tagVisit</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> ip<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iii-服务实现" tabindex="-1"><a class="header-anchor" href="#iii-服务实现" aria-hidden="true">#</a> III. 服务实现</h2><p>前面接口设计出来，按照既定思路实现就属于比较轻松的环节了</p><h4 id="_1-pv接口实现" tabindex="-1"><a class="header-anchor" href="#_1-pv接口实现" aria-hidden="true">#</a> 1. pv接口实现</h4><p>pv两个接口，一个访问，一个计数+1，都可以直接使用redisTemplate的基础操作完成</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 获取pv
 *
 * pv存储结果为hash，一个应用一个key; field 为uri； value为pv
 *
 * <span class="token keyword">@return</span> null表示首次有人访问；这个时候需要+1
 */</span>
<span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">getPv</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> uri<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RedisCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">doInRedis</span><span class="token punctuation">(</span><span class="token class-name">RedisConnection</span> connection<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DataAccessException</span> <span class="token punctuation">{</span>
            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">hGet</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> uri<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>ans <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> ans<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">return</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * pv 次数+1
 *
 * <span class="token keyword">@param</span> <span class="token parameter">key</span>
 * <span class="token keyword">@param</span> <span class="token parameter">uri</span>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addPv</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> uri<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RedisCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Void</span> <span class="token function">doInRedis</span><span class="token punctuation">(</span><span class="token class-name">RedisConnection</span> connection<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DataAccessException</span> <span class="token punctuation">{</span>
            connection<span class="token punctuation">.</span><span class="token function">hIncrBy</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> uri<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-hot接口实现" tabindex="-1"><a class="header-anchor" href="#_2-hot接口实现" aria-hidden="true">#</a> 2. hot接口实现</h3><p>只有一个计数+1的接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 热度，每访问一次，计数都+1
 *
 * <span class="token keyword">@param</span> <span class="token parameter">key</span>
 * <span class="token keyword">@param</span> <span class="token parameter">uri</span>
 * <span class="token keyword">@return</span>
 */</span>
<span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">addHot</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> uri<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RedisCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">doInRedis</span><span class="token punctuation">(</span><span class="token class-name">RedisConnection</span> connection<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DataAccessException</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> connection<span class="token punctuation">.</span><span class="token function">hIncrBy</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> uri<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-uv接口实现" tabindex="-1"><a class="header-anchor" href="#_3-uv接口实现" aria-hidden="true">#</a> 3. uv接口实现</h3><p>uv的获取会麻烦一点，首先获取uv值，然后获取ip对应的排名；如果uv为0，排名也就不需要再获取了</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 获取uri对应的uv，以及当前访问ip的历史访问排名
 * 使用zset来存储，key为uri唯一标识；value为ip；score为访问的排名
 *
 * <span class="token keyword">@param</span> <span class="token parameter">key</span> : 由app与URI来生成，即一个uri维护一个uv集
 * <span class="token keyword">@param</span> <span class="token parameter">ip</span>: 访问者ip
 * <span class="token keyword">@return</span> 返回uv/rank, 如果对应的值为0，表示没有访问过
 */</span>
<span class="token keyword">public</span> <span class="token class-name">ImmutablePair</span><span class="token operator">&lt;</span><span class="token doc-comment comment">/** uv */</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token doc-comment comment">/** rank */</span><span class="token class-name">Long</span><span class="token operator">&gt;</span> <span class="token function">getUv</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> ip<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取总uv数，也就是最大的score</span>
    <span class="token class-name">Long</span> uv <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RedisCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">doInRedis</span><span class="token punctuation">(</span><span class="token class-name">RedisConnection</span> connection<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DataAccessException</span> <span class="token punctuation">{</span>
            <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RedisZSetCommands<span class="token punctuation">.</span>Tuple</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">zRangeWithScores</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token number">0L</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token class-name">Double</span> score <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getScore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> score<span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>uv <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> uv <span class="token operator">==</span> <span class="token number">0L</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 表示还没有人访问过</span>
        <span class="token keyword">return</span> <span class="token class-name">ImmutablePair</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">0L</span><span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 获取ip对应的访问排名</span>
    <span class="token class-name">Long</span> rank <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RedisCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Long</span> <span class="token function">doInRedis</span><span class="token punctuation">(</span><span class="token class-name">RedisConnection</span> connection<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DataAccessException</span> <span class="token punctuation">{</span>
            <span class="token class-name">Double</span> score <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">zScore</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ip<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> score <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0L</span> <span class="token operator">:</span> score<span class="token punctuation">.</span><span class="token function">longValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token class-name">ImmutablePair</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>uv<span class="token punctuation">,</span> rank<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * uv +1
 *
 * <span class="token keyword">@param</span> <span class="token parameter">key</span>
 * <span class="token keyword">@param</span> <span class="token parameter">ip</span>
 * <span class="token keyword">@param</span> <span class="token parameter">rank</span>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUv</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> ip<span class="token punctuation">,</span> <span class="token class-name">Long</span> rank<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RedisCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Void</span> <span class="token function">doInRedis</span><span class="token punctuation">(</span><span class="token class-name">RedisConnection</span> connection<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DataAccessException</span> <span class="token punctuation">{</span>
            connection<span class="token punctuation">.</span><span class="token function">zAdd</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rank<span class="token punctuation">,</span> ip<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-今天是否访问过" tabindex="-1"><a class="header-anchor" href="#_4-今天是否访问过" aria-hidden="true">#</a> 4. 今天是否访问过</h3><p>前面选择位数组方式来记录是否访问过，这里的实现选择了简单的实现方式，利用四个bitmap来分别对应ip的四段；（实际上一个也可以实现，可以想一想应该怎么做）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 判断ip今天是否访问过
 * 采用bitset来判断ip是否有访问，key由app与uri唯一确定
 *
 * <span class="token keyword">@return</span> true 表示今天访问过/ false 表示今天没有访问过
 */</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">visitToday</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> ip<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ip地址进行分段 127.0.0.1</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> segments <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> segments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">contain</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">&quot;_&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>segments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">contain</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Integer</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RedisCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Boolean</span> <span class="token function">doInRedis</span><span class="token punctuation">(</span><span class="token class-name">RedisConnection</span> connection<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DataAccessException</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> connection<span class="token punctuation">.</span><span class="token function">getBit</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token doc-comment comment">/**
 * 标记ip访问过这个key
 *
 * <span class="token keyword">@param</span> <span class="token parameter">key</span>
 * <span class="token keyword">@param</span> <span class="token parameter">ip</span>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tagVisit</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">String</span> ip<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> segments <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>ip<span class="token punctuation">,</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> segments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> finalI <span class="token operator">=</span> i<span class="token punctuation">;</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RedisCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Void</span> <span class="token function">doInRedis</span><span class="token punctuation">(</span><span class="token class-name">RedisConnection</span> connection<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DataAccessException</span> <span class="token punctuation">{</span>
                connection<span class="token punctuation">.</span><span class="token function">setBit</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">&quot;_&quot;</span> <span class="token operator">+</span> finalI<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>segments<span class="token punctuation">[</span>finalI<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-api接口实现" tabindex="-1"><a class="header-anchor" href="#_4-api接口实现" aria-hidden="true">#</a> 4. api接口实现</h3><p>前面基本的接口实现之后，api就是流程图的翻译了，也没有什么特别值得说到的地方，唯一需要注意的就是URI的解析，域名作为站点；uri由path + segment构成</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ImmutablePair</span><span class="token operator">&lt;</span><span class="token doc-comment comment">/**host*/</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token doc-comment comment">/**uri*/</span><span class="token class-name">String</span><span class="token operator">&gt;</span> <span class="token function">foramtUri</span><span class="token punctuation">(</span><span class="token class-name">String</span> uri<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">URI</span> u <span class="token operator">=</span> <span class="token constant">URI</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> host <span class="token operator">=</span> u<span class="token punctuation">.</span><span class="token function">getHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> u<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">80</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        host <span class="token operator">=</span> host <span class="token operator">+</span> <span class="token string">&quot;:80&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">String</span> baseUri <span class="token operator">=</span> u<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>u<span class="token punctuation">.</span><span class="token function">getFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        baseUri <span class="token operator">=</span> baseUri <span class="token operator">+</span> <span class="token string">&quot;#&quot;</span> <span class="token operator">+</span> u<span class="token punctuation">.</span><span class="token function">getFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span>baseUri<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        baseUri <span class="token operator">=</span> host <span class="token operator">+</span> baseUri<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        baseUri <span class="token operator">=</span> host<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token class-name">ImmutablePair</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> baseUri<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
    
<span class="token doc-comment comment">/**
 * uri 访问统计
 *
 * <span class="token keyword">@param</span> <span class="token parameter">reqDTO</span>
 * <span class="token keyword">@return</span>
 */</span>
<span class="token keyword">public</span> <span class="token class-name">SiteVisitDTO</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">VisitReqDTO</span> reqDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ImmutablePair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> uri <span class="token operator">=</span> <span class="token class-name">URIUtil</span><span class="token punctuation">.</span><span class="token function">foramtUri</span><span class="token punctuation">(</span>reqDTO<span class="token punctuation">.</span><span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 获取站点的访问记录</span>
    <span class="token class-name">VisitVO</span> uriVisit <span class="token operator">=</span> <span class="token function">doVisit</span><span class="token punctuation">(</span>reqDTO<span class="token punctuation">.</span><span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> uri<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> reqDTO<span class="token punctuation">.</span><span class="token function">getIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">VisitVO</span> siteVisit<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>uri<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>uri<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        siteVisit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VisitVO</span><span class="token punctuation">(</span>uriVisit<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        siteVisit <span class="token operator">=</span> <span class="token function">doVisit</span><span class="token punctuation">(</span>reqDTO<span class="token punctuation">.</span><span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> uri<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> reqDTO<span class="token punctuation">.</span><span class="token function">getIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SiteVisitDTO</span><span class="token punctuation">(</span>siteVisit<span class="token punctuation">,</span> uriVisit<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token class-name">VisitVO</span> <span class="token function">doVisit</span><span class="token punctuation">(</span><span class="token class-name">String</span> app<span class="token punctuation">,</span> <span class="token class-name">String</span> uri<span class="token punctuation">,</span> <span class="token class-name">String</span> ip<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> pvKey <span class="token operator">=</span> <span class="token function">buildPvKey</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> hotKey <span class="token operator">=</span> <span class="token function">buildHotKey</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> uvKey <span class="token operator">=</span> <span class="token function">buildUvKey</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> todayVisitKey <span class="token operator">=</span> <span class="token function">buildUriTagKey</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Long</span> hot <span class="token operator">=</span> visitService<span class="token punctuation">.</span><span class="token function">addHot</span><span class="token punctuation">(</span>hotKey<span class="token punctuation">,</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 获取pv数据</span>
    <span class="token class-name">Long</span> pv <span class="token operator">=</span> visitService<span class="token punctuation">.</span><span class="token function">getPv</span><span class="token punctuation">(</span>pvKey<span class="token punctuation">,</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pv <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> pv <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 历史没有访问过，则pv + 1, uv +1</span>
        visitService<span class="token punctuation">.</span><span class="token function">addPv</span><span class="token punctuation">(</span>pvKey<span class="token punctuation">,</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span>
        visitService<span class="token punctuation">.</span><span class="token function">addUv</span><span class="token punctuation">(</span>uvKey<span class="token punctuation">,</span> ip<span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        visitService<span class="token punctuation">.</span><span class="token function">tagVisit</span><span class="token punctuation">(</span>todayVisitKey<span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">VisitVO</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">,</span> hot<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token comment">// 判断ip今天是否访问过</span>
    <span class="token keyword">boolean</span> visit <span class="token operator">=</span> visitService<span class="token punctuation">.</span><span class="token function">visitToday</span><span class="token punctuation">(</span>todayVisitKey<span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 获取uv及排名</span>
    <span class="token class-name">ImmutablePair</span><span class="token operator">&lt;</span><span class="token doc-comment comment">/**uv*/</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token doc-comment comment">/**rank*/</span><span class="token class-name">Long</span><span class="token operator">&gt;</span> uv <span class="token operator">=</span> visitService<span class="token punctuation">.</span><span class="token function">getUv</span><span class="token punctuation">(</span>uvKey<span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>visit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 今天访问过，则不需要修改pv/uv；可以直接返回所需数据</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">VisitVO</span><span class="token punctuation">(</span>pv<span class="token punctuation">,</span> uv<span class="token punctuation">.</span><span class="token function">getLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> uv<span class="token punctuation">.</span><span class="token function">getRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hot<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 今天没访问过</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>uv<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token number">0L</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 首次有人访问, pv + 1; uv +1</span>
        visitService<span class="token punctuation">.</span><span class="token function">addPv</span><span class="token punctuation">(</span>pvKey<span class="token punctuation">,</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span>
        visitService<span class="token punctuation">.</span><span class="token function">addUv</span><span class="token punctuation">(</span>uvKey<span class="token punctuation">,</span> ip<span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        visitService<span class="token punctuation">.</span><span class="token function">tagVisit</span><span class="token punctuation">(</span>todayVisitKey<span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">VisitVO</span><span class="token punctuation">(</span>pv <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">,</span> <span class="token number">1L</span><span class="token punctuation">,</span> hot<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>uv<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token number">0L</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这个ip首次访问, pv +1; uv + 1</span>
        visitService<span class="token punctuation">.</span><span class="token function">addPv</span><span class="token punctuation">(</span>pvKey<span class="token punctuation">,</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span>
        visitService<span class="token punctuation">.</span><span class="token function">addUv</span><span class="token punctuation">(</span>uvKey<span class="token punctuation">,</span> ip<span class="token punctuation">,</span> uv<span class="token punctuation">.</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        visitService<span class="token punctuation">.</span><span class="token function">tagVisit</span><span class="token punctuation">(</span>todayVisitKey<span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">VisitVO</span><span class="token punctuation">(</span>pv <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> uv<span class="token punctuation">.</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> uv<span class="token punctuation">.</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> hot<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这个ip的今天第一次访问， pv + 1 ; uv 不变</span>
        visitService<span class="token punctuation">.</span><span class="token function">addPv</span><span class="token punctuation">(</span>pvKey<span class="token punctuation">,</span> uri<span class="token punctuation">)</span><span class="token punctuation">;</span>
        visitService<span class="token punctuation">.</span><span class="token function">tagVisit</span><span class="token punctuation">(</span>todayVisitKey<span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">VisitVO</span><span class="token punctuation">(</span>pv <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> uv<span class="token punctuation">.</span>left<span class="token punctuation">,</span> uv<span class="token punctuation">.</span>right<span class="token punctuation">,</span> hot<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="iv-测试与小结" tabindex="-1"><a class="header-anchor" href="#iv-测试与小结" aria-hidden="true">#</a> IV. 测试与小结</h2><h3 id="_1-测试" tabindex="-1"><a class="header-anchor" href="#_1-测试" aria-hidden="true">#</a> 1. 测试</h3><p>搭建一个简单的web服务，开始测试</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Created by @author yihui in 18:58 19/5/12.
 */</span>
<span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VisitController</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">SiteVisitFacade</span> siteVisitFacade<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;visit&quot;</span><span class="token punctuation">)</span>
    <span class="token annotation punctuation">@ResponseBody</span>
    <span class="token keyword">public</span> <span class="token class-name">SiteVisitDTO</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">VisitReqDTO</span> reqDTO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> siteVisitFacade<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span>reqDTO<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="a-首次访问" tabindex="-1"><a class="header-anchor" href="#a-首次访问" aria-hidden="true">#</a> a. 首次访问</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 首次访问，返回的全是1</span>
http://localhost:8080/visit?app<span class="token operator">=</span>demo<span class="token operator">&amp;</span><span class="token assign-left variable">ip</span><span class="token operator">=</span><span class="token number">192.168</span>.0.1<span class="token operator">&amp;</span><span class="token assign-left variable">uri</span><span class="token operator">=</span>http://hhui.top/home
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+h+`" alt="test a" tabindex="0" loading="lazy"><figcaption>test a</figcaption></figure><h4 id="b-再次访问" tabindex="-1"><a class="header-anchor" href="#b-再次访问" aria-hidden="true">#</a> b. 再次访问</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 再次访问，因为同样是今天访问，除了hot为2；其他的都是1</span>
http://localhost:8080/visit?app<span class="token operator">=</span>demo<span class="token operator">&amp;</span><span class="token assign-left variable">ip</span><span class="token operator">=</span><span class="token number">192.168</span>.0.1<span class="token operator">&amp;</span><span class="token assign-left variable">uri</span><span class="token operator">=</span>http://hhui.top/home
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+y+`" alt="test b" tabindex="0" loading="lazy"><figcaption>test b</figcaption></figure><h4 id="c-同ip-不同uri" tabindex="-1"><a class="header-anchor" href="#c-同ip-不同uri" aria-hidden="true">#</a> c. 同ip，不同URI</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 同一ip，换个uri；除站点返回hot为3，其他的全是1</span>
http://localhost:8080/visit?app<span class="token operator">=</span>demo<span class="token operator">&amp;</span><span class="token assign-left variable">ip</span><span class="token operator">=</span><span class="token number">192.168</span>.0.1<span class="token operator">&amp;</span><span class="token assign-left variable">uri</span><span class="token operator">=</span>http://hhui.top/index
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+f+`" alt="test c" tabindex="0" loading="lazy"><figcaption>test c</figcaption></figure><h4 id="d-不同ip-接上一个uri" tabindex="-1"><a class="header-anchor" href="#d-不同ip-接上一个uri" aria-hidden="true">#</a> d. 不同ip，接上一个URI</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 换个ip，这个uri；主站点hot=4, pv,uv,rank=2; uriVO全是2</span>
http://localhost:8080/visit?app<span class="token operator">=</span>demo<span class="token operator">&amp;</span><span class="token assign-left variable">ip</span><span class="token operator">=</span><span class="token number">192.168</span>.0.2<span class="token operator">&amp;</span><span class="token assign-left variable">uri</span><span class="token operator">=</span>http://hhui.top/index
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+w+`" alt="test d" tabindex="0" loading="lazy"><figcaption>test d</figcaption></figure><h4 id="e-上一个ip-换第一个uri" tabindex="-1"><a class="header-anchor" href="#e-上一个ip-换第一个uri" aria-hidden="true">#</a> e. 上一个ip，换第一个uri</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 换个ip，这个uri；主站点hot=5, pv,uv,rank=2; uriVO hot为3，其他全是2</span>
http://localhost:8080/visit?app<span class="token operator">=</span>demo<span class="token operator">&amp;</span><span class="token assign-left variable">ip</span><span class="token operator">=</span><span class="token number">192.168</span>.0.2<span class="token operator">&amp;</span><span class="token assign-left variable">uri</span><span class="token operator">=</span>http://hhui.top/home
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+_+'" alt="test e" tabindex="0" loading="lazy"><figcaption>test e</figcaption></figure><h4 id="f-第二天访问" tabindex="-1"><a class="header-anchor" href="#f-第二天访问" aria-hidden="true">#</a> f. 第二天访问</h4><p>真要第二天操作有点麻烦，为了验证，直接干掉今天的占位标记</p><figure><img src="'+B+`" alt="rest" tabindex="0" loading="lazy"><figcaption>rest</figcaption></figure><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 模拟第二天访问， pv + 1， uv不变， hot+1</span>
http://localhost:8080/visit?app<span class="token operator">=</span>demo<span class="token operator">&amp;</span><span class="token assign-left variable">ip</span><span class="token operator">=</span><span class="token number">192.168</span>.0.2<span class="token operator">&amp;</span><span class="token assign-left variable">uri</span><span class="token operator">=</span>http://hhui.top/home
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+S+'" alt="test f" tabindex="0" loading="lazy"><figcaption>test f</figcaption></figure><h3 id="_2-小结" tabindex="-1"><a class="header-anchor" href="#_2-小结" aria-hidden="true">#</a> 2. 小结</h3><p>本文可以说是redis学习之后，一个挺好的应用场景，涉及到了我们常用和不常用的几个数据结构，包括hash,zset,bitmap, 其中关于bitmap的使用个人感觉还是非常有意思的；</p><p>对于redis操作不太熟的，可以参考下前面几篇博文</p>',48),j={href:"http://spring.hhui.top/spring-blog/2018/10/29/181029-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8B%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/",target:"_blank",rel:"noopener noreferrer"},O={href:"http://spring.hhui.top/spring-blog/2018/11/01/181101-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BJedis%E9%85%8D%E7%BD%AE/",target:"_blank",rel:"noopener noreferrer"},I={href:"http://spring.hhui.top/spring-blog/2018/11/08/181108-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BString%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E8%AF%BB%E5%86%99/",target:"_blank",rel:"noopener noreferrer"},D={href:"http://spring.hhui.top/spring-blog/2018/11/09/181109-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BList%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/",target:"_blank",rel:"noopener noreferrer"},U={href:"http://spring.hhui.top/spring-blog/2018/12/02/181202-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BHash%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/",target:"_blank",rel:"noopener noreferrer"},T={href:"http://spring.hhui.top/spring-blog/2018/12/11/181211-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BSet%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/",target:"_blank",rel:"noopener noreferrer"},C={href:"http://spring.hhui.top/spring-blog/2018/12/12/181212-SpringBoot%E9%AB%98%E7%BA%A7%E7%AF%87Redis%E4%B9%8BZSet%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/",target:"_blank",rel:"noopener noreferrer"},F={href:"http://spring.hhui.top/spring-blog/2018/12/25/181225-SpringBoot%E5%BA%94%E7%94%A8%E7%AF%87%E4%B9%8B%E5%80%9F%E5%8A%A9Redis%E5%AE%9E%E7%8E%B0%E6%8E%92%E8%A1%8C%E6%A6%9C%E5%8A%9F%E8%83%BD/",target:"_blank",rel:"noopener noreferrer"},K=n("p",null,[n("strong",null,"注意")],-1),P=n("p",null,"上面这个服务，在实际使用中，需要考虑并发问题，很明显我们上的设计并不是多线程安全的，也就是说，在并发量大的时候，获取的数据极有可能和预期的不一致",-1),z=n("p",null,[n("strong",null,"扩展")],-1),H=n("p",null,"上文的设计中，每个uri都有一组位图，我们可以通过遍历，获取value为1的下标，来统计这个页面今天的pv数，以及更详细的今天哪些ip访问过；同样也可以分析站点的今日UV数，以及对应的访问ip",-1),N=n("p",null,[n("strong",null,"说明")],-1),M=n("p",null,"文中采用分段计算，判断ip是否访问过的数据模型是有问题的，比如 192.1.1.1 和 192.0.2.1两个ip访问过之后，会错误的认为 192.1.2.1 这个ip也访问过； 请不要直接在生产中使用上面的做法，会有坑；如有需要，考虑HyperLogLog吧",-1),Z=n("h3",{id:"_0-项目",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0-项目","aria-hidden":"true"},"#"),s(" 0. 项目")],-1),G={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"},J={href:"https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-case/124-redis-sitecount",target:"_blank",rel:"noopener noreferrer"};function W(Y,X){const p=e("ExternalLinkIcon"),o=e("quote");return c(),l("div",null,[x,n("p",null,[s("本篇内容较长，源码如右 ➡️ "),n("a",V,[s("https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-case/124-redis-sitecount"),a(p)])]),u(" more "),A,n("div",R,[q,a(o,null,{default:r(()=>[s(" by 一灰灰 2019.08.14")]),_:1})]),L,n("ul",null,[n("li",null,[n("a",j,[s("181029-SpringBoot高级篇Redis之基本配置"),a(p)])]),n("li",null,[n("a",O,[s("181101-SpringBoot高级篇Redis之Jedis配置"),a(p)])]),n("li",null,[n("a",I,[s("181108-SpringBoot高级篇Redis之String数据结构的读写"),a(p)])]),n("li",null,[n("a",D,[s("181109-SpringBoot高级篇Redis之List数据结构使用姿势"),a(p)])]),n("li",null,[n("a",U,[s("181202-SpringBoot高级篇Redis之Hash数据结构使用姿势"),a(p)])]),n("li",null,[n("a",T,[s("181211-SpringBoot高级篇Redis之Set数据结构使用姿势"),a(p)])]),n("li",null,[n("a",C,[s("181212-SpringBoot高级篇Redis之ZSet数据结构使用姿势"),a(p)])]),n("li",null,[n("a",F,[s("181225-SpringBoot应用篇之借助Redis实现排行榜功能"),a(p)])])]),K,P,z,H,N,M,Z,n("ul",null,[n("li",null,[s("工程："),n("a",G,[s("https://github.com/liuyueyi/spring-boot-demo"),a(p)])]),n("li",null,[s("源码: "),n("a",J,[s("https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-case/124-redis-sitecount"),a(p)])])])])}const Q=i(E,[["render",W],["__file","09.190513-SpringBoot系列教程应用篇之借助Redis搭建一个简单站点统计服务.html.vue"]]);export{Q as default};
