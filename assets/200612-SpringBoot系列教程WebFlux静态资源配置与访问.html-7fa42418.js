import{_ as p,V as o,W as c,X as i,Y as n,Z as s,$ as t,a1 as e,F as l}from"./framework-094145d2.js";const u="/tutorial/imgs/200612/00.jpg",r="/tutorial/imgs/200612/01.jpg",d="/tutorial/imgs/200612/02.jpg",k="/tutorial/imgs/200612/03.jpg",g="/tutorial/imgs/200612/04.jpg",m="/tutorial/imgs/200612/05.jpg",v="/tutorial/imgs/200612/06.jpg",b="/tutorial/imgs/200612/07.jpg",h={},f=n("p",null,"上一篇博文介绍SpringMVC的静态资源访问，那么在WebFlux中，静态资源的访问姿势是否一致呢",-1),_=e(`<h2 id="i-默认配置" tabindex="-1"><a class="header-anchor" href="#i-默认配置" aria-hidden="true">#</a> I. 默认配置</h2><p>与SpringBoot的默认配置一样，WebFlux同样是<code>classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/</code></p><p>即，将静态文件放在这四个目录下，可以直接访问</p><h3 id="_1-项目演示" tabindex="-1"><a class="header-anchor" href="#_1-项目演示" aria-hidden="true">#</a> 1. 项目演示</h3><p>创建一个SpringBoot项目，添加依赖(本文使用的版本为: <code>2.2.1-RELEASE</code>)</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-webflux<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在资源路径下添加目录 <code>static</code>，目录下添加两个html文件，如下图</p><figure><img src="`+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>实现启动类，不添加额外逻辑，既可以直接通过完整url方式访问静态资源</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>主要观察上面三个请求，放在<code>index.html</code>是无法直接访问到的，因为它所在的目录并不在默认的四个静态资源路径中</p><h3 id="_2-url映射" tabindex="-1"><a class="header-anchor" href="#_2-url映射" aria-hidden="true">#</a> 2. Url映射</h3><p>上面是直接通过静态资源文件名的方式进行访问，那么WebFlux是否可以实现SpringMVC那种，根据视图名返回View的方式呢？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ViewAction</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;a.html&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>直接访问，结果发现500，找不到名为<code>a.html</code>的视图</p><figure><img src="`+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这种方式不行的话，改用WebFlux的路由写法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">RouterFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerResponse</span><span class="token punctuation">&gt;</span></span> <span class="token function">indexRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">RouterFunctions</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token class-name">RequestPredicates</span><span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    request <span class="token operator">-&gt;</span> <span class="token class-name">ServerResponse</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">TEXT_HTML</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bodyValue</span><span class="token punctuation">(</span><span class="token string">&quot;b.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="ii-自定义配置路径" tabindex="-1"><a class="header-anchor" href="#ii-自定义配置路径" aria-hidden="true">#</a> II. 自定义配置路径</h2><p>如果我们希望指定一个自定义的路径，是否可以如SpringMvc那样，修改配置or代码设置映射完成呢?</p><p>在资源目录下，新加两个文件夹，分别是 o1, o2</p><figure><img src="'+g+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1-配置修改" tabindex="-1"><a class="header-anchor" href="#_1-配置修改" aria-hidden="true">#</a> 1. 配置修改</h3><p>如SpringMVC，修改静态资源配置</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">resources</span><span class="token punctuation">:</span>
    <span class="token key atrule">static-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>/o1/<span class="token punctuation">,</span>classpath<span class="token punctuation">:</span>/META<span class="token punctuation">-</span>INF/resources/<span class="token punctuation">,</span>classpath<span class="token punctuation">:</span>/resources/<span class="token punctuation">,</span>classpath<span class="token punctuation">:</span>/static/<span class="token punctuation">,</span>classpath<span class="token punctuation">:</span>/public/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后访问 <code>/o1.html</code>，发现404，这种直接修改配置方式不行!!!</p><figure><img src="`+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-webfluxconfigurer添加映射" tabindex="-1"><a class="header-anchor" href="#_2-webfluxconfigurer添加映射" aria-hidden="true">#</a> 2. WebFluxConfigurer添加映射</h3>',30),x={href:"https://docs.spring.io/spring-framework/docs/5.2.x/spring-framework-reference/web-reactive.html#webflux-config-static-resources",target:"_blank",rel:"noopener noreferrer"},y=e(`<p>直接修改启动类，实现<code>WebFluxConfigurer</code>接口，手动添加资源映射</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token keyword">implements</span> <span class="token class-name">WebFluxConfigurer</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span><span class="token class-name">ResourceHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        registry<span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">&quot;/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:/o2/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着访问 <code>/o2.html</code></p><figure><img src="`+v+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-value方式" tabindex="-1"><a class="header-anchor" href="#_3-value方式" aria-hidden="true">#</a> 3. @Value方式</h3><p>除了上述手动映射的方式之外，还有一种非主流的是方式，如</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">RouterFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ServerResponse</span><span class="token punctuation">&gt;</span></span> <span class="token function">indexRouter</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:/index.html&quot;</span><span class="token punctuation">)</span> <span class="token keyword">final</span> <span class="token class-name">Resource</span> indexHtml<span class="token punctuation">,</span>
        <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:/self/s.html&quot;</span><span class="token punctuation">)</span> <span class="token keyword">final</span> <span class="token class-name">Resource</span> sHtml<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">RouterFunctions</span><span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token class-name">RequestPredicates</span><span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/index&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            request <span class="token operator">-&gt;</span> <span class="token class-name">ServerResponse</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">TEXT_HTML</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bodyValue</span><span class="token punctuation">(</span>indexHtml<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">andRoute</span><span class="token punctuation">(</span><span class="token class-name">RequestPredicates</span><span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">&quot;/s&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    request <span class="token operator">-&gt;</span> <span class="token class-name">ServerResponse</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">TEXT_HTML</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bodyValue</span><span class="token punctuation">(</span>sHtml<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意上面的两个文件， <code>s.html</code>, <code>index.html</code>都不在默认的静态资源目录下</p><figure><img src="`+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="iii-小结" tabindex="-1"><a class="header-anchor" href="#iii-小结" aria-hidden="true">#</a> III. 小结</h2><p>文中给出了WebFlux的静态资源访问姿势，与SpringMVC有一些区别</p><ul><li>url映射时，直接返回视图名，会提示<code>Could not resolve view with name xxx</code></li><li>通过修改配置<code>spring.resources.static-locations</code> 指定新的静态资源目录无效</li></ul><p>在WebFlux中，推荐使用实现<code>WebFluxConfigure</code>接口的方式，重写<code>addResourceHandlers</code>方法来自定义资源路径映射</p><p>也可以针对单独的静态资源，借助<code>@Value</code>来手动路由</p><h2 id="ii-其他" tabindex="-1"><a class="header-anchor" href="#ii-其他" aria-hidden="true">#</a> II. 其他</h2><h3 id="_0-项目" tabindex="-1"><a class="header-anchor" href="#_0-项目" aria-hidden="true">#</a> 0. 项目</h3>',16),w={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"},q={href:"https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/200-webflux",target:"_blank",rel:"noopener noreferrer"};function R(j,S){const a=l("ExternalLinkIcon");return o(),c("div",null,[f,i(" more "),_,n("blockquote",null,[n("p",null,[s("参考自官方文档: "),n("a",x,[s("web-reactive.html#webflux-config-static-resources"),t(a)])])]),y,n("ul",null,[n("li",null,[s("工程："),n("a",w,[s("https://github.com/liuyueyi/spring-boot-demo"),t(a)])]),n("li",null,[s("源码："),n("a",q,[s("https://github.com/liuyueyi/spring-boot-demo/blob/master/spring-boot/200-webflux"),t(a)])])])])}const F=p(h,[["render",R],["__file","200612-SpringBoot系列教程WebFlux静态资源配置与访问.html.vue"]]);export{F as default};
