import{_ as t,V as l,W as c,X as d,Y as a,Z as n,$ as e,a1 as i,F as o}from"./framework-094145d2.js";const r="/tutorial/hexblog/imgs/200720/00.jpg",p="/tutorial/hexblog/imgs/200720/01.jpg",u="/tutorial/hexblog/imgs/200720/02.jpg",m="/tutorial/hexblog/imgs/200720/03.jpg",g="/tutorial/hexblog/imgs/200720/04.jpg",h="/tutorial/hexblog/imgs/200720/05.jpg",v="/tutorial/hexblog/imgs/200720/06.jpg",b="/tutorial/hexblog/imgs/200720/07.jpg",f="/tutorial/hexblog/imgs/200720/08.jpg",k="/tutorial/hexblog/imgs/200720/09.jpg",x="/tutorial/hexblog/imgs/200720/10.jpg",_="/tutorial/hexblog/imgs/200720/11.jpg",y="/tutorial/hexblog/imgs/200720/12.jpg",E="/tutorial/hexblog/imgs/200720/13.jpg",z="/tutorial/hexblog/imgs/200720/14.jpg",A="/tutorial/hexblog/imgs/200720/15.gif",w="/tutorial/hexblog/imgs/200720/16.gif",j="/tutorial/hexblog/imgs/200720/17.gif",D="/tutorial/hexblog/imgs/200720/18.gif",I="/tutorial/hexblog/imgs/200720/19.jpg",q="/tutorial/hexblog/imgs/200720/20.jpg",M="/tutorial/hexblog/imgs/200720/21.jpg",R="/tutorial/hexblog/imgs/200720/22.gif",B="/tutorial/hexblog/imgs/200720/23.gif",C="/tutorial/hexblog/imgs/200720/24.gif",S="/tutorial/hexblog/imgs/200720/25.jpg",H="/tutorial/hexblog/imgs/200720/26.jpg",G="/tutorial/hexblog/imgs/200720/27.jpg",T="/tutorial/hexblog/imgs/200720/28.gif",W="/tutorial/hexblog/imgs/200720/29.gif",O="/tutorial/hexblog/imgs/200720/30.gif",V="/tutorial/hexblog/imgs/200720/31.jpg",N="/tutorial/hexblog/imgs/200720/32.jpg",Z="/tutorial/hexblog/imgs/200720/33.jpg",X="/tutorial/hexblog/imgs/200720/34.gif",F="/tutorial/hexblog/imgs/200720/35.jpg",K="/tutorial/hexblog/imgs/200720/36.gif",Q="/tutorial/hexblog/imgs/200720/37.gif",$="/tutorial/hexblog/imgs/200720/38.jpg",L="/tutorial/hexblog/imgs/200720/39.jpg",Y="/tutorial/hexblog/imgs/200720/40.jpg",P="/tutorial/hexblog/imgs/200720/41.gif",J="/tutorial/hexblog/imgs/200720/42.gif",U="/tutorial/hexblog/imgs/200720/43.jpg",aa="/tutorial/hexblog/imgs/200720/44.jpg",na="/tutorial/hexblog/imgs/200720/45.jpg",sa={},ea=i("<p>相信每一个开发者都使用过或者说是听过git，比如大名鼎鼎的&quot;全球最大同性交友网站--GitHub&quot;就是利用git这一分布式版本控制系统来管理大家的项目的；</p><p>一般公司内的代码管理常见有两种，一个是SVN，一个是GIT；当然后者更常见，作为一个码农，如果不想被身边的小伙伴鄙视or吐槽，掌握基本的git操作技巧属于必备的生存技能了，本文不会带你成为git专家，更多的是介绍作为一个开发者，在日常的工作中，经常使用git命令以及必备的git技巧</p><p>本文主要包含以下知识点</p><ul><li>环境安装，配置</li><li>获取代吗，提交本地修改并推送</li><li>分支创建、切换、删除，合并</li><li>标签的使用姿势</li><li>如何回滚，暂存</li><li>代码冲突怎么办</li><li>手误提交了敏感信息，如何彻底删除</li></ul>",4),ia=i('<h2 id="i-基本篇" tabindex="-1"><a class="header-anchor" href="#i-基本篇" aria-hidden="true">#</a> I. 基本篇</h2><p>为方便国内的小伙伴正常使用，我们以Gitee作为演示的git服务器，关于git的基本使用姿势与github并无差别</p><h3 id="_0-git安装" tabindex="-1"><a class="header-anchor" href="#_0-git安装" aria-hidden="true">#</a> 0. Git安装</h3><p>首先我们得安装git环境，下面简单介绍一下Win/Linux/Mac三个操作系统下的安装姿势</p><h4 id="a-win" tabindex="-1"><a class="header-anchor" href="#a-win" aria-hidden="true">#</a> a. win</h4>',5),ta={href:"https://git-scm.com/download/win",target:"_blank",rel:"noopener noreferrer"},la=i(`<p>完毕之后，找到<code>git bash</code>或者是<code>git terminal</code>，打开一个类似终端的窗口，输入<code>git --version</code>命令，如果正常返回，则表示ok</p><h4 id="b-linux" tabindex="-1"><a class="header-anchor" href="#b-linux" aria-hidden="true">#</a> b. linux</h4><p>linux环境下，通常可以借助<code>apt-get</code> or <code>yum</code>来安装，如</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## ubuntu</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">git</span>

<span class="token comment">## yum</span>
<span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token function">git</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),ca={href:"https://git-scm.com/download/linux",target:"_blank",rel:"noopener noreferrer"},da=i(`<h4 id="c-mac" tabindex="-1"><a class="header-anchor" href="#c-mac" aria-hidden="true">#</a> c. mac</h4><p>Mac自带git，因此完全是可以开箱即用；当然如果我希望体验最新的git，推荐通过<code>homebrew</code>来安装</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> brew <span class="token function">install</span> <span class="token function">git</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_1-基本配置" tabindex="-1"><a class="header-anchor" href="#_1-基本配置" aria-hidden="true">#</a> 1. 基本配置</h3><p>git安装完毕之后，需要配置我们的ssh密钥，通过密钥来实现与git服务器之间的校验（避免每次都输入用户名/密码，而且安全性更高）</p><h4 id="a-判断是否存在" tabindex="-1"><a class="header-anchor" href="#a-判断是否存在" aria-hidden="true">#</a> a. 判断是否存在</h4><p>首先到根目录确定是否已经有了密钥</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看文件夹下的资源</span>
<span class="token comment"># 如果目录 .ssh 不存在，or目录下为空，则表示我们需要生成密钥</span>
$ <span class="token function">ls</span> ~/.ssh
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="b-生成密钥" tabindex="-1"><a class="header-anchor" href="#b-生成密钥" aria-hidden="true">#</a> b. 生成密钥</h4><p>生成密钥: <code>输入ssh-keygen，并一直回车</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ ssh-keygen
Generating public/private rsa key pair.
Enter <span class="token function">file</span> <span class="token keyword">in</span> <span class="token function">which</span> to save the key <span class="token punctuation">(</span>/home/deploy/.ssh/id_rsa<span class="token punctuation">)</span>:
Enter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span>:
Enter same passphrase again:
Your identification has been saved <span class="token keyword">in</span> /home/deploy/.ssh/id_rsa.
Your public key has been saved <span class="token keyword">in</span> /home/deploy/.ssh/id_rsa.pub.
The key fingerprint is:
SHA256:IxeVFUFw1y/ZIE0xwh9E8UJMlxwsYwwOp5m2yy7FANI deploy@localhost
The key&#39;s randomart image is:
+---<span class="token punctuation">[</span>RSA <span class="token number">2048</span><span class="token punctuation">]</span>----+
<span class="token operator">|</span>    <span class="token builtin class-name">.</span>    .oOXX<span class="token operator">&amp;</span><span class="token operator">=</span>+<span class="token operator">|</span>
<span class="token operator">|</span>   <span class="token builtin class-name">.</span> E   .O.oO<span class="token operator">=</span>B.<span class="token operator">|</span>
<span class="token operator">|</span>    <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> .<span class="token operator">=</span> <span class="token punctuation">..</span>o<span class="token operator">+=</span>o<span class="token operator">|</span>
<span class="token operator">|</span>       <span class="token punctuation">..</span><span class="token punctuation">..</span>   +.o<span class="token operator">|</span>
<span class="token operator">|</span>      <span class="token builtin class-name">.</span> S.     <span class="token builtin class-name">.</span> <span class="token operator">|</span>
<span class="token operator">|</span>       o.+.      <span class="token operator">|</span>
<span class="token operator">|</span>        .o       <span class="token operator">|</span>
<span class="token operator">|</span>       <span class="token punctuation">..</span>        <span class="token operator">|</span>
<span class="token operator">|</span>        <span class="token punctuation">..</span>       <span class="token operator">|</span>
+----<span class="token punctuation">[</span>SHA256<span class="token punctuation">]</span>-----+
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来在<code>~/.ssh</code>目录下将可以看到<code>id_rsa</code>与<code>id_rsa.pub</code>两个文件，接着我们需要将<code>id_rsa.pub</code>的内容，复制到gitee上，用于后续的git交互鉴权</p><h4 id="c-配置公钥" tabindex="-1"><a class="header-anchor" href="#c-配置公钥" aria-hidden="true">#</a> c. 配置公钥</h4><p>查看公钥内容</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">cat</span> id_rsa.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDIK4Skx1ZKYBlKbO5dhCpTbknUEXhiSiOtB+PSnbaQx+ZwVK+Lz3EVs3qj9qotos7kmj6CbcZDbbSVKbCM6ChYBR9k81TgB4q1CxpP7mCAe4Z2m2gAHv+POnsyXzWtvWm4E3FXliJz9/1fWRCcS+iBIyjmZcab8nvt8RqPiPL1zmW72EcyRhckNvFItiHp3aukWhF/4DUOwvjY/ms9QM7nKkZaA2uXc+Z9K4QJCRZ1vIGEqqgKQnsXtpRQXNPaaldaELo4tyzOJLv6JWJ64qEMqtrRWjpXSZOFO2QCts/bWCITwfkllLTlj+i+rV9yysPrSUbuXlTf4ZMBOWWvp/nB yihuihuiyi@gmail.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,15),oa={href:"https://gitee.com/profile/sshkeys",target:"_blank",rel:"noopener noreferrer"},ra=i('<figure><img src="'+r+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="d-测试" tabindex="-1"><a class="header-anchor" href="#d-测试" aria-hidden="true">#</a> d. 测试</h4><blockquote><p>上面的密钥作为测试密钥，写完本篇文章的时候已经删除掉了，建议大家使用自己的账号进行测试</p></blockquote><p>然后开始测试我们的配置是否ok，借助<code>ssh -T git@gitee.com</code>， 使用github的小伙伴，这个命令改成 <code>ssh -T git@github.com</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@gitee.com
The authenticity of <span class="token function">host</span> <span class="token string">&#39;gitee.com (212.64.62.174)&#39;</span> can<span class="token string">&#39;t be established.
ECDSA key fingerprint is SHA256:FQGC9Kn/eye1W8icdBgrQp+KkGYoFgbVr17bmjey0Wc.
ECDSA key fingerprint is MD5:27:e5:d3:f7:2a:9e:eb:6c:93:cd:1f:c1:47:a3:54:b1.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added &#39;</span>gitee.com,212.64.62.174<span class="token string">&#39; (ECDSA) to the list of known hosts.
Hi 一灰灰Blog! You&#39;</span>ve successfully authenticated, but GITEE.COM does not provide shell access.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-创建or同步项目" tabindex="-1"><a class="header-anchor" href="#_2-创建or同步项目" aria-hidden="true">#</a> 2. 创建or同步项目</h3><blockquote><p>在开始之前，推荐全局配置用户名和邮箱</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">&quot;一灰灰Blog&quot;</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">&quot;bangzewu@126.com&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><p>接下来我们开始进入正文（是的，前面都是开胃菜，完全可以跳过），一般来说，我们会有下面三种case，分别说明</p><h4 id="a-从0到1创建新项目" tabindex="-1"><a class="header-anchor" href="#a-从0到1创建新项目" aria-hidden="true">#</a> a. 从0到1创建新项目</h4><p>在gitee上创建一个空的仓库，步骤如下图的1,2,3,4</p><figure><img src="`+p+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>接下来在你自己的机器上，开始创建项目</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">mkdir</span> git-study
<span class="token builtin class-name">cd</span> git-study
<span class="token function">git</span> init
<span class="token function">touch</span> README.md
<span class="token function">git</span> <span class="token function">add</span> README.md
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;first commit&#39;</span>
<span class="token function">git</span> remote <span class="token function">add</span> origin https://gitee.com/liuyueyi/git-study.git
<span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="b-clone已有项目" tabindex="-1"><a class="header-anchor" href="#b-clone已有项目" aria-hidden="true">#</a> b. clone已有项目</h4><p>clone一个已有的项目可能更加常见（毕竟实际的工作中，享受创建项目的人比较是少数）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://gitee.com/liuyueyi/git-study.git
<span class="token builtin class-name">cd</span> git-study
<span class="token builtin class-name">echo</span> <span class="token string">&#39;hello git&#39;</span> <span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> README.md
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;first modify&#39;</span>
<span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="c-已有项目关联" tabindex="-1"><a class="header-anchor" href="#c-已有项目关联" aria-hidden="true">#</a> c. 已有项目关联</h4><p>我本地有一个项目，gitee上有一个非空的仓库，我希望将这两个项目关联起来，可以如下操作(这个过程和第一个其实差不多)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 在上面的项目基础上进行操作</span>
<span class="token function">rm</span> <span class="token parameter variable">-rf</span> .git

<span class="token function">git</span> init
<span class="token function">git</span> remote <span class="token function">add</span> origin https://gitee.com/liuyueyi/git-study.git
<span class="token comment"># 本地创建master分支（关于分支的创建后面有介绍）</span>
<span class="token function">git</span> checkout master
<span class="token comment"># 同步最新的代码</span>
<span class="token function">git</span> pull 
<span class="token builtin class-name">echo</span> <span class="token string">&#39;second modify&#39;</span> <span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> README.md
<span class="token function">git</span> <span class="token function">add</span> README.md
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;second modify&#39;</span>
<span class="token function">git</span> push
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="d-小结" tabindex="-1"><a class="header-anchor" href="#d-小结" aria-hidden="true">#</a> d. 小结</h4><p>创建git项目的三种方式</p><ul><li>从0到1创建:<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 初始化git</span>
<span class="token function">git</span> init
<span class="token comment"># 与远程关联</span>
<span class="token function">git</span> remote <span class="token function">add</span> origin https://gitee.com/liuyueyi/git-study.git
<span class="token comment"># 本地做一些修改</span>
<span class="token punctuation">..</span>.
<span class="token comment"># 提交</span>
<span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>clone:<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://gitee.com/liuyueyi/git-study.git
<span class="token comment"># 本地做一些修改</span>
<span class="token punctuation">..</span>.
<span class="token comment"># 提交</span>
<span class="token function">git</span> push
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>已有项目:<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> init
<span class="token function">git</span> remote <span class="token function">add</span> origin https://gitee.com/liuyueyi/git-study.git
<span class="token comment"># 同步最新代码</span>
<span class="token function">git</span> checkout master
<span class="token function">git</span> pull 
<span class="token comment"># 本地做一些修改</span>
<span class="token punctuation">..</span>.
<span class="token comment"># 提交</span>
<span class="token function">git</span> push
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h3 id="_3-修改提交" tabindex="-1"><a class="header-anchor" href="#_3-修改提交" aria-hidden="true">#</a> 3. 修改提交</h3><p>接下来进入我们日常工作中，接触频率最高的几个操作，提交本地修改并推送到服务器</p><h4 id="a-基本操作" tabindex="-1"><a class="header-anchor" href="#a-基本操作" aria-hidden="true">#</a> a. 基本操作</h4>`,25),pa={href:"http://xn--README-2g0j350hfzm.md",target:"_blank",rel:"noopener noreferrer"},ua=i(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&#39;add new file&#39;</span> <span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> new.txt
<span class="token builtin class-name">echo</span> <span class="token string">&#39;some new code&#39;</span> <span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> README.md
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在我们提交之前，先查看一下当前的状态，可以知道我们有哪些修改，有哪些需要提交</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> status
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上面只是给出了修改or新增or删除的文件，但是并不知道修改了什么，这个时候可以借助<code>diff</code>来查看</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> <span class="token function">diff</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+m+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>接下来确认没有问题，希望将修改的内容提交给服务器</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 将README.md的修改，添加到暂存区</span>
<span class="token function">git</span> <span class="token function">add</span> README.md

<span class="token comment"># 如果是希望将所有的改动都添加到暂存区，可以如下使用</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+g+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>使用<code>git commit</code>指明这次提交的说明</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;修改并提交&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>推送改动</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 精确指定推送到哪个分支</span>
<span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master
<span class="token comment"># 当本地分支与远程分支建立过绑定关系之后（如上面的操作），则可以省略后面的参数，直接如下操作即可</span>
<span class="token function">git</span> push
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="b-小结" tabindex="-1"><a class="header-anchor" href="#b-小结" aria-hidden="true">#</a> b. 小结</h4><p>这一小节的内容虽然简单，但是在实际的工作中，基本上100%会出现，所以这一小结的所有内容都属于必须熟练掌握的知识点</p><ul><li>查看本地改动: <code>git status</code></li><li>将本地修改提交到暂存区: <code>git add</code></li><li>提交commit信息: <code>git commit -m &#39;这次提交的详细说明&#39;</code></li><li>推送暂存区内容: <code>git push</code> or <code>git push -u origin master</code></li></ul><h3 id="_4-回退" tabindex="-1"><a class="header-anchor" href="#_4-回退" aria-hidden="true">#</a> 4. 回退</h3><p>在git的使用过程中，不太可能总是一帆风顺，有些时候发现提交了错误的请求到暂存区了，也有可能我需要回滚到之前的某个版本，那么可以怎么处理呢？</p><h4 id="a-工作区与暂存区" tabindex="-1"><a class="header-anchor" href="#a-工作区与暂存区" aria-hidden="true">#</a> a. 工作区与暂存区</h4><p>这一小节属于扩展，不了解这两个概念不影响你的日常操作，但是了解之后可能更有助于理解<code>add/commit</code>的作用</p><p><strong>工作区</strong></p><p>可以简单的理解为我们的项目目录，比如在我们的项目中添加、修改or删除文件，这些都是工作区的操作</p><figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>暂存区</strong></p><p>通过<code>git add</code>可以将工作区的变动，提交到暂存区</p><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>注意：如果此时再次修改已经提交到暂存区的文件，那么新的变动依然是在工作区，只有再次<code>git add</code>之后，变动才会同步到暂存区</p><p><strong>本地分支</strong></p><p>通过<code>git commit</code>将暂存区的变动，提交到当前分支</p><figure><img src="'+f+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>注意：提交到分支之后，工作区就变得干净了，但是本地的分支会领先服务器，通常这时候建议将本地变动通过<code>git push</code>同步到服务器</p><h4 id="b-版本回退" tabindex="-1"><a class="header-anchor" href="#b-版本回退" aria-hidden="true">#</a> b. 版本回退</h4><p>在我们的git操作历史中，可能有很多次提交，可以通过<code>git log</code>来查看历史日志</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> log
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+k+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在历史的提交版本中，当我希望回到某个版本时，借助<code>git reset --hard/soft 版本号</code>来实现</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> 72920bfd579ada7e62ceed2c675bce733e804433
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+x+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>请注意，上面的 <code>--hard</code> 回滚到指定的版本，且会丢弃这个版本之后的修改，也就是说我们的项目，完全回到了这个版本的时候的状态</p><p>回到之前的版本容易，但是如果这个时候我又想恢复回去，该怎么搞呢？？？</p><ul><li>借助 <code>git reflog</code> 查看历史操作记录（当然也可以直接在git服务器的commit历史上去查）</li><li>第二种姿势就是直接<code>git pull</code>拉一下最新的代码... （这种只适用于所有的本地暂存都提交给服务器的情况，当你本地有一个暂存只是commit，但是没有push，那么无法同步到哦，这种case请使用下面的姿势）</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查询每次操作命令</span>
<span class="token function">git</span> reflog

<span class="token comment"># 找到reset之前的commit id，回滚即可</span>
<span class="token function">git</span> reset <span class="token parameter variable">--hard</span> 3d85a2f
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+_+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>请注意上面的<code>--hard</code>参数，回滚到指定的版本，而且会丢掉之后的改动，那么如果我希望保存修改呢？</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> reset <span class="token parameter variable">--soft</span> 72920bfd579ada7e62ceed2c675bce733e804433
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+y+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>鉴于回退到上一个版本属于非常基础和常见的场景，我们可以使用<code>HEAD^</code>来表示回退到上一个版本，<code>HEAD^2</code>表示回退两个版本，这样就不需要每次去找Commit号了</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 回退到上一个版本</span>
<span class="token function">git</span> reset <span class="token parameter variable">--soft</span> HEAD^
<span class="token comment"># 回退两个版本</span>
<span class="token function">git</span> reset <span class="token parameter variable">--soft</span> HEAD~2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="c-撤销修改" tabindex="-1"><a class="header-anchor" href="#c-撤销修改" aria-hidden="true">#</a> c. 撤销修改</h4><p>在我们日常开发过程中，可能会遇到某个文件(or多个文件)上的修改不是我想要的，希望把这些修改都丢弃，这个时候可以怎么办呢？</p><p>借助<code>git checkout</code>来实现我们的目的，基本操作姿势如下</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> checkout -- README.md
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+E+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在上图中，详细的演示了修改文件，并丢弃修改的全过程，请注意checkout后面的<code>--</code>，用来指定文件；在后面介绍分支的时候，也会看到这个命令，可以用来切换分支；当后面没有<code>--</code>时，若后面跟上的参数对应分支存在，则切换分支；否则表示丢弃后者工作区中的改动</p><p>上面针对的是没有提交到暂存区的撤销，那么针对暂存区的撤销呢？</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 取消暂存</span>
<span class="token function">git</span> reset HEAD README.md
<span class="token comment"># 撤销修改</span>
<span class="token function">git</span> checkout -- README.md
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+z+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>既然上面提到了add之后的撤销，那么commit之后的撤销呢？我们上面介绍的版本回退其实就可以实现这个效果</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> reset <span class="token parameter variable">--hard</span> HEAD^
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+A+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="d-commit修改" tabindex="-1"><a class="header-anchor" href="#d-commit修改" aria-hidden="true">#</a> d. commit修改</h4><p>有些时候，commit对应的注释信息可能不太合适，然后我希望可以修改一下，可以如下操作</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> commit <span class="token parameter variable">--amend</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+w+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>此外，当我们将改动commit到本地分支之后，忽然发现还漏了一个改动，这个时候也可以借助上面的<code>commit --amend</code>来合并提交哦</p><figure><img src="'+j+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="e-小结" tabindex="-1"><a class="header-anchor" href="#e-小结" aria-hidden="true">#</a> e. 小结</h4><p>本节内容主要介绍了版本回退和撤销本地修改的一些操作，主要需要掌握以下几个命令</p><ul><li>工作区/暂存区/分支: <code>add</code>将工作区修改提交到暂存区，<code>commit</code>将暂存区修改提交到分支， <code>push</code>将本地分支同步到服务器</li><li><code>git log</code>：查看历史的git提交记录</li><li><code>git reflog</code>: 本地操作记录</li><li><code>git reset --soft/hard commitId</code>: 回退到指定commitId的版本，<code>--soft</code>表示保留修改，<code>--hard</code>表示丢弃修改</li><li><code>git checkout -- file</code>: 丢弃指定文件的改动</li><li><code>git commit --amend</code>: 提交信息修改和合并</li></ul><h3 id="_5-分支" tabindex="-1"><a class="header-anchor" href="#_5-分支" aria-hidden="true">#</a> 5. 分支</h3><p>我们上面的所有操作都是在默认的master分支上进行的，但是在实际的业务开发中，基本上没有哪个公司的项目只有一个分支的，试想一下所有的小伙伴都在同一个分支上开发新的功能模块，结果现在出了问题，我们要修复线上bug，但是新开发的功能又不能上线，这个时候就是灾难性的结果了</p><h4 id="a-分支创建" tabindex="-1"><a class="header-anchor" href="#a-分支创建" aria-hidden="true">#</a> a. 分支创建</h4><p>除了在Gitee/GitHub页面创建新分支之外，本地有两种常见的分支创建方式</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 创建分支</span>
<span class="token function">git</span> branch dev
<span class="token comment"># 创建并切换到res分支</span>
<span class="token function">git</span> checkout <span class="token parameter variable">-b</span> res
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+D+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="b-分支切换" tabindex="-1"><a class="header-anchor" href="#b-分支切换" aria-hidden="true">#</a> b. 分支切换</h4><p>在上面的示意图中已经演示了如何切换分支</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 切换到dev分支</span>
<span class="token function">git</span> checkout dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>请注意这里用的也是checkout，与前面丢弃工作区修改命令一致，区别在于后面接上的分支存不存在，存在切换分支；不存在则丢弃修改（丢弃工作区修改，也可以加<code>--</code>来限定）</strong></p><h4 id="c-删除分支" tabindex="-1"><a class="header-anchor" href="#c-删除分支" aria-hidden="true">#</a> c. 删除分支</h4><p>一般建议删除本地分支之前，请确保分支的内容已经合并到主分支，否则可能造成数据丢失哦</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 删除dev分支</span>
<span class="token function">git</span> branch <span class="token parameter variable">-d</span> dev

<span class="token comment"># 当我们对dev分支有修改，但是没有提交的时候，删除时会提示是否强删</span>
<span class="token function">git</span> branch <span class="token parameter variable">-D</span> dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+I+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="d-分支查询" tabindex="-1"><a class="header-anchor" href="#d-分支查询" aria-hidden="true">#</a> d. 分支查询</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看本地分支</span>
<span class="token function">git</span> branch

<span class="token comment"># 查看本地+远程分支</span>
<span class="token function">git</span> branch <span class="token parameter variable">-a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="e-分支提交" tabindex="-1"><a class="header-anchor" href="#e-分支提交" aria-hidden="true">#</a> e. 分支提交</h4><p>当我们在新的分支上进行开发，并有需要提交时，直接使用<code>git push</code>多半是不会成功的，这个时候需要指定提交到的远程分支，并建立关系</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 推送远程res分支</span>
<span class="token function">git</span> push <span class="token parameter variable">-u</span> origin res
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+q+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>疑问：本地res分支，能推送到远程的<code>master</code>分支么</p><figure><img src="'+M+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>请注意上面的提示，并不是推送成功哦</p><h4 id="f-分支合并" tabindex="-1"><a class="header-anchor" href="#f-分支合并" aria-hidden="true">#</a> f. 分支合并</h4><p>创建新的分支，并在新的分支上进行开发，最终必然会有一个将分支内容合并到主分支的过程，分支合并常常会带来另外一个问题，冲突解决，这个会在进阶篇介绍</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 切换主分支</span>
<span class="token function">git</span> checkout master
<span class="token comment"># 将res分支合并到a</span>
<span class="token function">git</span> merge res
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+R+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上面演示的是本地分支的合并，那么如果我希望将远程的res分支内容合并到master分支，可以如何操作呢</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 将远程res分支合并到当前分支</span>
<span class="token function">git</span> merge origin/res
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+B+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="g-小结" tabindex="-1"><a class="header-anchor" href="#g-小结" aria-hidden="true">#</a> g. 小结</h4><p>本节主要介绍分支相关的基本操作命令，主要包括如下知识点</p><ul><li>分支查看: <ul><li><code>git branch</code>: 查看本地分支</li><li><code>git branch -a</code>: 查看本地及远程分支</li></ul></li><li>分支创建 <ul><li><code>git checkout -b new_branch_name</code>: 创建并切换到新的分支</li><li><code>git branch new_branch_name</code>: 创建新的分支</li></ul></li><li>分支切换: <ul><li><code>git checkout new_branch</code>: 切换到新分支（请注意这个和丢弃工作区修改的命令很像哦）</li></ul></li><li>分支删除: <ul><li><code>git branch -d xxx</code>: 如果分支有未提交修改需要强删，可以用<code>-D</code></li><li><code>git push origin --delete xxx</code>: 删除远程分支</li></ul></li><li>分支提交 <ul><li><code>git push -u origin xxx</code></li></ul></li><li>分支合并 <ul><li><code>git merge xxx</code>: 将xxx分支合并到当前分支</li><li><code>git merge origin/xxx</code>: 将远程xxx分支合并到当前分支</li></ul></li></ul><h3 id="_6-标签" tabindex="-1"><a class="header-anchor" href="#_6-标签" aria-hidden="true">#</a> 6. 标签</h3><p>关于标签，可能用得不多，但是我们在看一下看远项目的时候，经常会看到release版，各种里程包，当我们完成一个大的稳定的改造之后，可以考虑添加一个tag，记录一下这个”关键“节点，如果别的小伙伴想使用，优先推荐使用这些release版的，而不是最新的（通常见于开源项目的引入使用）</p><h4 id="a-创建标签" tabindex="-1"><a class="header-anchor" href="#a-创建标签" aria-hidden="true">#</a> a. 创建标签</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 创建标签v1.0，绑定最新的commit</span>
<span class="token function">git</span> tag v1.0

<span class="token comment"># 指定comitId绑定tag</span>
<span class="token function">git</span> tag v1.0 commitId

<span class="token comment"># 创建带有说明的标签</span>
tag tag <span class="token parameter variable">-a</span> v1.0 <span class="token parameter variable">-m</span> <span class="token string">&#39;标签说明&#39;</span> commitId
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+C+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="b-查看标签" tabindex="-1"><a class="header-anchor" href="#b-查看标签" aria-hidden="true">#</a> b. 查看标签</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看标签列表</span>
<span class="token function">git</span> tag
<span class="token comment"># 查看标签v1.0对应的信息</span>
<span class="token function">git</span> show v1.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="c-推送标签" tabindex="-1"><a class="header-anchor" href="#c-推送标签" aria-hidden="true">#</a> c. 推送标签</h4><p>将本地修改的标签推送到服务器，常见有两种</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 推送1.0tag</span>
<span class="token function">git</span> push origin <span class="token number">1.0</span>
<span class="token comment"># 推送所有本地未推送的tag</span>
<span class="token function">git</span> push origin <span class="token parameter variable">--tags</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+S+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="d-删除标签" tabindex="-1"><a class="header-anchor" href="#d-删除标签" aria-hidden="true">#</a> d. 删除标签</h4><p>删除标签和删除分支有点类似，都是用<code>-d</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 删除本地分支</span>
<span class="token function">git</span> tag <span class="token parameter variable">-d</span> <span class="token number">0.9</span>
<span class="token comment"># 删除远程分支，请注意先确保本地的tag已经被删除了</span>
<span class="token function">git</span> push origin :refs/tags/0.9
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="e-小结-1" tabindex="-1"><a class="header-anchor" href="#e-小结-1" aria-hidden="true">#</a> e. 小结</h4><p>本节主要的知识点在于tag的创建、查询、推送与删除；当我们需要封release版时，建议可以在gitee/github的项目主页中进行操作</p><ul><li>创建标签 <ul><li><code>git tag v1.0</code>: 基于当前的commitId，创建一个<code>v1.0</code> tag</li><li><code>git tag -a v1.0 -m &#39;标签说明&#39; commitId</code>: 基于指定的commitId创建<code>v1.0</code>tag，并且可以通过<code>-m</code>指定标签说明</li></ul></li><li>标签查看 <ul><li><code>git tag</code> / <code>git tag --list</code>: 查询当前有哪些标签</li><li><code>git show v.10</code>: 查询<code>v1.0</code>标签对应的信息</li></ul></li><li>标签推送 <ul><li><code>git push origin v1.0</code>: 推送本地<code>v1.0</code>标签到远程</li><li><code>git push origin --tags</code>: 同步本地所有未提交的tag</li></ul></li><li>标签删除 <ul><li><code>git tag -d v1.0</code>: 删除v1.0标签</li><li><code>git push origin :refs/tag/v1.0</code>: 删除远程v1.0标签（注意执行此操作之前，先删除本地标签）</li></ul></li></ul><h2 id="ii-进阶篇" tabindex="-1"><a class="header-anchor" href="#ii-进阶篇" aria-hidden="true">#</a> II. 进阶篇</h2><p>前面属于基础知识篇，就我个人的看法，除了标签这一块看一看即可，其他的操作，可以说是属于每一个开发者应该掌握的基础知识点；当然仅仅掌握这些基本知识点，在某些时候可能是不够的，接下来将介绍一些可能会提高工作效率的进阶知识点</p><h3 id="_1-暂存" tabindex="-1"><a class="header-anchor" href="#_1-暂存" aria-hidden="true">#</a> 1. 暂存</h3><h4 id="a-实例case" tabindex="-1"><a class="header-anchor" href="#a-实例case" aria-hidden="true">#</a> a. 实例case</h4><p>假设我们现在正吭哧吭哧的写新的功能模块，正做得很开心，结果被告知有一个线上bug，需要紧急修复，这个时候就需要把我们做到一半的东西暂存起来，然后切到<code>bug-fix</code>分支上去修复bug，等bug修复完毕之后，再切回来，并恢复之前的操作</p><h4 id="b-提交本地分支恢复方式" tabindex="-1"><a class="header-anchor" href="#b-提交本地分支恢复方式" aria-hidden="true">#</a> b. 提交本地分支恢复方式</h4><p>根据上面的场景描述，根据前面学习到基本知识点，我们可以如下操作</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 将所有工作区变动提交到暂存区</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
<span class="token comment"># 将暂存区内容提交到本地分支，注意不要这个时候不要将本地分支的内容同步到服务器</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;tmp save&#39;</span>
<span class="token comment"># 切换bug-fix分支</span>
<span class="token function">git</span> checkout bug-fix
<span class="token comment"># ... 修复bug并提交之后，再恢复之前的feature分支</span>
<span class="token punctuation">..</span>.

<span class="token function">git</span> checkout feature
<span class="token comment"># 恢复到上一次提交</span>
<span class="token function">git</span> reset <span class="token parameter variable">--soft</span> HEAD^
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="c-stash方式" tabindex="-1"><a class="header-anchor" href="#c-stash方式" aria-hidden="true">#</a> c. stash方式</h4><p>上面这一套流程可以满足我们上面的场景，但是不够优雅，在git中，针对上面这种场景有一个更好的命令，那就是<code>stash</code></p><p>同样为了实现上述的case，可以如下操作</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 将所有工作区内容提交到暂存区</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
<span class="token comment"># 暂存</span>
<span class="token function">git</span> stash 
<span class="token comment"># 切换bug-fix分支，修复bug</span>
<span class="token function">git</span> checkout bug-fix
<span class="token punctuation">..</span>.
<span class="token comment"># 切回feature分支，继续业务开发</span>
<span class="token function">git</span> checkout feature
<span class="token comment"># 恢复</span>
<span class="token function">git</span> stash pop
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="d-stash命令小结" tabindex="-1"><a class="header-anchor" href="#d-stash命令小结" aria-hidden="true">#</a> d. stash命令小结</h4><p>上面的case中只演示了两个最常见的<code>stash</code>命令，接下来将详细说一下在实际的工作中，可能接触的命令</p><ul><li><p><code>git stash list</code>: 查看所有的缓存列表</p></li><li><p><code>git stash</code>: 将暂存区的所有变动保存起来，这个也是我们最常见的使用姿势，但是有一个缺点，就是不知道这次缓存了什么东西</p><ul><li><code>git stash save &quot;说明信息&quot;</code>: 通过save，在后面加上说明</li><li>下图是通过<code>git stash list</code>查看的结果， <ul><li><code>stash@{1}</code>是我们没有指定描述的case，后面跟上的是stash时最近的一个commit的提交信息</li><li><code>stash@{0}</code>是我们指定了描述信息的显示结果</li></ul></li></ul><figure><img src="`+H+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p><code>git show stash@{num}</code> 显示某次缓存的改动</p><figure><img src="'+G+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure></li><li><p><code>git stash pop stash@{num}</code>: 恢复之前的某个暂存，并且会删除这次暂存</p></li><li><p><code>git stash apply stash@{num}</code>: 同样是恢复，但是与上面的区别在于不会删除暂存中的内容</p></li><li><p><code>git stash drop stash@{num}</code>: 丢弃某次暂存</p></li><li><p><code>git stash clear</code>: 删除所有的暂存</p></li></ul><p><strong>请注意: stash缓存的是暂存区的内容，所以需要先使用<code>git add .</code>将工作区的变动提交到暂存区</strong></p><p>下面是一个简单的动态图，演示了<code>git stash</code>的一般使用姿势</p><figure><img src="'+T+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-解决冲突" tabindex="-1"><a class="header-anchor" href="#_2-解决冲突" aria-hidden="true">#</a> 2. 解决冲突</h3><p>关于冲突，可以说是开发者最讨厌遇到的情况了，然而实际的情况是，无论这个项目是只有你一个人开发，还是多人合作开发，冲突多不可避免</p><h4 id="case1-分支合并冲突" tabindex="-1"><a class="header-anchor" href="#case1-分支合并冲突" aria-hidden="true">#</a> case1. 分支合并冲突</h4><p>每一个git项目都有一个默认的主分支(master分支，最近因为歧视问题，被提议改成main...）,通常在其他分支上的修改最终都会合并到master分支上，这里就可能出现合并冲突问题</p><p>下面根据一个动态示意图，演示一下冲突合并的case</p><figure><img src="'+W+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>步骤有点长，下面给出具体的case复现步骤</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 创建并切换到fix分支</span>
✗ <span class="token function">git</span> checkout <span class="token parameter variable">-b</span> fix

<span class="token comment"># 在fix分支上做一些修改，并提交到分支</span>
✗ <span class="token builtin class-name">echo</span> <span class="token string">&#39;fix some&#39;</span> <span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> README.md
✗ <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
✗ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;fix branch&#39;</span>

<span class="token comment"># 切换master分支，在同样的文件上做修改，并提交到本地分支</span>
✗ <span class="token function">git</span> checkout master
✗ <span class="token builtin class-name">echo</span> <span class="token string">&#39;main fix&#39;</span> <span class="token operator"><span class="token file-descriptor important">1</span>&gt;</span> README.md
✗ <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
✗ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;main fix&#39;</span> 

<span class="token comment"># 分支合并，将本地fix分支的内容，合并到master分支，请注意这个时候会提示冲突</span>
✗ <span class="token function">git</span> merge fix
main fix
自动合并 README.md
冲突（内容）：合并冲突于 README.md
自动合并失败，修正冲突然后提交修正的结果。

<span class="token comment"># 这个时候我们可以丢弃合并</span>
✗ <span class="token function">git</span> merge <span class="token parameter variable">--abort</span>

<span class="token comment"># 也可以选择解决冲突，直接通过vim进去，会看到冲突的地方被 \`&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\` 与 \`&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;\` 包裹起来了</span>
✗ <span class="token function">vim</span> README.md
<span class="token comment"># 冲突解决完毕之后，提交</span>
✗ <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
✗ <span class="token function">git</span> commit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="case2-多人协作冲突" tabindex="-1"><a class="header-anchor" href="#case2-多人协作冲突" aria-hidden="true">#</a> case2. 多人协作冲突</h4><p>多人协作的冲突问题可以说是最常见的case了，我和其他的小伙伴同时修改了某个文件，而其他的小伙伴又是先与我提交的，这个时候，再同步最新代码的时候就会出现冲突问题</p><figure><img src="`+O+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>请注意上图中的上下两个窗口分属本地两个不同<code>git-study</code>工程，这个冲突主要是我们在提交之前，同步远程信息时，提示冲突了，一般的解决思路也比较明确，根据冲突文件，找到冲突的地方，fix掉，然后<code>git add .</code> + <code>git commit</code>即可</p><p>请注意，上面合并完毕之后，除了我们之前的commit之外，还会新增了一个merge的commit</p><figure><img src="'+V+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h4><p>这一小节主要介绍了常见的两种导致冲突的case，一般来讲解决冲突依然是需要靠我们人工去选取最终保留的代码</p><p>一般推荐的使用姿势</p><ul><li>提交代码之前，先拉一下最新改动: <code>git pull</code></li><li>如有冲突，修改完毕之后，记得执行<code>git commit</code>来提交冲突的fix</li><li>如不想保存冲突合并，可以执行<code>git merge --abort</code>丢弃合并</li></ul><h3 id="_3-rebase" tabindex="-1"><a class="header-anchor" href="#_3-rebase" aria-hidden="true">#</a> 3. rebase</h3><h4 id="a-使用背景" tabindex="-1"><a class="header-anchor" href="#a-使用背景" aria-hidden="true">#</a> a. 使用背景</h4><p>在上面介绍多人协作导致的冲突的时候，解决完之后，发现最终会新怎给一个merge的commit，也就是说我们的这一次提交会有两个commit（一个是我们之前的准备提交的内容，一个是合并冲突解决的commit）</p><p>此外，我们再看一下上面冲突解决之后的分支情况</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> log <span class="token parameter variable">--graph</span> <span class="token parameter variable">--pretty</span><span class="token operator">=</span>oneline --abbrev-commit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="`+N+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>除了上面命令行的查看方式之外，也可以直接在gitee/github网页上查看分支网络图，可能更加直观</p><figure><img src="'+Z+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>那么我们的问题来了</p><ul><li>我们是否可以只保留一个commit</li><li>我们是否可以让git的提交历史是一条直线，而不出现交叉呢</li></ul><h4 id="b-reabse使用" tabindex="-1"><a class="header-anchor" href="#b-reabse使用" aria-hidden="true">#</a> b. reabse使用</h4><p>同样是上面的case，某个小伙伴修改<code>readme.md</code>并提交了<code>rebase test</code>commit；然后我们同样修改<code>readme.md</code>，但是注意这次同步最新代码使用的是<code>git pull --rebase</code></p><figure><img src="'+X+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上面的动态有点长，下面简单的说一下关键点</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 本地修改，并提交到本地分支</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;main branch save&#39;</span>

<span class="token comment"># 注意这里同步使用命令</span>
<span class="token function">git</span> pull <span class="token parameter variable">--rebase</span>

<span class="token comment"># 因为发生冲突，这个时候可以看到我们当前的工作区不在master分支上了</span>
<span class="token comment"># 我们需要在新的分支上解决冲突，解决完毕之后，同样的提交</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
<span class="token function">git</span> commit

<span class="token comment"># 提交完毕之后，我们希望回到master分支，注意这里不是使用 git checkout master来切换分支, 而是使用下面的命令</span>
<span class="token function">git</span> rebase <span class="token parameter variable">--skip</span>
<span class="token comment"># 如果我们不希望保留这次的合并，可以执行以下命令丢弃</span>
<span class="token function">git</span> rebase <span class="token parameter variable">--abort</span>

<span class="token comment"># 切换回master分支之后，我们查看当前log，和分支网络图</span>
<span class="token function">git</span> log <span class="token parameter variable">--graph</span> <span class="token parameter variable">--pretty</span><span class="token operator">=</span>oneline --abbrev-commit
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+F+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="c-小结" tabindex="-1"><a class="header-anchor" href="#c-小结" aria-hidden="true">#</a> c. 小结</h4><p>一般来讲我们推荐在提交之前先同步最新代码，这个时候使用<code>git pull --rebase</code>可能是一个更好的选择</p><p>当出现合并冲突时，会进入一个临时的分支，这个时候我们需要做的是下面四步</p><ul><li>fix 冲突</li><li><code>git add</code> / <code>git commit</code>: 提交冲突的解决</li><li><code>git rebase --skip</code>: 冲突已解决，回到之前的分支</li><li><code>git push</code>: 同步本次修改</li></ul><p><strong>为什么推荐使用rebase</strong></p><ul><li>分支历史提交为一条直线，不会分叉，更直观</li><li>一个commit，对于诸如使用<code>gerrit</code>来做代码权限管理时，更加友好</li></ul><p><strong>可不可以不用rebase</strong></p><ul><li>rebase看起来有点麻烦，这个知识点我个人认为并不属于基本功能，不掌握也不会影响日常的工作流程</li></ul><h3 id="_4-gitignore" tabindex="-1"><a class="header-anchor" href="#_4-gitignore" aria-hidden="true">#</a> 4. gitignore</h3><p>如果我的项目里面并不是所有的内容都需要提交，然而我又特别喜欢通过<code>git add .</code>来讲所有工作区内容提交到暂存区，这个时候咋办？</p><ul><li>借助<code>.gitignore</code>文件来排除需要提交的文件</li></ul><h4 id="a-规则说明" tabindex="-1"><a class="header-anchor" href="#a-规则说明" aria-hidden="true">#</a> a. 规则说明</h4><p>在项目根目录下，新增文件<code>.gitignore</code></p><ul><li>以斜杠/开头表示目录；</li><li>以星号*通配多个字符；</li><li>以问号?通配单个字符</li><li>以方括号[]包含单个字符的匹配列表；</li><li>以叹号!表示不忽略(跟踪)匹配到的文件或目录；</li></ul><h4 id="b-实例说明" tabindex="-1"><a class="header-anchor" href="#b-实例说明" aria-hidden="true">#</a> b. 实例说明</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 过滤logs文件夹，及文件下所有的文件</span>
/logs
<span class="token comment"># 所有以.开头的文件都过滤掉</span>
.*
<span class="token comment"># .gitignore 文件不忽略</span>
<span class="token operator">!</span>.gitignore
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+K+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>说明：在我们新建<code>.gitignore</code>之前，一些可以被忽略掉的文件已经进入暂存区，可以怎么处理呢？</strong></p><ul><li><code>git rm -r --cached 文件夹</code>: 针对文件夹，递归删除</li><li><code>git rm --cached 文件</code>: 针对文件，指定删除</li></ul><h3 id="_5-分子合并的三种姿势" tabindex="-1"><a class="header-anchor" href="#_5-分子合并的三种姿势" aria-hidden="true">#</a> 5. 分子合并的三种姿势</h3><p>在基础篇中我们介绍了直接使用<code>git merge</code>来合并分支的case，但是一般不建议直接使用这种方式，更过的是推荐加上参数<code>--no-ff</code></p><p>这里我们将简单的介绍下合并的三种可选方式</p><ul><li><code>fast-forward</code>: 默认方式，如果顺着一个分支走下去可以到达另一个分支的话，那么 Git 在合并两者时，只会简单地把指针右移，当分支删除时会丢失merge信息</li><li><code>squash</code>: 将分支上的所有变动合并带过来，不提交，需要手动添加一次<code>commit</code>来指定提交信息</li><li><code>no-ff</code>: 在提交的时候，会创建一个merge的commit信息，然后合并分支</li></ul><figure><img src="'+Q+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上图给出一个实例演示下三种合并方式的区别</p><ul><li><code>fast-forward</code> 直接合并，无merge关键节点</li><li><code>squash</code>: 分支所有变动合并过来，需要额外的手动添加<code>commit</code>提交到当前分支（对应分支的所有commit没有）</li><li><code>no-ff</code>: 合并并创建一个<code>merge</code>的commit信息（推荐使用这种方式，有对应分支的历史提交，有合并节点）</li></ul><p>借用网上的一张图，来表示他们三个的区别</p><figure><img src="'+$+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_6-项目配置" tabindex="-1"><a class="header-anchor" href="#_6-项目配置" aria-hidden="true">#</a> 6. 项目配置</h3><p>在上面最开始介绍环境配置的时候，我们一般会设置一个全局的用户名/邮箱，然而实际情况，公司内的项目提交需要用公司内网邮箱；而我自己的git项目，希望用私人邮箱，这个时候全局的配置就不适合了</p><p>针对这种case，可以如下处理</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 进入配置文件</span>
✗ <span class="token function">vim</span> .git/config


<span class="token comment"># 新增下面的配置，保存并退出</span>
<span class="token punctuation">[</span>user<span class="token punctuation">]</span>
        name <span class="token operator">=</span> 一灰灰
        email <span class="token operator">=</span> yihuihuiyi@gmail.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们再次进行提交时，查看一下git log</p><figure><img src="`+L+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>(上面这个也演示了为啥同一个git项目，就我一个参与者，为啥会有多个用户列表了)</p>',208),ma=a("img",{src:Y,alt:"https://gitee.com/liuyueyi/git-study/contributors?ref=master",tabindex:"0",loading:"lazy"},null,-1),ga={href:"https://gitee.com/liuyueyi/git-study/contributors?ref=master",target:"_blank",rel:"noopener noreferrer"},ha=i('<h3 id="_7-删除文件及历史记录" tabindex="-1"><a class="header-anchor" href="#_7-删除文件及历史记录" aria-hidden="true">#</a> 7. 删除文件及历史记录</h3><p>据说因为github导致的密钥泄露问题比较普遍，我们知道git的强大之处在于它可以记录你的所有提交，可以追溯某个文件从创建到最终的销毁的所有历史，因此当你不小心将某些敏感信息提交到git仓库之后，即便你马上发现并删除，但是别人依然可以“顺藤摸瓜”找到</p><p>那么当我错误的提交了一个敏感文件到git仓库，有没有挽救办法呢，还是说只能删库重来？</p><figure><img src="'+P+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>上图演示了我们在gitee上删除这个文件之后，依然可以通过历史的commit找到对应的提交内容</p><p>下满是一个解决办法</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> filter-branch <span class="token parameter variable">-f</span> --tree-filter <span class="token string">&#39;rm -rf senstive.txt&#39;</span> HEAD
<span class="token comment"># 强制提交, 非特殊情况，不建议使用这个命令</span>
<span class="token function">git</span> push origin <span class="token parameter variable">--force</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们再次进行查看时，在历史的提交中也找不到<code>senstive.txt</code>文件了</p><figure><img src="`+J+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_8-统计" tabindex="-1"><a class="header-anchor" href="#_8-统计" aria-hidden="true">#</a> 8. 统计</h3><p>最后给一个小工具，统计一下自己过去一年某个项目的工作量</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> log <span class="token parameter variable">--author</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> config <span class="token parameter variable">--get</span> user.name<span class="token variable">)</span></span>&quot;</span>  <span class="token parameter variable">--before</span><span class="token operator">=</span><span class="token string">&#39;2020-12-31 23:59:59&#39;</span> <span class="token parameter variable">--after</span><span class="token operator">=</span><span class="token string">&#39;2020-01-01 00:00:00&#39;</span> <span class="token parameter variable">--pretty</span><span class="token operator">=</span>tformat: <span class="token parameter variable">--numstat</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">&#39;{ add += $1 ; subs += $2 ; loc += $1 - $2 } END { printf &quot;added lines: %s removed lines : %s total lines: %s\\n&quot;,add,subs,loc }&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,12),va={href:"https://github.com/liuyueyi/quick-media",target:"_blank",rel:"noopener noreferrer"},ba=i('<figure><img src="'+U+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="iii-归纳总结" tabindex="-1"><a class="header-anchor" href="#iii-归纳总结" aria-hidden="true">#</a> III. 归纳总结</h2><p>本篇作为程序猿必备技能第一篇，git可以说是每个小伙伴都应该掌握的知识点，本文划分了基础与进阶两段，内容都不算难，花10-15分钟读完之后，基本上就可以了解git怎么玩了</p><p>因为内容篇幅较长，所以我们这里也敲一敲黑板，画一下重点</p><h3 id="_1-同步修改提交三把斧" tabindex="-1"><a class="header-anchor" href="#_1-同步修改提交三把斧" aria-hidden="true">#</a> 1. 同步修改提交三把斧</h3><p>日常业务工作中，最最常见，最最基础的步骤</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 提交本地修改</span>
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
<span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">&#39;save&#39;</span>

<span class="token comment"># 同步最新代码</span>
<span class="token function">git</span> pull <span class="token parameter variable">--reabse</span>

<span class="token comment"># 冲突时，先解决冲突</span>
fix conflict
<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>
<span class="token function">git</span> commit 
<span class="token comment"># 解决完冲突，回到之前的分支</span>
<span class="token function">git</span> rebase <span class="token parameter variable">--skip</span>

<span class="token comment"># 没有冲突/or冲突已解决时，直接提交</span>
<span class="token function">git</span> push 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-查看变动" tabindex="-1"><a class="header-anchor" href="#_2-查看变动" aria-hidden="true">#</a> 2. 查看变动</h3><p>当我们想知道哪些文件被修改，修改了啥时，常用的几招</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 可以查看工作区 + 暂存区的所有变动</span>
<span class="token function">git</span> status

<span class="token comment"># 查看工作区的变动</span>
<span class="token function">git</span> <span class="token function">diff</span>

<span class="token comment"># 查看暂存区的变动</span>
<span class="token function">git</span> <span class="token function">diff</span> head^
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-历史查看" tabindex="-1"><a class="header-anchor" href="#_3-历史查看" aria-hidden="true">#</a> 3. 历史查看</h3><p>通过<code>git log</code>可以查看历史提交，通过log，可以做很多事情，下满只给常用的几种</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 查看git历史</span>
<span class="token function">git</span> log

<span class="token comment"># 一行展示，方便阅读</span>
<span class="token function">git</span> log <span class="token parameter variable">--pretty</span><span class="token operator">=</span>oneline

<span class="token comment"># 图方式查看历史变动情况</span>
<span class="token function">git</span> log <span class="token parameter variable">--graph</span> <span class="token parameter variable">--pretty</span><span class="token operator">=</span>oneline
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外还有一个<code>git reflog</code>也有可能会用到，查看本地仓库的变动</p><h3 id="_4-分支" tabindex="-1"><a class="header-anchor" href="#_4-分支" aria-hidden="true">#</a> 4. 分支</h3><p>分支的几大操作，无非创建，切换，查看，删除以及合并</p><ul><li>创建: <code>git branch newBranch</code></li><li>创建并切换: <code>git checkout -b newBranch</code></li><li>切换分支: <code>git checkout newBranch</code></li><li>分支列表: <code>git branch</code> / <code>git branch -a</code></li><li>删除分支: <code>git branch -d/D branchName</code></li><li>合并分支到当前分支: <code>git merge newBranch</code></li><li>合并远程分支到当道分支: <code>git merge --no-ff origin/newBranch</code></li></ul><p>关于分支合并，推荐使用<code>--no-ff</code>来替代默认的<code>fast-forward</code>合并方式</p><h3 id="_5-版本回退与撤销修改" tabindex="-1"><a class="header-anchor" href="#_5-版本回退与撤销修改" aria-hidden="true">#</a> 5. 版本回退与撤销修改</h3><p>使用<code>reset</code>来实现版本回退；使用<code>checkout</code>来撤销修改</p><ul><li>回退到指定的commit: <code>git reset --soft/hard commitId</code><ul><li><code>soft</code>; 表示保留这个commitId之后的所有修改</li><li><code>hard</code>: 完全恢复commitId这个时候的状态</li></ul></li><li>取消暂存: <code>git reset HEAD .</code> 暂存区所有变动回到工作区</li><li>撤销工作区修改； <code>git checkout .</code></li></ul><h3 id="_6-标签-1" tabindex="-1"><a class="header-anchor" href="#_6-标签-1" aria-hidden="true">#</a> 6. 标签</h3><p>标签更多的是立flag，打里程包，方便给其他的小伙伴稳定的引入</p><ul><li>创建标签 <ul><li><code>git tag v1.0</code>: 基于当前的commitId，创建一个<code>v1.0</code> tag</li><li><code>git tag -a v1.0 -m &#39;标签说明&#39; commitId</code>: 基于指定的commitId创建<code>v1.0</code>tag，并且可以通过<code>-m</code>指定标签说明</li></ul></li><li>标签查看 <ul><li><code>git tag</code> / <code>git tag --list</code>: 查询当前有哪些标签</li><li><code>git show v.10</code>: 查询<code>v1.0</code>标签对应的信息</li></ul></li><li>标签推送 <ul><li><code>git push origin v1.0</code>: 推送本地<code>v1.0</code>标签到远程</li><li><code>git push origin --tags</code>: 同步本地所有未提交的tag</li></ul></li><li>标签删除 <ul><li><code>git tag -d v1.0</code>: 删除v1.0标签</li><li><code>git push origin :refs/tag/v1.0</code>: 删除远程v1.0标签（注意执行此操作之前，先删除本地标签）</li></ul></li></ul><h3 id="_7-stash暂存" tabindex="-1"><a class="header-anchor" href="#_7-stash暂存" aria-hidden="true">#</a> 7. stash暂存</h3><p>通过stash将当前的工作内容暂存起来，然后去做其他的事情；做完之后再回来接着之前的工作继续</p><p>实际的工作中可能用得不多，但是用的好的话，可以省很多事情</p><ul><li><code>git stash list</code>: 查看所有的缓存列表</li><li><code>git stash</code>/<code>git stash save &quot;说明信息&quot;</code>: 暂存</li><li><code>git show stash@{num}</code> 显示某次缓存的改动</li><li><code>git stash pop stash@{num}</code>: 恢复之前的某个暂存，并且会删除这次暂存</li><li><code>git stash apply stash@{num}</code>: 同样是恢复，但是与上面的区别在于不会删除暂存中的内容</li><li><code>git stash drop stash@{num}</code>: 丢弃某次暂存</li><li><code>git stash clear</code>: 删除所有的暂存</li></ul><h3 id="_8-git操作图" tabindex="-1"><a class="header-anchor" href="#_8-git操作图" aria-hidden="true">#</a> 8. Git操作图</h3>`,29),fa={href:"https://www.atlassian.com/dam/jcr:e7e22f25-bba2-4ef1-a197-53f46b6df4a5/SWTM-2088_Atlassian-Git-Cheatsheet.pdf",target:"_blank",rel:"noopener noreferrer"},ka=a("figure",null,[a("img",{src:aa,alt:"基础操作",tabindex:"0",loading:"lazy"}),a("figcaption",null,"基础操作")],-1),xa=a("figure",null,[a("img",{src:na,alt:"进阶操作",tabindex:"0",loading:"lazy"}),a("figcaption",null,"进阶操作")],-1),_a=a("h3",{id:"_9-配套讲解视频",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#_9-配套讲解视频","aria-hidden":"true"},"#"),n(" 9 . 配套讲解视频")],-1),ya=a("p",null,"为了更友好的演示git的基本使用，特意录制了一个视频，由于是第一次录制，效果不是特别好，凑合的话还是能看，请各位大佬轻喷",-1),Ea={href:"https://v.qq.com/x/page/j3118y0ucri.html",target:"_blank",rel:"noopener noreferrer"};function za(Aa,wa){const s=o("ExternalLinkIcon");return l(),c("div",null,[ea,d(" more "),ia,a("p",null,[n("在官网"),a("a",ta,[n("https://git-scm.com/download/win"),e(s)]),n("下载安装包，完成windows平台的安装")]),la,a("p",null,[n("对于其他的linux/unix操作系统，具体的安装命令可以查看: "),a("a",ca,[n("Download for Linux and Unix"),e(s)])]),da,a("p",null,[n("进入gitee的ssh公钥添加页面: "),a("a",oa,[n("Gitee SSH公钥配置"),e(s)])]),ra,a("p",null,[n("首先我们新增一个文件，"),a("a",pa,[n("并修改README.md"),e(s)])]),ua,a("figure",null,[ma,a("figcaption",null,[a("a",ga,[n("https://gitee.com/liuyueyi/git-study/contributors?ref=master"),e(s)])])]),ha,a("p",null,[n("下图给出了我"),a("a",va,[n("quick-media"),e(s)]),n("从诞生到现在的所有改动情况(代码删得多，说明时不时会重构一把😝)")]),ba,a("p",null,[n("最后附上一个神图，介绍了各种git命令， "),a("a",fa,[n("原文点击下载"),e(s)])]),ka,xa,_a,ya,a("p",null,[n("对应的视频地址如: "),a("a",Ea,[n("程序猿基本功系列：项目管理工具GIT全解"),e(s)])])])}const Da=t(sa,[["render",za],["__file","200720-git一文掌握常用命令.html.vue"]]);export{Da as default};
