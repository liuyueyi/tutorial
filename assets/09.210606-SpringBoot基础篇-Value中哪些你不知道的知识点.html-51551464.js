import{_ as p,V as o,W as c,X as i,Y as n,Z as s,$ as e,a1 as t,F as l}from"./framework-094145d2.js";const u="/tutorial/imgs/210606/00.jpg",r="/tutorial/imgs/210606/01.jpg",d="/tutorial/imgs/210606/02.jpg",k="/tutorial/imgs/210606/03.jpg",v="/tutorial/imgs/210606/04.jpg",m="/tutorial/imgs/210606/05.jpg",b={},g=t("<p>看到这个标题，有点夸张了啊，<code>@Value</code> 这个谁不知道啊，不就是绑定配置么，还能有什么特殊的玩法不成？</p><p>(如果下面列出的这些问题，已经熟练掌握，那确实没啥往下面看的必要了)</p><ul><li><code>@Value</code>对应的配置不存在，会怎样?</li><li>默认值如何设置</li><li>配置文件中的列表可以直接映射到列表属性上么？</li><li>配置参数映射为简单对象的三种配置方式</li><li>除了配置注入，字面量、SpEL支持是否了解？</li><li>远程(如db,配置中心,http)配置注入可行否？</li></ul>",3),h=t(`<p>接下来，限于篇幅问题，将针对上面提出的问题的前面几条进行说明，最后两个放在下篇</p><h2 id="i-项目环境" tabindex="-1"><a class="header-anchor" href="#i-项目环境" aria-hidden="true">#</a> I. 项目环境</h2><p>先创建一个用于测试的SpringBoot项目，源码在最后贴出，友情提示源码阅读更友好</p><h3 id="_1-项目依赖" tabindex="-1"><a class="header-anchor" href="#_1-项目依赖" aria-hidden="true">#</a> 1. 项目依赖</h3><p>本项目借助<code>SpringBoot 2.2.1.RELEASE</code> + <code>maven 3.5.3</code> + <code>IDEA</code>进行开发</p><h3 id="_2-配置文件" tabindex="-1"><a class="header-anchor" href="#_2-配置文件" aria-hidden="true">#</a> 2. 配置文件</h3><p>在配置文件中，加一些用于测试的配置信息</p><p>application.yml</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">auth</span><span class="token punctuation">:</span>
  <span class="token key atrule">jwt</span><span class="token punctuation">:</span>
    <span class="token key atrule">token</span><span class="token punctuation">:</span> TOKEN.123
    <span class="token key atrule">expire</span><span class="token punctuation">:</span> <span class="token number">1622616886456</span>
    <span class="token key atrule">whiteList</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span>
    <span class="token key atrule">blackList</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token number">100</span>
      <span class="token punctuation">-</span> <span class="token number">200</span>
      <span class="token punctuation">-</span> <span class="token number">300</span>
    <span class="token key atrule">tt</span><span class="token punctuation">:</span> token<span class="token punctuation">:</span>tt_token; expire<span class="token punctuation">:</span><span class="token number">1622616888888</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-使用case" tabindex="-1"><a class="header-anchor" href="#ii-使用case" aria-hidden="true">#</a> II. 使用case</h2><h3 id="_1-基本姿势" tabindex="-1"><a class="header-anchor" href="#_1-基本姿势" aria-hidden="true">#</a> 1. 基本姿势</h3><p>通过<code>\${}</code>来引入配置参数，当然前提是所在的类被Spring托管，也就是我们常说的bean</p><p>如下，一个常见的使用姿势</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigProperties</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${auth.jwt.token}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> token<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${auth.jwt.expire}&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">Long</span> expire<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-配置不存在-抛异常" tabindex="-1"><a class="header-anchor" href="#_2-配置不存在-抛异常" aria-hidden="true">#</a> 2. 配置不存在，抛异常</h3><p>接下来，引入一个配置不存在的注入，在项目启动的时候，会发现抛出异常，导致无法正常启动</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 不存在，使用默认值
 */</span>
<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${auth.jwt.no&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> no<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>抛出的异常属于<code>BeanCreationException</code>, 对应的异常提示 <code>Caused by: java.lang.IllegalArgumentException: Could not resolve placeholder &#39;auth.jwt.no&#39; in value &quot;\${auth.jwt.no}&quot;</code></p><figure><img src="`+u+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>所以为了避免上面的问题，一般来讲，建议设置一个默认值，规则如 <code>\${key:默认值}</code>， 在分号右边的就是默认值，当没有相关配置时，使用默认值初始化</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 不存在，使用默认值
 */</span>
<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${auth.jwt.no}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> no<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-列表配置" tabindex="-1"><a class="header-anchor" href="#_3-列表配置" aria-hidden="true">#</a> 3. 列表配置</h3><p>在配置文件中whiteList，对应的value是 <code>4,5,6</code>, 用英文逗号分隔，对于这种格式的参数值，可以直接赋予<code>List&lt;Long&gt;</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 英文逗号分隔，转列表
 */</span>
<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${auth.jwt.whiteList}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> whiteList<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这个属于正确的使用姿势，但是下面这个却不行了</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * yml数组，无法转换过来，只能根据 &quot;auth.jwt.blackList[0]&quot;, &quot;auth.jwt.blackList[1]&quot; 来取对应的值
 */</span>
<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${auth.jwt.blackList:10,11,12}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> blackList<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然我们的配置参数 <code>auth.jwt.blackList</code>是数组，但是就没法映射到上面的blackList （即使换成 <code>List&lt;String&gt;</code> 也是不行的，并不是因为声明为<code>String[]</code>的原因）</p><p>我们可以通过查看Evnrionment来看一下配置是怎样的</p><figure><img src="`+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>通过<code>auth.jwt.blackList</code>是拿不到配置信息的，只能通过<code>auth.jwt.blackList[0]</code>, <code>auth.jwt.blackList[1]</code>来获取</p><p>那么问题来了，怎么解决这个呢？</p><p>要解决问题，关键就是需要知道<code>@Value</code>的工作原理，这里直接给出关键类 <code>org.springframework.context.support.PropertySourcesPlaceholderConfigurer</code></p><figure><img src="'+d+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>关键点就在上面圈出的地方，找到这里，我们就可以动手开撸，一个比较猥琐的方法，如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 使用自定义的bean替代Spring的</span>
<span class="token annotation punctuation">@Primary</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyPropertySourcesPlaceHolderConfigure</span> <span class="token keyword">extends</span> <span class="token class-name">PropertySourcesPlaceholderConfigurer</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">protected</span> <span class="token class-name">Environment</span> environment<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">PropertySources</span></span></span><span class="token punctuation">}</span> from the given <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Environment</span></span><span class="token punctuation">}</span>
     * will be searched when replacing $<span class="token punctuation">{</span>...<span class="token punctuation">}</span> placeholders.
     *
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">setPropertySources</span></span>
     * <span class="token keyword">@see</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">postProcessBeanFactory</span></span>
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setEnvironment</span><span class="token punctuation">(</span><span class="token class-name">Environment</span> environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setEnvironment</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>environment <span class="token operator">=</span> environment<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">processProperties</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactoryToProcess<span class="token punctuation">,</span> <span class="token class-name">ConfigurablePropertyResolver</span> propertyResolver<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 实现一个拓展的PropertySource，支持获取数组格式的配置信息</span>
        <span class="token class-name">Field</span> field <span class="token operator">=</span> propertyResolver<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">&quot;propertySources&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> access <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">isAccessible</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">MutablePropertySources</span> propertySource <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MutablePropertySources</span><span class="token punctuation">)</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>propertyResolver<span class="token punctuation">)</span><span class="token punctuation">;</span>
        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span>access<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">PropertySource</span> source <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PropertySource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Environment</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token constant">ENVIRONMENT_PROPERTIES_PROPERTY_SOURCE_NAME</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>environment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token annotation punctuation">@Nullable</span>
            <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 对数组进行兼容</span>
                <span class="token class-name">String</span> ans <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>ans <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">String</span> prefix <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;:&quot;</span><span class="token punctuation">)</span> <span class="token operator">?</span> key<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&quot;:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> key<span class="token punctuation">;</span>
                <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">String</span> subKey <span class="token operator">=</span> prefix <span class="token operator">+</span> <span class="token string">&quot;[&quot;</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">;</span>
                    ans <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>subKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>ans <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">return</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>

                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token operator">++</span>i<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        propertySource<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">processProperties</span><span class="token punctuation">(</span>beanFactoryToProcess<span class="token punctuation">,</span> propertyResolver<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明：</strong></p><ul><li>上面这种实现姿势很不优雅，讲道理应该有更简洁的方式，有请知道的老哥指教一二</li></ul><h3 id="_4-配置转实体类" tabindex="-1"><a class="header-anchor" href="#_4-配置转实体类" aria-hidden="true">#</a> 4. 配置转实体类</h3><p>通常，<code>@Value</code>只修饰基本类型，如果我想将配置转换为实体类，可性否？</p><p>当然是可行的，而且还有三种支持姿势</p><ul><li><code>PropertyEditor</code></li><li><code>Converter</code></li><li><code>Formatter</code></li></ul><p>接下来针对上面配置的<code>auth.jwt.tt</code>进行转换</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">auth</span><span class="token punctuation">:</span>
  <span class="token key atrule">jwt</span><span class="token punctuation">:</span>
    <span class="token key atrule">tt</span><span class="token punctuation">:</span> token<span class="token punctuation">:</span>tt_token; expire<span class="token punctuation">:</span><span class="token number">1622616888888</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>映射为Jwt对象</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>@Data
public class Jwt {
    private String source;
    private String token;
    private Long expire;
    
    // 实现string转jwt的逻辑
    public static Jwt parse(String text, String source) {
        String[] kvs = StringUtils.split(text, &quot;;&quot;);
        Map&lt;String, String&gt; map = new HashMap&lt;&gt;(8);
        for (String kv : kvs) {
            String[] items = StringUtils.split(kv, &quot;:&quot;);
            if (items.length != 2) {
                continue;
            }
            map.put(items[0].trim().toLowerCase(), items[1].trim());
        }
        Jwt jwt = new Jwt();
        jwt.setSource(source);
        jwt.setToken(map.get(&quot;token&quot;));
        jwt.setExpire(Long.valueOf(map.getOrDefault(&quot;expire&quot;, &quot;0&quot;)));
        return jwt;
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-1-propertyeditor" tabindex="-1"><a class="header-anchor" href="#_4-1-propertyeditor" aria-hidden="true">#</a> 4.1 PropertyEditor</h4><p>请注意<code>PropertyEditor</code>是java bean规范中的，主要用于对bean的属性进行编辑而定义的接口，Spring提供了支持；我们希望将String转换为bean属性类型，一般来讲就是一个POJO，对应一个Editor</p><p>所以自定义一个 <code>JwtEditor</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtEditor</span> <span class="token keyword">extends</span> <span class="token class-name">PropertyEditorSupport</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAsText</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalArgumentException</span> <span class="token punctuation">{</span>
        <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token class-name">Jwt</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token string">&quot;JwtEditor&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来就需要注册这个Editor</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutoConfiguration</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 注册自定义的 propertyEditor
     *
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">CustomEditorConfigurer</span> <span class="token function">editorConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">CustomEditorConfigurer</span> editorConfigurer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomEditorConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        editorConfigurer<span class="token punctuation">.</span><span class="token function">setCustomEditors</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonMap</span><span class="token punctuation">(</span><span class="token class-name">Jwt</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">JwtEditor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> editorConfigurer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明</strong></p><ul><li>当上面的<code>JwtEditor</code>与<code>Jwt</code>对象，在相同的包路径下面的时候，不需要上面的主动注册，Spring会自动注册 （就是这么贴心）</li></ul><p>上面这个配置完毕之后，就可以正确的被注入了</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 借助 PropertyEditor 来实现字符串转对象
 */</span>
<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${auth.jwt.tt}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">Jwt</span> tt<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+k+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_4-2-converter" tabindex="-1"><a class="header-anchor" href="#_4-2-converter" aria-hidden="true">#</a> 4.2 Converter</h4><p>Spring的Converter接口也比较常见，至少比上面这个用得多一些，使用姿势也比较简单，实现接口、然后注册即可</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtConverter</span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Jwt</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Jwt</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Jwt</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">&quot;JwtConverter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注册转换类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 注册自定义的converter
 *
 * <span class="token keyword">@return</span>
 */</span>
<span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;conversionService&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">ConversionServiceFactoryBean</span> <span class="token function">conversionService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ConversionServiceFactoryBean</span> factoryBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConversionServiceFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    factoryBean<span class="token punctuation">.</span><span class="token function">setConverters</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singleton</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JwtConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> factoryBean<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再次测试，同样可以注入成功</p><figure><img src="`+v+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="_4-3-formatter" tabindex="-1"><a class="header-anchor" href="#_4-3-formatter" aria-hidden="true">#</a> 4.3 Formatter</h4><p>最后再介绍一个Formatter的使用姿势，它更常见于本地化相关的操作</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtFormatter</span> <span class="token keyword">implements</span> <span class="token class-name">Formatter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Jwt</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Jwt</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token class-name">Locale</span> locale<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Jwt</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token string">&quot;JwtFormatter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">Jwt</span> object<span class="token punctuation">,</span> <span class="token class-name">Locale</span> locale<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样注册一下（请注意，我们使用注册Formatter时，需要将前面Converter的注册bean给注释掉）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;conversionService&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">FormattingConversionServiceFactoryBean</span> <span class="token function">conversionService2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">FormattingConversionServiceFactoryBean</span> factoryBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormattingConversionServiceFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    factoryBean<span class="token punctuation">.</span><span class="token function">setConverters</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singleton</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JwtConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    factoryBean<span class="token punctuation">.</span><span class="token function">setFormatters</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singleton</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JwtFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> factoryBean<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当Converter与Formatter同时存在时，后者优先级更高</p><figure><img src="`+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_5-小结" tabindex="-1"><a class="header-anchor" href="#_5-小结" aria-hidden="true">#</a> 5. 小结</h3><p>限于篇幅，这里就暂告一段落，针对前面提到的几个问题，做一个简单的归纳小结</p><ul><li><code>@Value</code> 声明的配置不存在时，抛异常（项目会起不来）</li><li>通过设置默认值(语法 <code>${xxx:defaultValue})</code>可以解决上面的问题</li><li><code>yaml</code>配置中的数组，无法直接通过<code>@Value</code>绑定到列表/数组上</li><li>配置值为英文逗号分隔的场景，可以直接赋值给列表/数组</li><li>不支持将配置文件中的值直接转换为非简单对象，如果有需要有三种方式 <ul><li>使用<code>PropertyEditor</code>实现类型转换</li><li>使用<code>Converter</code>实现类型转换 （更推荐使用这种方式）</li><li>使用<code>Formater</code>实现类型转换</li></ul></li></ul><p>除了上面的知识点之外，针对最开始提出的问题，给出答案</p><ul><li><code>@Value</code>支持字面量，也支持SpEL表达式</li><li>既然支持SpEL表达式，当然就可以实现我们需求的远程配置注入了</li></ul><p>既然已经看到这里了，那么就再提两个问题吧，在SpringCloud微服务中，如果使用了SpringCloud Config，也是可以通过<code>@Value</code>来注入远程配置的，那么这个原理又是怎样的呢？</p><p><code>@Value</code>绑定的配置，如果想实现动态刷新，可行么？如果可以怎么玩？</p><p>（顺手不介意的话，关注下微信公众号&quot;一灰灰blog&quot;, 下篇博文就给出答案)</p><h2 id="iii-不能错过的源码和相关知识点" tabindex="-1"><a class="header-anchor" href="#iii-不能错过的源码和相关知识点" aria-hidden="true">#</a> III. 不能错过的源码和相关知识点</h2><h3 id="_0-项目" tabindex="-1"><a class="header-anchor" href="#_0-项目" aria-hidden="true">#</a> 0. 项目</h3>',80),y={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"},E={href:"https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/002-properties-value",target:"_blank",rel:"noopener noreferrer"},w=n("p",null,[n("strong",null,"系列博文，配合阅读效果更好哦")],-1),f={href:"https://spring.hhui.top/spring-blog/2020/05/07/200507-SpringBoot%E7%B3%BB%E5%88%97%E6%95%99%E7%A8%8B%E4%B9%8B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E5%8A%A0%E8%BD%BD%E5%99%A8/",target:"_blank",rel:"noopener noreferrer"},_={href:"https://spring.hhui.top/spring-blog/2018/09/25/180925-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E9%BB%98%E8%AE%A4%E9%85%8D%E7%BD%AE/",target:"_blank",rel:"noopener noreferrer"},B={href:"https://spring.hhui.top/spring-blog/2018/09/22/180922-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E9%85%8D%E7%BD%AE%E5%88%B7%E6%96%B0/",target:"_blank",rel:"noopener noreferrer"},S={href:"https://spring.hhui.top/spring-blog/2018/09/21/180921-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E6%8C%87%E5%AE%9A%E4%B8%8E%E9%85%8D%E7%BD%AE%E5%86%85%E5%BC%95%E7%94%A8/",target:"_blank",rel:"noopener noreferrer"},A={href:"https://spring.hhui.top/spring-blog/2018/09/20/180920-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E5%A4%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/",target:"_blank",rel:"noopener noreferrer"},j={href:"https://spring.hhui.top/spring-blog/2018/09/19/180919-SpringBoot%E5%9F%BA%E7%A1%80%E7%AF%87%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E4%B9%8B%E5%A6%82%E4%BD%95%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/",target:"_blank",rel:"noopener noreferrer"},x=n("li",null,null,-1);function C(q,F){const a=l("ExternalLinkIcon");return o(),c("div",null,[g,i(" more "),h,n("ul",null,[n("li",null,[s("工程："),n("a",y,[s("https://github.com/liuyueyi/spring-boot-demo"),e(a)])]),n("li",null,[s("源码: "),n("a",E,[s("https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/002-properties-value"),e(a)])])]),w,n("ul",null,[n("li",null,[n("a",f,[s("【基础系列】实现一个自定义配置加载器（应用篇）"),e(a)])]),n("li",null,[n("a",_,[s("【基础系列】SpringBoot配置信息之默认配置"),e(a)])]),n("li",null,[n("a",B,[s("【基础系列】SpringBoot配置信息之配置刷新"),e(a)])]),n("li",null,[n("a",S,[s("【基础系列】SpringBoot基础篇配置信息之自定义配置指定与配置内引用"),e(a)])]),n("li",null,[n("a",A,[s("【基础系列】SpringBoot基础篇配置信息之多环境配置信息"),e(a)])]),n("li",null,[n("a",j,[s("【基础系列】SpringBoot基础篇配置信息之如何读取配置信息"),e(a)])]),x])])}const L=p(b,[["render",C],["__file","09.210606-SpringBoot基础篇-Value中哪些你不知道的知识点.html.vue"]]);export{L as default};
