import{_ as s,V as a,W as t,X as p,a1 as n}from"./framework-094145d2.js";const e={},o=n('<h1 id="实战31-深拷贝浅拷贝及对象拷贝的两种方式" tabindex="-1"><a class="header-anchor" href="#实战31-深拷贝浅拷贝及对象拷贝的两种方式" aria-hidden="true">#</a> 实战31：深拷贝浅拷贝及对象拷贝的两种方式</h1><h2 id="_1-java之clone" tabindex="-1"><a class="header-anchor" href="#_1-java之clone" aria-hidden="true">#</a> 1. Java之Clone</h2><h3 id="_1-1-背景" tabindex="-1"><a class="header-anchor" href="#_1-1-背景" aria-hidden="true">#</a> 1.1 背景</h3><p>对象拷贝，是一个非常基础的内容了，为什么会单独的把这个领出来讲解，主要是先前遇到了一个非常有意思的场景</p><p>有一个任务，需要解析类xml标记语言，然后生成document对象，之后将会有一系列针对document对象的操作</p><p>通过实际的测试，发现生成Document对象是比较耗时的一个操作，再加上这个任务场景中，需要解析的xml文档是固定的几个，那么一个可以优化的思路就是能不能缓存住创建后的Document对象，在实际使用的时候clone一份出来</p>',6),c=n(`<h3 id="_1-2-内容说明" tabindex="-1"><a class="header-anchor" href="#_1-2-内容说明" aria-hidden="true">#</a> 1.2 内容说明</h3><p>看到了上面的应用背景，自然而言的就会想到深拷贝了，本篇博文则主要内容如下</p><ul><li>介绍下两种拷贝方式的区别</li><li>深拷贝的辅助工具类</li><li>如何自定义实现对象拷贝</li></ul><h2 id="_2-深拷贝和浅拷贝" tabindex="-1"><a class="header-anchor" href="#_2-深拷贝和浅拷贝" aria-hidden="true">#</a> 2. 深拷贝和浅拷贝</h2><h3 id="_2-1-定义说明" tabindex="-1"><a class="header-anchor" href="#_2-1-定义说明" aria-hidden="true">#</a> 2.1 定义说明</h3><p><strong>深拷贝</strong></p><p>相当于创建了一个新的对象，只是这个对象的所有内容，都和被拷贝的对象一模一样而已，即两者的修改是隔离的，相互之间没有影响</p><p><strong>浅拷贝</strong></p><p>也是创建了一个对象，但是这个对象的某些内容（比如A）依然是被拷贝对象的，即通过这两个对象中任意一个修改A，两个对象的A都会受到影响</p><p>看到上面两个简单的说明，那么问题来了</p><ul><li>浅拷贝中，是所有的内容公用呢？还是某些内容公用？</li><li>从隔离来将，都不希望出现浅拷贝这种方式了，太容易出错了，那么两种拷贝方式的应用场景是怎样的？</li></ul><h3 id="_2-2-浅拷贝" tabindex="-1"><a class="header-anchor" href="#_2-2-浅拷贝" aria-hidden="true">#</a> 2.2 浅拷贝</h3><p>一般来说，浅拷贝方式需要实现<code>Cloneable</code>接口，下面结合一个实例，来看下浅拷贝中哪些是独立的，哪些是公用的</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShallowClone</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> books<span class="token punctuation">;</span>


    <span class="token keyword">public</span> <span class="token class-name">ShallowClone</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ShallowClone</span> clone <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            clone <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ShallowClone</span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> clone<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ShallowClone</span> shallowClone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShallowClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        shallowClone<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;SourceName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        shallowClone<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;c++&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        shallowClone<span class="token punctuation">.</span><span class="token function">setBooks</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token class-name">ShallowClone</span> cloneObj <span class="token operator">=</span> shallowClone<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token comment">// 判断两个对象是否为同一个对象（即是否是新创建了一个实例）</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>shallowClone <span class="token operator">==</span> cloneObj<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 修改一个对象的内容是否会影响另一个对象</span>
        shallowClone<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;newName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        shallowClone<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        shallowClone<span class="token punctuation">.</span><span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;javascript&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;source: &quot;</span> <span class="token operator">+</span> shallowClone<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\nclone:&quot;</span> <span class="token operator">+</span> cloneObj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        shallowClone<span class="token punctuation">.</span><span class="token function">setBooks</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;source: &quot;</span> <span class="token operator">+</span> shallowClone<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\nclone:&quot;</span> <span class="token operator">+</span> cloneObj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token boolean">false</span>
source: ShallowClone<span class="token punctuation">(</span>name<span class="token operator">=</span>newName, <span class="token assign-left variable">age</span><span class="token operator">=</span><span class="token number">20</span>, <span class="token assign-left variable">books</span><span class="token operator">=</span><span class="token punctuation">[</span>java, c++, javascript<span class="token punctuation">]</span><span class="token punctuation">)</span>
clone:ShallowClone<span class="token punctuation">(</span>name<span class="token operator">=</span>SourceName, <span class="token assign-left variable">age</span><span class="token operator">=</span><span class="token number">28</span>, <span class="token assign-left variable">books</span><span class="token operator">=</span><span class="token punctuation">[</span>java, c++, javascript<span class="token punctuation">]</span><span class="token punctuation">)</span>
source: ShallowClone<span class="token punctuation">(</span>name<span class="token operator">=</span>newName, <span class="token assign-left variable">age</span><span class="token operator">=</span><span class="token number">20</span>, <span class="token assign-left variable">books</span><span class="token operator">=</span><span class="token punctuation">[</span>hello<span class="token punctuation">]</span><span class="token punctuation">)</span>
clone:ShallowClone<span class="token punctuation">(</span>name<span class="token operator">=</span>SourceName, <span class="token assign-left variable">age</span><span class="token operator">=</span><span class="token number">28</span>, <span class="token assign-left variable">books</span><span class="token operator">=</span><span class="token punctuation">[</span>java, c++, javascript<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果分析：</p><ul><li>拷贝后获取的是一个独立的对象，和原对象拥有不同的内存地址</li><li>基本元素类型，两者是隔离的（虽然上面只给出了int，String） <ul><li>基本元素类型包括:</li><li>int, Integer, long, Long, char, Charset, byte,Byte, boolean, Boolean, float,Float, double, Double, String</li></ul></li><li>非基本数据类型（如基本容器，其他对象等），只是拷贝了一份引用出去了，实际指向的依然是同一份</li></ul><p>其实，浅拷贝有个非常简单的理解方式：</p><p><strong>浅拷贝的整个过程就是，创建一个新的对象，然后新对象的每个值都是由原对象的值，通过 <code>=</code> 进行赋值</strong></p><p>这个怎么理解呢？</p><p>上面的流程拆解就是：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>- Object clone = new Object();
- clone.a = source.a
- clone.b = source.b
- ...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么=赋值有什么特点呢？</p><p>基本数据类型是值赋值；非基本的就是引用赋值</p><h3 id="_2-3-深拷贝" tabindex="-1"><a class="header-anchor" href="#_2-3-深拷贝" aria-hidden="true">#</a> 2.3 深拷贝</h3><p>深拷贝，就是要创建一个全新的对象，新的对象内部所有的成员也都是全新的，只是初始化的值已经由被拷贝的对象确定了而已</p><p>那么上面的实例改成深拷贝应该是怎样的呢？</p><p>可以加上这么一个方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ShallowClone</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ShallowClone</span> clone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShallowClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    clone<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    clone<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>books <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        clone<span class="token punctuation">.</span>books <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> clone<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token comment">// 简单改一下测试case</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ShallowClone</span> shallowClone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShallowClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    shallowClone<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;SourceName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    shallowClone<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1280</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;c++&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    shallowClone<span class="token punctuation">.</span><span class="token function">setBooks</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token class-name">ShallowClone</span> cloneObj <span class="token operator">=</span> shallowClone<span class="token punctuation">.</span><span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token comment">// 判断两个对象是否为同一个对象（即是否是新创建了一个实例）</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>shallowClone <span class="token operator">==</span> cloneObj<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 修改一个对象的内容是否会影响另一个对象</span>
    shallowClone<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;newName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    shallowClone<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    shallowClone<span class="token punctuation">.</span><span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;javascript&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;source: &quot;</span> <span class="token operator">+</span> shallowClone<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\nclone:&quot;</span> <span class="token operator">+</span> cloneObj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


    shallowClone<span class="token punctuation">.</span><span class="token function">setBooks</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;source: &quot;</span> <span class="token operator">+</span> shallowClone<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\nclone:&quot;</span> <span class="token operator">+</span> cloneObj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果为：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token boolean">false</span>
source: ShallowClone<span class="token punctuation">(</span>name<span class="token operator">=</span>newName, <span class="token assign-left variable">age</span><span class="token operator">=</span><span class="token number">2000</span>, <span class="token assign-left variable">books</span><span class="token operator">=</span><span class="token punctuation">[</span>java, c++, javascript<span class="token punctuation">]</span><span class="token punctuation">)</span>
clone:ShallowClone<span class="token punctuation">(</span>name<span class="token operator">=</span>SourceName, <span class="token assign-left variable">age</span><span class="token operator">=</span><span class="token number">1280</span>, <span class="token assign-left variable">books</span><span class="token operator">=</span><span class="token punctuation">[</span>java, c++<span class="token punctuation">]</span><span class="token punctuation">)</span>
source: ShallowClone<span class="token punctuation">(</span>name<span class="token operator">=</span>newName, <span class="token assign-left variable">age</span><span class="token operator">=</span><span class="token number">2000</span>, <span class="token assign-left variable">books</span><span class="token operator">=</span><span class="token punctuation">[</span>hello<span class="token punctuation">]</span><span class="token punctuation">)</span>
clone:ShallowClone<span class="token punctuation">(</span>name<span class="token operator">=</span>SourceName, <span class="token assign-left variable">age</span><span class="token operator">=</span><span class="token number">1280</span>, <span class="token assign-left variable">books</span><span class="token operator">=</span><span class="token punctuation">[</span>java, c++<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果分析：</p><ul><li>深拷贝独立的对象</li><li>拷贝后对象的内容，与原对象的内容完全没关系，都是独立的</li></ul><p>简单来说，深拷贝是需要自己来实现的，对于基本类型可以直接赋值，而对于对象、容器、数组来讲，需要创建一个新的出来，然后重新赋值</p><h3 id="_2-4-应用场景区分" tabindex="-1"><a class="header-anchor" href="#_2-4-应用场景区分" aria-hidden="true">#</a> 2.4 应用场景区分</h3><p>深拷贝的用途我们很容易可以想见，某个复杂对象创建比较消耗资源的时候，就可以缓存一个蓝本，后续的操作都是针对深clone后的对象，这样就不会出现混乱的情况了</p><p>那么浅拷贝呢？感觉留着是一个坑，一个人修改了这个对象的值，结果发现对另一个人造成了影响，真不是坑爹么？</p><p>假设又这么一个通知对象长下面这样</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">String</span> notifyUser<span class="token punctuation">;</span>

<span class="token comment">// xxx</span>

<span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> notifyRules<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们现在随机挑选了一千个人，同时发送通知消息，所以需要创建一千个上面的对象，这些对象中呢，除了notifyUser不同，其他的都一样</p><p>在发送之前，突然发现要临时新增一条通知信息，如果是浅拷贝的话，只用在任意一个通知对象的notifyRules中添加一调消息，那么这一千个对象的通知消息都会变成最新的了；而如果你是用深拷贝，那么苦逼的得遍历这一千个对象，每个都加一条消息了</p><hr><h2 id="_3-对象拷贝工具" tabindex="-1"><a class="header-anchor" href="#_3-对象拷贝工具" aria-hidden="true">#</a> 3. 对象拷贝工具</h2><p>上面说到，浅拷贝，需要实现Clonebale接口，深拷贝一般需要自己来实现，那么我现在拿到一个对象A，它自己没有提供深拷贝接口，我们除了主动一条一条的帮它实现之外，有什么辅助工具可用么？</p><p>对象拷贝区别与clone，它可以支持两个不同对象之间实现内容拷贝</p><p><strong>Apache的两个版本：（反射机制）</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>org.apache.commons.beanutils.PropertyUtils.copyProperties(Object dest, Object orig)


org.apache.commons.beanutils.BeanUtils#cloneBean
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Spring版本：（反射机制）</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>org.springframework.beans.BeanUtils.copyProperties(Object source, Object target, Class editable, String[] ignoreProperties)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>cglib版本：（使用动态代理，效率高）</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>net.sf.cglib.beans.BeanCopier.copy(Object paramObject1, Object paramObject2, Converter paramConverter)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>从上面的几个有名的工具类来看，提供了两种使用者姿势，一个是反射，一个是动态代理，下面分别来看两种思路</p><h3 id="_3-1-借助反射实现对象拷贝" tabindex="-1"><a class="header-anchor" href="#_3-1-借助反射实现对象拷贝" aria-hidden="true">#</a> 3.1 借助反射实现对象拷贝</h3><p>通过反射的方式实现对象拷贝的思路还是比较清晰的，先通过反射获取对象的所有属性，然后修改可访问级别，然后赋值；再获取继承的父类的属性，同样利用反射进行赋值</p><p>上面的几个开源工具，内部实现封装得比较好，所以直接贴源码可能不太容易一眼就能看出反射方式的原理，所以简单的实现了一个, 仅提供思路</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token class-name">Object</span> source<span class="token punctuation">,</span> <span class="token class-name">Object</span> dest<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">Class</span> destClz <span class="token operator">=</span> dest<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 获取目标的所有成员</span>
    <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> destFields <span class="token operator">=</span> destClz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Object</span> value<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> field <span class="token operator">:</span> destFields<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 遍历所有的成员，并赋值</span>
        <span class="token comment">// 获取value值</span>
        value <span class="token operator">=</span> <span class="token function">getVal</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>

        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">getVal</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 优先获取obj中同名的成员变量</span>
        <span class="token class-name">Field</span> field <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchFieldException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 表示没有同名的变量</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 获取对应的 getXxx() 或者 isXxx() 方法</span>
    name <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> methodName <span class="token operator">=</span> <span class="token string">&quot;get&quot;</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>
    <span class="token class-name">String</span> methodName2 <span class="token operator">=</span> <span class="token string">&quot;is&quot;</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>
    <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 只获取无参的方法</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getParameterCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>methodName<span class="token punctuation">)</span>
                <span class="token operator">||</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>methodName2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的实现步骤还是非常清晰的，首先是找同名的属性，然后利用反射获取对应的值</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Field</span> field <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果找不到，则找getXXX, isXXX来获取</p><h3 id="_3-2-代理的方式实现对象拷贝" tabindex="-1"><a class="header-anchor" href="#_3-2-代理的方式实现对象拷贝" aria-hidden="true">#</a> 3.2 代理的方式实现对象拷贝</h3><p>Cglib的BeanCopier就是通过代理的方式实现拷贝，性能优于反射的方式，特别是在大量的数据拷贝时，比较明显</p><p>代理，我们知道可以区分为静态代理和动态代理，简单来讲就是你要操作对象A，但是你不直接去操作A，而是找一个中转porxyA, 让它来帮你操作对象A</p><p>那么这种技术是如何使用在对象拷贝的呢？</p><p>我们知道，效率最高的对象拷贝方式就是Getter/Setter方法了，前面说的代理的含义指我们不直接操作，而是找个中间商来赚差价，那么方案就出来了</p><p>将原SourceA拷贝到目标DestB</p><ul><li>创建一个代理 copyProxy</li><li>在代理中，依次调用 SourceA的get方法获取属性值，然后调用DestB的set方法进行赋值</li></ul><p>实际上BeanCopier的思路大致如上，具体的方案当然就不太一样了, 简单看了一下实现逻辑，挺有意思的一块，先留个坑，后面单独开个博文补上</p><p><strong>说明</strong></p><p>从实现原理和通过简单的测试，发现BeanCopier是扫描原对象的getXXX方法，然后赋值给同名的 setXXX 方法，也就是说，如果这个对象中某个属性没有get/set方法，那么就无法赋值成功了</p><hr><h2 id="_3-小结" tabindex="-1"><a class="header-anchor" href="#_3-小结" aria-hidden="true">#</a> 3. 小结</h2><h3 id="_3-1-深拷贝和浅拷贝" tabindex="-1"><a class="header-anchor" href="#_3-1-深拷贝和浅拷贝" aria-hidden="true">#</a> 3.1 深拷贝和浅拷贝</h3><p><strong>深拷贝</strong></p><blockquote><p>相当于创建了一个新的对象，只是这个对象的所有内容，都和被拷贝的对象一模一样而已，即两者的修改是隔离的，相互之间没有影响</p></blockquote><ul><li>完全独立</li></ul><p><strong>浅拷贝</strong></p><blockquote><p>也是创建了一个对象，但是这个对象的某些内容（比如A）依然是被拷贝对象的，即通过这两个对象中任意一个修改A，两个对象的A都会受到影响</p></blockquote><ul><li>等同与新创建一个对象，然后使用=，将原对象的属性赋值给新对象的属性</li><li>需要实现Cloneable接口</li></ul><h3 id="_3-2-对象拷贝的两种方法" tabindex="-1"><a class="header-anchor" href="#_3-2-对象拷贝的两种方法" aria-hidden="true">#</a> 3.2 对象拷贝的两种方法</h3><p><strong>通过反射方式实现对象拷贝</strong></p><p>主要原理就是通过反射获取所有的属性，然后反射更改属性的内容</p><p><strong>通过代理实现对象拷贝</strong></p><p>将原SourceA拷贝到目标DestB</p><p>创建一个代理 copyProxy 在代理中，依次调用 SourceA的get方法获取属性值，然后调用DestB的set方法进行赋值</p>`,85);function l(i,u){return a(),t("div",null,[o,p(" more  "),c])}const r=s(e,[["render",l],["__file","31.深拷贝浅拷贝及对象拷贝的两种方式.html.vue"]]);export{r as default};
