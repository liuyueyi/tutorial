import{_ as a,V as s,W as e,X as t,Y as n,Z as c,a1 as p}from"./framework-094145d2.js";const o={},i=n("h1",{id:"实战35-调用本地程序的几种姿势",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#实战35-调用本地程序的几种姿势","aria-hidden":"true"},"#"),c(" 实战35：调用本地程序的几种姿势")],-1),l=n("p",null,"作为一个后端同学，经常被安全的小伙伴盯上，找一找安全漏洞；除了常说的注入之外，还有比较吓人的执行远程命令，唤醒本地应用程序等；然后有意思的问题就来了，写了这么多年的代码，好像还真没有尝试过用java来唤醒本地应用程序的",-1),u=n("p",null,"比如说一个最简单的，打开本地的计算器，应该怎么搞？",-1),d=n("p",null,"接下来本文将介绍一下如何使用java打开本地应用，以及打开mac系统中特殊一点的处理方式（直白来说就是不同操作系统，使用姿势不一样）",-1),r=p(`<h2 id="_1-runtime使用方式" tabindex="-1"><a class="header-anchor" href="#_1-runtime使用方式" aria-hidden="true">#</a> 1. Runtime使用方式</h2><p>主要是基于<code>Runtime.getRuntime().exec()</code>来执行shell命令，来打开应用</p><ul><li>传参就是需要打开的应用名</li></ul><p>比如上面说到的打开计算器</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// win系统</span>
<span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&quot;exec&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// mac系统</span>
<span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&quot;open -n /Applications/Calculator.app&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的传参也可以看出两者的区别，为什么mac会整一个 <code>open -n</code>， 这个其实可以理解为在终端执行命令，打开计算器</p><p><strong>注意事项</strong></p><p>对于mac系统而言，除了上面这种打开方式之外，还有下面这种姿势</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&quot;/Applications/Calculator.app/Contents/MacOS/Calculator&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在exec中指定计算器的路径，有个很容易采的坑，直接写成下面这种</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">&quot;/Applications/Calculator.app&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面这个直接执行之后会提示<code>权限错误</code>，其主要原因是mac系统的应用和win中的exe作为启动方式不太一样，对于mac而言，可以理解<code>xxx.app</code>为一个目录，真正执行文件是内部的<code>xxx/Contents/MacOS/xxx</code></p><h2 id="_2-processbuilder使用方式" tabindex="-1"><a class="header-anchor" href="#_2-processbuilder使用方式" aria-hidden="true">#</a> 2. ProcessBuilder使用方式</h2><p>除了Runtime唤起之外，使用ProcessBuilder也属于非常常见的case</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// win</span>
<span class="token keyword">new</span> <span class="token class-name">ProcessBuilder</span><span class="token punctuation">(</span><span class="token string">&quot;exec&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// mac 注意，使用下面这个，则传参不能是 open -n xxx</span>
<span class="token keyword">new</span> <span class="token class-name">ProcessBuilder</span><span class="token punctuation">(</span><span class="token string">&quot;/Applications/Calculator.app/Contents/MacOS/Calculator&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用上面这种姿势，特别需要注意的是内部传参不能是<code>open -n</code></p><h2 id="_3-小结" tabindex="-1"><a class="header-anchor" href="#_3-小结" aria-hidden="true">#</a> 3. 小结</h2><p>从上面介绍的方式来看，其实打开应用程序的思路主要就是利用java来执行脚本命令；内容比较简单，隐患却是比较大的；在自己的项目中，最好不要出现这种调用方式</p>`,18);function k(m,v){return s(),e("div",null,[i,l,u,d,t(" more "),r])}const h=a(o,[["render",k],["__file","35.调用本地程序的几种姿势.html.vue"]]);export{h as default};
