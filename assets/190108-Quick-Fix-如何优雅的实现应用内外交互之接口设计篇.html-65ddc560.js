import{_ as e,V as p,W as o,X as c,Y as n,Z as s,$ as t,a1 as l,F as i}from"./framework-094145d2.js";const u={},r=n("p",null,"如何实现应用内外交互，是Quick-Fix框架的核心之一，我们常见的应用有提供web服务的（如Spring应用），有进行大数据计算的（如Storm应用），有提供rpc的后台服务（如通过dubbo提供rpc的数据服务），有纯jar服务等；基本上我们可以划分为两类",-1),d=n("ul",null,[n("li",null,"应用本身，有一套健全的与外界交互的机制（这里不包括db/redis等数据的读写）"),n("li",null,"应用只关注自己的服务功能（接收数据，产生数据，保存数据），本身不与第三方的应用进行交互")],-1),k=n("p",null,"针对上面这两种case，我们应该怎么来设计一套应用内外交互的方案，来实现接收外部请求，执行应用内部方法或访问应用内部数据，并返回结果的目的？",-1),v=l(`<h2 id="i-交互规范设计" tabindex="-1"><a class="header-anchor" href="#i-交互规范设计" aria-hidden="true">#</a> I. 交互规范设计</h2><p>因为不同的应用，与外部交互的方式不一样，我们希望最好能直接复用已有的通信机制来实现我们的需求；比如原来就提供了web服务，我们可以在原有的web服务的基础上，新增一个Controller来实现需求；如果应用本身是通过rpc进行通行的，且已经有了非常完善的rpc测试辅助工具，然后就希望可以直接在现在已有的rpc基础上，新增一个服务来实现应用内外交互；再如果我就是一个独立jar应用，我希望通过http方式与外界交互，所以最好框架本身就提供一种默认的交互方案</p><p>简单来讲，交互，不能写死，最好是有一个规范，具体想用哪个实现，可以交给实际使用方来选择和扩展</p><h3 id="_1-请求参数确认" tabindex="-1"><a class="header-anchor" href="#_1-请求参数确认" aria-hidden="true">#</a> 1. 请求参数确认</h3><p>内外交互，首要的就是确认交互的参数，确定需要哪些基本信息，可以达到我们的目的；以及结果怎么返回</p><p>在设计参数之前，再次明确一下我们的目的：</p><ul><li>执行应用内某个方法</li><li>访问应用中数据</li></ul><p>要实现上面的目的，我们需要些什么？</p><ul><li>service: 用于定位访问的具体类</li><li>field: 用来定位应用中的数据</li><li>method: 需要执行的方法</li><li>params: 方法执行需要传入参数</li></ul><p>所以我们的req接口如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FixReqDTO</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">151408688916877734L</span><span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * 调用的服务名，.class 结尾，则表示根据类型查找Spring容器中的Bean；否则表示传入的为beanName，通过name方式查找Spring容器中的Bean
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> service<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * type用来区分service传入的是bean还是静态类
     *
     * 当type == static 时要求service传入对应的静态类完整包路径方式
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> type<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 需要执行的方法
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> method<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 非空：表示最终执行的是service这个bean中成员field的方法method
     * 空：  表示最终执行的是service这个bean提供的方法method
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> field<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 请求参数，格式为  class#value, 如
     *
     * - int#20
     * - Integer#20
     * - String#Hello World
     * - net.finbtc.component.model.TradePairDO#<span class="token punctuation">{</span>&quot;pairId&quot;: 120<span class="token punctuation">}</span>
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> params<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-请求参数说明" tabindex="-1"><a class="header-anchor" href="#_2-请求参数说明" aria-hidden="true">#</a> 2. 请求参数说明</h3><p>针对请求参数，进行解释</p><table><thead><tr><th>key</th><th>类型</th><th>解释</th></tr></thead><tbody><tr><td>service</td><td>String</td><td>需要执行的服务，可以是完成路径，可以是beanName</td></tr><tr><td>field</td><td>String</td><td>需要访问的服务内部成员属性，值为属性名；为空时，表示执行的服务的某个方法</td></tr><tr><td>method</td><td>String</td><td>方法名，需要执行的方法；为空时，表示访问某个服务的成员属性值</td></tr><tr><td>type</td><td>String</td><td>用来辅助service来定位具体执行的类，如static表示访问的是一个静态类；single表示访问的是单例</td></tr><tr><td>params</td><td>数组</td><td>请求参数，数组，可以不存在，格式为 <code>类型#值</code>，对于基本类型，可以省略类型的前缀包</td></tr></tbody></table><p>单独看表，可能不太好理解，下面结合实例进行说明，为什么要这么设计</p><h4 id="a-静态类和实例的访问" tabindex="-1"><a class="header-anchor" href="#a-静态类和实例的访问" aria-hidden="true">#</a> a. 静态类和实例的访问</h4><p>在第一篇的整体设计中，就提及到我们采用反射的方式来执行目标方法，因此拿到请求参数后，第一步就是获取执行的类，我们需要执行的是静态类还是实例，对于反射而言，这个差别可不小；因此我们就有了type字段，用来区分service的类型</p><p><strong>type可以决定用哪个<code>ServerLoader</code>来加载传入的Service</strong></p><p>比如在框架提供的两种service加载中，对type支持如下</p><table><thead><tr><th>value</th><th>说明</th><th>service取值</th></tr></thead><tbody><tr><td>static</td><td>表示service传入的是一个静态类的包路径，我们需要访问的是静态类的成员或方法</td><td>service必须是类全路径</td></tr><tr><td>bean 或不传 或空字符串</td><td>表示service传入的是Spring的Bean（可以是beanName, 也可以是全路径），我们需要访问的是Spring中某个Bean的成员或方法</td><td>service可以穿beanName or 全路径</td></tr></tbody></table><h4 id="b-方法执行" tabindex="-1"><a class="header-anchor" href="#b-方法执行" aria-hidden="true">#</a> b. 方法执行</h4><p>目标方法的执行，可以分为两种，一个是直接访问某个服务or静态类的方法；另外一个是访问某个服务or静态类的成员属性的方法</p><p>上面两种有什么区别呢？</p><ul><li>第一种，通过传入参数，看返回结果，更常见的是为了确认方法的执行逻辑是否有问题</li><li>第二种，更多是查询或订正内存数据（应用内存数据，往往是以成员属性的方式存在）</li></ul><p>所以field,method 这两个参数的组合，就是用来确认上面的两种场景的</p><table><thead><tr><th>case</th><th>组合方式</th><th>效果</th></tr></thead><tbody><tr><td>case1</td><td>field 不传，或者field为空，method存在</td><td>相等于执行service的method方法</td></tr><tr><td>case2</td><td>field method都存在，且method为field对象可执行的方法</td><td>分步骤为先获取service中的field属性，然后执行field的method方法</td></tr></tbody></table><h3 id="c-传参说明" tabindex="-1"><a class="header-anchor" href="#c-传参说明" aria-hidden="true">#</a> c. 传参说明</h3><p>方法执行，不可避免的就是传参了，参数我们将分为三类</p><ul><li>基本类型: <code>int/long/char/boolean/float/double/byte</code></li><li>特殊类型: <code>String/Class/BigDecimal/BigInteger</code></li><li>对象</li></ul><p>接下来，我们约定下传参的规范</p><ul><li>params 为数组</li><li>基本类型，传参格式如 <code>int#value</code></li></ul><table><thead><tr><th>要求</th><th>格式</th><th>示例</th></tr></thead><tbody><tr><td>params</td><td>数组</td><td>[&quot;asd&quot;, &quot;123&quot;]</td></tr><tr><td>基本类型</td><td>类型#value</td><td><code>”int#123&quot;</code>, <code>&quot;long@12039123123&quot;</code>, <code>&quot;boolean#true&quot;</code>, <code>&quot;float#123.321&quot;</code></td></tr><tr><td>BigDecimal</td><td>BigDecimal#value</td><td><code>BigDecimal#12.2</code></td></tr><tr><td>BigInteger</td><td>BigInteger#value</td><td><code>BigInteger#12</code></td></tr><tr><td>Class</td><td>Class#类全路径</td><td><code>Class#com.git.hui.fix.example.jar.server.CalculateServer</code></td></tr><tr><td>String</td><td>String#Value 或 Value</td><td><code>&quot;String#Hello&quot;</code>, <code>HelloWorld</code></td></tr><tr><td>对象</td><td>全路径#Json序列化对象</td><td><code>&quot;com.git.hui.fix.example.jar.server.DemoDO#{\\&quot;key\\&quot;:\\&quot;kkk\\&quot;, \\&quot;value\\&quot;:\\&quot;aaa11\\&quot;}&quot;</code></td></tr></tbody></table><p>接下来给出以下具体的参数解析逻辑</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 根据传入的参数来解析为对应的do对象
 * Created by @author yihui in 15:32 18/12/13.
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArgumentParser</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> emptyArgs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>args <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> args<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> emptyArgs<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>args<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">buildArgObj</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">buildArgObj</span><span class="token punctuation">(</span><span class="token class-name">String</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> typeValue <span class="token operator">=</span> arg<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;#&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>typeValue<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 没有 #，把参数当成String</span>
            <span class="token keyword">return</span> arg<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>typeValue<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 标准的kv参数</span>
            <span class="token keyword">return</span> <span class="token function">parseStrToObj</span><span class="token punctuation">(</span>typeValue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> typeValue<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalInvokeArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Illegal invoke arg: &quot;</span> <span class="token operator">+</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">parseStrToObj</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;int&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&quot;Integer&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;long&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&quot;Long&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;float&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&quot;Float&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;double&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&quot;Double&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;byte&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&quot;Character&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token class-name">Byte</span><span class="token punctuation">.</span><span class="token function">parseByte</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;boolean&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&quot;Boolean&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token function">parseBoolean</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;BigDecimal&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;BigInteger&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;String&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> value<span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&quot;Class&quot;</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token class-name">ArgumentParser</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token class-name">Class</span> clz <span class="token operator">=</span> <span class="token class-name">ArgumentParser</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> clz<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalInvokeArgumentException</span><span class="token punctuation">(</span>
                    <span class="token string">&quot;Pare Argument to Object Error! type: &quot;</span> <span class="token operator">+</span> type <span class="token operator">+</span> <span class="token string">&quot; value: &quot;</span> <span class="token operator">+</span> value<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-其他" tabindex="-1"><a class="header-anchor" href="#ii-其他" aria-hidden="true">#</a> II. 其他</h2><h3 id="_0-项目" tabindex="-1"><a class="header-anchor" href="#_0-项目" aria-hidden="true">#</a> 0. 项目</h3>`,36),m={href:"https://github.com/liuyueyi/quick-fix",target:"_blank",rel:"noopener noreferrer"},b={id:"_1-一灰灰blog-https-liuyueyi-github-io-hexblog",tabindex:"-1"},h=n("a",{class:"header-anchor",href:"#_1-一灰灰blog-https-liuyueyi-github-io-hexblog","aria-hidden":"true"},"#",-1),g={href:"https://liuyueyi.github.io/hexblog",target:"_blank",rel:"noopener noreferrer"},y={href:"https://liuyueyi.github.io/hexblog",target:"_blank",rel:"noopener noreferrer"},f=n("p",null,"一灰灰的个人博客，记录所有学习和工作中的博文，欢迎大家前去逛逛",-1),w=n("h3",{id:"_2-声明",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-声明","aria-hidden":"true"},"#"),s(" 2. 声明")],-1),_=n("p",null,"尽信书则不如，已上内容，纯属一家之言，因个人能力有限，难免有疏漏和错误之处，如发现bug或者有更好的建议，欢迎批评指正，不吝感激",-1),q={href:"https://weibo.com/p/1005052169825577/home",target:"_blank",rel:"noopener noreferrer"},x=n("li",null,"QQ： 一灰灰/3302797840",-1),S=n("h3",{id:"_3-扫描关注",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-扫描关注","aria-hidden":"true"},"#"),s(" 3. 扫描关注")],-1),B=n("p",null,[n("strong",null,"一灰灰blog")],-1),I=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/liuyueyi/Source/master/img/info/blogInfoV2.png",alt:"QrCode",tabindex:"0",loading:"lazy"}),n("figcaption",null,"QrCode")],-1),j=n("p",null,[n("strong",null,"知识星球")],-1),C=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/liuyueyi/Source/master/img/info/goals.png",alt:"goals",tabindex:"0",loading:"lazy"}),n("figcaption",null,"goals")],-1);function O(D,V){const a=i("ExternalLinkIcon");return p(),o("div",null,[r,d,k,c(" more "),v,n("ul",null,[n("li",null,[n("a",m,[s("https://github.com/liuyueyi/quick-fix"),t(a)])])]),n("h3",b,[h,s(" 1. "),n("a",g,[s("一灰灰Blog"),t(a)]),s("： "),n("a",y,[s("https://liuyueyi.github.io/hexblog"),t(a)])]),f,w,_,n("ul",null,[n("li",null,[s("微博地址: "),n("a",q,[s("小灰灰Blog"),t(a)])]),x]),S,B,I,j,C])}const N=e(u,[["render",O],["__file","190108-Quick-Fix-如何优雅的实现应用内外交互之接口设计篇.html.vue"]]);export{N as default};
