import{_ as r}from"./zab00-87821279.js";import{_ as a,V as t,W as i,Y as e,Z as o,$ as n,a1 as s,F as p}from"./framework-094145d2.js";const c={},d=e("h1",{id:"zookeeper-atomic-broadcast-zk原子广播协议",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#zookeeper-atomic-broadcast-zk原子广播协议","aria-hidden":"true"},"#"),o(" Zookeeper Atomic Broadcast, ZK原子广播协议")],-1),_=e("p",null,"ZAB(Zookeeper Atomic Broadcast) 协议是为分布式协调服务ZooKeeper专门设计的一种支持崩溃恢复的一致性协议，基于该协议，ZooKeeper 实现了一种 主从模式的系统架构来保持集群中各个副本之间的数据一致性。",-1),u={href:"https://segmentfault.com/a/1190000037550497",target:"_blank",rel:"noopener noreferrer"},m=s('<p><strong>角色划分</strong></p><ul><li>Leader: 负责整个Zookeeper 集群工作机制中的核心 <ul><li>事务请求的唯一调度和处理者，保证集群事务处理的顺序性</li><li>集群内部各服务器的调度者</li></ul></li><li>Follower：Leader的追随者 <ul><li>处理客户端的非实物请求，转发事务请求给 Leader 服务器</li><li>参与事务请求 Proposal 的投票</li><li>参与 Leader 选举投票</li></ul></li><li>Observer：是 zookeeper 自 3.3.0 开始引入的一个角色， <ul><li>它不参与事务请求 Proposal 的投票，</li><li>也不参与 Leader 选举投票</li><li>只提供非事务的服务（查询），通常在不影响集群事务处理能力的前提下提升集群的非事务处理能力。</li></ul></li></ul><p><strong>消息广播</strong></p><figure><img src="'+r+'" alt="ZAB消息广播" tabindex="0" loading="lazy"><figcaption>ZAB消息广播</figcaption></figure><p>leader再接收到事务请求之后，将请求转换为事务Proposal提案，leader会为每个follower创建一个队列，将该事务proposal放入响应队列，保证事务的顺序性；</p><p>然后再在队列中按照顺序向其它节点广播该提案；</p><p>follower收到后会将其以事务的形式写入到本地日志中，并且向leader发送Ack信息确认</p><p>有一半以上的follower返回Ack信息时， leader会提交该提案并且向其它节点发送commit信息</p><p><strong>事务有序性</strong></p><p>队列 + 事务递增ID（ZXID）来保证提案的有序性，</p><p>ZXID:</p><ul><li>高32位：纪元epoch，新选举一个leader，纪元+1</li><li>低32位：计数器counter，单调递增的数字</li></ul>',12);function f(k,h){const l=p("ExternalLinkIcon");return t(),i("div",null,[d,e("blockquote",null,[_,e("ul",null,[e("li",null,[e("a",u,[o("zookeeper核心之ZAB协议就这么简单！"),n(l)])])])]),m])}const B=a(c,[["render",f],["__file","ZAB协议.html.vue"]]);export{B as default};
