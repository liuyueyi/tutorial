import{_ as e,V as p,W as o,Y as s,Z as n,$ as c,a1 as a,F as l}from"./framework-094145d2.js";const i={},u=a(`<h2 id="_1-背景-为什么需要记录模式" tabindex="-1"><a class="header-anchor" href="#_1-背景-为什么需要记录模式" aria-hidden="true">#</a> 1. 背景：为什么需要记录模式？</h2><p>在Java中，处理复杂数据结构（如嵌套对象或记录类）时，通常需要编写大量样板代码来提取和验证数据。例如：</p><ul><li>手动解构嵌套对象</li><li>使用<code>instanceof</code>和类型转换</li><li>编写冗长的条件分支</li></ul><p><strong>记录模式</strong>（Record Patterns）是Java模式匹配的进一步扩展，旨在简化数据解构和模式匹配的代码。它结合了<strong>记录类</strong>（Record）和<strong>模式匹配</strong>的特性，使开发者能够以声明式的方式提取和处理数据。</p><p>JDK19首次引入记录模式作为预览特性，JDK21进一步优化并正式发布。</p><h2 id="_2-原理-记录模式如何工作" tabindex="-1"><a class="header-anchor" href="#_2-原理-记录模式如何工作" aria-hidden="true">#</a> 2. 原理：记录模式如何工作？</h2><p>记录类是一种特殊的类，它主要用于封装不可变的数据，自动生成构造函数、equals()、hashCode() 和 toString() 等方法。</p><p>记录模式利用记录类的这种特性，使得在进行类型检查和数据提取时可以一步完成，避免了传统方式下繁琐的属性访问操作</p><h3 id="_2-1-传统数据解构-vs-记录模式" tabindex="-1"><a class="header-anchor" href="#_2-1-传统数据解构-vs-记录模式" aria-hidden="true">#</a> 2.1 传统数据解构 vs 记录模式</h3><h4 id="传统方式" tabindex="-1"><a class="header-anchor" href="#传统方式" aria-hidden="true">#</a> 传统方式</h4><ul><li><strong>手动解构</strong>：通过getter方法或字段访问提取数据</li><li><strong>类型检查</strong>：使用<code>instanceof</code>和类型转换</li><li><strong>冗长代码</strong>：需要多行代码完成简单操作</li></ul><h4 id="记录模式" tabindex="-1"><a class="header-anchor" href="#记录模式" aria-hidden="true">#</a> 记录模式</h4><ul><li><strong>声明式解构</strong>：直接匹配记录类的结构并提取字段</li><li><strong>类型推断</strong>：自动推断字段类型，无需显式类型转换</li><li><strong>模式嵌套</strong>：支持嵌套记录类的解构</li></ul><h3 id="核心机制" tabindex="-1"><a class="header-anchor" href="#核心机制" aria-hidden="true">#</a> 核心机制</h3><ol><li><p><strong>模式匹配</strong><br> 记录模式扩展了<code>instanceof</code>和<code>switch</code>的模式匹配能力，允许直接匹配记录类的结构。</p></li><li><p><strong>解构绑定</strong><br> 在匹配成功后，自动将记录类的字段绑定到变量中。</p></li><li><p><strong>嵌套支持</strong><br> 支持嵌套记录类的解构，简化复杂数据结构的处理。</p></li><li><p><strong>类型推断</strong><br> 编译器自动推断字段类型，减少显式类型转换。</p></li></ol><h3 id="_2-2-架构示意图" tabindex="-1"><a class="header-anchor" href="#_2-2-架构示意图" aria-hidden="true">#</a> 2.2 架构示意图</h3><div class="language-plaintext line-numbers-mode" data-ext="plaintext"><pre class="language-plaintext"><code>┌──────────────────────────────┐
│ 记录模式匹配流程              │
│                              │
│  1. 匹配记录类结构            │
│  2. 解构字段并绑定到变量      │
│  3. 执行匹配后的代码块        │
└──────────────────────────────┘
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-优势-为什么选择记录模式" tabindex="-1"><a class="header-anchor" href="#_3-优势-为什么选择记录模式" aria-hidden="true">#</a> 3. 优势：为什么选择记录模式？</h2><table><thead><tr><th>特性</th><th>传统方式</th><th>记录模式</th></tr></thead><tbody><tr><td>代码简洁性</td><td>冗长</td><td><strong>简洁</strong></td></tr><tr><td>类型安全性</td><td>需显式类型转换</td><td><strong>自动推断</strong></td></tr><tr><td>嵌套支持</td><td>手动逐层解构</td><td><strong>自动解构</strong></td></tr><tr><td>可读性</td><td>低</td><td><strong>高</strong></td></tr></tbody></table><ol><li><strong>代码简洁</strong>：减少样板代码，提升开发效率</li><li><strong>类型安全</strong>：编译器自动检查类型，减少运行时错误</li><li><strong>嵌套解构</strong>：轻松处理复杂数据结构</li><li><strong>可读性高</strong>：声明式语法更符合直觉</li></ol><h2 id="_4-使用示例" tabindex="-1"><a class="header-anchor" href="#_4-使用示例" aria-hidden="true">#</a> 4. 使用示例</h2><p>记录模式的基本语法是在 instanceof 或 switch 表达式中使用记录类的名称，并在括号内指定要解构的组件变量。例如：</p><h3 id="示例1-基本使用" tabindex="-1"><a class="header-anchor" href="#示例1-基本使用" aria-hidden="true">#</a> 示例1：基本使用</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">record</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printSum</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="示例2-嵌套记录类" tabindex="-1"><a class="header-anchor" href="#示例2-嵌套记录类" aria-hidden="true">#</a> 示例2：嵌套记录类</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">record</span> <span class="token class-name">Line</span><span class="token punctuation">(</span><span class="token class-name">Point</span> start<span class="token punctuation">,</span> <span class="token class-name">Point</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printLineDetails</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Line</span><span class="token punctuation">(</span><span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> x1<span class="token punctuation">,</span> <span class="token keyword">int</span> y1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> x2<span class="token punctuation">,</span> <span class="token keyword">int</span> y2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Line from (%d, %d) to (%d, %d)%n&quot;</span><span class="token punctuation">,</span> x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="示例3-在switch中使用记录模式" tabindex="-1"><a class="header-anchor" href="#示例3-在switch中使用记录模式" aria-hidden="true">#</a> 示例3：在<code>switch</code>中使用记录模式</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">record</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token keyword">int</span> radius<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">record</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printArea</span><span class="token punctuation">(</span><span class="token class-name">Object</span> shape<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>shape<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Area: &quot;</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> r <span class="token operator">*</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token class-name">Rectangle</span><span class="token punctuation">(</span><span class="token keyword">int</span> w<span class="token punctuation">,</span> <span class="token keyword">int</span> h<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Area: &quot;</span> <span class="token operator">+</span> w <span class="token operator">*</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Unknown shape&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="示例4-结合泛型使用" tabindex="-1"><a class="header-anchor" href="#示例4-结合泛型使用" aria-hidden="true">#</a> 示例4：结合泛型使用</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">record</span> <span class="token class-name">Box</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token class-name">T</span> content<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printBoxContent</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Box</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;String box: &quot;</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Box</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Integer box: &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-小结" tabindex="-1"><a class="header-anchor" href="#_5-小结" aria-hidden="true">#</a> 5. 小结</h2><h3 id="_5-1-注意事项" tabindex="-1"><a class="header-anchor" href="#_5-1-注意事项" aria-hidden="true">#</a> 5.1 注意事项</h3><ol><li><p><strong>记录类要求</strong><br> 记录模式仅适用于记录类（Record），普通类需转换为记录类才能使用。</p></li><li><p><strong>模式顺序</strong><br> 在<code>switch</code>中，更具体的模式应放在前面：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token class-name">Box</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">// ✅ 更具体的模式</span>
    <span class="token keyword">case</span> <span class="token class-name">Box</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">// ❌ 更通用的模式应放在后面</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>空值处理</strong><br> 记录模式不支持<code>null</code>值匹配，需额外检查：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> obj <span class="token keyword">instanceof</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p><strong>性能影响</strong><br> 记录模式在运行时可能引入额外开销，需在性能敏感场景中测试。</p></li></ol><h2 id="_5-2-总结" tabindex="-1"><a class="header-anchor" href="#_5-2-总结" aria-hidden="true">#</a> 5.2 总结</h2><p>JDK21记录模式通过以下革新提升Java数据处理的效率：</p><ul><li>✅ 简化数据解构代码</li><li>✅ 提升类型安全性和可读性</li><li>✅ 支持嵌套记录类的解构</li><li>✅ 与模式匹配无缝集成</li></ul><p><strong>适用场景</strong>：</p><ul><li>处理复杂数据结构</li><li>实现模式匹配逻辑</li><li>简化数据验证和提取</li></ul>`,38),r={href:"https://openjdk.org/jeps/440",target:"_blank",rel:"noopener noreferrer"},d=a(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 现在，用记录模式让数据解构更优雅！</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Point: (&quot;</span> <span class="token operator">+</span> x <span class="token operator">+</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">+</span> y <span class="token operator">+</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function k(v,h){const t=l("ExternalLinkIcon");return p(),o("div",null,[u,s("p",null,[n("记录模式是Java模式匹配的重要扩展，建议有兴趣的小伙伴可以参考"),s("a",r,[n("官方文档"),c(t)]),n("来实际体验一下它的魅力")]),d])}const b=e(i,[["render",k],["__file","04.记录模式介绍及使用示例.html.vue"]]);export{b as default};
