import{_ as p,V as c,W as o,Y as n,Z as a,$ as e,X as i,a1 as t,F as l}from"./framework-094145d2.js";const d="/tutorial/imgs/210615/00.jpg",u={},r={href:"http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247486297&idx=1&sn=9c9014eb80987f8c6ef842b1ae02b155&chksm=fce710f5cb9099e31047b01b9d4f1e454cf31c6b11fdd85f7f896d5392e9db2f519af65fd5d2&token=73054292&lang=zh_CN#rd",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"@Value",-1),v=n("ul",null,[n("li",null,"字面量表达式支持"),n("li",null,"SpEL语法支持")],-1),m=t(`<h2 id="i-项目环境" tabindex="-1"><a class="header-anchor" href="#i-项目环境" aria-hidden="true">#</a> I. 项目环境</h2><h3 id="_1-项目依赖" tabindex="-1"><a class="header-anchor" href="#_1-项目依赖" aria-hidden="true">#</a> 1. 项目依赖</h3><p>本项目借助<code>SpringBoot 2.2.1.RELEASE</code> + <code>maven 3.5.3</code> + <code>IDEA</code>进行开发</p><p>开一个web服务用于测试</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ii-value知识点" tabindex="-1"><a class="header-anchor" href="#ii-value知识点" aria-hidden="true">#</a> II. @Value知识点</h2><p>上一篇的博文知道通过<code>\${}</code>可以获取配置文件中对应的配置值，接下来我们看一下另外两种常见的姿势</p><h3 id="_1-字面量" tabindex="-1"><a class="header-anchor" href="#_1-字面量" aria-hidden="true">#</a> 1. 字面量</h3><p>字面量的使用比较简单，直接在<code>@Value</code>注解中写常量</p><p>一个demo如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;1 + 2&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> common<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这种初始化之后，common的值会是 <code>1 + 2</code>；如果只是这种用法，这个东西就有些鸡肋了，我直接赋值不香嘛，为啥还有这样多此一举呢？</p><p>当然现实中（至少我有限的代码接触中），纯上面这种写法的不多，更常见的是下面这种</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;demo_\${auth.jwt.token}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> prefixConf<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>字面量 + 配置联合使用，如我们的配置文件值为</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">auth</span><span class="token punctuation">:</span>
  <span class="token key atrule">jwt</span><span class="token punctuation">:</span>
    <span class="token key atrule">token</span><span class="token punctuation">:</span> TOKEN.123
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的prefixConf的取值，实际为 <code>demo_TOKEN.123</code></p><h3 id="_2-spel表达式" tabindex="-1"><a class="header-anchor" href="#_2-spel表达式" aria-hidden="true">#</a> 2. SpEL表达式</h3>`,18),b={href:"http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247484665&idx=1&sn=d0e0ee3594ac0faa82c7ded5db178eef&chksm=fce71f55cb90964379e9c3e724c07fe0c43f17acdc77c591d93ec1dbaab3440c4579eec5fc7c&token=73054292&lang=zh_CN#rd",target:"_blank",rel:"noopener noreferrer"},g=t(`<h4 id="_2-1-基本姿势" tabindex="-1"><a class="header-anchor" href="#_2-1-基本姿势" aria-hidden="true">#</a> 2.1 基本姿势</h4><p>使用姿势是 <code>#{}</code>，表示这个大括弧里面的走SpEL表达式，如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 字符串
 */</span>
<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;#{&#39;abcd&#39;}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> spelStr<span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 基本计算
 */</span>
<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;#{1 + 2}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> spelVal3<span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 列表
 */</span>
<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;#{{1, 2, 3}}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> spelList<span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * map
 */</span>
<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;#{{a: &#39;123&#39;, b: &#39;cde&#39;}}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">Map</span> spelMap<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面是几个基本的case了，字面量，表达式，列表/Map等，SpEL的基本使用姿势与扫盲博文中的没有什么区别，无外乎就是在外层多了一个<code>\${}</code></p><p>当然如果仅仅只是介绍上面几个的话，就有点单调了，SpEL一个比较强大的就是可以访问bean的属性/方法，这就给了我们很多的想像空间了</p><h4 id="_2-2-调用静态方法" tabindex="-1"><a class="header-anchor" href="#_2-2-调用静态方法" aria-hidden="true">#</a> 2.2 调用静态方法：</h4><p>在上面这个配置类<code>com.git.hui.boot.properties.value.config.SpelProperties</code>中添加一个静态方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">uuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">&quot;spel_&quot;</span> <span class="token operator">+</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&quot;_&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们尝试调用它</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 调用静态方法
 */</span>
<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;#{T(com.git.hui.boot.properties.value.config.SpelProperties).uuid()}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> spelStaticMethod<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样<code>spelStaticMethod</code>就会是一个 <code>&quot;spel_&quot;</code> 开头的随机字符串了</p><p><strong>请注意：如果在你的实际生产项目中，写出这样的代码，那多半意味着离找下家不远了</strong></p><h4 id="_2-3-嵌套使用" tabindex="-1"><a class="header-anchor" href="#_2-3-嵌套使用" aria-hidden="true">#</a> 2.3 嵌套使用</h4><p>接下来借助SpEL与配置绑定的嵌套使用，来稍微调整下上面的实现（实际上下面这种用法也不常见，虽然没问题，但这种代码就属于写时一时爽，维护火葬场了🙄）</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 调用静态方法
 */</span>
<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;#{T(com.git.hui.boot.properties.value.config.SpelProperties).uuid(&#39;\${auth.jwt.token}_&#39;)}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> spelStaticMethod<span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">uuid</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefix<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> prefix <span class="token operator">+</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&quot;_&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>关于嵌套使用，下面再给出一个基础的使用姿势，供打开思路用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 嵌套使用，从配置中获取值，然后执行SpEL语句
 */</span>
<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;#{&#39;\${auth.jwt.token}&#39;.substring(2)}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> spelLen<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-4-bean方法调用" tabindex="-1"><a class="header-anchor" href="#_2-4-bean方法调用" aria-hidden="true">#</a> 2.4 Bean方法调用</h4><p>最后再来一个访问bean的方法的case</p><p>定义一个Service</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RandomService</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">AtomicInteger</span> cnt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">randUid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> cnt<span class="token punctuation">.</span><span class="token function">getAndAdd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;_&quot;</span> <span class="token operator">+</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个使用的姿势如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * bean 方法访问
 */</span>
<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;#{randomService.randUid()}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> spelBeanMethod<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-测试" tabindex="-1"><a class="header-anchor" href="#_3-测试" aria-hidden="true">#</a> 3. 测试</h3><p>最后给出一个注入的结果输出，查看下有没有什么偏离预期的场景</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">SpelProperties</span> spelProperties<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;spel&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">SpelProperties</span> <span class="token function">showSpel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> spelProperties<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_4-小结" tabindex="-1"><a class="header-anchor" href="#_4-小结" aria-hidden="true">#</a> 4. 小结</h3><p>本篇博文主要介绍了<code>@Value</code>除了绑定配置文件中的配置之外，另外两种常见的case</p><ul><li>字面量</li><li>SpEL表达式：定义在<code>#{}</code>里面</li></ul><p>借助SpEL的强大功能，完全可以发挥我们的脑洞，让<code>@Value</code>修饰的属性初始化不再局限于简单的配置文件，比如从db,redis,http获取完全是可行的嘛，无非就是一个表达式而已</p><p>当然这里还存在一个待解决的问题，就是值刷新的支持，已知<code>@Value</code>只在bean初始化时执行一次，后续即便配置变更了，亦不会重新更改这个值，这种设计有好有坏，好处很明显，配置的不变性可以省去很多问题；缺点就是不灵活</p><p>那么如何让<code>@Value</code>的配置可以动态刷新呢？</p><p>咱么下篇博文见，我是一灰灰，欢迎关注长草的公众号<code>一灰灰blog</code></p><h3 id="iii-不能错过的源码和相关知识点" tabindex="-1"><a class="header-anchor" href="#iii-不能错过的源码和相关知识点" aria-hidden="true">#</a> III. 不能错过的源码和相关知识点</h3><h3 id="_0-项目" tabindex="-1"><a class="header-anchor" href="#_0-项目" aria-hidden="true">#</a> 0. 项目</h3>',36),h={href:"https://github.com/liuyueyi/spring-boot-demo",target:"_blank",rel:"noopener noreferrer"},f={href:"https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/002-properties-value",target:"_blank",rel:"noopener noreferrer"},_=n("p",null,[n("strong",null,"配置系列博文")],-1),S={href:"http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247486363&idx=1&sn=259c4396393d6670e1caedd24a4d9af2&chksm=fce71037cb909921d80559c0c48625f678957e4c7f8b12becacda83d120fe13f1eb40166da99&token=1655903804&lang=zh_CN#rd",target:"_blank",rel:"noopener noreferrer"},x={href:"http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247486297&idx=1&sn=9c9014eb80987f8c6ef842b1ae02b155&chksm=fce710f5cb9099e31047b01b9d4f1e454cf31c6b11fdd85f7f896d5392e9db2f519af65fd5d2&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},w={href:"http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247485872&idx=1&sn=cb565e467d2d2dc9d69ad80a1f936813&chksm=fce7121ccb909b0a0efe89c94d5eba504cf490e0f0bdd15502def81be8c23b96ea76b5f247c4&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},q={href:"http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247485754&idx=1&sn=724f1a314f64faaaff580dfac0b58e73&chksm=fce71296cb909b8086442a6ebc982b5ed16b1a7252da2b8af27434c3dd6c757537867433efeb&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},M={href:"http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247484640&idx=1&sn=5ac20b68d7b539295dabc0c2aaf81314&chksm=fce71f4ccb90965afb626b437cc618172b2a34d8ff72b2ec30eba71e85ff9330503e0ead9e9a&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},y={href:"http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247484056&idx=1&sn=90f705d698b2613bcc269fea98dc993e&chksm=fce71934cb90902264f260b15977fc9bf7e19a3ebf3f779acec2f5842c9a8ff6ac514beebf60&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},z={href:"http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247484054&idx=1&sn=954d2bb34b5ce288dcfc2451cbcd2830&chksm=fce7193acb90902cf2ba829362da0e327d7849f3339e4d61188a03cabeb07af0590056f755d5&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},j={href:"http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247484053&idx=1&sn=3fc32d8a21a5cadc7b33b11681f272ae&chksm=fce71939cb90902fdc5b352e0d135b395248aa9ef40acd5e145bdd05a62185ff538c66f4fe26&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},V={href:"http://mp.weixin.qq.com/s?__biz=MzU3MTAzNTMzMQ==&mid=2247484040&idx=1&sn=0b984bc76954f9214ed32ada38bc82d2&chksm=fce71924cb909032ad7a06a12aa71c23afe5698d552f182cc96bb5486b54e5a7332d7ab0736d&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"};function T(U,A){const s=l("ExternalLinkIcon");return c(),o("div",null,[n("p",null,[a("承接上一篇博文"),n("a",r,[a("【SpringBoot 基础系列】@Value 中哪些你不知道的知识点"),e(s)]),a(" 中提及到但没有细说的知识点，这一篇博文将来看一下"),k,a("除了绑定配置文件中的属性配置之外，另外支持的两种姿势")]),v,i(" more "),m,n("p",null,[a("@Value另外一个很强的使用姿势是支持SpEL表达式，至于SpEL是什么鬼，推荐查看"),n("a",b,[a("【SpringBoot 基础系列】SpEL 语法扫盲与查询手册"),e(s)])]),g,n("ul",null,[n("li",null,[a("工程："),n("a",h,[a("https://github.com/liuyueyi/spring-boot-demo"),e(s)])]),n("li",null,[a("源码: "),n("a",f,[a("https://github.com/liuyueyi/spring-boot-demo/tree/master/spring-boot/002-properties-value"),e(s)])])]),_,n("ul",null,[n("li",null,[n("a",S,[a("【SpringBoot 基础系列】自定义配置源的使用姿势介绍"),e(s)])]),n("li",null,[n("a",x,[a("【SpringBoot 基础系列】@Value 中哪些你不知道的知识点"),e(s)])]),n("li",null,[n("a",w,[a("【SpringBoot 基础系列】ConfigurationProperties 配置绑定中那些你不知道的事情"),e(s)])]),n("li",null,[n("a",q,[a("【SpringBoot 基础系列】SpringBoot 配置篇之 PropertySource 加载 Yaml 配置文件实例演示"),e(s)])]),n("li",null,[n("a",M,[a("【SpringBoot 基础系列】实现一个自定义配置加载器（应用篇）"),e(s)])]),n("li",null,[n("a",y,[a("SpringBoot基础篇配置信息之配置刷新"),e(s)])]),n("li",null,[n("a",z,[a("SpringBoot基础篇配置信息之自定义配置指定与配置内引用"),e(s)])]),n("li",null,[n("a",j,[a("SpringBoot基础篇配置信息之多环境配置信息"),e(s)])]),n("li",null,[n("a",V,[a("SpringBoot基础篇配置信息之如何读取配置信息"),e(s)])])])])}const I=p(u,[["render",T],["__file","11.210615-SpringBoot基础配置篇-Value之字面量及SpEL知识点介绍篇.html.vue"]]);export{I as default};
