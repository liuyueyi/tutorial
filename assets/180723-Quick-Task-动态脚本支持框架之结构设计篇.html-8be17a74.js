import{_ as e,V as p,W as i,Y as n,Z as a,$ as t,X as o,a1 as c,F as l}from"./framework-094145d2.js";const u={},r=n("figure",null,[n("img",{src:"https://upload-images.jianshu.io/upload_images/1405936-0a35465808df1ab6.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240",alt:"logo",tabindex:"0",loading:"lazy"}),n("figcaption",null,"logo")],-1),k={href:"https://liuyueyi.github.io/hexblog/2018/07/23/180723-Quick-Task-%E5%8A%A8%E6%80%81%E8%84%9A%E6%9C%AC%E6%94%AF%E6%8C%81%E6%A1%86%E6%9E%B6%E4%B9%8B%E7%BB%93%E6%9E%84%E8%AE%BE%E8%AE%A1%E7%AF%87/",target:"_blank",rel:"noopener noreferrer"},d=n("h1",{id:"quick-task-动态脚本支持框架之结构设计篇",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#quick-task-动态脚本支持框架之结构设计篇","aria-hidden":"true"},"#"),a(" Quick-Task 动态脚本支持框架之结构设计篇")],-1),h=n("p",null,"相关博文:",-1),v={href:"https://liuyueyi.github.io/hexblog/2018/07/02/180702-QuickTask%E5%8A%A8%E6%80%81%E8%84%9A%E6%9C%AC%E6%94%AF%E6%8C%81%E6%A1%86%E6%9E%B6%E6%95%B4%E4%BD%93%E4%BB%8B%E7%BB%8D%E7%AF%87/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://liuyueyi.github.io/hexblog/2018/07/19/180719-Quick-Task-%E5%8A%A8%E6%80%81%E8%84%9A%E6%9C%AC%E6%94%AF%E6%8C%81%E6%A1%86%E6%9E%B6%E4%B9%8B%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D%E7%AF%87/",target:"_blank",rel:"noopener noreferrer"},b=n("p",null,"前面两篇博文，主要是整体介绍和如何使用；接下来开始进入正题，逐步剖析，这个项目是怎么一步一步搭建起来的；本篇博文则主要介绍基本骨架的设计，围绕项目的核心点，实现一个基础的原型系统",-1),g=c(`<h2 id="i-结构分析" tabindex="-1"><a class="header-anchor" href="#i-结构分析" aria-hidden="true">#</a> I. 结构分析</h2><p>整体设计图如下：</p><figure><img src="https://raw.githubusercontent.com/liuyueyi/Source/master/img/blog/daywork/180628/tech.png" alt="结构图" tabindex="0" loading="lazy"><figcaption>结构图</figcaption></figure><p>对于上面的图，得有一个基本的认知，最好是能在脑海中构想出整个框架运行的方式，在正式开始之前，先简单的过一下这张结构图</p><p>抓要点</p><h3 id="_1-任务执行单元" tabindex="-1"><a class="header-anchor" href="#_1-任务执行单元" aria-hidden="true">#</a> 1. 任务执行单元</h3><p>即图中的每个task就表示一个基本的任务，有下面几个要求</p><ul><li>统一的继承关系（面向对象的设计理念，执行同一个角色的类由某个抽象的接口继承而来）</li><li>任务的执行之间是没有关系的（即任务在独立的线程中调度执行）</li></ul><h3 id="_2-任务队列" tabindex="-1"><a class="header-anchor" href="#_2-任务队列" aria-hidden="true">#</a> 2. 任务队列</h3><p>在图中表现很明显了，在内存中会保存一个当前所有执行的任务队列（或者其他的容器）</p><p>这个的目的是什么？</p><ul><li>任务脚本更新时，需要卸载旧的任务（因此可以从队列中找到旧的任务，并停掉）</li><li>任务脚本删除时，需要卸载旧的任务</li></ul><h3 id="_3-任务管理者" tabindex="-1"><a class="header-anchor" href="#_3-任务管理者" aria-hidden="true">#</a> 3. 任务管理者</h3><p>虽然图中并没有明确的说有这么个东西，但也好理解，我们的系统设计目标就是支持多任务的执行和热加载，那么肯定有个任务管理的角色，来处理这些事情</p><p>其要做的事情就一个任务热加载</p><ul><li>包括动态脚本更新，删除，新增的事件监听</li><li>实现卸载内存中旧的任务并加载执行新的任务</li></ul><h3 id="_4-插件系统" tabindex="-1"><a class="header-anchor" href="#_4-插件系统" aria-hidden="true">#</a> 4. 插件系统</h3><p>这个与核心功能关系不大，可以先不care，简单说一下就是为task提供更好的使用的公共类</p><p>这里不详细展开，后面再说</p><h2 id="ii-设计实现" tabindex="-1"><a class="header-anchor" href="#ii-设计实现" aria-hidden="true">#</a> II. 设计实现</h2><p>有了上面的简单认知之后，开始进入正题，编码环节，省略掉创建工程等步骤，第一步就是设计Task的API</p><h3 id="_1-itask设计" tabindex="-1"><a class="header-anchor" href="#_1-itask设计" aria-hidden="true">#</a> 1. ITask设计</h3><p>抽象公共的任务接口，从任务的标识区分，和业务调度执行，很容易写出下面的实现</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ITask</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 默认将task的类名作为唯一标识
     *
     * <span class="token keyword">@return</span>
     */</span>
    <span class="token keyword">default</span> <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 开始执行任务
     */</span>
    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 任务中断
     */</span>
    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前面两个好理解，中断这个接口的目的何在？主要是出于任务结束时的收尾操作，特别是在使用到流等操作时，有这么个回调就比较好了</p><h3 id="_2-taskdecorate" tabindex="-1"><a class="header-anchor" href="#_2-taskdecorate" aria-hidden="true">#</a> 2. TaskDecorate</h3><p>任务装饰类，为什么有这么个东西？出于什么考虑的？</p><p>从上面可以知道，所有的任务最终都是在独立的线程中调度执行，那么我们自己实现的Task肯定都是会封装到线程中的，在Java中可以怎么起一个线程执行呢？</p><p>一个顺其自然的想法就是包装一下ITask接口，让它集成自Thread，然后就可以简单的直接将任务丢到线程池中即可</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScriptTaskDecorate</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">ITask</span> task<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ScriptTaskDecorate</span><span class="token punctuation">(</span><span class="token class-name">ITask</span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>task <span class="token operator">=</span> task<span class="token punctuation">;</span>
        <span class="token function">setName</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            task<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;script task run error! task: {}&quot;</span><span class="token punctuation">,</span> task<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        task<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明：</strong></p><p>上面这个并不是必须的，你也完全可以自己在线程池调度Task任务时，进行硬编码风格的封装调用，完全没有问题（只是代码将不太好看而已）</p><h3 id="_3-taskcontainer" tabindex="-1"><a class="header-anchor" href="#_3-taskcontainer" aria-hidden="true">#</a> 3. TaskContainer</h3><p>上面两个是具体的任务相关定义接口，接下来就是维护这些任务的容器了，最简单的就是用一个Map来保存，uuid到task的映射关系，然后再需要卸载/更新任务时，停掉旧的，添加新的任务，对应的实现也比较简单</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TaskContainer</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * key: com.git.hui.task.api.ITask#name()
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ScriptTaskDecorate</span><span class="token punctuation">&gt;</span></span> taskCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * key: absolute script path
     *
     * for task to delete
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">ScriptTaskDecorate</span><span class="token punctuation">&gt;</span></span> pathCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">registerTask</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">,</span> <span class="token class-name">ScriptTaskDecorate</span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ScriptTaskDecorate</span> origin <span class="token operator">=</span> taskCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>origin <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            origin<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        taskCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>
        pathCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">AsynTaskManager</span><span class="token punctuation">.</span><span class="token function">addTask</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">removeTask</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ScriptTaskDecorate</span> task <span class="token operator">=</span> pathCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>task <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            task<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            taskCache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            pathCache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明</strong></p><p>为什么有两个map，一个唯一标识name为key，一个是task的全路径为key？</p><ul><li>删除任务时，是直接删除文件，所以需要维护一个<code>pathCache</code></li><li>维护name的映射，主要是基于任务的唯一标识出发的，后续可能借此做一些扩展（比如任务和任务之间的关联等）</li></ul><h3 id="_4-任务注册" tabindex="-1"><a class="header-anchor" href="#_4-任务注册" aria-hidden="true">#</a> 4. 任务注册</h3><p>前面介绍了任务的定义和装载任务的容器，接下来可以想到的就是如何发现任务并注册了，这一块这里不要详细展开，后面另起一篇详解；主要说一下思路</p><p>在设计之初，就决定任务采用Groovy脚本来实现热加载，所以有两个很容易想到的功能点</p><ul><li>监听Groovy脚本的变动（新增，更新，删除），对应的类为 <code>TaskChangeWatcher</code></li><li>加载Groovy脚本到内存，并执行，对应的类为 <code>GroovyCompile</code></li></ul><h3 id="_5-执行流程" tabindex="-1"><a class="header-anchor" href="#_5-执行流程" aria-hidden="true">#</a> 5. 执行流程</h3><p>有了上面四个是否可以搭建一个原型框架呢？</p><p>答案是可以的，整个框架的运行过程</p><ul><li>程序启动，注册Groovy脚本变动监听器</li><li>加载groovy脚本，注册到TaskContainer</li><li>将groovy脚本丢到线程池中调度执行</li><li>执行完毕后，清除和回收现场</li></ul><h3 id="_6-其他" tabindex="-1"><a class="header-anchor" href="#_6-其他" aria-hidden="true">#</a> 6. 其他</h3><p>当然其他一些辅助的工具类可有可无了，当然从使用的角度出发，有很多东西还是很有必要的，如</p><ul><li>通用的日志输出组件（特别是日志输出，收集，检索，经典的ELK场景）</li><li>报警相关组件</li><li>监控相关</li><li>redis缓存工具类</li><li>dao工具类</li><li>mq消费工具类</li><li>http工具类</li><li>其他</li></ul><h2 id="iii-其他" tabindex="-1"><a class="header-anchor" href="#iii-其他" aria-hidden="true">#</a> III. 其他</h2><h3 id="_0-相关" tabindex="-1"><a class="header-anchor" href="#_0-相关" aria-hidden="true">#</a> 0. 相关</h3><p><strong>博文：</strong></p>`,52),_={href:"https://liuyueyi.github.io/hexblog/2018/06/28/180628-%E5%8A%A8%E6%80%81%E4%BB%BB%E5%8A%A1%E6%89%A7%E8%A1%8C%E6%A1%86%E6%9E%B6%E6%83%B3%E6%B3%95%E7%AF%87/",target:"_blank",rel:"noopener noreferrer"},f={href:"https://blog.hhui.top/hexblog/2018/07/02/180702-QuickTask%E5%8A%A8%E6%80%81%E8%84%9A%E6%9C%AC%E6%94%AF%E6%8C%81%E6%A1%86%E6%9E%B6%E6%95%B4%E4%BD%93%E4%BB%8B%E7%BB%8D%E7%AF%87/",target:"_blank",rel:"noopener noreferrer"},y=n("p",null,[n("strong",null,"项目：")],-1),E={href:"https://github.com/liuyueyi/quick-task",target:"_blank",rel:"noopener noreferrer"},w={id:"_1-一灰灰blog-https-liuyueyi-github-io-hexblog",tabindex:"-1"},B=n("a",{class:"header-anchor",href:"#_1-一灰灰blog-https-liuyueyi-github-io-hexblog","aria-hidden":"true"},"#",-1),x={href:"https://liuyueyi.github.io/hexblog",target:"_blank",rel:"noopener noreferrer"},A={href:"https://liuyueyi.github.io/hexblog",target:"_blank",rel:"noopener noreferrer"},T=n("p",null,"一灰灰的个人博客，记录所有学习和工作中的博文，欢迎大家前去逛逛",-1),C=n("h3",{id:"_2-声明",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-声明","aria-hidden":"true"},"#"),a(" 2. 声明")],-1),I=n("p",null,"尽信书则不如，已上内容，纯属一家之言，因个人能力有限，难免有疏漏和错误之处，如发现bug或者有更好的建议，欢迎批评指正，不吝感激",-1),S={href:"https://weibo.com/p/1005052169825577/home",target:"_blank",rel:"noopener noreferrer"},Q=n("li",null,"QQ： 一灰灰/3302797840",-1),D=n("h3",{id:"_3-扫描关注",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-扫描关注","aria-hidden":"true"},"#"),a(" 3. 扫描关注")],-1),j=n("figure",null,[n("img",{src:"https://raw.githubusercontent.com/liuyueyi/Source/master/img/info/blogInfoV2.png",alt:"QrCode",tabindex:"0",loading:"lazy"}),n("figcaption",null,"QrCode")],-1);function F(N,V){const s=l("ExternalLinkIcon");return p(),i("div",null,[r,n("p",null,[a("文章链接："),n("a",k,[a("https://liuyueyi.github.io/hexblog/2018/07/23/180723-Quick-Task-动态脚本支持框架之结构设计篇/"),t(s)])]),d,h,n("ul",null,[n("li",null,[n("a",v,[a("180702-QuickTask动态脚本支持框架整体介绍篇"),t(s)])]),n("li",null,[n("a",m,[a("180719-Quick-Task 动态脚本支持框架之使用介绍篇"),t(s)])])]),b,o(" more "),g,n("ul",null,[n("li",null,[n("a",_,[a("180628-动态任务执行框架想法篇"),t(s)])]),n("li",null,[n("a",f,[a("180702-QuickTask动态脚本支持框架整体介绍篇"),t(s)])])]),y,n("ul",null,[n("li",null,[n("a",E,[a("https://github.com/liuyueyi/quick-task"),t(s)])])]),n("h3",w,[B,a(" 1. "),n("a",x,[a("一灰灰Blog"),t(s)]),a("： "),n("a",A,[a("https://liuyueyi.github.io/hexblog"),t(s)])]),T,C,I,n("ul",null,[n("li",null,[a("微博地址: "),n("a",S,[a("小灰灰Blog"),t(s)])]),Q]),D,j])}const M=e(u,[["render",F],["__file","180723-Quick-Task-动态脚本支持框架之结构设计篇.html.vue"]]);export{M as default};
