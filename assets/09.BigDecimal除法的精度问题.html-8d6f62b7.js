import{_ as n,V as a,W as s,X as e,Y as p,a1 as t}from"./framework-094145d2.js";const c={},o=p("p",null,"在使用BigDecimal的除法时，遇到一个鬼畜的问题，本以为的精度计算，结果使用返回0，当然最终发现还是自己的使用姿势不对导致的，因此记录一下，避免后面重蹈覆辙",-1),i=t(`<h2 id="i-问题抛出" tabindex="-1"><a class="header-anchor" href="#i-问题抛出" aria-hidden="true">#</a> I. 问题抛出</h2><p>在使用BigDecimal做高精度的除法时，一不注意遇到了一个小问题，如下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBigDecimal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">BigDecimal</span> origin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">541253</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BigDecimal</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">12389431</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">BigDecimal</span> val <span class="token operator">=</span> origin<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>now<span class="token punctuation">,</span> <span class="token class-name">RoundingMode</span><span class="token punctuation">.</span><span class="token constant">HALF_UP</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>

    origin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">541253</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">12389431.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    val <span class="token operator">=</span> origin<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>now<span class="token punctuation">,</span> <span class="token class-name">RoundingMode</span><span class="token punctuation">.</span><span class="token constant">HALF_UP</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>

    origin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">541253.4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">12389431</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    val <span class="token operator">=</span> origin<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>now<span class="token punctuation">,</span> <span class="token class-name">RoundingMode</span><span class="token punctuation">.</span><span class="token constant">HALF_UP</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的输出是什么 ？</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">0</span>
<span class="token number">0</span>
<span class="token number">0.043686703610520937021487456961257</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么前面两个会是0呢，如果直接是 <code>541253 / 12389431</code> = 0 倒是可以理解, 但是BigDecimal不是高精度的计算么，讲道理不应该不会出现这种整除的问题吧</p><p>我们知道在BigDecimal做触发时，可以指定保留小数的参数，如果加上这个，是否会不一样呢？</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BigDecimal</span> origin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">541253</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">BigDecimal</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">12389431</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">BigDecimal</span> val <span class="token operator">=</span> origin<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span>now<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">RoundingMode</span><span class="token punctuation">.</span><span class="token constant">HALF_UP</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果为:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token number">0.04369</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>所以说在指定了保留小数之后，则没有问题，所以大胆的猜测一下，是不是上面的几种case中，由于scale值没有指定时，默认值不一样，从而导致最终结果的精度不同呢？</p><p>简单的深入源码分析一下，执行的方式为 <code>origin.divide(now, RoundingMode.HALF_UP);</code>, 所以这个scale参数就瞄准origin对象，而这个对象，就只能去分析它的构造了，因为没有其他的地方使用</p><h2 id="ii-源码定位" tabindex="-1"><a class="header-anchor" href="#ii-源码定位" aria-hidden="true">#</a> II. 源码定位</h2><h3 id="_1-整形传参构造" tabindex="-1"><a class="header-anchor" href="#_1-整形传参构造" aria-hidden="true">#</a> 1. 整形传参构造</h3><p>分析下面这一行， 直接进入源码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BigDecimal</span> origin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">541253</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>很明显的int传参构造，进去简单看一下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// java.math.BigDecimal#BigDecimal(int)</span>
<span class="token keyword">public</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>intCompact <span class="token operator">=</span> val<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>scale <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>intVal <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token keyword">long</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>intCompact <span class="token operator">=</span> val<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>intVal <span class="token operator">=</span> <span class="token punctuation">(</span>val <span class="token operator">==</span> <span class="token constant">INFLATED</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token constant">INFLATED_BIGINT</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>scale <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>so，很明确的知道默认的scale为0，也就是说当origin为正数时，以它进行的除法，不现实指定scale参数时，最终返回的都是没有小数的，同样看一眼，还有long的传参方式， BigInteger也一样</p><h3 id="_2-浮点传参" tabindex="-1"><a class="header-anchor" href="#_2-浮点传参" aria-hidden="true">#</a> 2. 浮点传参</h3><p>接下来就是浮点的scale默认值确认了，这个构造相比前面的复杂一点，源码就不贴了，太长，也看不太懂做了些啥，直接用猥琐一点的方式，进入debug模式，单步执行</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBigDecimal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">BigDecimal</span> origin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">541253.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BigDecimal</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">12389431.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BigDecimal</span> tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据debug的结果，第一个，scale为0； 第二个scale为29, 第三个scale为0</p><figure><img src="https://raw.githubusercontent.com/liuyueyi/Source/master/img/blog/daywork/180706/decimal01.jpg" alt="origin" tabindex="0" loading="lazy"><figcaption>origin</figcaption></figure><figure><img src="https://raw.githubusercontent.com/liuyueyi/Source/master/img/blog/daywork/180706/decimal02.jpg" alt="now" tabindex="0" loading="lazy"><figcaption>now</figcaption></figure><figure><img src="https://raw.githubusercontent.com/liuyueyi/Source/master/img/blog/daywork/180706/decimal03.jpg" alt="tmp" tabindex="0" loading="lazy"><figcaption>tmp</figcaption></figure><h3 id="_3-string传参" tabindex="-1"><a class="header-anchor" href="#_3-string传参" aria-hidden="true">#</a> 3. String传参</h3><p>依然是一大串的逻辑，同样采用单步debug的方式试下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBigDecimal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">BigDecimal</span> origin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">&quot;541253.0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BigDecimal</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">&quot;12389431.1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BigDecimal</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">&quot;0.0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面三个的scale都是1</p><figure><img src="https://raw.githubusercontent.com/liuyueyi/Source/master/img/blog/daywork/180706/decimal04.jpg" alt="smaple" tabindex="0" loading="lazy"><figcaption>smaple</figcaption></figure><h3 id="_4-小结" tabindex="-1"><a class="header-anchor" href="#_4-小结" aria-hidden="true">#</a> 4. 小结</h3><ul><li>对于BigDecimal进行除法运算时，最好指定其scale参数，不然可能会有坑</li><li>对于BigDecimla的scale初始化的原理，有待深入看下BigDecimal是怎么实现的</li></ul><p>最后贴一张乘法的图作为收尾</p><figure><img src="https://raw.githubusercontent.com/liuyueyi/Source/master/img/blog/daywork/180706/decimal05.jpg" alt="mul" tabindex="0" loading="lazy"><figcaption>mul</figcaption></figure>`,35);function l(u,r){return a(),s("div",null,[o,e(" more "),i])}const k=n(c,[["render",l],["__file","09.BigDecimal除法的精度问题.html.vue"]]);export{k as default};
